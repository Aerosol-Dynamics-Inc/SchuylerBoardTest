
SchuylerBoardTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000076e  00800200  00005284  00005318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  0080096e  0080096e  00005a86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005a86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  00005b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d80  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026ee  00000000  00000000  0000cefc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d8a  00000000  00000000  0000f5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012f4  00000000  00000000  00013374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016a9  00000000  00000000  00014668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000405f  00000000  00000000  00015d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  00019d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__ctors_end>
       4:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
       8:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
       c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      10:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      14:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      18:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      1c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      20:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__vector_8>
      24:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      28:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      2c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      30:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      34:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__vector_13>
      38:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      3c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      40:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      44:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      48:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      4c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      50:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      54:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      58:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      5c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      60:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      64:	0c 94 87 20 	jmp	0x410e	; 0x410e <__vector_25>
      68:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      6c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      70:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      74:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__vector_29>
      78:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      7c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      80:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      84:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      88:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      8c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      90:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__vector_36>
      94:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      98:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      9c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      a0:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      a4:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      a8:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      ac:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      b0:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      b4:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      b8:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      bc:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      c0:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      c4:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      c8:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      cc:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      d0:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      d4:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      d8:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      dc:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>
      e0:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__bad_interrupt>

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__c.2515>:
     1e6:	46 4c 41 53 48 20 72 65 61 64 20 66 61 69 6c 65     FLASH read faile
     1f6:	64 0a 00                                            d..

000001f9 <__c.2499>:
     1f9:	46 4c 41 53 48 20 77 72 69 74 65 20 66 61 69 6c     FLASH write fail
     209:	65 64 0a 00                                         ed..

0000020d <__c.2046>:
     20d:	75 6e 6b 6e 6f 77 6e 20 41 44 43 32 35 31 38 20     unknown ADC2518 
     21d:	6f 73 63 69 6c 61 74 6f 72 53 70 65 65 64 0a 00     oscilatorSpeed..

0000022d <__c.2037>:
     22d:	4f 53 52 3a 20 6c 6f 67 32 73 61 6d 70 6c 65 73     OSR: log2samples
     23d:	20 3e 20 37 00                                       > 7.

00000242 <__c.2082>:
     242:	0a 00                                               ..

00000244 <__c.2077>:
     244:	25 64 20 00                                         %d .

00000248 <__c.2071>:
     248:	45 52 52 4f 52 3a 20 4e 6f 20 41 44 43 20 43 68     ERROR: No ADC Ch
     258:	61 6e 6e 65 6c 73 20 61 63 74 69 76 65 0a 00        annels active..

00000267 <__c.2042>:
     267:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     277:	49 6e 74 65 72 6e 61 6c 20 46 61 75 6c 74 20 25     Internal Fault %
     287:	64 0a 00                                            d..

0000028a <__c.2040>:
     28a:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     29a:	52 65 61 64 69 6e 67 20 25 64 0a 00                 Reading %d..

000002a6 <__c.2038>:
     2a6:	0a 53 65 6e 73 6f 72 20 25 64 20 69 6e 20 50 72     .Sensor %d in Pr
     2b6:	6f 67 72 61 6d 6d 69 6e 67 20 4d 6f 64 65 0a 00     ogramming Mode..

000002c6 <__c.2140>:
     2c6:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     2d6:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     2e6:	74 20 64 69 73 61 62 6c 65 20 77 72 69 74 65 0a     t disable write.
	...

000002f7 <__c.2142>:
     2f7:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     307:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     317:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     327:	74 61 20 6c 6f 61 64 0a 00                          ta load..

00000330 <__c.2144>:
     330:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     340:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     350:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     360:	74 61 20 6c 6f 61 64 0a 00                          ta load..

00000369 <__c.2146>:
     369:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     379:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     389:	74 20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00     t enable write..

00000399 <__c.2148>:
     399:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     3a9:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     3b9:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 70 61     r ready after pa
     3c9:	67 65 20 72 65 61 64 0a 00                          ge read..

000003d2 <__c.2150>:
     3d2:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     3e2:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     3f2:	72 20 72 65 61 64 79 0a 00                          r ready..

000003fb <__c.2152>:
     3fb:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     40b:	50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72 6f     Page: buffer cro
     41b:	73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64 61     sses page bounda
     42b:	72 79 0a 00                                         ry..

0000042f <__c.2164>:
     42f:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     43f:	32 6e 64 20 70 61 67 65 20 77 72 69 74 65 20 66     2nd page write f
     44f:	61 69 6c 65 64 0a 00                                ailed..

00000456 <__c.2166>:
     456:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     466:	31 73 74 20 70 61 67 65 20 77 72 69 74 65 20 66     1st page write f
     476:	61 69 6c 65 64 0a 00                                ailed..

0000047d <__c.2183>:
     47d:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     48d:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     49d:	65 72 20 72 65 61 64 79 20 61 66 74 65 72 20 70     er ready after p
     4ad:	61 67 65 20 72 65 61 64 0a 00                       age read..

000004b7 <__c.2185>:
     4b7:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     4c7:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     4d7:	65 72 20 72 65 61 64 79 0a 00                       er ready..

000004e1 <__c.2187>:
     4e1:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     4f1:	6d 50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72     mPage: buffer cr
     501:	6f 73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64     osses page bound
     511:	61 72 79 0a 00                                      ary..

00000516 <__c.2199>:
     516:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 32     spi_FlashRead: 2
     526:	6e 64 20 70 61 67 65 20 72 65 61 64 20 66 61 69     nd page read fai
     536:	6c 65 64 0a 00                                      led..

0000053b <__c.2201>:
     53b:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 31     spi_FlashRead: 1
     54b:	73 74 20 70 61 67 65 20 72 65 61 64 20 66 61 69     st page read fai
     55b:	6c 65 64 0a 00                                      led..

00000560 <__c.2208>:
     560:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     570:	6f 63 6b 3a 20 57 72 69 74 65 20 64 69 61 73 62     ock: Write diasb
     580:	6c 65 20 66 61 69 6c 65 64 0a 00                    le failed..

0000058b <__c.2210>:
     58b:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     59b:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     5ab:	20 72 65 61 64 79 20 61 66 74 65 72 20 62 6c 6f      ready after blo
     5bb:	63 6b 20 65 72 61 73 65 0a 00                       ck erase..

000005c5 <__c.2212>:
     5c5:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     5d5:	6f 63 6b 3a 20 46 6c 61 73 68 20 77 6f 6e 27 74     ock: Flash won't
     5e5:	20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00         enable write..

000005f4 <__c.2214>:
     5f4:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     604:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     614:	20 72 65 61 64 79 0a 00                              ready..

0000061c <__c.2216>:
     61c:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     62c:	6f 63 6b 3a 20 41 64 64 72 65 73 73 20 65 78 63     ock: Address exc
     63c:	65 65 64 73 20 61 76 61 69 6c 61 62 6c 65 20 62     eeds available b
     64c:	6c 6f 63 6b 73 0a 00                                locks..

00000653 <__c.2224>:
     653:	45 72 61 73 69 6e 67 20 62 6c 6f 63 6b 20 25 64     Erasing block %d
     663:	0a 00                                               ..

00000665 <__c.2226>:
     665:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 41 6c     spi_FlashEraseAl
     675:	6c 42 6c 6f 63 6b 73 3a 20 45 72 61 73 65 20 66     lBlocks: Erase f
     685:	61 69 6c 75 72 65 20 61 74 20 62 6c 6f 63 6b 20     ailure at block 
     695:	25 64 0a 00                                         %d..

00000699 <majorGeneral>:
     699:	49 20 61 6d 20 74 68 65 20 76 65 72 79 20 6d 6f     I am the very mo
     6a9:	64 65 6c 20 6f 66 20 61 20 6d 6f 64 65 72 6e 20     del of a modern 
     6b9:	4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 0a 00 00     Major-General...
	...
     6d5:	00 00 49 27 76 65 20 69 6e 66 6f 72 6d 61 74 69     ..I've informati
     6e5:	6f 6e 20 76 65 67 65 74 61 62 6c 65 2c 20 61 6e     on vegetable, an
     6f5:	69 6d 61 6c 2c 20 61 6e 64 20 6d 69 6e 65 72 61     imal, and minera
     705:	6c 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     l...............
     715:	49 20 6b 6e 6f 77 20 74 68 65 20 6b 69 6e 67 73     I know the kings
     725:	20 6f 66 20 45 6e 67 6c 61 6e 64 2c 20 61 6e 64      of England, and
     735:	20 49 20 71 75 6f 74 65 20 74 68 65 20 66 69 67      I quote the fig
     745:	68 74 73 0a 00 00 00 00 00 00 00 00 00 00 48 69     hts...........Hi
     755:	73 74 6f 72 69 63 61 6c 0a 00 00 00 00 00 00 00     storical........
	...
     791:	46 72 6f 6d 20 4d 61 72 61 74 68 6f 6e 20 74 6f     From Marathon to
     7a1:	20 57 61 74 65 72 6c 6f 6f 2c 20 69 6e 20 6f 72      Waterloo, in or
     7b1:	64 65 72 20 63 61 74 65 67 6f 72 69 63 61 6c 0a     der categorical.
	...
     7cd:	00 00 49 27 6d 20 76 65 72 79 20 77 65 6c 6c 20     ..I'm very well 
     7dd:	61 63 71 75 61 69 6e 74 65 64 2c 20 74 6f 6f 2c     acquainted, too,
     7ed:	20 77 69 74 68 20 6d 61 74 74 65 72 73 0a 00 00      with matters...
	...
     80d:	4d 61 74 68 65 6d 61 74 69 63 61 6c 0a 00 00 00     Mathematical....
	...
     849:	00 00 49 20 75 6e 64 65 72 73 74 61 6e 64 20 65     ..I understand e
     859:	71 75 61 74 69 6f 6e 73 2c 20 62 6f 74 68 20 74     quations, both t
     869:	68 65 20 73 69 6d 70 6c 65 20 61 6e 64 20 71 75     he simple and qu
     879:	61 64 72 61 74 69 63 61 6c 0a 00 00 00 00 00 00     adratical.......
     889:	41 62 6f 75 74 20 62 69 6e 6f 6d 69 61 6c 20 74     About binomial t
     899:	68 65 6f 72 65 6d 20 49 27 6d 20 74 65 65 6d 69     heorem I'm teemi
     8a9:	6e 67 20 77 69 74 68 20 61 20 6c 6f 74 20 6f 27     ng with a lot o'
     8b9:	20 6e 65 77 73 0a 00 00 00 00 00 00 00 00 57 69      news.........Wi
     8c9:	74 68 20 6d 61 6e 79 20 63 68 65 65 72 66 75 6c     th many cheerful
     8d9:	20 66 61 63 74 73 20 61 62 6f 75 74 20 74 68 65      facts about the
     8e9:	20 73 71 75 61 72 65 20 6f 66 20 74 68 65 0a 00      square of the..
	...
     905:	48 79 70 6f 74 65 6e 75 73 65 0a 00 00 00 00 00     Hypotenuse......
	...
     941:	00 00 57 69 74 68 20 6d 61 6e 79 20 63 68 65 65     ..With many chee
     951:	72 66 75 6c 20 66 61 63 74 73 20 61 62 6f 75 74     rful facts about
     961:	20 74 68 65 20 73 71 75 61 72 65 20 6f 66 20 74      the square of t
     971:	68 65 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     he..............
     981:	48 79 70 6f 74 65 6e 75 73 65 0a 00 00 00 00 00     Hypotenuse......
	...
     9bd:	00 00 57 69 74 68 20 6d 61 6e 79 20 63 68 65 65     ..With many chee
     9cd:	72 66 75 6c 20 66 61 63 74 73 20 61 62 6f 75 74     rful facts about
     9dd:	20 74 68 65 20 73 71 75 61 72 65 20 6f 66 20 74      the square of t
     9ed:	68 65 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     he..............
     9fd:	48 79 70 6f 74 65 6e 75 73 65 0a 00 00 00 00 00     Hypotenuse......
	...
     a39:	00 00 57 69 74 68 20 6d 61 6e 79 20 63 68 65 65     ..With many chee
     a49:	72 66 75 6c 20 66 61 63 74 73 20 61 62 6f 75 74     rful facts about
     a59:	20 74 68 65 20 73 71 75 61 72 65 20 6f 66 20 74      the square of t
     a69:	68 65 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     he..............
     a79:	48 79 70 6f 74 65 70 6f 74 65 6e 75 73 65 0a 00     Hypotepotenuse..
	...
     ab5:	00 00 49 27 6d 20 76 65 72 79 20 67 6f 6f 64 20     ..I'm very good 
     ac5:	61 74 20 69 6e 74 65 67 72 61 6c 20 61 6e 64 20     at integral and 
     ad5:	64 69 66 66 65 72 65 6e 74 69 61 6c 20 63 61 6c     differential cal
     ae5:	63 75 6c 75 73 0a 00 00 00 00 00 00 00 00 00 00     culus...........
     af5:	49 20 6b 6e 6f 77 20 74 68 65 20 73 63 69 65 6e     I know the scien
     b05:	74 69 66 69 63 20 6e 61 6d 65 73 20 6f 66 20 62     tific names of b
     b15:	65 69 6e 67 73 20 61 6e 69 6d 61 6c 63 75 6c 6f     eings animalculo
     b25:	75 73 0a 00 00 00 00 00 00 00 00 00 00 00 49 6e     us............In
     b35:	20 73 68 6f 72 74 2c 20 69 6e 20 6d 61 74 74 65      short, in matte
     b45:	72 73 20 76 65 67 65 74 61 62 6c 65 2c 20 61 6e     rs vegetable, an
     b55:	69 6d 61 6c 2c 20 61 6e 64 20 6d 69 6e 65 72 61     imal, and minera
     b65:	6c 0a 00 00 00 00 00 00 00 00 00 00 49 20 61 6d     l...........I am
     b75:	20 74 68 65 20 76 65 72 79 20 6d 6f 64 65 6c 20      the very model 
     b85:	6f 66 20 61 20 6d 6f 64 65 72 6e 20 4d 61 6a 6f     of a modern Majo
     b95:	72 2d 47 65 6e 65 72 61 6c 0a 00 00 00 00 00 00     r-General.......
	...
     bad:	00 00 49 6e 20 73 68 6f 72 74 2c 20 69 6e 20 6d     ..In short, in m
     bbd:	61 74 74 65 72 73 20 76 65 67 65 74 61 62 6c 65     atters vegetable
     bcd:	2c 20 61 6e 69 6d 61 6c 2c 20 61 6e 64 20 6d 69     , animal, and mi
     bdd:	6e 65 72 61 6c 0a 00 00 00 00 00 00 00 00 00 00     neral...........
     bed:	48 65 20 69 73 20 74 68 65 20 76 65 72 79 20 6d     He is the very m
     bfd:	6f 64 65 6c 20 6f 66 20 61 20 6d 6f 64 65 72 6e     odel of a modern
     c0d:	20 4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 0a 00      Major-General..
	...
     c29:	00 00 49 20 6b 6e 6f 77 20 6f 75 72 20 6d 79 74     ..I know our myt
     c39:	68 69 63 20 68 69 73 74 6f 72 79 2c 20 4b 69 6e     hic history, Kin
     c49:	67 20 41 72 74 68 75 72 27 73 20 61 6e 64 20 53     g Arthur's and S
     c59:	69 72 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     ir..............
     c69:	43 61 72 61 64 6f 63 27 73 0a 00 00 00 00 00 00     Caradoc's.......
	...
     ca5:	00 00 49 20 61 6e 73 77 65 72 20 68 61 72 64 20     ..I answer hard 
     cb5:	61 63 72 6f 73 74 69 63 73 2c 20 49 27 76 65 20     acrostics, I've 
     cc5:	61 20 70 72 65 74 74 79 20 74 61 73 74 65 20 66     a pretty taste f
     cd5:	6f 72 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     or..............
     ce5:	50 61 72 61 64 6f 78 0a 00 00 00 00 00 00 00 00     Paradox.........
	...
     d21:	00 00 49 20 71 75 6f 74 65 20 69 6e 20 65 6c 65     ..I quote in ele
     d31:	67 69 61 63 73 20 61 6c 6c 20 74 68 65 20 63 72     giacs all the cr
     d41:	69 6d 65 73 20 6f 66 20 48 65 6c 69 6f 67 61 62     imes of Heliogab
     d51:	61 6c 75 73 0a 00 00 00 00 00 00 00 00 00 00 00     alus............
     d61:	49 6e 20 63 6f 6e 69 63 73 20 49 20 63 61 6e 20     In conics I can 
     d71:	66 6c 6f 6f 72 20 70 65 63 75 6c 69 61 72 69 74     floor peculiarit
     d81:	69 65 73 20 70 61 72 61 62 6f 6c 6f 75 73 0a 00     ies parabolous..
	...
     d9d:	00 00 49 20 63 61 6e 20 74 65 6c 6c 20 75 6e 64     ..I can tell und
     dad:	6f 75 62 74 65 64 20 52 61 70 68 61 65 6c 73 20     oubted Raphaels 
     dbd:	66 72 6f 6d 20 47 65 72 61 72 64 20 44 6f 77 73     from Gerard Dows
     dcd:	20 61 6e 64 0a 00 00 00 00 00 00 00 00 00 00 00      and............
     ddd:	5a 6f 66 66 61 6e 69 65 73 0a 00 00 00 00 00 00     Zoffanies.......
	...
     e19:	00 00 49 20 6b 6e 6f 77 20 74 68 65 20 63 72 6f     ..I know the cro
     e29:	61 6b 69 6e 67 20 63 68 6f 72 75 73 20 66 72 6f     aking chorus fro
     e39:	6d 20 74 68 65 20 46 72 6f 67 73 20 6f 66 0a 00     m the Frogs of..
	...
     e59:	41 72 69 73 74 6f 70 68 61 6e 65 73 0a 00 00 00     Aristophanes....
	...
     e95:	00 00 54 68 65 6e 20 49 20 63 61 6e 20 68 75 6d     ..Then I can hum
     ea5:	20 61 20 66 75 67 75 65 20 6f 66 20 77 68 69 63      a fugue of whic
     eb5:	68 20 49 27 76 65 20 68 65 61 72 64 20 74 68 65     h I've heard the
     ec5:	20 6d 75 73 69 63 27 73 0a 00 00 00 00 00 00 00      music's........
     ed5:	44 69 6e 20 61 66 6f 72 65 0a 00 00 00 00 00 00     Din afore.......
	...
     f11:	00 00 41 6e 64 20 77 68 69 73 74 6c 65 20 61 6c     ..And whistle al
     f21:	6c 20 74 68 65 20 61 69 72 73 20 66 72 6f 6d 20     l the airs from 
     f31:	74 68 61 74 20 69 6e 66 65 72 6e 61 6c 20 6e 6f     that infernal no
     f41:	6e 73 65 6e 73 65 0a 00 00 00 00 00 00 00 00 00     nsense..........
     f51:	50 69 6e 61 66 6f 72 65 0a 00 00 00 00 00 00 00     Pinafore........
	...
     f8d:	00 00 41 6e 64 20 77 68 69 73 74 6c 65 20 61 6c     ..And whistle al
     f9d:	6c 20 74 68 65 20 61 69 72 73 20 66 72 6f 6d 20     l the airs from 
     fad:	74 68 61 74 20 69 6e 66 65 72 6e 61 6c 20 6e 6f     that infernal no
     fbd:	6e 73 65 6e 73 65 0a 00 00 00 00 00 00 00 00 00     nsense..........
     fcd:	50 69 6e 61 66 6f 72 65 0a 00 00 00 00 00 00 00     Pinafore........
	...
    1009:	00 00 41 6e 64 20 77 68 69 73 74 6c 65 20 61 6c     ..And whistle al
    1019:	6c 20 74 68 65 20 61 69 72 73 20 66 72 6f 6d 20     l the airs from 
    1029:	74 68 61 74 20 69 6e 66 65 72 6e 61 6c 20 6e 6f     that infernal no
    1039:	6e 73 65 6e 73 65 0a 00 00 00 00 00 00 00 00 00     nsense..........
    1049:	50 69 6e 61 66 6f 72 65 0a 00 00 00 00 00 00 00     Pinafore........
	...
    1085:	00 00 41 6e 64 20 77 68 69 73 74 6c 65 20 61 6c     ..And whistle al
    1095:	6c 20 74 68 65 20 61 69 72 73 20 66 72 6f 6d 20     l the airs from 
    10a5:	74 68 61 74 20 69 6e 66 65 72 6e 61 6c 20 6e 6f     that infernal no
    10b5:	6e 73 65 6e 73 65 0a 00 00 00 00 00 00 00 00 00     nsense..........
    10c5:	50 69 6e 61 70 69 6e 61 66 6f 72 65 0a 00 00 00     Pinapinafore....
	...
    1101:	00 00 54 68 65 6e 20 49 20 63 61 6e 20 77 72 69     ..Then I can wri
    1111:	74 65 20 61 20 77 61 73 68 69 6e 67 20 62 69 6c     te a washing bil
    1121:	6c 20 69 6e 20 42 61 62 79 6c 6f 6e 69 63 20 63     l in Babylonic c
    1131:	75 6e 65 69 66 6f 72 6d 0a 00 00 00 00 00 00 00     uneiform........
    1141:	41 6e 64 20 74 65 6c 6c 20 79 6f 75 20 65 76 27     And tell you ev'
    1151:	72 79 20 64 65 74 61 69 6c 20 6f 66 20 43 61 72     ry detail of Car
    1161:	61 63 74 61 63 75 73 27 73 20 75 6e 69 66 6f 72     actacus's unifor
    1171:	6d 0a 00 00 00 00 00 00 00 00 00 00 00 00 49 6e     m.............In
    1181:	20 73 68 6f 72 74 2c 20 69 6e 20 6d 61 74 74 65      short, in matte
    1191:	72 73 20 76 65 67 65 74 61 62 6c 65 2c 20 61 6e     rs vegetable, an
    11a1:	69 6d 61 6c 2c 20 61 6e 64 20 6d 69 6e 65 72 61     imal, and minera
    11b1:	6c 0a 00 00 00 00 00 00 00 00 00 00 49 20 61 6d     l...........I am
    11c1:	20 74 68 65 20 76 65 72 79 20 6d 6f 64 65 6c 20      the very model 
    11d1:	6f 66 20 61 20 6d 6f 64 65 72 6e 20 4d 61 6a 6f     of a modern Majo
    11e1:	72 2d 47 65 6e 65 72 61 6c 0a 00 00 00 00 00 00     r-General.......
	...
    11f9:	00 00 49 6e 20 73 68 6f 72 74 2c 20 69 6e 20 6d     ..In short, in m
    1209:	61 74 74 65 72 73 20 76 65 67 65 74 61 62 6c 65     atters vegetable
    1219:	2c 20 61 6e 69 6d 61 6c 2c 20 61 6e 64 20 6d 69     , animal, and mi
    1229:	6e 65 72 61 6c 0a 00 00 00 00 00 00 00 00 00 00     neral...........
    1239:	48 65 20 69 73 20 74 68 65 20 76 65 72 79 20 6d     He is the very m
    1249:	6f 64 65 6c 20 6f 66 20 61 20 6d 6f 64 65 72 6e     odel of a modern
    1259:	20 4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 0a 00      Major-General..
	...
    1275:	00 00 49 6e 20 66 61 63 74 2c 20 77 68 65 6e 20     ..In fact, when 
    1285:	49 20 6b 6e 6f 77 20 77 68 61 74 20 69 73 20 6d     I know what is m
    1295:	65 61 6e 74 20 62 79 20 27 6d 61 6d 65 6c 6f 6e     eant by 'mamelon
    12a5:	27 20 61 6e 64 0a 00 00 00 00 00 00 00 00 00 00     ' and...........
    12b5:	27 52 61 76 65 6c 69 6e 27 0a 00 00 00 00 00 00     'Ravelin'.......
	...
    12f1:	00 00 57 68 65 6e 20 49 20 63 61 6e 20 74 65 6c     ..When I can tel
    1301:	6c 20 61 74 20 73 69 67 68 74 20 61 20 4d 61 75     l at sight a Mau
    1311:	73 65 72 20 72 69 66 6c 65 20 66 72 6f 6d 20 61     ser rifle from a
    1321:	20 6a 61 76 65 6c 69 6e 0a 00 00 00 00 00 00 00      javelin........
    1331:	57 68 65 6e 20 73 75 63 68 20 61 66 66 61 69 72     When such affair
    1341:	73 20 61 73 20 73 6f 72 74 69 65 73 20 61 6e 64     s as sorties and
    1351:	20 73 75 72 70 72 69 73 65 73 20 49 27 6d 20 6d      surprises I'm m
    1361:	6f 72 65 0a 00 00 00 00 00 00 00 00 00 00 57 61     ore...........Wa
    1371:	72 79 20 61 74 0a 00 00 00 00 00 00 00 00 00 00     ry at...........
	...
    13ad:	41 6e 64 20 77 68 65 6e 20 49 20 6b 6e 6f 77 20     And when I know 
    13bd:	70 72 65 63 69 73 65 6c 79 20 77 68 61 74 20 69     precisely what i
    13cd:	73 20 6d 65 61 6e 74 20 62 79 0a 00 00 00 00 00     s meant by......
	...
    13e9:	00 00 27 43 6f 6d 6d 69 73 73 61 72 69 61 74 27     ..'Commissariat'
    13f9:	0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1429:	57 68 65 6e 20 49 20 68 61 76 65 20 6c 65 61 72     When I have lear
    1439:	6e 74 20 77 68 61 74 20 70 72 6f 67 72 65 73 73     nt what progress
    1449:	20 68 61 73 20 62 65 65 6e 20 6d 61 64 65 20 69      has been made i
    1459:	6e 0a 00 00 00 00 00 00 00 00 00 00 00 00 4d 6f     n.............Mo
    1469:	64 65 72 6e 20 67 75 6e 6e 65 72 79 0a 00 00 00     dern gunnery....
	...
    14a5:	57 68 65 6e 20 49 20 6b 6e 6f 77 20 6d 6f 72 65     When I know more
    14b5:	20 6f 66 20 74 61 63 74 69 63 73 20 74 68 61 6e      of tactics than
    14c5:	20 61 20 6e 6f 76 69 63 65 20 69 6e 20 61 20 6e      a novice in a n
    14d5:	75 6e 6e 65 72 79 0a 00 00 00 00 00 00 00 49 6e     unnery........In
    14e5:	20 73 68 6f 72 74 2c 20 77 68 65 6e 20 49 27 76      short, when I'v
    14f5:	65 20 61 20 73 6d 61 74 74 65 72 69 6e 67 20 6f     e a smattering o
    1505:	66 20 65 6c 65 6d 65 6e 74 61 6c 20 73 74 72 61     f elemental stra
    1515:	74 65 67 79 0a 00 00 00 00 00 00 00 59 6f 75 27     tegy........You'
    1525:	6c 6c 20 73 61 79 20 61 20 62 65 74 74 65 72 20     ll say a better 
    1535:	4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 20 68 61     Major-General ha
    1545:	64 20 6e 65 76 65 72 20 73 61 74 20 61 20 67 65     d never sat a ge
    1555:	65 0a 00 00 00 00 00 00 00 00 59 6f 75 27 6c 6c     e.........You'll
    1565:	20 73 61 79 20 61 20 62 65 74 74 65 72 20 4d 61      say a better Ma
    1575:	6a 6f 72 2d 47 65 6e 65 72 61 6c 20 68 61 64 20     jor-General had 
    1585:	6e 65 76 65 72 20 73 61 74 20 61 20 67 65 65 0a     never sat a gee.
	...
    159d:	59 6f 75 27 6c 6c 20 73 61 79 20 61 20 62 65 74     You'll say a bet
    15ad:	74 65 72 20 4d 61 6a 6f 72 2d 47 65 6e 65 72 61     ter Major-Genera
    15bd:	6c 20 68 61 64 20 6e 65 76 65 72 20 73 61 74 20     l had never sat 
    15cd:	61 20 67 65 65 0a 00 00 00 00 00 00 00 00 59 6f     a gee.........Yo
    15dd:	75 27 6c 6c 20 73 61 79 20 61 20 62 65 74 74 65     u'll say a bette
    15ed:	72 20 4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 20     r Major-General 
    15fd:	68 61 64 20 6e 65 76 65 72 20 73 61 74 20 61 20     had never sat a 
    160d:	73 61 74 20 61 0a 00 00 00 00 00 00 47 65 65 0a     sat a.......Gee.
	...
    1655:	00 00 46 6f 72 20 6d 79 20 6d 69 6c 69 74 61 72     ..For my militar
    1665:	79 20 6b 6e 6f 77 6c 65 64 67 65 2c 20 74 68 6f     y knowledge, tho
    1675:	75 67 68 20 49 27 6d 20 70 6c 75 63 6b 79 20 61     ugh I'm plucky a
    1685:	6e 64 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     nd..............
    1695:	41 64 76 65 6e 74 75 72 79 0a 00 00 00 00 00 00     Adventury.......
	...
    16d1:	00 00 48 61 73 20 6f 6e 6c 79 20 62 65 65 6e 20     ..Has only been 
    16e1:	62 72 6f 75 67 68 74 20 64 6f 77 6e 20 74 6f 20     brought down to 
    16f1:	74 68 65 20 62 65 67 69 6e 6e 69 6e 67 20 6f 66     the beginning of
    1701:	20 74 68 65 0a 00 00 00 00 00 00 00 00 00 00 00      the............
    1711:	43 65 6e 74 75 72 79 0a 00 00 00 00 00 00 00 00     Century.........
	...
    174d:	00 00 42 75 74 20 73 74 69 6c 6c 2c 20 69 6e 20     ..But still, in 
    175d:	6d 61 74 74 65 72 73 20 76 65 67 65 74 61 62 6c     matters vegetabl
    176d:	65 2c 20 61 6e 69 6d 61 6c 2c 20 61 6e 64 20 6d     e, animal, and m
    177d:	69 6e 65 72 61 6c 0a 00 00 00 00 00 00 00 00 00     ineral..........
    178d:	49 20 61 6d 20 74 68 65 20 76 65 72 79 20 6d 6f     I am the very mo
    179d:	64 65 6c 20 6f 66 20 61 20 6d 6f 64 65 72 6e 20     del of a modern 
    17ad:	4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 0a 00 00     Major-General...
	...
    17c9:	00 00 42 75 74 20 73 74 69 6c 6c 2c 20 69 6e 20     ..But still, in 
    17d9:	6d 61 74 74 65 72 73 20 76 65 67 65 74 61 62 6c     matters vegetabl
    17e9:	65 2c 20 61 6e 69 6d 61 6c 2c 20 61 6e 64 20 6d     e, animal, and m
    17f9:	69 6e 65 72 61 6c 0a 00 00 00 00 00 00 00 00 00     ineral..........
    1809:	48 65 20 69 73 20 74 68 65 20 76 65 72 79 20 6d     He is the very m
    1819:	6f 64 65 6c 20 6f 66 20 61 20 6d 6f 64 65 72 6e     odel of a modern
    1829:	20 4d 61 6a 6f 72 2d 47 65 6e 65 72 61 6c 0a 00      Major-General..
	...

00001848 <__ctors_end>:
    1848:	11 24       	eor	r1, r1
    184a:	1f be       	out	0x3f, r1	; 63
    184c:	cf ef       	ldi	r28, 0xFF	; 255
    184e:	d1 e2       	ldi	r29, 0x21	; 33
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	00 e0       	ldi	r16, 0x00	; 0
    1856:	0c bf       	out	0x3c, r16	; 60

00001858 <__do_copy_data>:
    1858:	19 e0       	ldi	r17, 0x09	; 9
    185a:	a0 e0       	ldi	r26, 0x00	; 0
    185c:	b2 e0       	ldi	r27, 0x02	; 2
    185e:	e4 e8       	ldi	r30, 0x84	; 132
    1860:	f2 e5       	ldi	r31, 0x52	; 82
    1862:	00 e0       	ldi	r16, 0x00	; 0
    1864:	0b bf       	out	0x3b, r16	; 59
    1866:	02 c0       	rjmp	.+4      	; 0x186c <__do_copy_data+0x14>
    1868:	07 90       	elpm	r0, Z+
    186a:	0d 92       	st	X+, r0
    186c:	ae 36       	cpi	r26, 0x6E	; 110
    186e:	b1 07       	cpc	r27, r17
    1870:	d9 f7       	brne	.-10     	; 0x1868 <__do_copy_data+0x10>

00001872 <__do_clear_bss>:
    1872:	2a e0       	ldi	r18, 0x0A	; 10
    1874:	ae e6       	ldi	r26, 0x6E	; 110
    1876:	b9 e0       	ldi	r27, 0x09	; 9
    1878:	01 c0       	rjmp	.+2      	; 0x187c <.do_clear_bss_start>

0000187a <.do_clear_bss_loop>:
    187a:	1d 92       	st	X+, r1

0000187c <.do_clear_bss_start>:
    187c:	a6 3a       	cpi	r26, 0xA6	; 166
    187e:	b2 07       	cpc	r27, r18
    1880:	e1 f7       	brne	.-8      	; 0x187a <.do_clear_bss_loop>
    1882:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <main>
    1886:	0c 94 40 29 	jmp	0x5280	; 0x5280 <_exit>

0000188a <__bad_interrupt>:
    188a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000188e <doFlashWriteTest>:
#define WRITE_TEST_SIZE 200
#define NUM_WRITES 10
#define SOURCE_STR_SIZE 10

void doFlashWriteTest(void)
{
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	c8 5c       	subi	r28, 0xC8	; 200
    18a2:	d1 09       	sbc	r29, r1
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
    18ae:	10 e0       	ldi	r17, 0x00	; 0
void doFlashWriteTest(void)
{
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
    18b0:	c1 2c       	mov	r12, r1
    18b2:	d1 2c       	mov	r13, r1
    18b4:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
    18b6:	36 c0       	rjmp	.+108    	; 0x1924 <doFlashWriteTest+0x96>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
			buffer[j] = testChars[j % SOURCE_STR_SIZE];
    18b8:	8d ec       	ldi	r24, 0xCD	; 205
    18ba:	98 9f       	mul	r25, r24
    18bc:	81 2d       	mov	r24, r1
    18be:	11 24       	eor	r1, r1
    18c0:	86 95       	lsr	r24
    18c2:	86 95       	lsr	r24
    18c4:	86 95       	lsr	r24
    18c6:	88 0f       	add	r24, r24
    18c8:	28 2f       	mov	r18, r24
    18ca:	22 0f       	add	r18, r18
    18cc:	22 0f       	add	r18, r18
    18ce:	82 0f       	add	r24, r18
    18d0:	e9 2f       	mov	r30, r25
    18d2:	e8 1b       	sub	r30, r24
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	eb 57       	subi	r30, 0x7B	; 123
    18d8:	fc 4f       	sbci	r31, 0xFC	; 252
    18da:	80 81       	ld	r24, Z
    18dc:	e1 e0       	ldi	r30, 0x01	; 1
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	ec 0f       	add	r30, r28
    18e2:	fd 1f       	adc	r31, r29
    18e4:	e9 0f       	add	r30, r25
    18e6:	f1 1d       	adc	r31, r1
    18e8:	80 83       	st	Z, r24
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
    18ea:	9f 5f       	subi	r25, 0xFF	; 255
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <doFlashWriteTest+0x62>
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	98 3c       	cpi	r25, 0xC8	; 200
    18f2:	10 f3       	brcs	.-60     	; 0x18b8 <doFlashWriteTest+0x2a>
			buffer[j] = testChars[j % SOURCE_STR_SIZE];
		if (spi_FlashWrite(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
    18f4:	28 ec       	ldi	r18, 0xC8	; 200
    18f6:	ae 01       	movw	r20, r28
    18f8:	4f 5f       	subi	r20, 0xFF	; 255
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	c7 01       	movw	r24, r14
    18fe:	b6 01       	movw	r22, r12
    1900:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <spi_FlashWrite>
    1904:	88 3c       	cpi	r24, 0xC8	; 200
    1906:	41 f0       	breq	.+16     	; 0x1918 <doFlashWriteTest+0x8a>
		{
			printf_P(PSTR("FLASH write failed\n"));
    1908:	89 ef       	ldi	r24, 0xF9	; 249
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
		}
		address += WRITE_TEST_SIZE;
    1918:	88 ec       	ldi	r24, 0xC8	; 200
    191a:	c8 0e       	add	r12, r24
    191c:	d1 1c       	adc	r13, r1
    191e:	e1 1c       	adc	r14, r1
    1920:	f1 1c       	adc	r15, r1
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
    1922:	1f 5f       	subi	r17, 0xFF	; 255
    1924:	1a 30       	cpi	r17, 0x0A	; 10
    1926:	18 f3       	brcs	.-58     	; 0x18ee <doFlashWriteTest+0x60>
			printf_P(PSTR("FLASH write failed\n"));
		}
		address += WRITE_TEST_SIZE;
	}
	
}
    1928:	c8 53       	subi	r28, 0x38	; 56
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	08 95       	ret

00001946 <doFlashReadTest>:

void doFlashReadTest(void)
{
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	c9 5c       	subi	r28, 0xC9	; 201
    195a:	d1 09       	sbc	r29, r1
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
    1966:	80 e9       	ldi	r24, 0x90	; 144
    1968:	93 e0       	ldi	r25, 0x03	; 3
    196a:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
    196e:	10 e0       	ldi	r17, 0x00	; 0

void doFlashReadTest(void)
{
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
    1970:	c1 2c       	mov	r12, r1
    1972:	d1 2c       	mov	r13, r1
    1974:	76 01       	movw	r14, r12

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
    1976:	3a c0       	rjmp	.+116    	; 0x19ec <doFlashReadTest+0xa6>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++) buffer[j] = (char) 0;
    1978:	e1 e0       	ldi	r30, 0x01	; 1
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ec 0f       	add	r30, r28
    197e:	fd 1f       	adc	r31, r29
    1980:	e8 0f       	add	r30, r24
    1982:	f1 1d       	adc	r31, r1
    1984:	10 82       	st	Z, r1
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	01 c0       	rjmp	.+2      	; 0x198c <doFlashReadTest+0x46>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	88 3c       	cpi	r24, 0xC8	; 200
    198e:	a0 f3       	brcs	.-24     	; 0x1978 <doFlashReadTest+0x32>
		printf("record %d:\n", i);
    1990:	1f 92       	push	r1
    1992:	1f 93       	push	r17
    1994:	84 ea       	ldi	r24, 0xA4	; 164
    1996:	93 e0       	ldi	r25, 0x03	; 3
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
		if (spi_FlashRead(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
    19a0:	28 ec       	ldi	r18, 0xC8	; 200
    19a2:	ae 01       	movw	r20, r28
    19a4:	4f 5f       	subi	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	c7 01       	movw	r24, r14
    19aa:	b6 01       	movw	r22, r12
    19ac:	0e 94 1b 19 	call	0x3236	; 0x3236 <spi_FlashRead>
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	88 3c       	cpi	r24, 0xC8	; 200
    19ba:	49 f0       	breq	.+18     	; 0x19ce <doFlashReadTest+0x88>
		{
			printf_P(PSTR("FLASH read failed\n"));
    19bc:	86 ee       	ldi	r24, 0xE6	; 230
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	9f 93       	push	r25
    19c2:	8f 93       	push	r24
    19c4:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	09 c0       	rjmp	.+18     	; 0x19e0 <doFlashReadTest+0x9a>
		}
		else
		{
			buffer[WRITE_TEST_SIZE] = '\0';
    19ce:	c7 53       	subi	r28, 0x37	; 55
    19d0:	df 4f       	sbci	r29, 0xFF	; 255
    19d2:	18 82       	st	Y, r1
    19d4:	c9 5c       	subi	r28, 0xC9	; 201
    19d6:	d0 40       	sbci	r29, 0x00	; 0
			printf("%s\n",buffer);
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
		}
		address += WRITE_TEST_SIZE;
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	c8 0e       	add	r12, r24
    19e4:	d1 1c       	adc	r13, r1
    19e6:	e1 1c       	adc	r14, r1
    19e8:	f1 1c       	adc	r15, r1
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
    19ea:	1f 5f       	subi	r17, 0xFF	; 255
    19ec:	1a 30       	cpi	r17, 0x0A	; 10
    19ee:	68 f2       	brcs	.-102    	; 0x198a <doFlashReadTest+0x44>
			printf("%s\n",buffer);
		}
		address += WRITE_TEST_SIZE;
	}
	
}
    19f0:	c7 53       	subi	r28, 0x37	; 55
    19f2:	df 4f       	sbci	r29, 0xFF	; 255
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	08 95       	ret

00001a0e <doFlashEraseTest>:

void doFlashEraseTest(void)
{
	spi_FlashEraseAllBlocks();
    1a0e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <spi_FlashEraseAllBlocks>
    1a12:	08 95       	ret

00001a14 <doFlashTestReadAll>:
#define FLASH_PAGE_MAX_BYTES			2048
#define FLASH_PAGE_FIRST_SPAREAREA_BYTE 2048
#define FLASH_NUM_SPARE_AREA_BYTES		128

void doFlashTestReadAll(void)
{
    1a14:	8f 92       	push	r8
    1a16:	9f 92       	push	r9
    1a18:	af 92       	push	r10
    1a1a:	bf 92       	push	r11
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	60 97       	sbiw	r28, 0x10	; 16
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
	uint16_t block;
	uint32_t page;
	uint16_t baddr;
	uint8_t buff[FLASH_TEST_BUFF_SIZE];
	
	for (block = 0; block < FLASH_MAX_NUM_BLOCKS; block++)
    1a3c:	c1 2c       	mov	r12, r1
    1a3e:	d1 2c       	mov	r13, r1
    1a40:	7d c0       	rjmp	.+250    	; 0x1b3c <doFlashTestReadAll+0x128>
	{
		page = block * FLASH_PAGES_PER_BLOCK;
    1a42:	46 01       	movw	r8, r12
    1a44:	00 24       	eor	r0, r0
    1a46:	96 94       	lsr	r9
    1a48:	87 94       	ror	r8
    1a4a:	07 94       	ror	r0
    1a4c:	96 94       	lsr	r9
    1a4e:	87 94       	ror	r8
    1a50:	07 94       	ror	r0
    1a52:	98 2c       	mov	r9, r8
    1a54:	80 2c       	mov	r8, r0
		for (page = block * FLASH_PAGES_PER_BLOCK; page < ((block + 1) * FLASH_PAGES_PER_BLOCK); page++)
    1a56:	a1 2c       	mov	r10, r1
    1a58:	b1 2c       	mov	r11, r1
    1a5a:	5a c0       	rjmp	.+180    	; 0x1b10 <doFlashTestReadAll+0xfc>
		{
			printf("\nB= 0x%04x P= 0x%08lx:", block, page);
    1a5c:	bf 92       	push	r11
    1a5e:	af 92       	push	r10
    1a60:	9f 92       	push	r9
    1a62:	8f 92       	push	r8
    1a64:	df 92       	push	r13
    1a66:	cf 92       	push	r12
    1a68:	80 eb       	ldi	r24, 0xB0	; 176
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	9f 93       	push	r25
    1a6e:	8f 93       	push	r24
    1a70:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
			for (baddr = 0; baddr < (FLASH_PAGE_MAX_BYTES + FLASH_NUM_SPARE_AREA_BYTES); baddr += FLASH_TEST_BUFF_SIZE)
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	e1 2c       	mov	r14, r1
    1a80:	f1 2c       	mov	r15, r1
    1a82:	3b c0       	rjmp	.+118    	; 0x1afa <doFlashTestReadAll+0xe6>
			{
				if (spi_FlashReadFromPage(page, baddr, buff, FLASH_TEST_BUFF_SIZE) != FLASH_TEST_BUFF_SIZE)
    1a84:	00 e1       	ldi	r16, 0x10	; 16
    1a86:	9e 01       	movw	r18, r28
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	a7 01       	movw	r20, r14
    1a8e:	c5 01       	movw	r24, r10
    1a90:	b4 01       	movw	r22, r8
    1a92:	0e 94 87 18 	call	0x310e	; 0x310e <spi_FlashReadFromPage>
    1a96:	80 31       	cpi	r24, 0x10	; 16
    1a98:	41 f1       	breq	.+80     	; 0x1aea <doFlashTestReadAll+0xd6>
				{
					printf("Bad read at 0x%04x ", baddr);
    1a9a:	ff 92       	push	r15
    1a9c:	ef 92       	push	r14
    1a9e:	87 ec       	ldi	r24, 0xC7	; 199
    1aa0:	93 e0       	ldi	r25, 0x03	; 3
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	20 c0       	rjmp	.+64     	; 0x1af4 <doFlashTestReadAll+0xe0>
				else
				{
					for (int i = 0; i < FLASH_TEST_BUFF_SIZE; i++)
					{
						//printf(" %02x", buff[i]);
						if (buff[i] == 0)
    1ab4:	e1 e0       	ldi	r30, 0x01	; 1
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	ec 0f       	add	r30, r28
    1aba:	fd 1f       	adc	r31, r29
    1abc:	e0 0f       	add	r30, r16
    1abe:	f1 1f       	adc	r31, r17
    1ac0:	80 81       	ld	r24, Z
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <doFlashTestReadAll+0xd0>
						{
							printf("Found 00 at 0x%04x ", baddr+i);
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	8e 0d       	add	r24, r14
    1aca:	9f 1d       	adc	r25, r15
    1acc:	9f 93       	push	r25
    1ace:	8f 93       	push	r24
    1ad0:	8b ed       	ldi	r24, 0xDB	; 219
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
				{
					printf("Bad read at 0x%04x ", baddr);
				}
				else
				{
					for (int i = 0; i < FLASH_TEST_BUFF_SIZE; i++)
    1ae4:	0f 5f       	subi	r16, 0xFF	; 255
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <doFlashTestReadAll+0xda>
    1aea:	00 e0       	ldi	r16, 0x00	; 0
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	00 31       	cpi	r16, 0x10	; 16
    1af0:	11 05       	cpc	r17, r1
    1af2:	04 f3       	brlt	.-64     	; 0x1ab4 <doFlashTestReadAll+0xa0>
	{
		page = block * FLASH_PAGES_PER_BLOCK;
		for (page = block * FLASH_PAGES_PER_BLOCK; page < ((block + 1) * FLASH_PAGES_PER_BLOCK); page++)
		{
			printf("\nB= 0x%04x P= 0x%08lx:", block, page);
			for (baddr = 0; baddr < (FLASH_PAGE_MAX_BYTES + FLASH_NUM_SPARE_AREA_BYTES); baddr += FLASH_TEST_BUFF_SIZE)
    1af4:	90 e1       	ldi	r25, 0x10	; 16
    1af6:	e9 0e       	add	r14, r25
    1af8:	f1 1c       	adc	r15, r1
    1afa:	80 e8       	ldi	r24, 0x80	; 128
    1afc:	e8 16       	cp	r14, r24
    1afe:	88 e0       	ldi	r24, 0x08	; 8
    1b00:	f8 06       	cpc	r15, r24
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <doFlashTestReadAll+0xf2>
    1b04:	bf cf       	rjmp	.-130    	; 0x1a84 <doFlashTestReadAll+0x70>
	uint8_t buff[FLASH_TEST_BUFF_SIZE];
	
	for (block = 0; block < FLASH_MAX_NUM_BLOCKS; block++)
	{
		page = block * FLASH_PAGES_PER_BLOCK;
		for (page = block * FLASH_PAGES_PER_BLOCK; page < ((block + 1) * FLASH_PAGES_PER_BLOCK); page++)
    1b06:	9f ef       	ldi	r25, 0xFF	; 255
    1b08:	89 1a       	sub	r8, r25
    1b0a:	99 0a       	sbc	r9, r25
    1b0c:	a9 0a       	sbc	r10, r25
    1b0e:	b9 0a       	sbc	r11, r25
    1b10:	96 01       	movw	r18, r12
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	c9 01       	movw	r24, r18
    1b18:	00 24       	eor	r0, r0
    1b1a:	96 95       	lsr	r25
    1b1c:	87 95       	ror	r24
    1b1e:	07 94       	ror	r0
    1b20:	96 95       	lsr	r25
    1b22:	87 95       	ror	r24
    1b24:	07 94       	ror	r0
    1b26:	98 2f       	mov	r25, r24
    1b28:	80 2d       	mov	r24, r0
    1b2a:	a0 e0       	ldi	r26, 0x00	; 0
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	88 16       	cp	r8, r24
    1b30:	99 06       	cpc	r9, r25
    1b32:	aa 06       	cpc	r10, r26
    1b34:	bb 06       	cpc	r11, r27
    1b36:	08 f4       	brcc	.+2      	; 0x1b3a <doFlashTestReadAll+0x126>
    1b38:	91 cf       	rjmp	.-222    	; 0x1a5c <doFlashTestReadAll+0x48>
	uint16_t block;
	uint32_t page;
	uint16_t baddr;
	uint8_t buff[FLASH_TEST_BUFF_SIZE];
	
	for (block = 0; block < FLASH_MAX_NUM_BLOCKS; block++)
    1b3a:	69 01       	movw	r12, r18
    1b3c:	c1 14       	cp	r12, r1
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	d8 06       	cpc	r13, r24
    1b42:	08 f4       	brcc	.+2      	; 0x1b46 <doFlashTestReadAll+0x132>
    1b44:	7e cf       	rjmp	.-260    	; 0x1a42 <doFlashTestReadAll+0x2e>
					}
				}
			}	
		}
	}	
}
    1b46:	60 96       	adiw	r28, 0x10	; 16
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	bf 90       	pop	r11
    1b64:	af 90       	pop	r10
    1b66:	9f 90       	pop	r9
    1b68:	8f 90       	pop	r8
    1b6a:	08 95       	ret

00001b6c <printSong>:

void printSong(void)
{
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	ee 97       	sbiw	r28, 0x3e	; 62
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
	char buff[MAJORGENERAL_LINE_MAX];
	
	for (int i = 0; i < majorGeneral_num_lines(); i++)
    1b88:	00 e0       	ldi	r16, 0x00	; 0
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
    1b8c:	15 c0       	rjmp	.+42     	; 0x1bb8 <printSong+0x4c>
	{
		majorGeneral_get_line(i, buff);
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	7c 01       	movw	r14, r24
    1b94:	bc 01       	movw	r22, r24
    1b96:	80 2f       	mov	r24, r16
    1b98:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <majorGeneral_get_line>
		printf("%s",buff);
    1b9c:	ff 92       	push	r15
    1b9e:	ef 92       	push	r14
    1ba0:	8f ee       	ldi	r24, 0xEF	; 239
    1ba2:	93 e0       	ldi	r25, 0x03	; 3
    1ba4:	9f 93       	push	r25
    1ba6:	8f 93       	push	r24
    1ba8:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>

void printSong(void)
{
	char buff[MAJORGENERAL_LINE_MAX];
	
	for (int i = 0; i < majorGeneral_num_lines(); i++)
    1bac:	0f 5f       	subi	r16, 0xFF	; 255
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <majorGeneral_num_lines>
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	08 17       	cp	r16, r24
    1bc0:	19 07       	cpc	r17, r25
    1bc2:	2c f3       	brlt	.-54     	; 0x1b8e <printSong+0x22>
	{
		majorGeneral_get_line(i, buff);
		printf("%s",buff);

	}
    1bc4:	ee 96       	adiw	r28, 0x3e	; 62
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	08 95       	ret

00001bde <processCommand>:
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes);
void printSong(void);


void processCommand(void)
{
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
		// else
		if (buf[0] == 'A')	{
    1be2:	c0 91 80 0a 	lds	r28, 0x0A80	; 0x800a80 <buf>
    1be6:	c1 34       	cpi	r28, 0x41	; 65
    1be8:	81 f5       	brne	.+96     	; 0x1c4a <processCommand+0x6c>
			if (buf[1] == 's')		ADC_rdSystemStatus();		
    1bea:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1bee:	83 37       	cpi	r24, 0x73	; 115
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <processCommand+0x18>
    1bf2:	51 d2       	rcall	.+1186   	; 0x2096 <ADC_rdSystemStatus>
    1bf4:	1b c0       	rjmp	.+54     	; 0x1c2c <processCommand+0x4e>
			else if (buf[1] == 'm')	ADC_manualMode();
    1bf6:	8d 36       	cpi	r24, 0x6D	; 109
    1bf8:	11 f4       	brne	.+4      	; 0x1bfe <processCommand+0x20>
    1bfa:	b5 d2       	rcall	.+1386   	; 0x2166 <ADC_manualMode>
    1bfc:	17 c0       	rjmp	.+46     	; 0x1c2c <processCommand+0x4e>
			else if (buf[1] == 'c')	ADC_ReadManualModeAnalogCh(buf[2] - '0');
    1bfe:	83 36       	cpi	r24, 0x63	; 99
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <processCommand+0x2e>
    1c02:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <buf+0x2>
    1c06:	80 53       	subi	r24, 0x30	; 48
    1c08:	b2 d2       	rcall	.+1380   	; 0x216e <ADC_ReadManualModeAnalogCh>
    1c0a:	10 c0       	rjmp	.+32     	; 0x1c2c <processCommand+0x4e>
			else if (buf[1] == 'o')	ADC_OverSample(buf[2] - '0');   // oversample 2^N   N<7
    1c0c:	8f 36       	cpi	r24, 0x6F	; 111
    1c0e:	29 f4       	brne	.+10     	; 0x1c1a <processCommand+0x3c>
    1c10:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <buf+0x2>
    1c14:	80 53       	subi	r24, 0x30	; 48
    1c16:	7a d2       	rcall	.+1268   	; 0x210c <ADC_OverSample>
    1c18:	09 c0       	rjmp	.+18     	; 0x1c2c <processCommand+0x4e>
			else if (buf[1] == 'l')	ADC_OscSpeed(ADC2518_LowSpeedOSC);
    1c1a:	8c 36       	cpi	r24, 0x6C	; 108
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <processCommand+0x46>
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	86 d2       	rcall	.+1292   	; 0x212e <ADC_OscSpeed>
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <processCommand+0x4e>
			else if (buf[1] == 'h')	ADC_OscSpeed(ADC2518_HiSpeedOSC);
    1c24:	88 36       	cpi	r24, 0x68	; 104
    1c26:	11 f4       	brne	.+4      	; 0x1c2c <processCommand+0x4e>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	81 d2       	rcall	.+1282   	; 0x212e <ADC_OscSpeed>
    1c2c:	80 e8       	ldi	r24, 0x80	; 128
			printf("cmd %s--", buf);
    1c2e:	9a e0       	ldi	r25, 0x0A	; 10
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	82 ef       	ldi	r24, 0xF2	; 242
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	b0 c1       	rjmp	.+864    	; 0x1faa <processCommand+0x3cc>
		}
//		else if (buf[0] == 'F')	{
//			FETstate(buf[1] -'0', buf[2]-'0');
//		}	
		else if (buf[0] == 'p')		readABSPress(); 
    1c4a:	c0 37       	cpi	r28, 0x70	; 112
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <processCommand+0x74>
    1c4e:	32 d5       	rcall	.+2660   	; 0x26b4 <readABSPress>
    1c50:	ac c1       	rjmp	.+856    	; 0x1faa <processCommand+0x3cc>
		else if (buf[0] == 'P')		readDiffPress(); 
    1c52:	c0 35       	cpi	r28, 0x50	; 80
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <processCommand+0x7c>
    1c56:	20 d5       	rcall	.+2624   	; 0x2698 <readDiffPress>
    1c58:	a8 c1       	rjmp	.+848    	; 0x1faa <processCommand+0x3cc>
    1c5a:	6b ef       	ldi	r22, 0xFB	; 251
		else if (strcmp(buf,"u47")==0)  readU47();
    1c5c:	73 e0       	ldi	r23, 0x03	; 3
    1c5e:	80 e8       	ldi	r24, 0x80	; 128
    1c60:	9a e0       	ldi	r25, 0x0A	; 10
    1c62:	0e 94 1b 28 	call	0x5036	; 0x5036 <strcmp>
    1c66:	89 2b       	or	r24, r25
    1c68:	11 f4       	brne	.+4      	; 0x1c6e <processCommand+0x90>
    1c6a:	32 d5       	rcall	.+2660   	; 0x26d0 <readU47>
    1c6c:	9e c1       	rjmp	.+828    	; 0x1faa <processCommand+0x3cc>
    1c6e:	cd 34       	cpi	r28, 0x4D	; 77

		else if (buf[0] == 'M')		getMuxConfiguration(); 
    1c70:	19 f4       	brne	.+6      	; 0x1c78 <processCommand+0x9a>
    1c72:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <getMuxConfiguration>
    1c76:	99 c1       	rjmp	.+818    	; 0x1faa <processCommand+0x3cc>
    1c78:	c2 33       	cpi	r28, 0x32	; 50
		else if (buf[0] == '2')		setI2Cmux(atoi(buf+1));
    1c7a:	39 f4       	brne	.+14     	; 0x1c8a <processCommand+0xac>
    1c7c:	81 e8       	ldi	r24, 0x81	; 129
    1c7e:	9a e0       	ldi	r25, 0x0A	; 10
    1c80:	0e 94 14 27 	call	0x4e28	; 0x4e28 <atoi>
    1c84:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <setI2Cmux>
    1c88:	90 c1       	rjmp	.+800    	; 0x1faa <processCommand+0x3cc>
		
		else if (buf[0] == 'R')	{
    1c8a:	c2 35       	cpi	r28, 0x52	; 82
    1c8c:	61 f4       	brne	.+24     	; 0x1ca6 <processCommand+0xc8>
			if (buf[1] == 'S') startRH_T_conversion();
    1c8e:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1c92:	83 35       	cpi	r24, 0x53	; 83
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <processCommand+0xba>
    1c96:	2a d5       	rcall	.+2644   	; 0x26ec <startRH_T_conversion>
			if (buf[1] == 'R') readRH_T();
    1c98:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1c9c:	82 35       	cpi	r24, 0x52	; 82
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <processCommand+0xc4>
    1ca0:	84 c1       	rjmp	.+776    	; 0x1faa <processCommand+0x3cc>
    1ca2:	39 d5       	rcall	.+2674   	; 0x2716 <readRH_T>
    1ca4:	82 c1       	rjmp	.+772    	; 0x1faa <processCommand+0x3cc>
    1ca6:	c2 37       	cpi	r28, 0x72	; 114
		}
		else if (buf[0] == 'r')		{ 
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <processCommand+0xd2>
			RTC_config();
    1caa:	0e 94 b0 1a 	call	0x3560	; 0x3560 <RTC_config>
		}
		else if (buf[0] == 'a') {
    1cae:	7d c1       	rjmp	.+762    	; 0x1faa <processCommand+0x3cc>
    1cb0:	c1 36       	cpi	r28, 0x61	; 97
			if (  buf[1] == 'a' ) showActiveADCs();
    1cb2:	79 f4       	brne	.+30     	; 0x1cd2 <processCommand+0xf4>
    1cb4:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1cb8:	81 36       	cpi	r24, 0x61	; 97
    1cba:	11 f4       	brne	.+4      	; 0x1cc0 <processCommand+0xe2>
			else if (  buf[1] == 's' ) startADCcycle();			
    1cbc:	b9 d2       	rcall	.+1394   	; 0x2230 <showActiveADCs>
    1cbe:	75 c1       	rjmp	.+746    	; 0x1faa <processCommand+0x3cc>
    1cc0:	83 37       	cpi	r24, 0x73	; 115
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <processCommand+0xea>
			else if (  buf[1] == 'd' ) doAdc();			
    1cc4:	b8 d3       	rcall	.+1904   	; 0x2436 <startADCcycle>
    1cc6:	71 c1       	rjmp	.+738    	; 0x1faa <processCommand+0x3cc>
    1cc8:	84 36       	cpi	r24, 0x64	; 100
    1cca:	09 f0       	breq	.+2      	; 0x1cce <processCommand+0xf0>
    1ccc:	6e c1       	rjmp	.+732    	; 0x1faa <processCommand+0x3cc>
		}
		else if (buf[0] == 'F') {		
    1cce:	88 d3       	rcall	.+1808   	; 0x23e0 <doAdc>
			spi_FlashReadID();
    1cd0:	6c c1       	rjmp	.+728    	; 0x1faa <processCommand+0x3cc>
    1cd2:	c6 34       	cpi	r28, 0x46	; 70
			if (  buf[1] == 'w' ) doFlashWriteTest();
    1cd4:	51 f5       	brne	.+84     	; 0x1d2a <processCommand+0x14c>
    1cd6:	4f d7       	rcall	.+3742   	; 0x2b76 <spi_FlashReadID>
    1cd8:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1cdc:	87 37       	cpi	r24, 0x77	; 119
			else if (  buf[1] == 'i' ) spi_FlashInitialize();
    1cde:	11 f4       	brne	.+4      	; 0x1ce4 <processCommand+0x106>
    1ce0:	d6 dd       	rcall	.-1108   	; 0x188e <doFlashWriteTest>
    1ce2:	63 c1       	rjmp	.+710    	; 0x1faa <processCommand+0x3cc>
    1ce4:	89 36       	cpi	r24, 0x69	; 105
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <processCommand+0x10e>
			else if (  buf[1] == 'r' ) doFlashReadTest();
    1ce8:	68 d6       	rcall	.+3280   	; 0x29ba <spi_FlashInitialize>
    1cea:	5f c1       	rjmp	.+702    	; 0x1faa <processCommand+0x3cc>
    1cec:	82 37       	cpi	r24, 0x72	; 114
    1cee:	11 f4       	brne	.+4      	; 0x1cf4 <processCommand+0x116>
			else if (  buf[1] == 'a' ) doFlashTestReadAll();
    1cf0:	2a de       	rcall	.-940    	; 0x1946 <doFlashReadTest>
    1cf2:	5b c1       	rjmp	.+694    	; 0x1faa <processCommand+0x3cc>
    1cf4:	81 36       	cpi	r24, 0x61	; 97
    1cf6:	11 f4       	brne	.+4      	; 0x1cfc <processCommand+0x11e>
    1cf8:	8d de       	rcall	.-742    	; 0x1a14 <doFlashTestReadAll>
			else if (  buf[1] == 'e' ) doFlashEraseTest();
    1cfa:	57 c1       	rjmp	.+686    	; 0x1faa <processCommand+0x3cc>
    1cfc:	85 36       	cpi	r24, 0x65	; 101
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <processCommand+0x126>
    1d00:	86 de       	rcall	.-756    	; 0x1a0e <doFlashEraseTest>
			else if (  buf[1] == 'u' ) spi_FlashUnlockAllBlocks();
    1d02:	53 c1       	rjmp	.+678    	; 0x1faa <processCommand+0x3cc>
    1d04:	85 37       	cpi	r24, 0x75	; 117
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <processCommand+0x130>
    1d08:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <spi_FlashUnlockAllBlocks>
			else if (  buf[1] == 's' ) spi_FlashDisplayFeatureRegisters();			
    1d0c:	4e c1       	rjmp	.+668    	; 0x1faa <processCommand+0x3cc>
    1d0e:	83 37       	cpi	r24, 0x73	; 115
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <processCommand+0x138>
    1d12:	9b d7       	rcall	.+3894   	; 0x2c4a <spi_FlashDisplayFeatureRegisters>
    1d14:	4a c1       	rjmp	.+660    	; 0x1faa <processCommand+0x3cc>
			else if (  buf[1] == 'x' ) spi_FlashReset();
    1d16:	88 37       	cpi	r24, 0x78	; 120
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <processCommand+0x142>
    1d1a:	0e 94 8d 1a 	call	0x351a	; 0x351a <spi_FlashReset>
    1d1e:	45 c1       	rjmp	.+650    	; 0x1faa <processCommand+0x3cc>
			else if (  buf[1] == 'p' ) printSong();
    1d20:	80 37       	cpi	r24, 0x70	; 112
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <processCommand+0x148>
    1d24:	42 c1       	rjmp	.+644    	; 0x1faa <processCommand+0x3cc>
    1d26:	22 df       	rcall	.-444    	; 0x1b6c <printSong>
    1d28:	40 c1       	rjmp	.+640    	; 0x1faa <processCommand+0x3cc>
    1d2a:	c6 36       	cpi	r28, 0x66	; 102
/*			if (  buf[1] == 'w' )       getFlashStatusReister();
			else if (  buf[1] == 'e' )  spi_FlashEnableWrite();
			else if (  buf[1] == 'd' ) spi_FlashDisableWrite();
*/			
		}
		else if (buf[0] == 'f') {
    1d2c:	b9 f4       	brne	.+46     	; 0x1d5c <processCommand+0x17e>
    1d2e:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
				if (  buf[1] == 's' ) FRAM_ReadStatusRegister();
    1d32:	83 37       	cpi	r24, 0x73	; 115
    1d34:	19 f4       	brne	.+6      	; 0x1d3c <processCommand+0x15e>
    1d36:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <FRAM_ReadStatusRegister>
    1d3a:	37 c1       	rjmp	.+622    	; 0x1faa <processCommand+0x3cc>
    1d3c:	89 36       	cpi	r24, 0x69	; 105
				else if (buf[1] == 'i') read_FRAM_DeviceID();
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <processCommand+0x168>
    1d40:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <read_FRAM_DeviceID>
    1d44:	32 c1       	rjmp	.+612    	; 0x1faa <processCommand+0x3cc>
    1d46:	8a 36       	cpi	r24, 0x6A	; 106
				else if (buf[1] == 'j') wrFRAM();
    1d48:	19 f4       	brne	.+6      	; 0x1d50 <processCommand+0x172>
    1d4a:	0e 94 87 1c 	call	0x390e	; 0x390e <wrFRAM>
    1d4e:	2d c1       	rjmp	.+602    	; 0x1faa <processCommand+0x3cc>
    1d50:	85 36       	cpi	r24, 0x65	; 101
				else if (buf[1] == 'e') spi_FRAM_writeEnable();
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <processCommand+0x178>
    1d54:	2a c1       	rjmp	.+596    	; 0x1faa <processCommand+0x3cc>
    1d56:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <spi_FRAM_writeEnable>
    1d5a:	27 c1       	rjmp	.+590    	; 0x1faa <processCommand+0x3cc>
    1d5c:	c3 37       	cpi	r28, 0x73	; 115
		}
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
    1d5e:	c1 f4       	brne	.+48     	; 0x1d90 <processCommand+0x1b2>
    1d60:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 ca 1c 	call	0x3994	; 0x3994 <framSaveSerialNumber>
    1d6a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	98 0f       	add	r25, r24
    1d72:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
    1d76:	1f 92       	push	r1
    1d78:	8f 93       	push	r24
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	93 e0       	ldi	r25, 0x03	; 3
    1d7e:	9f 93       	push	r25
    1d80:	8f 93       	push	r24
    1d82:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0d c1       	rjmp	.+538    	; 0x1faa <processCommand+0x3cc>
		else if (buf[0] == 'n') framReadSerialNumber();
    1d90:	ce 36       	cpi	r28, 0x6E	; 110
    1d92:	19 f4       	brne	.+6      	; 0x1d9a <processCommand+0x1bc>
    1d94:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <framReadSerialNumber>
    1d98:	08 c1       	rjmp	.+528    	; 0x1faa <processCommand+0x3cc>
		else if (buf[0] == 'c') RTC_readCLKF();			
    1d9a:	c3 36       	cpi	r28, 0x63	; 99
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <processCommand+0x1c6>
    1d9e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <RTC_readCLKF>
		else if (buf[0] == 'e') {
    1da2:	03 c1       	rjmp	.+518    	; 0x1faa <processCommand+0x3cc>
    1da4:	c5 36       	cpi	r28, 0x65	; 101
			if (  buf[1] == '0'
    1da6:	51 f5       	brne	.+84     	; 0x1dfc <processCommand+0x21e>
    1da8:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
			   || buf[1] == '1' 
    1dac:	90 ed       	ldi	r25, 0xD0	; 208
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
		else if (buf[0] == 'n') framReadSerialNumber();
		else if (buf[0] == 'c') RTC_readCLKF();			
		else if (buf[0] == 'e') {
			if (  buf[1] == '0'
    1dae:	98 0f       	add	r25, r24
			   || buf[1] == '1' 
			   || buf[1] == '4' )  {enableBuck014(); printf("bucks 0,1,4 (c,i,s1) enabled\n");}
    1db0:	92 30       	cpi	r25, 0x02	; 2
    1db2:	10 f0       	brcs	.+4      	; 0x1db8 <processCommand+0x1da>
    1db4:	84 33       	cpi	r24, 0x34	; 52
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <processCommand+0x1e4>
    1db8:	80 d5       	rcall	.+2816   	; 0x28ba <enableBuck014>
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	94 e0       	ldi	r25, 0x04	; 4
    1dbe:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
			if (buf[1] == '2')  {enableBuck2(); printf("buck2 (Mod) enabled\n");}
    1dc2:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1dc6:	82 33       	cpi	r24, 0x32	; 50
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <processCommand+0x1f6>
    1dca:	83 d5       	rcall	.+2822   	; 0x28d2 <enableBuck2>
    1dcc:	83 e2       	ldi	r24, 0x23	; 35
    1dce:	94 e0       	ldi	r25, 0x04	; 4
    1dd0:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
			if (buf[1] == '3')	{enableBuck3();  printf("buck4 (OptHtr) enabled\n");}
    1dd4:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1dd8:	83 33       	cpi	r24, 0x33	; 51
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <processCommand+0x208>
    1ddc:	82 d5       	rcall	.+2820   	; 0x28e2 <enableBuck3>
    1dde:	87 e3       	ldi	r24, 0x37	; 55
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
			if (buf[1] == '5')	{enableBuck5(); printf("buck5 (spare2) enabled\n");}
    1de6:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1dea:	85 33       	cpi	r24, 0x35	; 53
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <processCommand+0x212>
    1dee:	dd c0       	rjmp	.+442    	; 0x1faa <processCommand+0x3cc>
    1df0:	80 d5       	rcall	.+2816   	; 0x28f2 <enableBuck5>
    1df2:	8e e4       	ldi	r24, 0x4E	; 78
    1df4:	94 e0       	ldi	r25, 0x04	; 4
    1df6:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
		}
		else if (buf[0] == 'd') {
    1dfa:	d7 c0       	rjmp	.+430    	; 0x1faa <processCommand+0x3cc>
			if (buf[1] == '0')  {disableBuck014();printf("bucks 0,1,4 (c,i,s1) disabled\n");}
    1dfc:	c4 36       	cpi	r28, 0x64	; 100
    1dfe:	31 f5       	brne	.+76     	; 0x1e4c <processCommand+0x26e>
    1e00:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1e04:	80 33       	cpi	r24, 0x30	; 48
    1e06:	29 f4       	brne	.+10     	; 0x1e12 <processCommand+0x234>
    1e08:	5e d5       	rcall	.+2748   	; 0x28c6 <disableBuck014>
    1e0a:	85 e6       	ldi	r24, 0x65	; 101
    1e0c:	94 e0       	ldi	r25, 0x04	; 4
			if (buf[1] == '2')  {disableBuck2();printf("buck2 (Mod) disabled\n");}
    1e0e:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    1e12:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1e16:	82 33       	cpi	r24, 0x32	; 50
    1e18:	29 f4       	brne	.+10     	; 0x1e24 <processCommand+0x246>
    1e1a:	5f d5       	rcall	.+2750   	; 0x28da <disableBuck2>
    1e1c:	83 e8       	ldi	r24, 0x83	; 131
    1e1e:	94 e0       	ldi	r25, 0x04	; 4
    1e20:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
			if (buf[1] == '3')	{disableBuck3();printf("buck3 (OptHtr) disabled\n");}
    1e24:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1e28:	83 33       	cpi	r24, 0x33	; 51
    1e2a:	29 f4       	brne	.+10     	; 0x1e36 <processCommand+0x258>
    1e2c:	5e d5       	rcall	.+2748   	; 0x28ea <disableBuck3>
    1e2e:	88 e9       	ldi	r24, 0x98	; 152
    1e30:	94 e0       	ldi	r25, 0x04	; 4
    1e32:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
			if (buf[1] == '5')	{disableBuck5();printf("buck5 (Spare2) disabled\n");}
    1e36:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1e3a:	85 33       	cpi	r24, 0x35	; 53
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <processCommand+0x262>
    1e3e:	b5 c0       	rjmp	.+362    	; 0x1faa <processCommand+0x3cc>
    1e40:	5e d5       	rcall	.+2748   	; 0x28fe <disableBuck5>
    1e42:	80 eb       	ldi	r24, 0xB0	; 176
    1e44:	94 e0       	ldi	r25, 0x04	; 4
    1e46:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    1e4a:	af c0       	rjmp	.+350    	; 0x1faa <processCommand+0x3cc>
    1e4c:	cf 36       	cpi	r28, 0x6F	; 111
		}

		else if (buf[0] == 'o') {
    1e4e:	f1 f4       	brne	.+60     	; 0x1e8c <processCommand+0x2ae>
    1e50:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
			uint16_t v = (buf[1]-'0') *511;
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	c0 97       	sbiw	r24, 0x30	; 48
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	31 e0       	ldi	r19, 0x01	; 1
    1e5c:	82 9f       	mul	r24, r18
    1e5e:	e0 01       	movw	r28, r0
    1e60:	83 9f       	mul	r24, r19
    1e62:	d0 0d       	add	r29, r0
    1e64:	92 9f       	mul	r25, r18
    1e66:	d0 0d       	add	r29, r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	8c 2f       	mov	r24, r28
			if (v>=0 || v< 4096) spi_OpticsDAC_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
    1e6c:	9d 2f       	mov	r25, r29
    1e6e:	0e 94 ca 1b 	call	0x3794	; 0x3794 <spi_OpticsDAC_BroadCast>
    1e72:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
    1e74:	cf 93       	push	r28
    1e76:	88 ec       	ldi	r24, 0xC8	; 200
    1e78:	94 e0       	ldi	r25, 0x04	; 4
    1e7a:	9f 93       	push	r25
    1e7c:	8f 93       	push	r24
    1e7e:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	8f c0       	rjmp	.+286    	; 0x1faa <processCommand+0x3cc>
    1e8c:	cf 34       	cpi	r28, 0x4F	; 79
		}
		else if (buf[0] == 'O') {
    1e8e:	e1 f4       	brne	.+56     	; 0x1ec8 <processCommand+0x2ea>
    1e90:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
			uint8_t ch = (buf[1]-'0');
    1e94:	80 53       	subi	r24, 0x30	; 48
    1e96:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <processCommand+0x2be>
    1e9a:	87 c0       	rjmp	.+270    	; 0x1faa <processCommand+0x3cc>
    1e9c:	c0 91 82 0a 	lds	r28, 0x0A82	; 0x800a82 <buf+0x2>
				uint16_t v = buf[2]-'0' * 511;
    1ea0:	d0 e0       	ldi	r29, 0x00	; 0
    1ea2:	c0 5d       	subi	r28, 0xD0	; 208
    1ea4:	df 45       	sbci	r29, 0x5F	; 95
    1ea6:	6c 2f       	mov	r22, r28
				if (v>=0 || v< 4096) spi_OpticsDAC(ch,v);   
    1ea8:	7d 2f       	mov	r23, r29
    1eaa:	0e 94 93 1b 	call	0x3726	; 0x3726 <spi_OpticsDAC>
    1eae:	df 93       	push	r29
				else printf("incorrect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= 0x%X\n", v);
    1eb0:	cf 93       	push	r28
    1eb2:	8f ec       	ldi	r24, 0xCF	; 207
    1eb4:	94 e0       	ldi	r25, 0x04	; 4
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	71 c0       	rjmp	.+226    	; 0x1faa <processCommand+0x3cc>
    1ec8:	c2 36       	cpi	r28, 0x62	; 98

			}
		}
		else if (buf[0] == 'b') {
    1eca:	09 f5       	brne	.+66     	; 0x1f0e <processCommand+0x330>
    1ecc:	88 ed       	ldi	r24, 0xD8	; 216
			printf("WTF\n");
    1ece:	94 e0       	ldi	r25, 0x04	; 4
    1ed0:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    1ed4:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
			uint16_t v = ((uint16_t)(buf[1]-'0')) * 511;
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	c0 97       	sbiw	r24, 0x30	; 48
    1edc:	2f ef       	ldi	r18, 0xFF	; 255
    1ede:	31 e0       	ldi	r19, 0x01	; 1
    1ee0:	82 9f       	mul	r24, r18
    1ee2:	e0 01       	movw	r28, r0
    1ee4:	83 9f       	mul	r24, r19
    1ee6:	d0 0d       	add	r29, r0
    1ee8:	92 9f       	mul	r25, r18
    1eea:	d0 0d       	add	r29, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	ce 01       	movw	r24, r28
			if (v>=0 || v< 4096) spi_OpticsBuckCtl_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
    1ef0:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <spi_OpticsBuckCtl_BroadCast>
    1ef4:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
    1ef6:	cf 93       	push	r28
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	94 e0       	ldi	r25, 0x04	; 4
    1efc:	9f 93       	push	r25
    1efe:	8f 93       	push	r24
    1f00:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	4e c0       	rjmp	.+156    	; 0x1faa <processCommand+0x3cc>
    1f0e:	c2 34       	cpi	r28, 0x42	; 66
		}
		else if (buf[0] == 'B') {
    1f10:	21 f5       	brne	.+72     	; 0x1f5a <processCommand+0x37c>
    1f12:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
			uint8_t ch = buf[1]-'0';
    1f16:	80 53       	subi	r24, 0x30	; 48
    1f18:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <processCommand+0x340>
    1f1c:	46 c0       	rjmp	.+140    	; 0x1faa <processCommand+0x3cc>
    1f1e:	20 91 82 0a 	lds	r18, 0x0A82	; 0x800a82 <buf+0x2>
				uint16_t v = ((uint16_t)(buf[2]-'0')) * 511;  
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	20 53       	subi	r18, 0x30	; 48
    1f26:	31 09       	sbc	r19, r1
    1f28:	4f ef       	ldi	r20, 0xFF	; 255
    1f2a:	51 e0       	ldi	r21, 0x01	; 1
    1f2c:	24 9f       	mul	r18, r20
    1f2e:	e0 01       	movw	r28, r0
    1f30:	25 9f       	mul	r18, r21
    1f32:	d0 0d       	add	r29, r0
    1f34:	34 9f       	mul	r19, r20
    1f36:	d0 0d       	add	r29, r0
				if (v>=0 || v< 4096) spi_buckCtrlDac(ch,v);
    1f38:	11 24       	eor	r1, r1
    1f3a:	be 01       	movw	r22, r28
    1f3c:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <spi_buckCtrlDac>
				else printf("incorect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= %d\n", v);
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	94 e0       	ldi	r25, 0x04	; 4
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
			}
		}
		else if (buf[0]=='w') {
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
			if (buf[1] == '1')  powerUpWickSensor();
    1f58:	28 c0       	rjmp	.+80     	; 0x1faa <processCommand+0x3cc>
    1f5a:	c7 37       	cpi	r28, 0x77	; 119
    1f5c:	59 f4       	brne	.+22     	; 0x1f74 <processCommand+0x396>
    1f5e:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1f62:	81 33       	cpi	r24, 0x31	; 49
			if (buf[1] == '0') 	powerDownWickSensor();
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <processCommand+0x38a>
    1f66:	d1 d4       	rcall	.+2466   	; 0x290a <powerUpWickSensor>
    1f68:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1f6c:	80 33       	cpi	r24, 0x30	; 48
    1f6e:	e9 f4       	brne	.+58     	; 0x1faa <processCommand+0x3cc>
    1f70:	d0 d4       	rcall	.+2464   	; 0x2912 <powerDownWickSensor>
		}
		
		else if (buf[0]=='m') {
    1f72:	1b c0       	rjmp	.+54     	; 0x1faa <processCommand+0x3cc>
    1f74:	cd 36       	cpi	r28, 0x6D	; 109
				if (buf[1] == '1')  selectSDcard();
    1f76:	59 f4       	brne	.+22     	; 0x1f8e <processCommand+0x3b0>
    1f78:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1f7c:	81 33       	cpi	r24, 0x31	; 49
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <processCommand+0x3a4>
    1f80:	10 d5       	rcall	.+2592   	; 0x29a2 <selectSDcard>
				if (buf[1] == '0') 	deSelectSDcard();	
    1f82:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <buf+0x1>
    1f86:	80 33       	cpi	r24, 0x30	; 48
    1f88:	81 f4       	brne	.+32     	; 0x1faa <processCommand+0x3cc>
    1f8a:	11 d5       	rcall	.+2594   	; 0x29ae <deSelectSDcard>
    1f8c:	0e c0       	rjmp	.+28     	; 0x1faa <processCommand+0x3cc>
    1f8e:	80 e8       	ldi	r24, 0x80	; 128
		}
		else printf("\nno cmd:%s \n", buf);
    1f90:	9a e0       	ldi	r25, 0x0A	; 10
    1f92:	9f 93       	push	r25
    1f94:	8f 93       	push	r24
    1f96:	8c ed       	ldi	r24, 0xDC	; 220
    1f98:	94 e0       	ldi	r25, 0x04	; 4
    1f9a:	9f 93       	push	r25
    1f9c:	8f 93       	push	r24
    1f9e:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	df 91       	pop	r29
		
				
}
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <__vector_8>:
    1fb0:	1f 92       	push	r1
    1fb2:	0f 92       	push	r0
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	0f 92       	push	r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	0f 90       	pop	r0
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	0f 90       	pop	r0
    1fc0:	1f 90       	pop	r1
    1fc2:	18 95       	reti

00001fc4 <__vector_13>:
    1fc4:	1f 92       	push	r1
    1fc6:	0f 92       	push	r0
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	0f 92       	push	r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	2f 93       	push	r18
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	8f b7       	in	r24, 0x3f	; 63
    1fd6:	8f 77       	andi	r24, 0x7F	; 127
    1fd8:	8f bf       	out	0x3f, r24	; 63
    1fda:	88 b1       	in	r24, 0x08	; 8
    1fdc:	80 58       	subi	r24, 0x80	; 128
    1fde:	88 b9       	out	0x08, r24	; 8
    1fe0:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <counter1024Hz>
    1fe4:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <counter1024Hz+0x1>
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	90 93 73 09 	sts	0x0973, r25	; 0x800973 <counter1024Hz+0x1>
    1fee:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <counter1024Hz>
    1ff2:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <counter1024Hz>
    1ff6:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <counter1024Hz+0x1>
    1ffa:	81 15       	cp	r24, r1
    1ffc:	92 40       	sbci	r25, 0x02	; 2
    1ffe:	19 f4       	brne	.+6      	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <halfSecFlag>
    2006:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <counter1024Hz>
    200a:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <counter1024Hz+0x1>
    200e:	81 15       	cp	r24, r1
    2010:	94 40       	sbci	r25, 0x04	; 4
    2012:	a8 f0       	brcs	.+42     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    2014:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <counter1024Hz>
    2018:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <counter1024Hz+0x1>
    201c:	94 50       	subi	r25, 0x04	; 4
    201e:	90 93 73 09 	sts	0x0973, r25	; 0x800973 <counter1024Hz+0x1>
    2022:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <counter1024Hz>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <oneSecFlag>
    202c:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    2030:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <__data_end+0x1>
    203a:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <__data_end>
    203e:	78 94       	sei
    2040:	9f 91       	pop	r25
    2042:	8f 91       	pop	r24
    2044:	2f 91       	pop	r18
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <init_timer2>:
    2050:	89 ee       	ldi	r24, 0xE9	; 233
    2052:	94 e0       	ldi	r25, 0x04	; 4
    2054:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    2058:	80 e8       	ldi	r24, 0x80	; 128
    205a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    206a:	80 ee       	ldi	r24, 0xE0	; 224
    206c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    2070:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    2074:	e0 e7       	ldi	r30, 0x70	; 112
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	82 60       	ori	r24, 0x02	; 2
    207c:	80 83       	st	Z, r24
    207e:	08 95       	ret

00002080 <init_CountersIimers>:
    2080:	e7 df       	rcall	.-50     	; 0x2050 <init_timer2>
    2082:	80 ec       	ldi	r24, 0xC0	; 192
    2084:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    2088:	80 e8       	ldi	r24, 0x80	; 128
    208a:	8d bb       	out	0x1d, r24	; 29
    208c:	8d ef       	ldi	r24, 0xFD	; 253
    208e:	94 e0       	ldi	r25, 0x04	; 4
    2090:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <puts>
    2094:	08 95       	ret

00002096 <ADC_rdSystemStatus>:
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	cd d3       	rcall	.+1946   	; 0x2836 <ADC_RegisterRead>
    209c:	1f 92       	push	r1
    209e:	8f 93       	push	r24
    20a0:	89 e1       	ldi	r24, 0x19	; 25
    20a2:	95 e0       	ldi	r25, 0x05	; 5
    20a4:	9f 93       	push	r25
    20a6:	8f 93       	push	r24
    20a8:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	08 95       	ret

000020b6 <ADC_wrGPO>:
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	d8 2f       	mov	r29, r24
    20bc:	c6 2f       	mov	r28, r22
    20be:	88 30       	cpi	r24, 0x08	; 8
    20c0:	10 f4       	brcc	.+4      	; 0x20c6 <ADC_wrGPO+0x10>
    20c2:	62 30       	cpi	r22, 0x02	; 2
    20c4:	40 f0       	brcs	.+16     	; 0x20d6 <ADC_wrGPO+0x20>
    20c6:	8b e2       	ldi	r24, 0x2B	; 43
    20c8:	95 e0       	ldi	r25, 0x05	; 5
    20ca:	9f 93       	push	r25
    20cc:	8f 93       	push	r24
    20ce:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cc 23       	and	r28, r28
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <ADC_wrGPO+0x30>
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <ADC_wrGPO+0x2a>
    20de:	66 0f       	add	r22, r22
    20e0:	da 95       	dec	r29
    20e2:	ea f7       	brpl	.-6      	; 0x20de <ADC_wrGPO+0x28>
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <ADC_wrGPO+0x32>
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	8b e0       	ldi	r24, 0x0B	; 11
    20ea:	96 d3       	rcall	.+1836   	; 0x2818 <ADC_RegisterWrite>
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <initADC2518>:
    20f2:	60 e4       	ldi	r22, 0x40	; 64
    20f4:	85 e0       	ldi	r24, 0x05	; 5
    20f6:	90 d3       	rcall	.+1824   	; 0x2818 <ADC_RegisterWrite>
    20f8:	60 e4       	ldi	r22, 0x40	; 64
    20fa:	87 e0       	ldi	r24, 0x07	; 7
    20fc:	8d d3       	rcall	.+1818   	; 0x2818 <ADC_RegisterWrite>
    20fe:	60 e4       	ldi	r22, 0x40	; 64
    2100:	89 e0       	ldi	r24, 0x09	; 9
    2102:	8a d3       	rcall	.+1812   	; 0x2818 <ADC_RegisterWrite>
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	86 e0       	ldi	r24, 0x06	; 6
    2108:	d6 cf       	rjmp	.-84     	; 0x20b6 <ADC_wrGPO>
    210a:	08 95       	ret

0000210c <ADC_OverSample>:
    210c:	cf 93       	push	r28
    210e:	c8 2f       	mov	r28, r24
    2110:	88 30       	cpi	r24, 0x08	; 8
    2112:	40 f0       	brcs	.+16     	; 0x2124 <ADC_OverSample+0x18>
    2114:	8d e2       	ldi	r24, 0x2D	; 45
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	9f 93       	push	r25
    211a:	8f 93       	push	r24
    211c:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	6c 2f       	mov	r22, r28
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	77 d3       	rcall	.+1774   	; 0x2818 <ADC_RegisterWrite>
    212a:	cf 91       	pop	r28
    212c:	08 95       	ret

0000212e <ADC_OscSpeed>:
    212e:	cf 93       	push	r28
    2130:	c8 2f       	mov	r28, r24
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	84 e0       	ldi	r24, 0x04	; 4
    2136:	7f d3       	rcall	.+1790   	; 0x2836 <ADC_RegisterRead>
    2138:	c1 11       	cpse	r28, r1
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <ADC_OscSpeed+0x14>
    213c:	68 2f       	mov	r22, r24
    213e:	6f 7e       	andi	r22, 0xEF	; 239
    2140:	0e c0       	rjmp	.+28     	; 0x215e <ADC_OscSpeed+0x30>
    2142:	c1 30       	cpi	r28, 0x01	; 1
    2144:	19 f4       	brne	.+6      	; 0x214c <ADC_OscSpeed+0x1e>
    2146:	68 2f       	mov	r22, r24
    2148:	60 61       	ori	r22, 0x10	; 16
    214a:	09 c0       	rjmp	.+18     	; 0x215e <ADC_OscSpeed+0x30>
    214c:	8d e0       	ldi	r24, 0x0D	; 13
    214e:	92 e0       	ldi	r25, 0x02	; 2
    2150:	9f 93       	push	r25
    2152:	8f 93       	push	r24
    2154:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <ADC_OscSpeed+0x34>
    215e:	84 e0       	ldi	r24, 0x04	; 4
    2160:	5b d3       	rcall	.+1718   	; 0x2818 <ADC_RegisterWrite>
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <ADC_manualMode>:
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	80 e1       	ldi	r24, 0x10	; 16
    216a:	56 c3       	rjmp	.+1708   	; 0x2818 <ADC_RegisterWrite>
    216c:	08 95       	ret

0000216e <ADC_ReadManualModeAnalogCh>:
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	18 2f       	mov	r17, r24
    2176:	68 2f       	mov	r22, r24
    2178:	81 e1       	ldi	r24, 0x11	; 17
    217a:	75 d3       	rcall	.+1770   	; 0x2866 <ADC_RegisterReadWrite>
    217c:	d8 2f       	mov	r29, r24
    217e:	c9 2f       	mov	r28, r25
    2180:	28 2f       	mov	r18, r24
    2182:	39 2f       	mov	r19, r25
    2184:	a0 e5       	ldi	r26, 0x50	; 80
    2186:	b3 ec       	ldi	r27, 0xC3	; 195
    2188:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__umulhisi3>
    218c:	0e 94 49 22 	call	0x4492	; 0x4492 <__floatsisf>
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	59 e3       	ldi	r21, 0x39	; 57
    2198:	0e 94 ad 22 	call	0x455a	; 0x455a <__mulsf3>
    219c:	0e 94 1b 22 	call	0x4436	; 0x4436 <__fixunssfsi>
    21a0:	7f 93       	push	r23
    21a2:	6f 93       	push	r22
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	1f 92       	push	r1
    21aa:	1f 93       	push	r17
    21ac:	82 e4       	ldi	r24, 0x42	; 66
    21ae:	95 e0       	ldi	r25, 0x05	; 5
    21b0:	9f 93       	push	r25
    21b2:	8f 93       	push	r24
    21b4:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    21b8:	8d b7       	in	r24, 0x3d	; 61
    21ba:	9e b7       	in	r25, 0x3e	; 62
    21bc:	08 96       	adiw	r24, 0x08	; 8
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	9e bf       	out	0x3e, r25	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	8d bf       	out	0x3d, r24	; 61
    21c8:	8d 2f       	mov	r24, r29
    21ca:	9c 2f       	mov	r25, r28
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	08 95       	ret

000021d4 <nextADC>:
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	c8 2f       	mov	r28, r24
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	13 c0       	rjmp	.+38     	; 0x2204 <__stack+0x5>
    21de:	cf 5f       	subi	r28, 0xFF	; 255
    21e0:	cf 70       	andi	r28, 0x0F	; 15
    21e2:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <hdwConfig>
    21e6:	30 91 ef 09 	lds	r19, 0x09EF	; 0x8009ef <hdwConfig+0x1>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0c 2e       	mov	r0, r28
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <nextADC+0x22>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <nextADC+0x1e>
    21fa:	82 23       	and	r24, r18
    21fc:	93 23       	and	r25, r19
    21fe:	2d 2f       	mov	r18, r29
    2200:	89 2b       	or	r24, r25
    2202:	21 f4       	brne	.+8      	; 0x220c <__stack+0xd>
    2204:	d1 e0       	ldi	r29, 0x01	; 1
    2206:	d2 0f       	add	r29, r18
    2208:	21 31       	cpi	r18, 0x11	; 17
    220a:	48 f3       	brcs	.-46     	; 0x21de <nextADC+0xa>
    220c:	d1 31       	cpi	r29, 0x11	; 17
    220e:	41 f4       	brne	.+16     	; 0x2220 <__stack+0x21>
    2210:	88 e4       	ldi	r24, 0x48	; 72
    2212:	92 e0       	ldi	r25, 0x02	; 2
    2214:	9f 93       	push	r25
    2216:	8f 93       	push	r24
    2218:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	d1 31       	cpi	r29, 0x11	; 17
    2222:	11 f0       	breq	.+4      	; 0x2228 <__stack+0x29>
    2224:	8c 2f       	mov	r24, r28
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x2b>
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	08 95       	ret

00002230 <showActiveADCs>:
    2230:	cf 93       	push	r28
    2232:	c0 e0       	ldi	r28, 0x00	; 0
    2234:	1d c0       	rjmp	.+58     	; 0x2270 <showActiveADCs+0x40>
    2236:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <hdwConfig>
    223a:	30 91 ef 09 	lds	r19, 0x09EF	; 0x8009ef <hdwConfig+0x1>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0c 2e       	mov	r0, r28
    2244:	02 c0       	rjmp	.+4      	; 0x224a <showActiveADCs+0x1a>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <showActiveADCs+0x16>
    224e:	82 23       	and	r24, r18
    2250:	93 23       	and	r25, r19
    2252:	89 2b       	or	r24, r25
    2254:	61 f0       	breq	.+24     	; 0x226e <showActiveADCs+0x3e>
    2256:	1f 92       	push	r1
    2258:	cf 93       	push	r28
    225a:	84 e4       	ldi	r24, 0x44	; 68
    225c:	92 e0       	ldi	r25, 0x02	; 2
    225e:	9f 93       	push	r25
    2260:	8f 93       	push	r24
    2262:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 5f       	subi	r28, 0xFF	; 255
    2270:	c0 31       	cpi	r28, 0x10	; 16
    2272:	08 f3       	brcs	.-62     	; 0x2236 <showActiveADCs+0x6>
    2274:	82 e4       	ldi	r24, 0x42	; 66
    2276:	92 e0       	ldi	r25, 0x02	; 2
    2278:	9f 93       	push	r25
    227a:	8f 93       	push	r24
    227c:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2280:	ee ee       	ldi	r30, 0xEE	; 238
    2282:	f9 e0       	ldi	r31, 0x09	; 9
    2284:	81 81       	ldd	r24, Z+1	; 0x01
    2286:	8f 93       	push	r24
    2288:	80 81       	ld	r24, Z
    228a:	8f 93       	push	r24
    228c:	83 e6       	ldi	r24, 0x63	; 99
    228e:	95 e0       	ldi	r25, 0x05	; 5
    2290:	9f 93       	push	r25
    2292:	8f 93       	push	r24
    2294:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <incADC_MUX>:
    22a8:	95 df       	rcall	.-214    	; 0x21d4 <nextADC>
    22aa:	ec e7       	ldi	r30, 0x7C	; 124
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	90 81       	ld	r25, Z
    22b0:	90 7e       	andi	r25, 0xE0	; 224
    22b2:	90 83       	st	Z, r25
    22b4:	90 81       	ld	r25, Z
    22b6:	28 2f       	mov	r18, r24
    22b8:	27 70       	andi	r18, 0x07	; 7
    22ba:	92 2b       	or	r25, r18
    22bc:	90 83       	st	Z, r25
    22be:	83 ff       	sbrs	r24, 3
    22c0:	06 c0       	rjmp	.+12     	; 0x22ce <incADC_MUX+0x26>
    22c2:	eb e7       	ldi	r30, 0x7B	; 123
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	90 81       	ld	r25, Z
    22c8:	98 60       	ori	r25, 0x08	; 8
    22ca:	90 83       	st	Z, r25
    22cc:	08 95       	ret
    22ce:	eb e7       	ldi	r30, 0x7B	; 123
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	90 81       	ld	r25, Z
    22d4:	97 7f       	andi	r25, 0xF7	; 247
    22d6:	90 83       	st	Z, r25
    22d8:	08 95       	ret

000022da <__vector_29>:
    22da:	1f 92       	push	r1
    22dc:	0f 92       	push	r0
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	0f 92       	push	r0
    22e2:	11 24       	eor	r1, r1
    22e4:	0b b6       	in	r0, 0x3b	; 59
    22e6:	0f 92       	push	r0
    22e8:	2f 93       	push	r18
    22ea:	3f 93       	push	r19
    22ec:	4f 93       	push	r20
    22ee:	5f 93       	push	r21
    22f0:	6f 93       	push	r22
    22f2:	7f 93       	push	r23
    22f4:	8f 93       	push	r24
    22f6:	9f 93       	push	r25
    22f8:	af 93       	push	r26
    22fa:	bf 93       	push	r27
    22fc:	ef 93       	push	r30
    22fe:	ff 93       	push	r31
    2300:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    2304:	40 91 76 09 	lds	r20, 0x0976	; 0x800976 <currentADCchannel>
    2308:	64 2f       	mov	r22, r20
    230a:	04 2e       	mov	r0, r20
    230c:	00 0c       	add	r0, r0
    230e:	77 0b       	sbc	r23, r23
    2310:	fb 01       	movw	r30, r22
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	e7 58       	subi	r30, 0x87	; 135
    2318:	f6 4f       	sbci	r31, 0xF6	; 246
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	dc 01       	movw	r26, r24
    2320:	a2 0f       	add	r26, r18
    2322:	b1 1d       	adc	r27, r1
    2324:	9d 01       	movw	r18, r26
    2326:	b1 83       	std	Z+1, r27	; 0x01
    2328:	a0 83       	st	Z, r26
    232a:	a9 e7       	ldi	r26, 0x79	; 121
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	9c 91       	ld	r25, X
    2330:	89 2f       	mov	r24, r25
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	98 2f       	mov	r25, r24
    2336:	88 27       	eor	r24, r24
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	80 83       	st	Z, r24
    2340:	3c 91       	ld	r19, X
    2342:	2c 91       	ld	r18, X
    2344:	9f 93       	push	r25
    2346:	8f 93       	push	r24
    2348:	1f 92       	push	r1
    234a:	3f 93       	push	r19
    234c:	1f 92       	push	r1
    234e:	2f 93       	push	r18
    2350:	7f 93       	push	r23
    2352:	4f 93       	push	r20
    2354:	88 e7       	ldi	r24, 0x78	; 120
    2356:	95 e0       	ldi	r25, 0x05	; 5
    2358:	9f 93       	push	r25
    235a:	8f 93       	push	r24
    235c:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2360:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <currentADCchannel>
    2364:	a1 df       	rcall	.-190    	; 0x22a8 <incADC_MUX>
    2366:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <currentADCchannel>
    236a:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <firstADCchannel>
    236e:	2d b7       	in	r18, 0x3d	; 61
    2370:	3e b7       	in	r19, 0x3e	; 62
    2372:	26 5f       	subi	r18, 0xF6	; 246
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	3e bf       	out	0x3e, r19	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	2d bf       	out	0x3d, r18	; 61
    2380:	89 13       	cpse	r24, r25
    2382:	12 c0       	rjmp	.+36     	; 0x23a8 <__vector_29+0xce>
    2384:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <numReadings.2095>
    2388:	90 91 75 09 	lds	r25, 0x0975	; 0x800975 <numReadings.2095+0x1>
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	90 93 75 09 	sts	0x0975, r25	; 0x800975 <numReadings.2095+0x1>
    2392:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <numReadings.2095>
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	39 f4       	brne	.+14     	; 0x23a8 <__vector_29+0xce>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <adcCompleteFlag>
    23a0:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <numReadings.2095+0x1>
    23a4:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <numReadings.2095>
    23a8:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <adcCompleteFlag>
    23ac:	81 11       	cpse	r24, r1
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <__vector_29+0xe0>
    23b0:	ea e7       	ldi	r30, 0x7A	; 122
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 64       	ori	r24, 0x40	; 64
    23b8:	80 83       	st	Z, r24
    23ba:	ff 91       	pop	r31
    23bc:	ef 91       	pop	r30
    23be:	bf 91       	pop	r27
    23c0:	af 91       	pop	r26
    23c2:	9f 91       	pop	r25
    23c4:	8f 91       	pop	r24
    23c6:	7f 91       	pop	r23
    23c8:	6f 91       	pop	r22
    23ca:	5f 91       	pop	r21
    23cc:	4f 91       	pop	r20
    23ce:	3f 91       	pop	r19
    23d0:	2f 91       	pop	r18
    23d2:	0f 90       	pop	r0
    23d4:	0b be       	out	0x3b, r0	; 59
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	0f 90       	pop	r0
    23dc:	1f 90       	pop	r1
    23de:	18 95       	reti

000023e0 <doAdc>:
    23e0:	cf 93       	push	r28
    23e2:	c0 91 77 09 	lds	r28, 0x0977	; 0x800977 <firstADCchannel>
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 ad 28 	call	0x515a	; 0x515a <putchar>
    23ee:	8c 2f       	mov	r24, r28
    23f0:	0c 2e       	mov	r0, r28
    23f2:	00 0c       	add	r0, r0
    23f4:	99 0b       	sbc	r25, r25
    23f6:	fc 01       	movw	r30, r24
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	e7 58       	subi	r30, 0x87	; 135
    23fe:	f6 4f       	sbci	r31, 0xF6	; 246
    2400:	81 81       	ldd	r24, Z+1	; 0x01
    2402:	8f 93       	push	r24
    2404:	80 81       	ld	r24, Z
    2406:	8f 93       	push	r24
    2408:	9f 93       	push	r25
    240a:	cf 93       	push	r28
    240c:	8c e8       	ldi	r24, 0x8C	; 140
    240e:	95 e0       	ldi	r25, 0x05	; 5
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2418:	8c 2f       	mov	r24, r28
    241a:	dc de       	rcall	.-584    	; 0x21d4 <nextADC>
    241c:	c8 2f       	mov	r28, r24
    241e:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <firstADCchannel>
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	c8 13       	cpse	r28, r24
    2430:	da cf       	rjmp	.-76     	; 0x23e6 <doAdc+0x6>
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <startADCcycle>:
    2436:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <adcCompleteFlag>
    243a:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <firstADCchannel>
    243e:	e8 2f       	mov	r30, r24
    2440:	ee 0f       	add	r30, r30
    2442:	ff 0b       	sbc	r31, r31
    2444:	e7 58       	subi	r30, 0x87	; 135
    2446:	f6 4f       	sbci	r31, 0xF6	; 246
    2448:	11 82       	std	Z+1, r1	; 0x01
    244a:	10 82       	st	Z, r1
    244c:	c3 de       	rcall	.-634    	; 0x21d4 <nextADC>
    244e:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <firstADCchannel>
    2452:	89 13       	cpse	r24, r25
    2454:	f4 cf       	rjmp	.-24     	; 0x243e <startADCcycle+0x8>
    2456:	ea e7       	ldi	r30, 0x7A	; 122
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 64       	ori	r24, 0x40	; 64
    245e:	80 83       	st	Z, r24
    2460:	08 95       	ret

00002462 <init_adc>:
    2462:	8f e0       	ldi	r24, 0x0F	; 15
    2464:	21 df       	rcall	.-446    	; 0x22a8 <incADC_MUX>
    2466:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <currentADCchannel>
    246a:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <firstADCchannel>
    246e:	8f 3f       	cpi	r24, 0xFF	; 255
    2470:	71 f0       	breq	.+28     	; 0x248e <init_adc+0x2c>
    2472:	ea e7       	ldi	r30, 0x7A	; 122
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	80 64       	ori	r24, 0x40	; 64
    247a:	80 83       	st	Z, r24
    247c:	8f e8       	ldi	r24, 0x8F	; 143
    247e:	80 83       	st	Z, r24
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
    2486:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
    248a:	d5 cf       	rjmp	.-86     	; 0x2436 <startADCcycle>
    248c:	08 95       	ret
    248e:	87 e9       	ldi	r24, 0x97	; 151
    2490:	95 e0       	ldi	r25, 0x05	; 5
    2492:	9f 93       	push	r25
    2494:	8f 93       	push	r24
    2496:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	08 95       	ret

000024a0 <readDiff_CH>:
    24a0:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <npaFlow+0x5>
    24a4:	1f 92       	push	r1
    24a6:	8f 93       	push	r24
    24a8:	8e ea       	ldi	r24, 0xAE	; 174
    24aa:	95 e0       	ldi	r25, 0x05	; 5
    24ac:	9f 93       	push	r25
    24ae:	8f 93       	push	r24
    24b0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	08 95       	ret

000024be <readNPA700>:
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ff 92       	push	r15
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	2a 97       	sbiw	r28, 0x0a	; 10
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	1a 82       	std	Y+2, r1	; 0x02
    24e0:	1b 82       	std	Y+3, r1	; 0x03
    24e2:	1c 82       	std	Y+4, r1	; 0x04
    24e4:	f9 2e       	mov	r15, r25
    24e6:	c9 2e       	mov	r12, r25
    24e8:	d1 2c       	mov	r13, r1
    24ea:	1f 92       	push	r1
    24ec:	9f 93       	push	r25
    24ee:	05 ec       	ldi	r16, 0xC5	; 197
    24f0:	15 e0       	ldi	r17, 0x05	; 5
    24f2:	1f 93       	push	r17
    24f4:	0f 93       	push	r16
    24f6:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    24fa:	8f 2d       	mov	r24, r15
    24fc:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <setI2Cmux>
    2500:	1f 92       	push	r1
    2502:	ff 92       	push	r15
    2504:	1f 93       	push	r17
    2506:	0f 93       	push	r16
    2508:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    250c:	44 e0       	ldi	r20, 0x04	; 4
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	be 01       	movw	r22, r28
    2512:	6f 5f       	subi	r22, 0xFF	; 255
    2514:	7f 4f       	sbci	r23, 0xFF	; 255
    2516:	88 e2       	ldi	r24, 0x28	; 40
    2518:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <twi_read_bytes>
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	98 2f       	mov	r25, r24
    2520:	92 95       	swap	r25
    2522:	96 95       	lsr	r25
    2524:	96 95       	lsr	r25
    2526:	93 70       	andi	r25, 0x03	; 3
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	c9 f1       	breq	.+114    	; 0x25a6 <readNPA700+0xe8>
    2534:	91 30       	cpi	r25, 0x01	; 1
    2536:	89 f4       	brne	.+34     	; 0x255a <readNPA700+0x9c>
    2538:	31 e0       	ldi	r19, 0x01	; 1
    253a:	c3 1a       	sub	r12, r19
    253c:	d1 08       	sbc	r13, r1
    253e:	df 92       	push	r13
    2540:	cf 92       	push	r12
    2542:	86 ea       	ldi	r24, 0xA6	; 166
    2544:	92 e0       	ldi	r25, 0x02	; 2
    2546:	9f 93       	push	r25
    2548:	8f 93       	push	r24
    254a:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	4e c0       	rjmp	.+156    	; 0x25f6 <readNPA700+0x138>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	89 f4       	brne	.+34     	; 0x2580 <readNPA700+0xc2>
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	c8 1a       	sub	r12, r24
    2562:	d1 08       	sbc	r13, r1
    2564:	df 92       	push	r13
    2566:	cf 92       	push	r12
    2568:	8a e8       	ldi	r24, 0x8A	; 138
    256a:	92 e0       	ldi	r25, 0x02	; 2
    256c:	9f 93       	push	r25
    256e:	8f 93       	push	r24
    2570:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	3b c0       	rjmp	.+118    	; 0x25f6 <readNPA700+0x138>
    2580:	93 30       	cpi	r25, 0x03	; 3
    2582:	c1 f5       	brne	.+112    	; 0x25f4 <readNPA700+0x136>
    2584:	21 e0       	ldi	r18, 0x01	; 1
    2586:	c2 1a       	sub	r12, r18
    2588:	d1 08       	sbc	r13, r1
    258a:	df 92       	push	r13
    258c:	cf 92       	push	r12
    258e:	87 e6       	ldi	r24, 0x67	; 103
    2590:	92 e0       	ldi	r25, 0x02	; 2
    2592:	9f 93       	push	r25
    2594:	8f 93       	push	r24
    2596:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	28 c0       	rjmp	.+80     	; 0x25f6 <readNPA700+0x138>
    25a6:	8f 73       	andi	r24, 0x3F	; 63
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	98 2f       	mov	r25, r24
    25ac:	88 27       	eor	r24, r24
    25ae:	2a 81       	ldd	r18, Y+2	; 0x02
    25b0:	82 0f       	add	r24, r18
    25b2:	91 1d       	adc	r25, r1
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	22 0f       	add	r18, r18
    25ba:	33 1f       	adc	r19, r19
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	22 0f       	add	r18, r18
    25c2:	33 1f       	adc	r19, r19
    25c4:	4c 81       	ldd	r20, Y+4	; 0x04
    25c6:	42 95       	swap	r20
    25c8:	46 95       	lsr	r20
    25ca:	47 70       	andi	r20, 0x07	; 7
    25cc:	24 0f       	add	r18, r20
    25ce:	31 1d       	adc	r19, r1
    25d0:	3f 93       	push	r19
    25d2:	2f 93       	push	r18
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	87 ed       	ldi	r24, 0xD7	; 215
    25da:	95 e0       	ldi	r25, 0x05	; 5
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <readNPA700+0x138>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	2a 96       	adiw	r28, 0x0a	; 10
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	df 90       	pop	r13
    260e:	cf 90       	pop	r12
    2610:	08 95       	ret

00002612 <initPressureSensors>:
    2612:	cf 93       	push	r28
    2614:	e5 ea       	ldi	r30, 0xA5	; 165
    2616:	f9 e0       	ldi	r31, 0x09	; 9
    2618:	c1 e0       	ldi	r28, 0x01	; 1
    261a:	c4 83       	std	Z+4, r28	; 0x04
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	85 83       	std	Z+5, r24	; 0x05
    2620:	3f df       	rcall	.-386    	; 0x24a0 <readDiff_CH>
    2622:	ef e9       	ldi	r30, 0x9F	; 159
    2624:	f9 e0       	ldi	r31, 0x09	; 9
    2626:	c5 83       	std	Z+5, r28	; 0x05
    2628:	14 82       	std	Z+4, r1	; 0x04
    262a:	e9 e9       	ldi	r30, 0x99	; 153
    262c:	f9 e0       	ldi	r31, 0x09	; 9
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	85 83       	std	Z+5, r24	; 0x05
    2632:	c4 83       	std	Z+4, r28	; 0x04
    2634:	40 91 a5 09 	lds	r20, 0x09A5	; 0x8009a5 <npaFlow>
    2638:	50 91 a6 09 	lds	r21, 0x09A6	; 0x8009a6 <npaFlow+0x1>
    263c:	60 91 a7 09 	lds	r22, 0x09A7	; 0x8009a7 <npaFlow+0x2>
    2640:	70 91 a8 09 	lds	r23, 0x09A8	; 0x8009a8 <npaFlow+0x3>
    2644:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <npaFlow+0x4>
    2648:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <npaFlow+0x5>
    264c:	38 df       	rcall	.-400    	; 0x24be <readNPA700>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	98 e4       	ldi	r25, 0x48	; 72
    2652:	fc 01       	movw	r30, r24
    2654:	31 97       	sbiw	r30, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <initPressureSensors+0x42>
    2658:	fc 01       	movw	r30, r24
    265a:	31 97       	sbiw	r30, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <initPressureSensors+0x48>
    265e:	fc 01       	movw	r30, r24
    2660:	31 97       	sbiw	r30, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <initPressureSensors+0x4e>
    2664:	fc 01       	movw	r30, r24
    2666:	31 97       	sbiw	r30, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <initPressureSensors+0x54>
    266a:	fc 01       	movw	r30, r24
    266c:	31 97       	sbiw	r30, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <initPressureSensors+0x5a>
    2670:	fc 01       	movw	r30, r24
    2672:	31 97       	sbiw	r30, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <initPressureSensors+0x60>
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <initPressureSensors+0x64>
    267a:	40 91 9f 09 	lds	r20, 0x099F	; 0x80099f <npaAbsP>
    267e:	50 91 a0 09 	lds	r21, 0x09A0	; 0x8009a0 <npaAbsP+0x1>
    2682:	60 91 a1 09 	lds	r22, 0x09A1	; 0x8009a1 <npaAbsP+0x2>
    2686:	70 91 a2 09 	lds	r23, 0x09A2	; 0x8009a2 <npaAbsP+0x3>
    268a:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <npaAbsP+0x4>
    268e:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <npaAbsP+0x5>
    2692:	15 df       	rcall	.-470    	; 0x24be <readNPA700>
    2694:	cf 91       	pop	r28
    2696:	08 95       	ret

00002698 <readDiffPress>:
    2698:	40 91 a5 09 	lds	r20, 0x09A5	; 0x8009a5 <npaFlow>
    269c:	50 91 a6 09 	lds	r21, 0x09A6	; 0x8009a6 <npaFlow+0x1>
    26a0:	60 91 a7 09 	lds	r22, 0x09A7	; 0x8009a7 <npaFlow+0x2>
    26a4:	70 91 a8 09 	lds	r23, 0x09A8	; 0x8009a8 <npaFlow+0x3>
    26a8:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <npaFlow+0x4>
    26ac:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <npaFlow+0x5>
    26b0:	06 cf       	rjmp	.-500    	; 0x24be <readNPA700>
    26b2:	08 95       	ret

000026b4 <readABSPress>:
    26b4:	40 91 9f 09 	lds	r20, 0x099F	; 0x80099f <npaAbsP>
    26b8:	50 91 a0 09 	lds	r21, 0x09A0	; 0x8009a0 <npaAbsP+0x1>
    26bc:	60 91 a1 09 	lds	r22, 0x09A1	; 0x8009a1 <npaAbsP+0x2>
    26c0:	70 91 a2 09 	lds	r23, 0x09A2	; 0x8009a2 <npaAbsP+0x3>
    26c4:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <npaAbsP+0x4>
    26c8:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <npaAbsP+0x5>
    26cc:	f8 ce       	rjmp	.-528    	; 0x24be <readNPA700>
    26ce:	08 95       	ret

000026d0 <readU47>:
    26d0:	40 91 99 09 	lds	r20, 0x0999	; 0x800999 <npaU47>
    26d4:	50 91 9a 09 	lds	r21, 0x099A	; 0x80099a <npaU47+0x1>
    26d8:	60 91 9b 09 	lds	r22, 0x099B	; 0x80099b <npaU47+0x2>
    26dc:	70 91 9c 09 	lds	r23, 0x099C	; 0x80099c <npaU47+0x3>
    26e0:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <npaU47+0x4>
    26e4:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <npaU47+0x5>
    26e8:	ea ce       	rjmp	.-556    	; 0x24be <readNPA700>
    26ea:	08 95       	ret

000026ec <startRH_T_conversion>:
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	87 e2       	ldi	r24, 0x27	; 39
    26f4:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <twi_write_bytes>
    26f8:	89 2b       	or	r24, r25
    26fa:	41 f4       	brne	.+16     	; 0x270c <startRH_T_conversion+0x20>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <rhStarted>
    2702:	8e ed       	ldi	r24, 0xDE	; 222
    2704:	95 e0       	ldi	r25, 0x05	; 5
    2706:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <puts>
    270a:	08 95       	ret
    270c:	86 ef       	ldi	r24, 0xF6	; 246
    270e:	95 e0       	ldi	r25, 0x05	; 5
    2710:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <puts>
    2714:	08 95       	ret

00002716 <readRH_T>:
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	00 d0       	rcall	.+0      	; 0x2724 <readRH_T+0xe>
    2724:	1f 92       	push	r1
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	1a 82       	std	Y+2, r1	; 0x02
    272e:	1b 82       	std	Y+3, r1	; 0x03
    2730:	1c 82       	std	Y+4, r1	; 0x04
    2732:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <rhStarted>
    2736:	88 23       	and	r24, r24
    2738:	09 f4       	brne	.+2      	; 0x273c <readRH_T+0x26>
    273a:	63 c0       	rjmp	.+198    	; 0x2802 <readRH_T+0xec>
    273c:	10 92 ab 09 	sts	0x09AB, r1	; 0x8009ab <rhStarted>
    2740:	44 e0       	ldi	r20, 0x04	; 4
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	be 01       	movw	r22, r28
    2746:	6f 5f       	subi	r22, 0xFF	; 255
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	87 e2       	ldi	r24, 0x27	; 39
    274c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <twi_read_bytes>
    2750:	89 2b       	or	r24, r25
    2752:	29 f0       	breq	.+10     	; 0x275e <readRH_T+0x48>
    2754:	86 ef       	ldi	r24, 0xF6	; 246
    2756:	95 e0       	ldi	r25, 0x05	; 5
    2758:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    275c:	52 c0       	rjmp	.+164    	; 0x2802 <readRH_T+0xec>
    275e:	a9 81       	ldd	r26, Y+1	; 0x01
    2760:	8a 2f       	mov	r24, r26
    2762:	82 95       	swap	r24
    2764:	86 95       	lsr	r24
    2766:	86 95       	lsr	r24
    2768:	83 70       	andi	r24, 0x03	; 3
    276a:	29 f0       	breq	.+10     	; 0x2776 <readRH_T+0x60>
    276c:	88 e0       	ldi	r24, 0x08	; 8
    276e:	96 e0       	ldi	r25, 0x06	; 6
    2770:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    2774:	46 c0       	rjmp	.+140    	; 0x2802 <readRH_T+0xec>
    2776:	af 73       	andi	r26, 0x3F	; 63
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ba 2f       	mov	r27, r26
    277c:	aa 27       	eor	r26, r26
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	a8 2b       	or	r26, r24
    2782:	28 ee       	ldi	r18, 0xE8	; 232
    2784:	33 e0       	ldi	r19, 0x03	; 3
    2786:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__usmulhisi3>
    278a:	0f 2e       	mov	r0, r31
    278c:	fe ef       	ldi	r31, 0xFE	; 254
    278e:	cf 2e       	mov	r12, r31
    2790:	ff e3       	ldi	r31, 0x3F	; 63
    2792:	df 2e       	mov	r13, r31
    2794:	e1 2c       	mov	r14, r1
    2796:	f1 2c       	mov	r15, r1
    2798:	f0 2d       	mov	r31, r0
    279a:	a7 01       	movw	r20, r14
    279c:	96 01       	movw	r18, r12
    279e:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <__divmodsi4>
    27a2:	5f 93       	push	r21
    27a4:	4f 93       	push	r20
    27a6:	3f 93       	push	r19
    27a8:	2f 93       	push	r18
    27aa:	88 e1       	ldi	r24, 0x18	; 24
    27ac:	96 e0       	ldi	r25, 0x06	; 6
    27ae:	9f 93       	push	r25
    27b0:	8f 93       	push	r24
    27b2:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    27b6:	ab 81       	ldd	r26, Y+3	; 0x03
    27b8:	80 e4       	ldi	r24, 0x40	; 64
    27ba:	a8 9f       	mul	r26, r24
    27bc:	d0 01       	movw	r26, r0
    27be:	11 24       	eor	r1, r1
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	86 95       	lsr	r24
    27c4:	86 95       	lsr	r24
    27c6:	a8 2b       	or	r26, r24
    27c8:	24 e7       	ldi	r18, 0x74	; 116
    27ca:	30 e4       	ldi	r19, 0x40	; 64
    27cc:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__usmulhisi3>
    27d0:	a7 01       	movw	r20, r14
    27d2:	96 01       	movw	r18, r12
    27d4:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <__divmodsi4>
    27d8:	da 01       	movw	r26, r20
    27da:	c9 01       	movw	r24, r18
    27dc:	80 5a       	subi	r24, 0xA0	; 160
    27de:	9f 40       	sbci	r25, 0x0F	; 15
    27e0:	a1 09       	sbc	r26, r1
    27e2:	b1 09       	sbc	r27, r1
    27e4:	bf 93       	push	r27
    27e6:	af 93       	push	r26
    27e8:	9f 93       	push	r25
    27ea:	8f 93       	push	r24
    27ec:	88 e3       	ldi	r24, 0x38	; 56
    27ee:	96 e0       	ldi	r25, 0x06	; 6
    27f0:	9f 93       	push	r25
    27f2:	8f 93       	push	r24
    27f4:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	ff 90       	pop	r15
    2810:	ef 90       	pop	r14
    2812:	df 90       	pop	r13
    2814:	cf 90       	pop	r12
    2816:	08 95       	ret

00002818 <ADC_RegisterWrite>:
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	d8 2f       	mov	r29, r24
    281e:	c6 2f       	mov	r28, r22
    2820:	90 d0       	rcall	.+288    	; 0x2942 <selectADC2518>
    2822:	88 e0       	ldi	r24, 0x08	; 8
    2824:	09 d7       	rcall	.+3602   	; 0x3638 <spiTransferByte>
    2826:	8d 2f       	mov	r24, r29
    2828:	07 d7       	rcall	.+3598   	; 0x3638 <spiTransferByte>
    282a:	8c 2f       	mov	r24, r28
    282c:	05 d7       	rcall	.+3594   	; 0x3638 <spiTransferByte>
    282e:	8f d0       	rcall	.+286    	; 0x294e <deSelectADC2518>
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <ADC_RegisterRead>:
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	d8 2f       	mov	r29, r24
    283c:	c6 2f       	mov	r28, r22
    283e:	81 d0       	rcall	.+258    	; 0x2942 <selectADC2518>
    2840:	80 e1       	ldi	r24, 0x10	; 16
    2842:	fa d6       	rcall	.+3572   	; 0x3638 <spiTransferByte>
    2844:	8d 2f       	mov	r24, r29
    2846:	f8 d6       	rcall	.+3568   	; 0x3638 <spiTransferByte>
    2848:	8c 2f       	mov	r24, r28
    284a:	f6 d6       	rcall	.+3564   	; 0x3638 <spiTransferByte>
    284c:	80 d0       	rcall	.+256    	; 0x294e <deSelectADC2518>
    284e:	79 d0       	rcall	.+242    	; 0x2942 <selectADC2518>
    2850:	80 e1       	ldi	r24, 0x10	; 16
    2852:	f2 d6       	rcall	.+3556   	; 0x3638 <spiTransferByte>
    2854:	c8 2f       	mov	r28, r24
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	ef d6       	rcall	.+3550   	; 0x3638 <spiTransferByte>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	ed d6       	rcall	.+3546   	; 0x3638 <spiTransferByte>
    285e:	8c 2f       	mov	r24, r28
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <ADC_RegisterReadWrite>:
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	08 2f       	mov	r16, r24
    2870:	16 2f       	mov	r17, r22
    2872:	67 d0       	rcall	.+206    	; 0x2942 <selectADC2518>
    2874:	88 e0       	ldi	r24, 0x08	; 8
    2876:	e0 d6       	rcall	.+3520   	; 0x3638 <spiTransferByte>
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	c9 2f       	mov	r28, r25
    287c:	d8 2f       	mov	r29, r24
    287e:	80 2f       	mov	r24, r16
    2880:	db d6       	rcall	.+3510   	; 0x3638 <spiTransferByte>
    2882:	c8 0f       	add	r28, r24
    2884:	d1 1d       	adc	r29, r1
    2886:	81 2f       	mov	r24, r17
    2888:	d7 d6       	rcall	.+3502   	; 0x3638 <spiTransferByte>
    288a:	18 2f       	mov	r17, r24
    288c:	60 d0       	rcall	.+192    	; 0x294e <deSelectADC2518>
    288e:	1f 92       	push	r1
    2890:	1f 93       	push	r17
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	89 e5       	ldi	r24, 0x59	; 89
    2898:	96 e0       	ldi	r25, 0x06	; 6
    289a:	9f 93       	push	r25
    289c:	8f 93       	push	r24
    289e:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	ce 01       	movw	r24, r28
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <enableBuck014>:
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	86 e0       	ldi	r24, 0x06	; 6
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	f9 cb       	rjmp	.-2062   	; 0x20b6 <ADC_wrGPO>
    28c4:	08 95       	ret

000028c6 <disableBuck014>:
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	86 e0       	ldi	r24, 0x06	; 6
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	f3 cb       	rjmp	.-2074   	; 0x20b6 <ADC_wrGPO>
    28d0:	08 95       	ret

000028d2 <enableBuck2>:
    28d2:	84 b3       	in	r24, 0x14	; 20
    28d4:	81 60       	ori	r24, 0x01	; 1
    28d6:	84 bb       	out	0x14, r24	; 20
    28d8:	08 95       	ret

000028da <disableBuck2>:
    28da:	84 b3       	in	r24, 0x14	; 20
    28dc:	8e 7f       	andi	r24, 0xFE	; 254
    28de:	84 bb       	out	0x14, r24	; 20
    28e0:	08 95       	ret

000028e2 <enableBuck3>:
    28e2:	84 b3       	in	r24, 0x14	; 20
    28e4:	82 60       	ori	r24, 0x02	; 2
    28e6:	84 bb       	out	0x14, r24	; 20
    28e8:	08 95       	ret

000028ea <disableBuck3>:
    28ea:	84 b3       	in	r24, 0x14	; 20
    28ec:	8d 7f       	andi	r24, 0xFD	; 253
    28ee:	84 bb       	out	0x14, r24	; 20
    28f0:	08 95       	ret

000028f2 <enableBuck5>:
    28f2:	eb e0       	ldi	r30, 0x0B	; 11
    28f4:	f1 e0       	ldi	r31, 0x01	; 1
    28f6:	80 81       	ld	r24, Z
    28f8:	80 68       	ori	r24, 0x80	; 128
    28fa:	80 83       	st	Z, r24
    28fc:	08 95       	ret

000028fe <disableBuck5>:
    28fe:	eb e0       	ldi	r30, 0x0B	; 11
    2900:	f1 e0       	ldi	r31, 0x01	; 1
    2902:	80 81       	ld	r24, Z
    2904:	8f 77       	andi	r24, 0x7F	; 127
    2906:	80 83       	st	Z, r24
    2908:	08 95       	ret

0000290a <powerUpWickSensor>:
    290a:	8e b1       	in	r24, 0x0e	; 14
    290c:	8b 7f       	andi	r24, 0xFB	; 251
    290e:	8e b9       	out	0x0e, r24	; 14
    2910:	08 95       	ret

00002912 <powerDownWickSensor>:
    2912:	8e b1       	in	r24, 0x0e	; 14
    2914:	84 60       	ori	r24, 0x04	; 4
    2916:	8e b9       	out	0x0e, r24	; 14
    2918:	08 95       	ret

0000291a <selectFRAM>:
    291a:	85 b1       	in	r24, 0x05	; 5
    291c:	8e 7f       	andi	r24, 0xFE	; 254
    291e:	85 b9       	out	0x05, r24	; 5
    2920:	08 95       	ret

00002922 <deSelectFRAM>:
    2922:	85 b1       	in	r24, 0x05	; 5
    2924:	81 60       	ori	r24, 0x01	; 1
    2926:	85 b9       	out	0x05, r24	; 5
    2928:	08 95       	ret

0000292a <selectOpticsDAC>:
    292a:	e2 e0       	ldi	r30, 0x02	; 2
    292c:	f1 e0       	ldi	r31, 0x01	; 1
    292e:	80 81       	ld	r24, Z
    2930:	8e 7f       	andi	r24, 0xFE	; 254
    2932:	80 83       	st	Z, r24
    2934:	08 95       	ret

00002936 <deSelectOpticsDAC>:
    2936:	e2 e0       	ldi	r30, 0x02	; 2
    2938:	f1 e0       	ldi	r31, 0x01	; 1
    293a:	80 81       	ld	r24, Z
    293c:	81 60       	ori	r24, 0x01	; 1
    293e:	80 83       	st	Z, r24
    2940:	08 95       	ret

00002942 <selectADC2518>:
    2942:	e2 e0       	ldi	r30, 0x02	; 2
    2944:	f1 e0       	ldi	r31, 0x01	; 1
    2946:	80 81       	ld	r24, Z
    2948:	8d 7f       	andi	r24, 0xFD	; 253
    294a:	80 83       	st	Z, r24
    294c:	08 95       	ret

0000294e <deSelectADC2518>:
    294e:	e2 e0       	ldi	r30, 0x02	; 2
    2950:	f1 e0       	ldi	r31, 0x01	; 1
    2952:	80 81       	ld	r24, Z
    2954:	82 60       	ori	r24, 0x02	; 2
    2956:	80 83       	st	Z, r24
    2958:	08 95       	ret

0000295a <selectBuckCtrlDAC>:
    295a:	e2 e0       	ldi	r30, 0x02	; 2
    295c:	f1 e0       	ldi	r31, 0x01	; 1
    295e:	80 81       	ld	r24, Z
    2960:	8b 7f       	andi	r24, 0xFB	; 251
    2962:	80 83       	st	Z, r24
    2964:	08 95       	ret

00002966 <deSelectBuckCtrlDAC>:
    2966:	e2 e0       	ldi	r30, 0x02	; 2
    2968:	f1 e0       	ldi	r31, 0x01	; 1
    296a:	80 81       	ld	r24, Z
    296c:	84 60       	ori	r24, 0x04	; 4
    296e:	80 83       	st	Z, r24
    2970:	08 95       	ret

00002972 <selectFlash>:
    2972:	e2 e0       	ldi	r30, 0x02	; 2
    2974:	f1 e0       	ldi	r31, 0x01	; 1
    2976:	80 81       	ld	r24, Z
    2978:	87 7f       	andi	r24, 0xF7	; 247
    297a:	80 83       	st	Z, r24
    297c:	08 95       	ret

0000297e <deSelectFlash>:
    297e:	e2 e0       	ldi	r30, 0x02	; 2
    2980:	f1 e0       	ldi	r31, 0x01	; 1
    2982:	80 81       	ld	r24, Z
    2984:	88 60       	ori	r24, 0x08	; 8
    2986:	80 83       	st	Z, r24
    2988:	08 95       	ret

0000298a <deSelectRTC>:
    298a:	e2 e0       	ldi	r30, 0x02	; 2
    298c:	f1 e0       	ldi	r31, 0x01	; 1
    298e:	80 81       	ld	r24, Z
    2990:	80 61       	ori	r24, 0x10	; 16
    2992:	80 83       	st	Z, r24
    2994:	08 95       	ret

00002996 <selectRTC>:
    2996:	e2 e0       	ldi	r30, 0x02	; 2
    2998:	f1 e0       	ldi	r31, 0x01	; 1
    299a:	80 81       	ld	r24, Z
    299c:	8f 7e       	andi	r24, 0xEF	; 239
    299e:	80 83       	st	Z, r24
    29a0:	08 95       	ret

000029a2 <selectSDcard>:
    29a2:	e2 e0       	ldi	r30, 0x02	; 2
    29a4:	f1 e0       	ldi	r31, 0x01	; 1
    29a6:	80 81       	ld	r24, Z
    29a8:	80 62       	ori	r24, 0x20	; 32
    29aa:	80 83       	st	Z, r24
    29ac:	08 95       	ret

000029ae <deSelectSDcard>:
    29ae:	e2 e0       	ldi	r30, 0x02	; 2
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	80 81       	ld	r24, Z
    29b4:	8f 7d       	andi	r24, 0xDF	; 223
    29b6:	80 83       	st	Z, r24
    29b8:	08 95       	ret

000029ba <spi_FlashInitialize>:
void spi_FlashDelay(uint16_t count)
{
	uint32_t loopcnt = count * DELAY_COUNT_MULT;
	
	while (loopcnt--);
}
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <spi_FlashInitialize+0x6>
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	1b 82       	std	Y+3, r1	; 0x03
    29c6:	1a 82       	std	Y+2, r1	; 0x02
    29c8:	19 82       	std	Y+1, r1	; 0x01
    29ca:	c4 d1       	rcall	.+904    	; 0x2d54 <spi_FlashUnlockAllBlocks>
    29cc:	1a 82       	std	Y+2, r1	; 0x02
    29ce:	19 82       	std	Y+1, r1	; 0x01
    29d0:	19 c0       	rjmp	.+50     	; 0x2a04 <spi_FlashInitialize+0x4a>
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	8f 93       	push	r24
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	8f 93       	push	r24
    29da:	8f e0       	ldi	r24, 0x0F	; 15
    29dc:	92 e0       	ldi	r25, 0x02	; 2
    29de:	89 2f       	mov	r24, r25
    29e0:	8f 93       	push	r24
    29e2:	8f e0       	ldi	r24, 0x0F	; 15
    29e4:	92 e0       	ldi	r25, 0x02	; 2
    29e6:	8f 93       	push	r24
    29e8:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	52 d0       	rcall	.+164    	; 0x2a9e <spi_FlashBlockIsMarkedBad>
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	81 15       	cp	r24, r1
    2a0a:	98 40       	sbci	r25, 0x08	; 8
    2a0c:	10 f3       	brcs	.-60     	; 0x29d2 <spi_FlashInitialize+0x18>
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	08 95       	ret

00002a1c <printbuffer>:
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <printbuffer+0x6>
    2a22:	1f 92       	push	r1
    2a24:	1f 92       	push	r1
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
    2a2e:	6d 83       	std	Y+5, r22	; 0x05
    2a30:	1a 82       	std	Y+2, r1	; 0x02
    2a32:	19 82       	std	Y+1, r1	; 0x01
    2a34:	1f c0       	rjmp	.+62     	; 0x2a74 <printbuffer+0x58>
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3e:	82 0f       	add	r24, r18
    2a40:	93 1f       	adc	r25, r19
    2a42:	fc 01       	movw	r30, r24
    2a44:	80 81       	ld	r24, Z
    2a46:	88 2f       	mov	r24, r24
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	29 2f       	mov	r18, r25
    2a4c:	2f 93       	push	r18
    2a4e:	8f 93       	push	r24
    2a50:	8d e1       	ldi	r24, 0x1D	; 29
    2a52:	92 e0       	ldi	r25, 0x02	; 2
    2a54:	89 2f       	mov	r24, r25
    2a56:	8f 93       	push	r24
    2a58:	8d e1       	ldi	r24, 0x1D	; 29
    2a5a:	92 e0       	ldi	r25, 0x02	; 2
    2a5c:	8f 93       	push	r24
    2a5e:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	82 17       	cp	r24, r18
    2a80:	93 07       	cpc	r25, r19
    2a82:	cc f2       	brlt	.-78     	; 0x2a36 <printbuffer+0x1a>
    2a84:	8a e0       	ldi	r24, 0x0A	; 10
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 ad 28 	call	0x515a	; 0x515a <putchar>
    2a8c:	00 00       	nop
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	08 95       	ret

00002a9e <spi_FlashBlockIsMarkedBad>:
    2a9e:	0f 93       	push	r16
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	69 97       	sbiw	r28, 0x19	; 25
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	99 8f       	std	Y+25, r25	; 0x19
    2ab6:	88 8f       	std	Y+24, r24	; 0x18
    2ab8:	19 82       	std	Y+1, r1	; 0x01
    2aba:	88 8d       	ldd	r24, Y+24	; 0x18
    2abc:	99 8d       	ldd	r25, Y+25	; 0x19
    2abe:	cc 01       	movw	r24, r24
    2ac0:	a0 e0       	ldi	r26, 0x00	; 0
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	aa 1f       	adc	r26, r26
    2aca:	bb 1f       	adc	r27, r27
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	aa 1f       	adc	r26, r26
    2ad2:	bb 1f       	adc	r27, r27
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	aa 1f       	adc	r26, r26
    2ada:	bb 1f       	adc	r27, r27
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	aa 1f       	adc	r26, r26
    2ae2:	bb 1f       	adc	r27, r27
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	aa 1f       	adc	r26, r26
    2aea:	bb 1f       	adc	r27, r27
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	aa 1f       	adc	r26, r26
    2af2:	bb 1f       	adc	r27, r27
    2af4:	8a 83       	std	Y+2, r24	; 0x02
    2af6:	9b 83       	std	Y+3, r25	; 0x03
    2af8:	ac 83       	std	Y+4, r26	; 0x04
    2afa:	bd 83       	std	Y+5, r27	; 0x05
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	98 e0       	ldi	r25, 0x08	; 8
    2b00:	9f 83       	std	Y+7, r25	; 0x07
    2b02:	8e 83       	std	Y+6, r24	; 0x06
    2b04:	9e 01       	movw	r18, r28
    2b06:	28 5f       	subi	r18, 0xF8	; 248
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	4e 81       	ldd	r20, Y+6	; 0x06
    2b0c:	5f 81       	ldd	r21, Y+7	; 0x07
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	ac 81       	ldd	r26, Y+4	; 0x04
    2b14:	bd 81       	ldd	r27, Y+5	; 0x05
    2b16:	00 e1       	ldi	r16, 0x10	; 16
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	f8 d2       	rcall	.+1520   	; 0x310e <spi_FlashReadFromPage>
    2b1e:	80 31       	cpi	r24, 0x10	; 16
    2b20:	b9 f4       	brne	.+46     	; 0x2b50 <spi_FlashBlockIsMarkedBad+0xb2>
    2b22:	88 85       	ldd	r24, Y+8	; 0x08
    2b24:	88 23       	and	r24, r24
    2b26:	c1 f4       	brne	.+48     	; 0x2b58 <spi_FlashBlockIsMarkedBad+0xba>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2b2e:	8f 93       	push	r24
    2b30:	88 8d       	ldd	r24, Y+24	; 0x18
    2b32:	8f 93       	push	r24
    2b34:	83 e2       	ldi	r24, 0x23	; 35
    2b36:	92 e0       	ldi	r25, 0x02	; 2
    2b38:	89 2f       	mov	r24, r25
    2b3a:	8f 93       	push	r24
    2b3c:	83 e2       	ldi	r24, 0x23	; 35
    2b3e:	92 e0       	ldi	r25, 0x02	; 2
    2b40:	8f 93       	push	r24
    2b42:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	04 c0       	rjmp	.+8      	; 0x2b58 <spi_FlashBlockIsMarkedBad+0xba>
    2b50:	80 e5       	ldi	r24, 0x50	; 80
    2b52:	92 e0       	ldi	r25, 0x02	; 2
    2b54:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    2b58:	ce 01       	movw	r24, r28
    2b5a:	08 96       	adiw	r24, 0x08	; 8
    2b5c:	60 e1       	ldi	r22, 0x10	; 16
    2b5e:	5e df       	rcall	.-324    	; 0x2a1c <printbuffer>
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	69 96       	adiw	r28, 0x19	; 25
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	0f 91       	pop	r16
    2b74:	08 95       	ret

00002b76 <spi_FlashReadID>:

//Read Flash ID:  0 address, 1 dummy, 2 Data
void spi_FlashReadID(void)     
{
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	1f 92       	push	r1
    2b7c:	1f 92       	push	r1
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
	uint8_t miso[2];
	
	selectFlash();
    2b82:	f7 de       	rcall	.-530    	; 0x2972 <selectFlash>
	spiTransferByte(FLASH_READ_ID);
    2b84:	8f e9       	ldi	r24, 0x9F	; 159
    2b86:	58 d5       	rcall	.+2736   	; 0x3638 <spiTransferByte>
	spiTransferByte(0);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	56 d5       	rcall	.+2732   	; 0x3638 <spiTransferByte>
	miso[0] = spiTransferByte(0);
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	54 d5       	rcall	.+2728   	; 0x3638 <spiTransferByte>
    2b90:	89 83       	std	Y+1, r24	; 0x01
	miso[1] = spiTransferByte(0);
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	51 d5       	rcall	.+2722   	; 0x3638 <spiTransferByte>
    2b96:	8a 83       	std	Y+2, r24	; 0x02
    2b98:	f2 de       	rcall	.-540    	; 0x297e <deSelectFlash>
	deSelectFlash();
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	28 2f       	mov	r18, r24
	printf("\n0x%02x, 0x%02x\n", miso[0],miso[1]);
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	88 2f       	mov	r24, r24
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	43 2f       	mov	r20, r19
    2ba8:	4f 93       	push	r20
    2baa:	2f 93       	push	r18
    2bac:	29 2f       	mov	r18, r25
    2bae:	2f 93       	push	r18
    2bb0:	8f 93       	push	r24
    2bb2:	8a e7       	ldi	r24, 0x7A	; 122
    2bb4:	92 e0       	ldi	r25, 0x02	; 2
    2bb6:	89 2f       	mov	r24, r25
    2bb8:	8f 93       	push	r24
    2bba:	8a e7       	ldi	r24, 0x7A	; 122
    2bbc:	92 e0       	ldi	r25, 0x02	; 2
    2bbe:	8f 93       	push	r24
    2bc0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	00 00       	nop
    2bd2:	0f 90       	pop	r0
	
}
    2bd4:	0f 90       	pop	r0
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

00002bdc <spi_FlashWaitUntilReady>:
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29


uint8_t spi_FlashWaitUntilReady()
{
    2be0:	1f 92       	push	r1
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
	uint8_t retry = FLASH_RETRY_MAX;
    2be6:	8a e0       	ldi	r24, 0x0A	; 10
    2be8:	89 83       	std	Y+1, r24	; 0x01
	do 
	{
		retry--;
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	81 50       	subi	r24, 0x01	; 1
    2bee:	89 83       	std	Y+1, r24	; 0x01
	} while (spi_FlashIsBusy() && retry);
    2bf0:	0e d0       	rcall	.+28     	; 0x2c0e <spi_FlashIsBusy>
    2bf2:	88 23       	and	r24, r24
    2bf4:	19 f0       	breq	.+6      	; 0x2bfc <spi_FlashWaitUntilReady+0x20>
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	88 23       	and	r24, r24
    2bfa:	b9 f7       	brne	.-18     	; 0x2bea <spi_FlashWaitUntilReady+0xe>
	return (retry > 0); 
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	99 81       	ldd	r25, Y+1	; 0x01
    2c00:	99 23       	and	r25, r25
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <spi_FlashWaitUntilReady+0x2a>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
	
}
    2c06:	0f 90       	pop	r0
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	08 95       	ret

00002c0e <spi_FlashIsBusy>:
/*********************************************************************
 *  check operation in progress bit (OIP) in feature status register to see if chip is busy.
 *  returns zero if ready, and 1 if busy with previous command.
**********************************************************************/
uint8_t spi_FlashIsBusy(void)   
{
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	1f 92       	push	r1
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	uint8_t ret;	
	ret = spi_FlashGetStatusRegister();  // check response
    2c18:	0f d0       	rcall	.+30     	; 0x2c38 <spi_FlashGetStatusRegister>
    2c1a:	89 83       	std	Y+1, r24	; 0x01
	//printf("spi_FlashIsBusy: 0x%02x\n", ret);
	return (ret & FLASH_STATUS_BIT_OIP) ? 1 : 0;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	81 70       	andi	r24, 0x01	; 1
    2c24:	99 27       	eor	r25, r25
    2c26:	21 e0       	ldi	r18, 0x01	; 1
    2c28:	89 2b       	or	r24, r25
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <spi_FlashIsBusy+0x20>
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	82 2f       	mov	r24, r18
}
    2c30:	0f 90       	pop	r0
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	08 95       	ret

00002c38 <spi_FlashGetStatusRegister>:

uint8_t spi_FlashGetStatusRegister(void)
{
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
	return 	spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS);
    2c40:	80 ec       	ldi	r24, 0xC0	; 192
    2c42:	5b d0       	rcall	.+182    	; 0x2cfa <spi_FlashGetFeatures>
}
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	08 95       	ret

00002c4a <spi_FlashDisplayFeatureRegisters>:

void spi_FlashDisplayFeatureRegisters(void)
{
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
	printf("Flash Block Lock    0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK));
    2c52:	80 ea       	ldi	r24, 0xA0	; 160
    2c54:	52 d0       	rcall	.+164    	; 0x2cfa <spi_FlashGetFeatures>
    2c56:	88 2f       	mov	r24, r24
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	29 2f       	mov	r18, r25
    2c5c:	2f 93       	push	r18
    2c5e:	8f 93       	push	r24
    2c60:	8b e8       	ldi	r24, 0x8B	; 139
    2c62:	92 e0       	ldi	r25, 0x02	; 2
    2c64:	89 2f       	mov	r24, r25
    2c66:	8f 93       	push	r24
    2c68:	8b e8       	ldi	r24, 0x8B	; 139
    2c6a:	92 e0       	ldi	r25, 0x02	; 2
    2c6c:	8f 93       	push	r24
    2c6e:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
	printf("Flash Config        0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_CONFIG));
    2c7a:	80 eb       	ldi	r24, 0xB0	; 176
    2c7c:	3e d0       	rcall	.+124    	; 0x2cfa <spi_FlashGetFeatures>
    2c7e:	88 2f       	mov	r24, r24
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	29 2f       	mov	r18, r25
    2c84:	2f 93       	push	r18
    2c86:	8f 93       	push	r24
    2c88:	87 ea       	ldi	r24, 0xA7	; 167
    2c8a:	92 e0       	ldi	r25, 0x02	; 2
    2c8c:	89 2f       	mov	r24, r25
    2c8e:	8f 93       	push	r24
    2c90:	87 ea       	ldi	r24, 0xA7	; 167
    2c92:	92 e0       	ldi	r25, 0x02	; 2
    2c94:	8f 93       	push	r24
    2c96:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
	printf("Flash Status        0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS));
    2ca2:	80 ec       	ldi	r24, 0xC0	; 192
    2ca4:	2a d0       	rcall	.+84     	; 0x2cfa <spi_FlashGetFeatures>
    2ca6:	88 2f       	mov	r24, r24
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	29 2f       	mov	r18, r25
    2cac:	2f 93       	push	r18
    2cae:	8f 93       	push	r24
    2cb0:	83 ec       	ldi	r24, 0xC3	; 195
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	89 2f       	mov	r24, r25
    2cb6:	8f 93       	push	r24
    2cb8:	83 ec       	ldi	r24, 0xC3	; 195
    2cba:	92 e0       	ldi	r25, 0x02	; 2
    2cbc:	8f 93       	push	r24
    2cbe:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
	printf("Flash Die Select    0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_DIE_SELECT));
    2cca:	80 ed       	ldi	r24, 0xD0	; 208
    2ccc:	16 d0       	rcall	.+44     	; 0x2cfa <spi_FlashGetFeatures>
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	29 2f       	mov	r18, r25
    2cd4:	2f 93       	push	r18
    2cd6:	8f 93       	push	r24
    2cd8:	8f ed       	ldi	r24, 0xDF	; 223
    2cda:	92 e0       	ldi	r25, 0x02	; 2
    2cdc:	89 2f       	mov	r24, r25
    2cde:	8f 93       	push	r24
    2ce0:	8f ed       	ldi	r24, 0xDF	; 223
    2ce2:	92 e0       	ldi	r25, 0x02	; 2
    2ce4:	8f 93       	push	r24
    2ce6:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	00 00       	nop
	
}
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <spi_FlashGetFeatures>:
    2cfa:	cf 93       	push	r28
 *      Returns feature register content
 *      
 *
**********************************************************************/
uint8_t spi_FlashGetFeatures(uint8_t fregister)
{
    2cfc:	df 93       	push	r29
    2cfe:	1f 92       	push	r1
    2d00:	1f 92       	push	r1
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t features;
		
	selectFlash();
    2d08:	34 de       	rcall	.-920    	; 0x2972 <selectFlash>
	spiTransferByte(FLASH_GET_FEATURES);
    2d0a:	8f e0       	ldi	r24, 0x0F	; 15
    2d0c:	95 d4       	rcall	.+2346   	; 0x3638 <spiTransferByte>
	spiTransferByte(fregister);
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	93 d4       	rcall	.+2342   	; 0x3638 <spiTransferByte>
	features = spiTransferByte(0);
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	91 d4       	rcall	.+2338   	; 0x3638 <spiTransferByte>
    2d16:	89 83       	std	Y+1, r24	; 0x01
	deSelectFlash();
    2d18:	32 de       	rcall	.-924    	; 0x297e <deSelectFlash>
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
	return features;
    2d1c:	0f 90       	pop	r0
}
    2d1e:	0f 90       	pop	r0
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	08 95       	ret

00002d26 <spi_FlashSetFeatures>:
    2d26:	cf 93       	push	r28
 *      Returns feature register content
 *      
 *
**********************************************************************/
uint8_t spi_FlashSetFeatures(uint8_t fregister, uint8_t features)
{
    2d28:	df 93       	push	r29
    2d2a:	1f 92       	push	r1
    2d2c:	1f 92       	push	r1
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	6a 83       	std	Y+2, r22	; 0x02
	selectFlash();
    2d36:	1d de       	rcall	.-966    	; 0x2972 <selectFlash>
	spiTransferByte(FLASH_SET_FEATURES);
    2d38:	8f e1       	ldi	r24, 0x1F	; 31
    2d3a:	7e d4       	rcall	.+2300   	; 0x3638 <spiTransferByte>
	spiTransferByte(fregister);
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	7c d4       	rcall	.+2296   	; 0x3638 <spiTransferByte>
	spiTransferByte(features);
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	7a d4       	rcall	.+2292   	; 0x3638 <spiTransferByte>
	deSelectFlash();
    2d44:	1c de       	rcall	.-968    	; 0x297e <deSelectFlash>
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
	return spi_FlashGetFeatures(fregister);
    2d48:	d8 df       	rcall	.-80     	; 0x2cfa <spi_FlashGetFeatures>
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
}
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	08 95       	ret

00002d54 <spi_FlashUnlockAllBlocks>:
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29

void spi_FlashUnlockAllBlocks(void)
{
    2d58:	1f 92       	push	r1
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t features;
	
	//features = spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK);
	//printf("spi_FlashUnlockAllBlocks: lock reg starts at 0x%02x\n", features);
	
	spi_FlashSetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK, 0x00);
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	80 ea       	ldi	r24, 0xA0	; 160
    2d62:	e1 df       	rcall	.-62     	; 0x2d26 <spi_FlashSetFeatures>

	features = spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK);
    2d64:	80 ea       	ldi	r24, 0xA0	; 160
    2d66:	c9 df       	rcall	.-110    	; 0x2cfa <spi_FlashGetFeatures>
    2d68:	89 83       	std	Y+1, r24	; 0x01
	printf("spi_FlashUnlockAllBlocks: lock reg now  0x%02x\n", features);
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	29 2f       	mov	r18, r25
    2d72:	2f 93       	push	r18
    2d74:	8f 93       	push	r24
    2d76:	8b ef       	ldi	r24, 0xFB	; 251
    2d78:	92 e0       	ldi	r25, 0x02	; 2
    2d7a:	89 2f       	mov	r24, r25
    2d7c:	8f 93       	push	r24
    2d7e:	8b ef       	ldi	r24, 0xFB	; 251
    2d80:	92 e0       	ldi	r25, 0x02	; 2
    2d82:	8f 93       	push	r24
    2d84:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
}
    2d90:	00 00       	nop
    2d92:	0f 90       	pop	r0
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	08 95       	ret

00002d9a <spi_FlashEnableWrite>:
 *      Return zero if WIP = 1 or WEL = 0;
 *
**********************************************************************/

uint8_t spi_FlashEnableWrite(void)   
{
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	1f 92       	push	r1
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62

	selectFlash();
    2da4:	e6 dd       	rcall	.-1076   	; 0x2972 <selectFlash>
	spiTransferByte(FLASH_WRITE_ENABLE);         
    2da6:	86 e0       	ldi	r24, 0x06	; 6
	deSelectFlash();
    2da8:	47 d4       	rcall	.+2190   	; 0x3638 <spiTransferByte>
    2daa:	e9 dd       	rcall	.-1070   	; 0x297e <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    2dac:	45 df       	rcall	.-374    	; 0x2c38 <spi_FlashGetStatusRegister>
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
	printf("spi_FlashEnableWrite: 0x%02x\n", statReg);
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	29 2f       	mov	r18, r25
    2db8:	2f 93       	push	r18
    2dba:	8f 93       	push	r24
    2dbc:	8b e2       	ldi	r24, 0x2B	; 43
    2dbe:	93 e0       	ldi	r25, 0x03	; 3
    2dc0:	89 2f       	mov	r24, r25
    2dc2:	8f 93       	push	r24
    2dc4:	8b e2       	ldi	r24, 0x2B	; 43
    2dc6:	93 e0       	ldi	r25, 0x03	; 3
    2dc8:	8f 93       	push	r24
    2dca:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
		
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 1 : 0  ;  
    2dd8:	88 2f       	mov	r24, r24
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	82 70       	andi	r24, 0x02	; 2
    2dde:	99 27       	eor	r25, r25
    2de0:	21 e0       	ldi	r18, 0x01	; 1
    2de2:	89 2b       	or	r24, r25
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <spi_FlashEnableWrite+0x4e>
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	82 2f       	mov	r24, r18
    2dea:	0f 90       	pop	r0
}
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	08 95       	ret

00002df2 <spi_FlashDisableWrite>:
    2df2:	cf 93       	push	r28

uint8_t spi_FlashDisableWrite(void)
{
    2df4:	df 93       	push	r29
    2df6:	1f 92       	push	r1
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62

	selectFlash();
    2dfc:	ba dd       	rcall	.-1164   	; 0x2972 <selectFlash>
	spiTransferByte(FLASH_WRITE_DISABLE);
    2dfe:	84 e0       	ldi	r24, 0x04	; 4
	deSelectFlash();
    2e00:	1b d4       	rcall	.+2102   	; 0x3638 <spiTransferByte>
    2e02:	bd dd       	rcall	.-1158   	; 0x297e <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    2e04:	19 df       	rcall	.-462    	; 0x2c38 <spi_FlashGetStatusRegister>
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
	printf("spi_FlashDisableWrite: 0x%02x\n", statReg);
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	29 2f       	mov	r18, r25
    2e10:	2f 93       	push	r18
    2e12:	8f 93       	push	r24
    2e14:	89 e4       	ldi	r24, 0x49	; 73
    2e16:	93 e0       	ldi	r25, 0x03	; 3
    2e18:	89 2f       	mov	r24, r25
    2e1a:	8f 93       	push	r24
    2e1c:	89 e4       	ldi	r24, 0x49	; 73
    2e1e:	93 e0       	ldi	r25, 0x03	; 3
    2e20:	8f 93       	push	r24
    2e22:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
	
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 0 : 1  ;
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	82 70       	andi	r24, 0x02	; 2
    2e36:	99 27       	eor	r25, r25
    2e38:	21 e0       	ldi	r18, 0x01	; 1
    2e3a:	89 2b       	or	r24, r25
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <spi_FlashDisableWrite+0x4e>
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	82 2f       	mov	r24, r18
    2e42:	0f 90       	pop	r0
}
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <spi_FlashWriteToPage>:
    2e4a:	0f 93       	push	r16
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	62 97       	sbiw	r28, 0x12	; 18
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	6a 87       	std	Y+10, r22	; 0x0a
    2e62:	7b 87       	std	Y+11, r23	; 0x0b
    2e64:	8c 87       	std	Y+12, r24	; 0x0c
    2e66:	9d 87       	std	Y+13, r25	; 0x0d
    2e68:	5f 87       	std	Y+15, r21	; 0x0f
    2e6a:	4e 87       	std	Y+14, r20	; 0x0e
    2e6c:	39 8b       	std	Y+17, r19	; 0x11
    2e6e:	28 8b       	std	Y+16, r18	; 0x10
    2e70:	0a 8b       	std	Y+18, r16	; 0x12
	uint16_t ret = 0;
    2e72:	1a 82       	std	Y+2, r1	; 0x02
    2e74:	19 82       	std	Y+1, r1	; 0x01
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
    2e76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e7a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e7c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e7e:	8c 83       	std	Y+4, r24	; 0x04
    2e80:	9d 83       	std	Y+5, r25	; 0x05
    2e82:	ae 83       	std	Y+6, r26	; 0x06
    2e84:	bf 83       	std	Y+7, r27	; 0x07
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    2e86:	8a 89       	ldd	r24, Y+18	; 0x12
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	81 30       	cpi	r24, 0x01	; 1
    2e96:	98 40       	sbci	r25, 0x08	; 8
    2e98:	08 f0       	brcs	.+2      	; 0x2e9c <spi_FlashWriteToPage+0x52>
    2e9a:	8a c0       	rjmp	.+276    	; 0x2fb0 <spi_FlashWriteToPage+0x166>
	{
		if (spi_FlashWaitUntilReady())
    2e9c:	9f de       	rcall	.-706    	; 0x2bdc <spi_FlashWaitUntilReady>
    2e9e:	88 23       	and	r24, r24
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <spi_FlashWriteToPage+0x5a>
    2ea2:	7c c0       	rjmp	.+248    	; 0x2f9c <spi_FlashWriteToPage+0x152>
		{
			selectFlash();
    2ea4:	66 dd       	rcall	.-1332   	; 0x2972 <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    2ea6:	83 e1       	ldi	r24, 0x13	; 19
    2ea8:	c7 d3       	rcall	.+1934   	; 0x3638 <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    2eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    2eac:	c5 d3       	rcall	.+1930   	; 0x3638 <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
			spiTransferByte(pageAddress.byte[0]);
    2eb0:	c3 d3       	rcall	.+1926   	; 0x3638 <spiTransferByte>
    2eb2:	8c 81       	ldd	r24, Y+4	; 0x04
			deSelectFlash();
    2eb4:	c1 d3       	rcall	.+1922   	; 0x3638 <spiTransferByte>
    2eb6:	63 dd       	rcall	.-1338   	; 0x297e <deSelectFlash>
			if (spi_FlashWaitUntilReady())
    2eb8:	91 de       	rcall	.-734    	; 0x2bdc <spi_FlashWaitUntilReady>
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <spi_FlashWriteToPage+0x76>
    2ebe:	64 c0       	rjmp	.+200    	; 0x2f88 <spi_FlashWriteToPage+0x13e>
    2ec0:	6c df       	rcall	.-296    	; 0x2d9a <spi_FlashEnableWrite>
			{
				if (spi_FlashEnableWrite())
    2ec2:	88 23       	and	r24, r24
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <spi_FlashWriteToPage+0x7e>
    2ec6:	56 c0       	rjmp	.+172    	; 0x2f74 <spi_FlashWriteToPage+0x12a>
				{
					union twoBytes addrInPage;
					addrInPage.word = address;
    2ec8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eca:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ecc:	99 87       	std	Y+9, r25	; 0x09
					selectFlash();
    2ece:	88 87       	std	Y+8, r24	; 0x08
    2ed0:	50 dd       	rcall	.-1376   	; 0x2972 <selectFlash>
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
    2ed2:	84 e8       	ldi	r24, 0x84	; 132
    2ed4:	b1 d3       	rcall	.+1890   	; 0x3638 <spiTransferByte>
    2ed6:	89 85       	ldd	r24, Y+9	; 0x09
					spiTransferByte(addrInPage.byte[1]);
    2ed8:	af d3       	rcall	.+1886   	; 0x3638 <spiTransferByte>
    2eda:	88 85       	ldd	r24, Y+8	; 0x08
    2edc:	ad d3       	rcall	.+1882   	; 0x3638 <spiTransferByte>
					spiTransferByte(addrInPage.byte[0]);
    2ede:	1b 82       	std	Y+3, r1	; 0x03
    2ee0:	0d c0       	rjmp	.+26     	; 0x2efc <spi_FlashWriteToPage+0xb2>
					for (uint8_t i = 0; i < nbytes; i++)
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	88 2f       	mov	r24, r24
					{
						spiTransferByte(buffer[i]);
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	28 89       	ldd	r18, Y+16	; 0x10
    2eea:	39 89       	ldd	r19, Y+17	; 0x11
    2eec:	82 0f       	add	r24, r18
    2eee:	93 1f       	adc	r25, r19
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	80 81       	ld	r24, Z
    2ef4:	a1 d3       	rcall	.+1858   	; 0x3638 <spiTransferByte>
					addrInPage.word = address;
					selectFlash();
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
					spiTransferByte(addrInPage.byte[1]);
					spiTransferByte(addrInPage.byte[0]);
					for (uint8_t i = 0; i < nbytes; i++)
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	9b 81       	ldd	r25, Y+3	; 0x03
					{
						spiTransferByte(buffer[i]);
					}
					deSelectFlash();
    2efe:	8a 89       	ldd	r24, Y+18	; 0x12
					if (spi_FlashWaitUntilReady())
    2f00:	98 17       	cp	r25, r24
    2f02:	78 f3       	brcs	.-34     	; 0x2ee2 <spi_FlashWriteToPage+0x98>
    2f04:	3c dd       	rcall	.-1416   	; 0x297e <deSelectFlash>
					{
						selectFlash();
    2f06:	6a de       	rcall	.-812    	; 0x2bdc <spi_FlashWaitUntilReady>
    2f08:	88 23       	and	r24, r24
						spiTransferByte(FLASH_PROGRAM_EXECUTE);
    2f0a:	51 f1       	breq	.+84     	; 0x2f60 <spi_FlashWriteToPage+0x116>
    2f0c:	32 dd       	rcall	.-1436   	; 0x2972 <selectFlash>
    2f0e:	80 e1       	ldi	r24, 0x10	; 16
						spiTransferByte(pageAddress.byte[2]);
    2f10:	93 d3       	rcall	.+1830   	; 0x3638 <spiTransferByte>
    2f12:	8e 81       	ldd	r24, Y+6	; 0x06
    2f14:	91 d3       	rcall	.+1826   	; 0x3638 <spiTransferByte>
						spiTransferByte(pageAddress.byte[1]);
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	8f d3       	rcall	.+1822   	; 0x3638 <spiTransferByte>
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
						spiTransferByte(pageAddress.byte[0]);
    2f1c:	8d d3       	rcall	.+1818   	; 0x3638 <spiTransferByte>
    2f1e:	2f dd       	rcall	.-1442   	; 0x297e <deSelectFlash>
    2f20:	5d de       	rcall	.-838    	; 0x2bdc <spi_FlashWaitUntilReady>
						deSelectFlash();
    2f22:	88 23       	and	r24, r24
    2f24:	99 f0       	breq	.+38     	; 0x2f4c <spi_FlashWriteToPage+0x102>
						if (spi_FlashWaitUntilReady())
    2f26:	65 df       	rcall	.-310    	; 0x2df2 <spi_FlashDisableWrite>
    2f28:	88 23       	and	r24, r24
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <spi_FlashWriteToPage+0xee>
    2f2c:	8a 89       	ldd	r24, Y+18	; 0x12
						{
							if (spi_FlashDisableWrite())
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
								ret = nbytes;
    2f36:	45 c0       	rjmp	.+138    	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2f38:	86 ec       	ldi	r24, 0xC6	; 198
    2f3a:	92 e0       	ldi	r25, 0x02	; 2
    2f3c:	29 2f       	mov	r18, r25
    2f3e:	2f 93       	push	r18
    2f40:	8f 93       	push	r24
							else
								printf_P(PSTR("spi_FlashWriteToPage: Flash won't disable write\n"));
    2f42:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	3b c0       	rjmp	.+118    	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2f4c:	87 ef       	ldi	r24, 0xF7	; 247
    2f4e:	92 e0       	ldi	r25, 0x02	; 2
    2f50:	29 2f       	mov	r18, r25
    2f52:	2f 93       	push	r18
    2f54:	8f 93       	push	r24
						}
						else
							printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    2f56:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	31 c0       	rjmp	.+98     	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2f60:	80 e3       	ldi	r24, 0x30	; 48
    2f62:	93 e0       	ldi	r25, 0x03	; 3
    2f64:	29 2f       	mov	r18, r25
    2f66:	2f 93       	push	r18
    2f68:	8f 93       	push	r24
					}
					else
						printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    2f6a:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	27 c0       	rjmp	.+78     	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2f74:	89 e6       	ldi	r24, 0x69	; 105
    2f76:	93 e0       	ldi	r25, 0x03	; 3
    2f78:	29 2f       	mov	r18, r25
    2f7a:	2f 93       	push	r18
    2f7c:	8f 93       	push	r24
				}
				else
					printf_P(PSTR("spi_FlashWriteToPage: Flash won't enable write\n"));
    2f7e:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	1d c0       	rjmp	.+58     	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2f88:	89 e9       	ldi	r24, 0x99	; 153
    2f8a:	93 e0       	ldi	r25, 0x03	; 3
    2f8c:	29 2f       	mov	r18, r25
    2f8e:	2f 93       	push	r18
    2f90:	8f 93       	push	r24
			}
			else
				printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after page read\n"));
    2f92:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	13 c0       	rjmp	.+38     	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2f9c:	82 ed       	ldi	r24, 0xD2	; 210
    2f9e:	93 e0       	ldi	r25, 0x03	; 3
    2fa0:	29 2f       	mov	r18, r25
    2fa2:	2f 93       	push	r18
    2fa4:	8f 93       	push	r24
		}
		else
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
    2fa6:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <spi_FlashWriteToPage+0x178>
    2fb0:	8b ef       	ldi	r24, 0xFB	; 251
    2fb2:	93 e0       	ldi	r25, 0x03	; 3
    2fb4:	29 2f       	mov	r18, r25
    2fb6:	2f 93       	push	r18
    2fb8:	8f 93       	push	r24
	}
	else
		printf_P(PSTR("spi_FlashWriteToPage: buffer crosses page boundary\n"));
    2fba:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	62 96       	adiw	r28, 0x12	; 18
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
	return ret;
    2fcc:	0f be       	out	0x3f, r0	; 63
}
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	0f 91       	pop	r16
    2fd6:	08 95       	ret

00002fd8 <spi_FlashWrite>:
    2fd8:	0f 93       	push	r16
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
*  Crosses page if necessary
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    2fe2:	60 97       	sbiw	r28, 0x10	; 16
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	6a 87       	std	Y+10, r22	; 0x0a
    2ff0:	7b 87       	std	Y+11, r23	; 0x0b
    2ff2:	8c 87       	std	Y+12, r24	; 0x0c
    2ff4:	9d 87       	std	Y+13, r25	; 0x0d
    2ff6:	5f 87       	std	Y+15, r21	; 0x0f
    2ff8:	4e 87       	std	Y+14, r20	; 0x0e
    2ffa:	28 8b       	std	Y+16, r18	; 0x10
	uint8_t ret = 0;
    2ffc:	19 82       	std	Y+1, r1	; 0x01
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    2ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3000:	9b 85       	ldd	r25, Y+11	; 0x0b
    3002:	ac 85       	ldd	r26, Y+12	; 0x0c
    3004:	bd 85       	ldd	r27, Y+13	; 0x0d
    3006:	07 2e       	mov	r0, r23
    3008:	7b e0       	ldi	r23, 0x0B	; 11
    300a:	b6 95       	lsr	r27
    300c:	a7 95       	ror	r26
    300e:	97 95       	ror	r25
    3010:	87 95       	ror	r24
    3012:	7a 95       	dec	r23
    3014:	d1 f7       	brne	.-12     	; 0x300a <spi_FlashWrite+0x32>
    3016:	70 2d       	mov	r23, r0
    3018:	8c 83       	std	Y+4, r24	; 0x04
    301a:	9d 83       	std	Y+5, r25	; 0x05
    301c:	ae 83       	std	Y+6, r26	; 0x06
    301e:	bf 83       	std	Y+7, r27	; 0x07
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    3020:	8a 85       	ldd	r24, Y+10	; 0x0a
    3022:	9b 85       	ldd	r25, Y+11	; 0x0b
    3024:	97 70       	andi	r25, 0x07	; 7
    3026:	99 87       	std	Y+9, r25	; 0x09
    3028:	88 87       	std	Y+8, r24	; 0x08
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    302a:	1b 82       	std	Y+3, r1	; 0x03
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    302c:	88 89       	ldd	r24, Y+16	; 0x10
    302e:	28 2f       	mov	r18, r24
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	88 85       	ldd	r24, Y+8	; 0x08
    3034:	99 85       	ldd	r25, Y+9	; 0x09
    3036:	82 0f       	add	r24, r18
    3038:	93 1f       	adc	r25, r19
    303a:	81 30       	cpi	r24, 0x01	; 1
    303c:	98 40       	sbci	r25, 0x08	; 8
    303e:	38 f0       	brcs	.+14     	; 0x304e <spi_FlashWrite+0x76>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    3040:	98 85       	ldd	r25, Y+8	; 0x08
    3042:	88 89       	ldd	r24, Y+16	; 0x10
    3044:	89 0f       	add	r24, r25
    3046:	8a 83       	std	Y+2, r24	; 0x02
		crossesPage = true;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8b 83       	std	Y+3, r24	; 0x03
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <spi_FlashWrite+0x7a>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    304e:	88 89       	ldd	r24, Y+16	; 0x10
    3050:	8a 83       	std	Y+2, r24	; 0x02
	}
    if (spi_FlashWriteToPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    3052:	2e 85       	ldd	r18, Y+14	; 0x0e
    3054:	3f 85       	ldd	r19, Y+15	; 0x0f
    3056:	48 85       	ldd	r20, Y+8	; 0x08
    3058:	59 85       	ldd	r21, Y+9	; 0x09
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	ae 81       	ldd	r26, Y+6	; 0x06
    3060:	bf 81       	ldd	r27, Y+7	; 0x07
    3062:	0a 81       	ldd	r16, Y+2	; 0x02
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	f0 de       	rcall	.-544    	; 0x2e4a <spi_FlashWriteToPage>
    306a:	98 2f       	mov	r25, r24
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
    306e:	98 17       	cp	r25, r24
    3070:	d1 f5       	brne	.+116    	; 0x30e6 <spi_FlashWrite+0x10e>
	{
		if (crossesPage)
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	88 23       	and	r24, r24
    3076:	a1 f1       	breq	.+104    	; 0x30e0 <spi_FlashWrite+0x108>
		{
			if (spi_FlashWriteToPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    3078:	98 89       	ldd	r25, Y+16	; 0x10
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	49 2f       	mov	r20, r25
    307e:	48 1b       	sub	r20, r24
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	88 2f       	mov	r24, r24
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	2e 85       	ldd	r18, Y+14	; 0x0e
    3088:	3f 85       	ldd	r19, Y+15	; 0x0f
    308a:	28 0f       	add	r18, r24
    308c:	39 1f       	adc	r19, r25
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	9d 81       	ldd	r25, Y+5	; 0x05
    3092:	ae 81       	ldd	r26, Y+6	; 0x06
    3094:	bf 81       	ldd	r27, Y+7	; 0x07
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	a1 1d       	adc	r26, r1
    309a:	b1 1d       	adc	r27, r1
    309c:	04 2f       	mov	r16, r20
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	d1 de       	rcall	.-606    	; 0x2e4a <spi_FlashWriteToPage>
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	88 89       	ldd	r24, Y+16	; 0x10
    30ae:	48 2f       	mov	r20, r24
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	88 2f       	mov	r24, r24
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	ba 01       	movw	r22, r20
    30ba:	68 1b       	sub	r22, r24
    30bc:	79 0b       	sbc	r23, r25
    30be:	cb 01       	movw	r24, r22
    30c0:	28 17       	cp	r18, r24
    30c2:	39 07       	cpc	r19, r25
    30c4:	19 f4       	brne	.+6      	; 0x30cc <spi_FlashWrite+0xf4>
			{
				// success
				ret = numBytes;
    30c6:	88 89       	ldd	r24, Y+16	; 0x10
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	16 c0       	rjmp	.+44     	; 0x30f8 <spi_FlashWrite+0x120>
			}
			else
				printf_P(PSTR("spi_FlashWrite: 2nd page write failed\n"));
    30cc:	8f e2       	ldi	r24, 0x2F	; 47
    30ce:	94 e0       	ldi	r25, 0x04	; 4
    30d0:	29 2f       	mov	r18, r25
    30d2:	2f 93       	push	r18
    30d4:	8f 93       	push	r24
    30d6:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0c c0       	rjmp	.+24     	; 0x30f8 <spi_FlashWrite+0x120>
		}
		else
		{
			// success
			ret = numBytes;
    30e0:	88 89       	ldd	r24, Y+16	; 0x10
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	09 c0       	rjmp	.+18     	; 0x30f8 <spi_FlashWrite+0x120>
		}
	}
	else
		printf_P(PSTR("spi_FlashWrite: 1st page write failed\n"));
    30e6:	86 e5       	ldi	r24, 0x56	; 86
    30e8:	94 e0       	ldi	r25, 0x04	; 4
    30ea:	29 2f       	mov	r18, r25
    30ec:	2f 93       	push	r18
    30ee:	8f 93       	push	r24
    30f0:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0

	return ret;
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30fa:	60 96       	adiw	r28, 0x10	; 16
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	0f 91       	pop	r16
    310c:	08 95       	ret

0000310e <spi_FlashReadFromPage>:
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	64 97       	sbiw	r28, 0x14	; 20
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	6c 87       	std	Y+12, r22	; 0x0c
    3128:	7d 87       	std	Y+13, r23	; 0x0d
    312a:	8e 87       	std	Y+14, r24	; 0x0e
    312c:	9f 87       	std	Y+15, r25	; 0x0f
    312e:	59 8b       	std	Y+17, r21	; 0x11
    3130:	48 8b       	std	Y+16, r20	; 0x10
    3132:	3b 8b       	std	Y+19, r19	; 0x13
    3134:	2a 8b       	std	Y+18, r18	; 0x12
    3136:	0c 8b       	std	Y+20, r16	; 0x14
	uint16_t ret = 0;
    3138:	1a 82       	std	Y+2, r1	; 0x02
    313a:	19 82       	std	Y+1, r1	; 0x01
	union fourBytes pageAddress;
	union twoBytes addrInPage;
	uint8_t byte0; 
	uint8_t byte1;
	
	pageAddress.word = paddress;
    313c:	8c 85       	ldd	r24, Y+12	; 0x0c
    313e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3140:	ae 85       	ldd	r26, Y+14	; 0x0e
    3142:	bf 85       	ldd	r27, Y+15	; 0x0f
    3144:	8e 83       	std	Y+6, r24	; 0x06
    3146:	9f 83       	std	Y+7, r25	; 0x07
    3148:	a8 87       	std	Y+8, r26	; 0x08
    314a:	b9 87       	std	Y+9, r27	; 0x09
	
	if ((address + nbytes) <= (FLASH_PAGE_MAX_BYTES + FLASH_NUM_SPARE_AREA_BYTES))
    314c:	8c 89       	ldd	r24, Y+20	; 0x14
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	88 89       	ldd	r24, Y+16	; 0x10
    3154:	99 89       	ldd	r25, Y+17	; 0x11
    3156:	82 0f       	add	r24, r18
    3158:	93 1f       	adc	r25, r19
    315a:	81 38       	cpi	r24, 0x81	; 129
    315c:	98 40       	sbci	r25, 0x08	; 8
    315e:	08 f0       	brcs	.+2      	; 0x3162 <spi_FlashReadFromPage+0x54>
    3160:	55 c0       	rjmp	.+170    	; 0x320c <spi_FlashReadFromPage+0xfe>
	{
		if (spi_FlashWaitUntilReady())
    3162:	3c dd       	rcall	.-1416   	; 0x2bdc <spi_FlashWaitUntilReady>
    3164:	88 23       	and	r24, r24
    3166:	09 f4       	brne	.+2      	; 0x316a <spi_FlashReadFromPage+0x5c>
    3168:	47 c0       	rjmp	.+142    	; 0x31f8 <spi_FlashReadFromPage+0xea>
		{
			selectFlash();
    316a:	03 dc       	rcall	.-2042   	; 0x2972 <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    316c:	83 e1       	ldi	r24, 0x13	; 19
    316e:	64 d2       	rcall	.+1224   	; 0x3638 <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    3170:	88 85       	ldd	r24, Y+8	; 0x08
    3172:	62 d2       	rcall	.+1220   	; 0x3638 <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    3174:	8f 81       	ldd	r24, Y+7	; 0x07
			spiTransferByte(pageAddress.byte[0]);
    3176:	60 d2       	rcall	.+1216   	; 0x3638 <spiTransferByte>
    3178:	8e 81       	ldd	r24, Y+6	; 0x06
    317a:	5e d2       	rcall	.+1212   	; 0x3638 <spiTransferByte>
			deSelectFlash();
    317c:	00 dc       	rcall	.-2048   	; 0x297e <deSelectFlash>
    317e:	2e dd       	rcall	.-1444   	; 0x2bdc <spi_FlashWaitUntilReady>
			if (spi_FlashWaitUntilReady())
    3180:	88 23       	and	r24, r24
    3182:	81 f1       	breq	.+96     	; 0x31e4 <spi_FlashReadFromPage+0xd6>
    3184:	88 89       	ldd	r24, Y+16	; 0x10
    3186:	99 89       	ldd	r25, Y+17	; 0x11
			{
				addrInPage.word = address;
    3188:	9b 87       	std	Y+11, r25	; 0x0b
    318a:	8a 87       	std	Y+10, r24	; 0x0a
    318c:	88 89       	ldd	r24, Y+16	; 0x10
				byte0 = address & 0x00ff;
    318e:	8c 83       	std	Y+4, r24	; 0x04
				byte1 = (address >> 8) & 0x00ff;
    3190:	88 89       	ldd	r24, Y+16	; 0x10
    3192:	99 89       	ldd	r25, Y+17	; 0x11
    3194:	89 2f       	mov	r24, r25
				selectFlash();
    3196:	99 27       	eor	r25, r25
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
    3198:	8d 83       	std	Y+5, r24	; 0x05
    319a:	eb db       	rcall	.-2090   	; 0x2972 <selectFlash>
    319c:	83 e0       	ldi	r24, 0x03	; 3
				//spiTransferByte(addrInPage.byte[1]);
				//spiTransferByte(addrInPage.byte[0]);
				spiTransferByte(byte1);
    319e:	4c d2       	rcall	.+1176   	; 0x3638 <spiTransferByte>
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	4a d2       	rcall	.+1172   	; 0x3638 <spiTransferByte>
				spiTransferByte(byte0);
    31a4:	8c 81       	ldd	r24, Y+4	; 0x04
    31a6:	48 d2       	rcall	.+1168   	; 0x3638 <spiTransferByte>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
				spiTransferByte(0);  // dummy byte required
    31aa:	46 d2       	rcall	.+1164   	; 0x3638 <spiTransferByte>
    31ac:	1b 82       	std	Y+3, r1	; 0x03
				for (uint8_t i = 0; i < nbytes; i++)
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <spi_FlashReadFromPage+0xc0>
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
				{
					buffer[i] = spiTransferByte(0);
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	2a 89       	ldd	r18, Y+18	; 0x12
    31b8:	3b 89       	ldd	r19, Y+19	; 0x13
    31ba:	89 01       	movw	r16, r18
    31bc:	08 0f       	add	r16, r24
    31be:	19 1f       	adc	r17, r25
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	3a d2       	rcall	.+1140   	; 0x3638 <spiTransferByte>
    31c4:	f8 01       	movw	r30, r16
    31c6:	80 83       	st	Z, r24
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
				//spiTransferByte(addrInPage.byte[1]);
				//spiTransferByte(addrInPage.byte[0]);
				spiTransferByte(byte1);
				spiTransferByte(byte0);
				spiTransferByte(0);  // dummy byte required
				for (uint8_t i = 0; i < nbytes; i++)
    31ca:	8f 5f       	subi	r24, 0xFF	; 255
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	8c 89       	ldd	r24, Y+20	; 0x14
    31d2:	98 17       	cp	r25, r24
    31d4:	68 f3       	brcs	.-38     	; 0x31b0 <spi_FlashReadFromPage+0xa2>
    31d6:	d3 db       	rcall	.-2138   	; 0x297e <deSelectFlash>
				{
					buffer[i] = spiTransferByte(0);
				}
				deSelectFlash();
    31d8:	8c 89       	ldd	r24, Y+20	; 0x14
    31da:	88 2f       	mov	r24, r24
				ret = nbytes;
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	1d c0       	rjmp	.+58     	; 0x321e <spi_FlashReadFromPage+0x110>
    31e4:	8d e7       	ldi	r24, 0x7D	; 125
    31e6:	94 e0       	ldi	r25, 0x04	; 4
			}
			else
				printf_P(PSTR("spi_FlashReadFromPage: Flash never ready after page read\n"));
    31e8:	29 2f       	mov	r18, r25
    31ea:	2f 93       	push	r18
    31ec:	8f 93       	push	r24
    31ee:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	13 c0       	rjmp	.+38     	; 0x321e <spi_FlashReadFromPage+0x110>
    31f8:	87 eb       	ldi	r24, 0xB7	; 183
    31fa:	94 e0       	ldi	r25, 0x04	; 4
		}
		else
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
    31fc:	29 2f       	mov	r18, r25
    31fe:	2f 93       	push	r18
    3200:	8f 93       	push	r24
    3202:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	09 c0       	rjmp	.+18     	; 0x321e <spi_FlashReadFromPage+0x110>
    320c:	81 ee       	ldi	r24, 0xE1	; 225
    320e:	94 e0       	ldi	r25, 0x04	; 4
	}
	else
		printf_P(PSTR("spi_FlashReadFromPage: buffer crosses page boundary\n"));
    3210:	29 2f       	mov	r18, r25
    3212:	2f 93       	push	r18
    3214:	8f 93       	push	r24
    3216:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	64 96       	adiw	r28, 0x14	; 20
	return ret;
    3222:	0f b6       	in	r0, 0x3f	; 63
}
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	08 95       	ret

00003236 <spi_FlashRead>:
    3236:	0f 93       	push	r16
    3238:	cf 93       	push	r28
*  Crosses page boundary if necessary
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    323a:	df 93       	push	r29
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	60 97       	sbiw	r28, 0x10	; 16
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	6a 87       	std	Y+10, r22	; 0x0a
    324e:	7b 87       	std	Y+11, r23	; 0x0b
    3250:	8c 87       	std	Y+12, r24	; 0x0c
    3252:	9d 87       	std	Y+13, r25	; 0x0d
    3254:	5f 87       	std	Y+15, r21	; 0x0f
    3256:	4e 87       	std	Y+14, r20	; 0x0e
    3258:	28 8b       	std	Y+16, r18	; 0x10
	uint8_t ret = 0;
    325a:	19 82       	std	Y+1, r1	; 0x01
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    325c:	8a 85       	ldd	r24, Y+10	; 0x0a
    325e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3260:	ac 85       	ldd	r26, Y+12	; 0x0c
    3262:	bd 85       	ldd	r27, Y+13	; 0x0d
    3264:	07 2e       	mov	r0, r23
    3266:	7b e0       	ldi	r23, 0x0B	; 11
    3268:	b6 95       	lsr	r27
    326a:	a7 95       	ror	r26
    326c:	97 95       	ror	r25
    326e:	87 95       	ror	r24
    3270:	7a 95       	dec	r23
    3272:	d1 f7       	brne	.-12     	; 0x3268 <spi_FlashRead+0x32>
    3274:	70 2d       	mov	r23, r0
    3276:	8c 83       	std	Y+4, r24	; 0x04
    3278:	9d 83       	std	Y+5, r25	; 0x05
    327a:	ae 83       	std	Y+6, r26	; 0x06
    327c:	bf 83       	std	Y+7, r27	; 0x07
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    327e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3280:	9b 85       	ldd	r25, Y+11	; 0x0b
    3282:	97 70       	andi	r25, 0x07	; 7
    3284:	99 87       	std	Y+9, r25	; 0x09
    3286:	88 87       	std	Y+8, r24	; 0x08
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    3288:	1b 82       	std	Y+3, r1	; 0x03
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    328a:	88 89       	ldd	r24, Y+16	; 0x10
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	88 85       	ldd	r24, Y+8	; 0x08
    3292:	99 85       	ldd	r25, Y+9	; 0x09
    3294:	82 0f       	add	r24, r18
    3296:	93 1f       	adc	r25, r19
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	98 40       	sbci	r25, 0x08	; 8
    329c:	38 f0       	brcs	.+14     	; 0x32ac <spi_FlashRead+0x76>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    329e:	98 85       	ldd	r25, Y+8	; 0x08
    32a0:	88 89       	ldd	r24, Y+16	; 0x10
    32a2:	89 0f       	add	r24, r25
    32a4:	8a 83       	std	Y+2, r24	; 0x02
		crossesPage = true;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	8b 83       	std	Y+3, r24	; 0x03
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <spi_FlashRead+0x7a>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    32ac:	88 89       	ldd	r24, Y+16	; 0x10
    32ae:	8a 83       	std	Y+2, r24	; 0x02
	}
    if (spi_FlashReadFromPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    32b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    32b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    32b4:	48 85       	ldd	r20, Y+8	; 0x08
    32b6:	59 85       	ldd	r21, Y+9	; 0x09
    32b8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ba:	9d 81       	ldd	r25, Y+5	; 0x05
    32bc:	ae 81       	ldd	r26, Y+6	; 0x06
    32be:	bf 81       	ldd	r27, Y+7	; 0x07
    32c0:	0a 81       	ldd	r16, Y+2	; 0x02
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	23 df       	rcall	.-442    	; 0x310e <spi_FlashReadFromPage>
    32c8:	98 2f       	mov	r25, r24
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	98 17       	cp	r25, r24
    32ce:	d1 f5       	brne	.+116    	; 0x3344 <spi_FlashRead+0x10e>
	{
		if (crossesPage)
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	88 23       	and	r24, r24
    32d4:	a1 f1       	breq	.+104    	; 0x333e <spi_FlashRead+0x108>
		{
			if (spi_FlashReadFromPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    32d6:	98 89       	ldd	r25, Y+16	; 0x10
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	49 2f       	mov	r20, r25
    32dc:	48 1b       	sub	r20, r24
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	2e 85       	ldd	r18, Y+14	; 0x0e
    32e6:	3f 85       	ldd	r19, Y+15	; 0x0f
    32e8:	28 0f       	add	r18, r24
    32ea:	39 1f       	adc	r19, r25
    32ec:	8c 81       	ldd	r24, Y+4	; 0x04
    32ee:	9d 81       	ldd	r25, Y+5	; 0x05
    32f0:	ae 81       	ldd	r26, Y+6	; 0x06
    32f2:	bf 81       	ldd	r27, Y+7	; 0x07
    32f4:	01 96       	adiw	r24, 0x01	; 1
    32f6:	a1 1d       	adc	r26, r1
    32f8:	b1 1d       	adc	r27, r1
    32fa:	04 2f       	mov	r16, r20
    32fc:	40 e0       	ldi	r20, 0x00	; 0
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	04 df       	rcall	.-504    	; 0x310e <spi_FlashReadFromPage>
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	88 89       	ldd	r24, Y+16	; 0x10
    330c:	48 2f       	mov	r20, r24
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	88 2f       	mov	r24, r24
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	ba 01       	movw	r22, r20
    3318:	68 1b       	sub	r22, r24
    331a:	79 0b       	sbc	r23, r25
    331c:	cb 01       	movw	r24, r22
    331e:	28 17       	cp	r18, r24
    3320:	39 07       	cpc	r19, r25
    3322:	19 f4       	brne	.+6      	; 0x332a <spi_FlashRead+0xf4>
			{
				// success
				ret = numBytes;
    3324:	88 89       	ldd	r24, Y+16	; 0x10
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	16 c0       	rjmp	.+44     	; 0x3356 <spi_FlashRead+0x120>
			}
			else
				printf_P(PSTR("spi_FlashRead: 2nd page read failed\n"));
    332a:	86 e1       	ldi	r24, 0x16	; 22
    332c:	95 e0       	ldi	r25, 0x05	; 5
    332e:	29 2f       	mov	r18, r25
    3330:	2f 93       	push	r18
    3332:	8f 93       	push	r24
    3334:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0c c0       	rjmp	.+24     	; 0x3356 <spi_FlashRead+0x120>
		}
		else
		{
			// success
			ret = numBytes;
    333e:	88 89       	ldd	r24, Y+16	; 0x10
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	09 c0       	rjmp	.+18     	; 0x3356 <spi_FlashRead+0x120>
		}
	}
	else
		printf_P(PSTR("spi_FlashRead: 1st page read failed\n"));
    3344:	8b e3       	ldi	r24, 0x3B	; 59
    3346:	95 e0       	ldi	r25, 0x05	; 5
    3348:	29 2f       	mov	r18, r25
    334a:	2f 93       	push	r18
    334c:	8f 93       	push	r24
    334e:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0

	return ret;
    3356:	89 81       	ldd	r24, Y+1	; 0x01
}
    3358:	60 96       	adiw	r28, 0x10	; 16
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <spi_FlashEraseBlock>:
/***********************************
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	2a 97       	sbiw	r28, 0x0a	; 10
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	6f 83       	std	Y+7, r22	; 0x07
    3382:	78 87       	std	Y+8, r23	; 0x08
    3384:	89 87       	std	Y+9, r24	; 0x09
    3386:	9a 87       	std	Y+10, r25	; 0x0a
	uint16_t ret = 0;
    3388:	1a 82       	std	Y+2, r1	; 0x02
    338a:	19 82       	std	Y+1, r1	; 0x01
	union fourBytes blockAddress;
	
	blockAddress.word = baddress;
    338c:	8f 81       	ldd	r24, Y+7	; 0x07
    338e:	98 85       	ldd	r25, Y+8	; 0x08
    3390:	a9 85       	ldd	r26, Y+9	; 0x09
    3392:	ba 85       	ldd	r27, Y+10	; 0x0a
    3394:	8b 83       	std	Y+3, r24	; 0x03
    3396:	9c 83       	std	Y+4, r25	; 0x04
    3398:	ad 83       	std	Y+5, r26	; 0x05
    339a:	be 83       	std	Y+6, r27	; 0x06
	
	if (baddress <  FLASH_MAX_NUM_BLOCKS)
    339c:	8f 81       	ldd	r24, Y+7	; 0x07
    339e:	98 85       	ldd	r25, Y+8	; 0x08
    33a0:	a9 85       	ldd	r26, Y+9	; 0x09
    33a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    33a4:	81 15       	cp	r24, r1
    33a6:	98 40       	sbci	r25, 0x08	; 8
    33a8:	a1 05       	cpc	r26, r1
    33aa:	b1 05       	cpc	r27, r1
    33ac:	08 f0       	brcs	.+2      	; 0x33b0 <spi_FlashEraseBlock+0x44>
    33ae:	44 c0       	rjmp	.+136    	; 0x3438 <spi_FlashEraseBlock+0xcc>
	{
		if (spi_FlashWaitUntilReady())
    33b0:	15 dc       	rcall	.-2006   	; 0x2bdc <spi_FlashWaitUntilReady>
    33b2:	88 23       	and	r24, r24
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <spi_FlashEraseBlock+0x4c>
    33b6:	36 c0       	rjmp	.+108    	; 0x3424 <spi_FlashEraseBlock+0xb8>
		{
			if (spi_FlashEnableWrite())
    33b8:	f0 dc       	rcall	.-1568   	; 0x2d9a <spi_FlashEnableWrite>
    33ba:	88 23       	and	r24, r24
    33bc:	49 f1       	breq	.+82     	; 0x3410 <spi_FlashEraseBlock+0xa4>
			{
				selectFlash();
    33be:	d9 da       	rcall	.-2638   	; 0x2972 <selectFlash>
				spiTransferByte(FLASH_BLOCK_ERASE);
    33c0:	88 ed       	ldi	r24, 0xD8	; 216
    33c2:	3a d1       	rcall	.+628    	; 0x3638 <spiTransferByte>
				spiTransferByte(blockAddress.byte[2]);
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	38 d1       	rcall	.+624    	; 0x3638 <spiTransferByte>
				spiTransferByte(blockAddress.byte[1]);
    33c8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ca:	36 d1       	rcall	.+620    	; 0x3638 <spiTransferByte>
				spiTransferByte(blockAddress.byte[0]);
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	34 d1       	rcall	.+616    	; 0x3638 <spiTransferByte>
				deSelectFlash();
    33d0:	d6 da       	rcall	.-2644   	; 0x297e <deSelectFlash>
    33d2:	04 dc       	rcall	.-2040   	; 0x2bdc <spi_FlashWaitUntilReady>
				if (spi_FlashWaitUntilReady())
    33d4:	88 23       	and	r24, r24
    33d6:	91 f0       	breq	.+36     	; 0x33fc <spi_FlashEraseBlock+0x90>
    33d8:	0c dd       	rcall	.-1512   	; 0x2df2 <spi_FlashDisableWrite>
    33da:	88 23       	and	r24, r24
				{
					if (spi_FlashDisableWrite())
    33dc:	29 f0       	breq	.+10     	; 0x33e8 <spi_FlashEraseBlock+0x7c>
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	9a 83       	std	Y+2, r25	; 0x02
						ret = 1;
    33e4:	89 83       	std	Y+1, r24	; 0x01
    33e6:	31 c0       	rjmp	.+98     	; 0x344a <spi_FlashEraseBlock+0xde>
    33e8:	80 e6       	ldi	r24, 0x60	; 96
    33ea:	95 e0       	ldi	r25, 0x05	; 5
    33ec:	29 2f       	mov	r18, r25
					else
						printf_P(PSTR("spi_FlashEraseBlock: Write diasble failed\n"));
    33ee:	2f 93       	push	r18
    33f0:	8f 93       	push	r24
    33f2:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	27 c0       	rjmp	.+78     	; 0x344a <spi_FlashEraseBlock+0xde>
    33fc:	8b e8       	ldi	r24, 0x8B	; 139
    33fe:	95 e0       	ldi	r25, 0x05	; 5
    3400:	29 2f       	mov	r18, r25
				}
				else
					printf_P(PSTR("spi_FlashEraseBlock: Flash never ready after block erase\n"));
    3402:	2f 93       	push	r18
    3404:	8f 93       	push	r24
    3406:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	1d c0       	rjmp	.+58     	; 0x344a <spi_FlashEraseBlock+0xde>
    3410:	85 ec       	ldi	r24, 0xC5	; 197
    3412:	95 e0       	ldi	r25, 0x05	; 5
    3414:	29 2f       	mov	r18, r25
			}
			else
				printf_P(PSTR("spi_FlashEraseBlock: Flash won't enable write\n"));
    3416:	2f 93       	push	r18
    3418:	8f 93       	push	r24
    341a:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	13 c0       	rjmp	.+38     	; 0x344a <spi_FlashEraseBlock+0xde>
    3424:	84 ef       	ldi	r24, 0xF4	; 244
    3426:	95 e0       	ldi	r25, 0x05	; 5
    3428:	29 2f       	mov	r18, r25

		}
		else
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
    342a:	2f 93       	push	r18
    342c:	8f 93       	push	r24
    342e:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	09 c0       	rjmp	.+18     	; 0x344a <spi_FlashEraseBlock+0xde>
    3438:	8c e1       	ldi	r24, 0x1C	; 28
    343a:	96 e0       	ldi	r25, 0x06	; 6
    343c:	29 2f       	mov	r18, r25
	}
	else
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
    343e:	2f 93       	push	r18
    3440:	8f 93       	push	r24
    3442:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	2a 96       	adiw	r28, 0x0a	; 10
    344e:	0f b6       	in	r0, 0x3f	; 63
	return ret;
    3450:	f8 94       	cli
}
    3452:	de bf       	out	0x3e, r29	; 62
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	cd bf       	out	0x3d, r28	; 61
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

0000345e <spi_FlashEraseAllBlocks>:
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	cd b7       	in	r28, 0x3d	; 61

uint8_t spi_FlashEraseAllBlocks()
{
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	29 97       	sbiw	r28, 0x09	; 9
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
	uint8_t ret = true;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	89 83       	std	Y+1, r24	; 0x01
	uint16_t blockNum = 0;
    3476:	1b 82       	std	Y+3, r1	; 0x03
    3478:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t blockAddr;
	uint16_t numBlocks = FLASH_MAX_NUM_BLOCKS;
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	98 e0       	ldi	r25, 0x08	; 8
    347e:	9d 83       	std	Y+5, r25	; 0x05
    3480:	8c 83       	std	Y+4, r24	; 0x04
	
	spi_FlashReset();
    3482:	4b d0       	rcall	.+150    	; 0x351a <spi_FlashReset>
	spi_FlashUnlockAllBlocks();
    3484:	67 dc       	rcall	.-1842   	; 0x2d54 <spi_FlashUnlockAllBlocks>
    3486:	1b 82       	std	Y+3, r1	; 0x03
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    3488:	1a 82       	std	Y+2, r1	; 0x02
    348a:	36 c0       	rjmp	.+108    	; 0x34f8 <spi_FlashEraseAllBlocks+0x9a>
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		blockAddr = blockNum;
    348e:	9b 81       	ldd	r25, Y+3	; 0x03
    3490:	cc 01       	movw	r24, r24
    3492:	a0 e0       	ldi	r26, 0x00	; 0
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	8e 83       	std	Y+6, r24	; 0x06
    3498:	9f 83       	std	Y+7, r25	; 0x07
    349a:	a8 87       	std	Y+8, r26	; 0x08
    349c:	b9 87       	std	Y+9, r27	; 0x09
    349e:	83 e5       	ldi	r24, 0x53	; 83
		printf_P(PSTR("Erasing block %d\n"),blockNum);
    34a0:	96 e0       	ldi	r25, 0x06	; 6
    34a2:	2b 81       	ldd	r18, Y+3	; 0x03
    34a4:	2f 93       	push	r18
    34a6:	2a 81       	ldd	r18, Y+2	; 0x02
    34a8:	2f 93       	push	r18
    34aa:	29 2f       	mov	r18, r25
    34ac:	2f 93       	push	r18
    34ae:	8f 93       	push	r24
    34b0:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	8e 81       	ldd	r24, Y+6	; 0x06
		if (!spi_FlashEraseBlock(blockAddr))
    34be:	9f 81       	ldd	r25, Y+7	; 0x07
    34c0:	a8 85       	ldd	r26, Y+8	; 0x08
    34c2:	b9 85       	ldd	r27, Y+9	; 0x09
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	51 df       	rcall	.-350    	; 0x336c <spi_FlashEraseBlock>
    34ca:	88 23       	and	r24, r24
    34cc:	81 f4       	brne	.+32     	; 0x34ee <spi_FlashEraseAllBlocks+0x90>
    34ce:	85 e6       	ldi	r24, 0x65	; 101
		{
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
    34d0:	96 e0       	ldi	r25, 0x06	; 6
    34d2:	2b 81       	ldd	r18, Y+3	; 0x03
    34d4:	2f 93       	push	r18
    34d6:	2a 81       	ldd	r18, Y+2	; 0x02
    34d8:	2f 93       	push	r18
    34da:	29 2f       	mov	r18, r25
    34dc:	2f 93       	push	r18
    34de:	8f 93       	push	r24
    34e0:	0e 94 86 28 	call	0x510c	; 0x510c <printf_P>
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	19 82       	std	Y+1, r1	; 0x01
			ret = false;
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
	uint16_t numBlocks = FLASH_MAX_NUM_BLOCKS;
	
	spi_FlashReset();
	spi_FlashUnlockAllBlocks();
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	01 96       	adiw	r24, 0x01	; 1
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	2a 81       	ldd	r18, Y+2	; 0x02
    34fa:	3b 81       	ldd	r19, Y+3	; 0x03
    34fc:	8c 81       	ldd	r24, Y+4	; 0x04
    34fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3500:	28 17       	cp	r18, r24
    3502:	39 07       	cpc	r19, r25
    3504:	18 f2       	brcs	.-122    	; 0x348c <spi_FlashEraseAllBlocks+0x2e>
    3506:	89 81       	ldd	r24, Y+1	; 0x01
		{
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
			ret = false;
		}
	}
	return ret;
    3508:	29 96       	adiw	r28, 0x09	; 9
}
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	08 95       	ret

0000351a <spi_FlashReset>:
    351a:	cf 93       	push	r28

uint8_t spi_FlashReset(void)
{
    351c:	df 93       	push	r29
    351e:	1f 92       	push	r1
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
		
	selectFlash();
    3524:	26 da       	rcall	.-2996   	; 0x2972 <selectFlash>
	spiTransferByte(FLASH_RESET);
    3526:	8f ef       	ldi	r24, 0xFF	; 255
	deSelectFlash();
    3528:	87 d0       	rcall	.+270    	; 0x3638 <spiTransferByte>
    352a:	29 da       	rcall	.-2990   	; 0x297e <deSelectFlash>
	status = spi_FlashGetStatusRegister();
    352c:	85 db       	rcall	.-2294   	; 0x2c38 <spi_FlashGetStatusRegister>
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	89 81       	ldd	r24, Y+1	; 0x01
	printf("spi_Reset: status is 0x%02x\n", status);
    3532:	88 2f       	mov	r24, r24
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	29 2f       	mov	r18, r25
    3538:	2f 93       	push	r18
    353a:	8f 93       	push	r24
    353c:	88 e6       	ldi	r24, 0x68	; 104
    353e:	93 e0       	ldi	r25, 0x03	; 3
    3540:	89 2f       	mov	r24, r25
    3542:	8f 93       	push	r24
    3544:	88 e6       	ldi	r24, 0x68	; 104
    3546:	93 e0       	ldi	r25, 0x03	; 3
    3548:	8f 93       	push	r24
    354a:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	89 81       	ldd	r24, Y+1	; 0x01
	
	return status; 
    3558:	0f 90       	pop	r0
}
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	08 95       	ret

00003560 <RTC_config>:
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	1f 92       	push	r1
    3568:	1f 92       	push	r1
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	85 e0       	ldi	r24, 0x05	; 5
    3570:	89 83       	std	Y+1, r24	; 0x01
    3572:	8e e6       	ldi	r24, 0x6E	; 110
    3574:	96 e0       	ldi	r25, 0x06	; 6
    3576:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    357a:	10 e0       	ldi	r17, 0x00	; 0
    357c:	29 c0       	rjmp	.+82     	; 0x35d0 <RTC_config+0x70>
    357e:	41 e0       	ldi	r20, 0x01	; 1
    3580:	be 01       	movw	r22, r28
    3582:	6e 5f       	subi	r22, 0xFE	; 254
    3584:	7f 4f       	sbci	r23, 0xFF	; 255
    3586:	8f e0       	ldi	r24, 0x0F	; 15
    3588:	41 d2       	rcall	.+1154   	; 0x3a0c <spi_RTC_Read>
    358a:	8a 81       	ldd	r24, Y+2	; 0x02
    358c:	85 30       	cpi	r24, 0x05	; 5
    358e:	11 f1       	breq	.+68     	; 0x35d4 <RTC_config+0x74>
    3590:	41 e0       	ldi	r20, 0x01	; 1
    3592:	be 01       	movw	r22, r28
    3594:	6f 5f       	subi	r22, 0xFF	; 255
    3596:	7f 4f       	sbci	r23, 0xFF	; 255
    3598:	8f e0       	ldi	r24, 0x0F	; 15
    359a:	20 d2       	rcall	.+1088   	; 0x39dc <spi_RTC_Write>
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	1f 92       	push	r1
    35a0:	8f 93       	push	r24
    35a2:	1f 92       	push	r1
    35a4:	1f 93       	push	r17
    35a6:	8f e7       	ldi	r24, 0x7F	; 127
    35a8:	96 e0       	ldi	r25, 0x06	; 6
    35aa:	9f 93       	push	r25
    35ac:	8f 93       	push	r24
    35ae:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	1f 92       	push	r1
    35b6:	8f 93       	push	r24
    35b8:	80 e9       	ldi	r24, 0x90	; 144
    35ba:	96 e0       	ldi	r25, 0x06	; 6
    35bc:	9f 93       	push	r25
    35be:	8f 93       	push	r24
    35c0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    35c4:	1f 5f       	subi	r17, 0xFF	; 255
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	cd bf       	out	0x3d, r28	; 61
    35d0:	14 31       	cpi	r17, 0x14	; 20
    35d2:	a8 f2       	brcs	.-86     	; 0x357e <RTC_config+0x1e>
    35d4:	14 31       	cpi	r17, 0x14	; 20
    35d6:	20 f0       	brcs	.+8      	; 0x35e0 <RTC_config+0x80>
    35d8:	8f e9       	ldi	r24, 0x9F	; 159
    35da:	96 e0       	ldi	r25, 0x06	; 6
    35dc:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	08 95       	ret

000035ec <RTC_readCLKF>:
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	1f 92       	push	r1
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	41 e0       	ldi	r20, 0x01	; 1
    35f8:	be 01       	movw	r22, r28
    35fa:	6f 5f       	subi	r22, 0xFF	; 255
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	8f e0       	ldi	r24, 0x0F	; 15
    3600:	05 d2       	rcall	.+1034   	; 0x3a0c <spi_RTC_Read>
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	1f 92       	push	r1
    3606:	8f 93       	push	r24
    3608:	86 ec       	ldi	r24, 0xC6	; 198
    360a:	96 e0       	ldi	r25, 0x06	; 6
    360c:	9f 93       	push	r25
    360e:	8f 93       	push	r24
    3610:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	08 95       	ret

00003624 <init_spi>:
    3624:	1d bc       	out	0x2d, r1	; 45
    3626:	81 e5       	ldi	r24, 0x51	; 81
    3628:	8c bd       	out	0x2c, r24	; 44
    362a:	a9 d9       	rcall	.-3246   	; 0x297e <deSelectFlash>
    362c:	7a d9       	rcall	.-3340   	; 0x2922 <deSelectFRAM>
    362e:	83 d9       	rcall	.-3322   	; 0x2936 <deSelectOpticsDAC>
    3630:	ac d9       	rcall	.-3240   	; 0x298a <deSelectRTC>
    3632:	99 d9       	rcall	.-3278   	; 0x2966 <deSelectBuckCtrlDAC>
    3634:	8c c9       	rjmp	.-3304   	; 0x294e <deSelectADC2518>
    3636:	08 95       	ret

00003638 <spiTransferByte>:
    3638:	8e bd       	out	0x2e, r24	; 46
    363a:	0d b4       	in	r0, 0x2d	; 45
    363c:	07 fe       	sbrs	r0, 7
    363e:	fd cf       	rjmp	.-6      	; 0x363a <spiTransferByte+0x2>
    3640:	8e b5       	in	r24, 0x2e	; 46
    3642:	08 95       	ret

00003644 <spiSendBytes>:
    3644:	fc 01       	movw	r30, r24
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	0a c0       	rjmp	.+20     	; 0x3660 <spiSendBytes+0x1c>
    364c:	cf 01       	movw	r24, r30
    364e:	01 96       	adiw	r24, 0x01	; 1
    3650:	40 81       	ld	r20, Z
    3652:	4e bd       	out	0x2e, r20	; 46
    3654:	0d b4       	in	r0, 0x2d	; 45
    3656:	07 fe       	sbrs	r0, 7
    3658:	fd cf       	rjmp	.-6      	; 0x3654 <spiSendBytes+0x10>
    365a:	2f 5f       	subi	r18, 0xFF	; 255
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	fc 01       	movw	r30, r24
    3660:	26 17       	cp	r18, r22
    3662:	37 07       	cpc	r19, r23
    3664:	98 f3       	brcs	.-26     	; 0x364c <spiSendBytes+0x8>
    3666:	08 95       	ret

00003668 <spiGetBytes>:
    3668:	fc 01       	movw	r30, r24
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	09 c0       	rjmp	.+18     	; 0x3682 <spiGetBytes+0x1a>
    3670:	1e bc       	out	0x2e, r1	; 46
    3672:	0d b4       	in	r0, 0x2d	; 45
    3674:	07 fe       	sbrs	r0, 7
    3676:	fd cf       	rjmp	.-6      	; 0x3672 <spiGetBytes+0xa>
    3678:	8e b5       	in	r24, 0x2e	; 46
    367a:	80 83       	st	Z, r24
    367c:	2f 5f       	subi	r18, 0xFF	; 255
    367e:	3f 4f       	sbci	r19, 0xFF	; 255
    3680:	31 96       	adiw	r30, 0x01	; 1
    3682:	26 17       	cp	r18, r22
    3684:	37 07       	cpc	r19, r23
    3686:	a0 f3       	brcs	.-24     	; 0x3670 <spiGetBytes+0x8>
    3688:	08 95       	ret

0000368a <spiSend2ByteBigEndian>:
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	1f 92       	push	r1
    3690:	1f 92       	push	r1
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	9a 83       	std	Y+2, r25	; 0x02
    3698:	89 83       	std	Y+1, r24	; 0x01
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	8e bd       	out	0x2e, r24	; 46
    369e:	0d b4       	in	r0, 0x2d	; 45
    36a0:	07 fe       	sbrs	r0, 7
    36a2:	fd cf       	rjmp	.-6      	; 0x369e <spiSend2ByteBigEndian+0x14>
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	8e bd       	out	0x2e, r24	; 46
    36a8:	0d b4       	in	r0, 0x2d	; 45
    36aa:	07 fe       	sbrs	r0, 7
    36ac:	fd cf       	rjmp	.-6      	; 0x36a8 <spiSend2ByteBigEndian+0x1e>
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	08 95       	ret

000036b8 <spi_buckCtrlDac>:
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	eb 01       	movw	r28, r22
    36c4:	18 2f       	mov	r17, r24
    36c6:	17 70       	andi	r17, 0x07	; 7
    36c8:	90 e1       	ldi	r25, 0x10	; 16
    36ca:	19 9f       	mul	r17, r25
    36cc:	90 01       	movw	r18, r0
    36ce:	11 24       	eor	r1, r1
    36d0:	e7 2e       	mov	r14, r23
    36d2:	ff 24       	eor	r15, r15
    36d4:	ab 01       	movw	r20, r22
    36d6:	55 27       	eor	r21, r21
    36d8:	5f 93       	push	r21
    36da:	4f 93       	push	r20
    36dc:	2e 29       	or	r18, r14
    36de:	3f 29       	or	r19, r15
    36e0:	3f 93       	push	r19
    36e2:	2f 93       	push	r18
    36e4:	df 93       	push	r29
    36e6:	6f 93       	push	r22
    36e8:	1f 92       	push	r1
    36ea:	8f 93       	push	r24
    36ec:	8e ed       	ldi	r24, 0xDE	; 222
    36ee:	96 e0       	ldi	r25, 0x06	; 6
    36f0:	9f 93       	push	r25
    36f2:	8f 93       	push	r24
    36f4:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    36f8:	30 d9       	rcall	.-3488   	; 0x295a <selectBuckCtrlDAC>
    36fa:	81 2f       	mov	r24, r17
    36fc:	82 95       	swap	r24
    36fe:	80 7f       	andi	r24, 0xF0	; 240
    3700:	8e 29       	or	r24, r14
    3702:	9a df       	rcall	.-204    	; 0x3638 <spiTransferByte>
    3704:	8c 2f       	mov	r24, r28
    3706:	98 df       	rcall	.-208    	; 0x3638 <spiTransferByte>
    3708:	2e d9       	rcall	.-3492   	; 0x2966 <deSelectBuckCtrlDAC>
    370a:	8d b7       	in	r24, 0x3d	; 61
    370c:	9e b7       	in	r25, 0x3e	; 62
    370e:	0a 96       	adiw	r24, 0x0a	; 10
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	9e bf       	out	0x3e, r25	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	8d bf       	out	0x3d, r24	; 61
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	1f 91       	pop	r17
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	08 95       	ret

00003726 <spi_OpticsDAC>:
    3726:	ef 92       	push	r14
    3728:	ff 92       	push	r15
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	eb 01       	movw	r28, r22
    3732:	18 2f       	mov	r17, r24
    3734:	17 70       	andi	r17, 0x07	; 7
    3736:	90 e1       	ldi	r25, 0x10	; 16
    3738:	19 9f       	mul	r17, r25
    373a:	90 01       	movw	r18, r0
    373c:	11 24       	eor	r1, r1
    373e:	e7 2e       	mov	r14, r23
    3740:	ff 24       	eor	r15, r15
    3742:	ab 01       	movw	r20, r22
    3744:	55 27       	eor	r21, r21
    3746:	5f 93       	push	r21
    3748:	4f 93       	push	r20
    374a:	2e 29       	or	r18, r14
    374c:	3f 29       	or	r19, r15
    374e:	3f 93       	push	r19
    3750:	2f 93       	push	r18
    3752:	df 93       	push	r29
    3754:	6f 93       	push	r22
    3756:	1f 92       	push	r1
    3758:	8f 93       	push	r24
    375a:	8f e0       	ldi	r24, 0x0F	; 15
    375c:	97 e0       	ldi	r25, 0x07	; 7
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3766:	e1 d8       	rcall	.-3646   	; 0x292a <selectOpticsDAC>
    3768:	81 2f       	mov	r24, r17
    376a:	82 95       	swap	r24
    376c:	80 7f       	andi	r24, 0xF0	; 240
    376e:	8e 29       	or	r24, r14
    3770:	63 df       	rcall	.-314    	; 0x3638 <spiTransferByte>
    3772:	8c 2f       	mov	r24, r28
    3774:	61 df       	rcall	.-318    	; 0x3638 <spiTransferByte>
    3776:	df d8       	rcall	.-3650   	; 0x2936 <deSelectOpticsDAC>
    3778:	8d b7       	in	r24, 0x3d	; 61
    377a:	9e b7       	in	r25, 0x3e	; 62
    377c:	0a 96       	adiw	r24, 0x0a	; 10
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	9e bf       	out	0x3e, r25	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	8d bf       	out	0x3d, r24	; 61
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	ff 90       	pop	r15
    3790:	ef 90       	pop	r14
    3792:	08 95       	ret

00003794 <spi_OpticsDAC_BroadCast>:
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	c8 2f       	mov	r28, r24
    379a:	d9 2f       	mov	r29, r25
    379c:	80 e4       	ldi	r24, 0x40	; 64
    379e:	97 e0       	ldi	r25, 0x07	; 7
    37a0:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    37a4:	c2 d8       	rcall	.-3708   	; 0x292a <selectOpticsDAC>
    37a6:	8d 2f       	mov	r24, r29
    37a8:	80 6c       	ori	r24, 0xC0	; 192
    37aa:	46 df       	rcall	.-372    	; 0x3638 <spiTransferByte>
    37ac:	8c 2f       	mov	r24, r28
    37ae:	44 df       	rcall	.-376    	; 0x3638 <spiTransferByte>
    37b0:	c2 d8       	rcall	.-3708   	; 0x2936 <deSelectOpticsDAC>
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	08 95       	ret

000037b8 <spi_OpticsBuckCtl_BroadCast>:
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	c8 2f       	mov	r28, r24
    37be:	d9 2f       	mov	r29, r25
    37c0:	87 e5       	ldi	r24, 0x57	; 87
    37c2:	97 e0       	ldi	r25, 0x07	; 7
    37c4:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    37c8:	c8 d8       	rcall	.-3696   	; 0x295a <selectBuckCtrlDAC>
    37ca:	8d 2f       	mov	r24, r29
    37cc:	80 6c       	ori	r24, 0xC0	; 192
    37ce:	34 df       	rcall	.-408    	; 0x3638 <spiTransferByte>
    37d0:	8c 2f       	mov	r24, r28
    37d2:	32 df       	rcall	.-412    	; 0x3638 <spiTransferByte>
    37d4:	c8 d8       	rcall	.-3696   	; 0x2966 <deSelectBuckCtrlDAC>
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	08 95       	ret

000037dc <spi_FRAM_writeEnable>:
    37dc:	9e d8       	rcall	.-3780   	; 0x291a <selectFRAM>
    37de:	86 e0       	ldi	r24, 0x06	; 6
    37e0:	2b df       	rcall	.-426    	; 0x3638 <spiTransferByte>
    37e2:	9f c8       	rjmp	.-3778   	; 0x2922 <deSelectFRAM>
    37e4:	08 95       	ret

000037e6 <FRAM_ReadStatusRegister>:
    37e6:	cf 93       	push	r28
    37e8:	98 d8       	rcall	.-3792   	; 0x291a <selectFRAM>
    37ea:	85 e0       	ldi	r24, 0x05	; 5
    37ec:	25 df       	rcall	.-438    	; 0x3638 <spiTransferByte>
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	23 df       	rcall	.-442    	; 0x3638 <spiTransferByte>
    37f2:	c8 2f       	mov	r28, r24
    37f4:	96 d8       	rcall	.-3796   	; 0x2922 <deSelectFRAM>
    37f6:	1f 92       	push	r1
    37f8:	cf 93       	push	r28
    37fa:	80 ed       	ldi	r24, 0xD0	; 208
    37fc:	98 e0       	ldi	r25, 0x08	; 8
    37fe:	9f 93       	push	r25
    3800:	8f 93       	push	r24
    3802:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	8c 2f       	mov	r24, r28
    3810:	cf 91       	pop	r28
    3812:	08 95       	ret

00003814 <spi_FRAM_write>:
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	8c 01       	movw	r16, r24
    3822:	7b 01       	movw	r14, r22
    3824:	ea 01       	movw	r28, r20
    3826:	84 0f       	add	r24, r20
    3828:	95 1f       	adc	r25, r21
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	90 42       	sbci	r25, 0x20	; 32
    382e:	20 f0       	brcs	.+8      	; 0x3838 <spi_FRAM_write+0x24>
    3830:	8d e6       	ldi	r24, 0x6D	; 109
    3832:	97 e0       	ldi	r25, 0x07	; 7
    3834:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    3838:	d1 df       	rcall	.-94     	; 0x37dc <spi_FRAM_writeEnable>
    383a:	6f d8       	rcall	.-3874   	; 0x291a <selectFRAM>
    383c:	82 e0       	ldi	r24, 0x02	; 2
    383e:	fc de       	rcall	.-520    	; 0x3638 <spiTransferByte>
    3840:	c8 01       	movw	r24, r16
    3842:	23 df       	rcall	.-442    	; 0x368a <spiSend2ByteBigEndian>
    3844:	be 01       	movw	r22, r28
    3846:	c7 01       	movw	r24, r14
    3848:	fd de       	rcall	.-518    	; 0x3644 <spiSendBytes>
    384a:	6b d8       	rcall	.-3882   	; 0x2922 <deSelectFRAM>
    384c:	df 91       	pop	r29
    384e:	cf 91       	pop	r28
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	ff 90       	pop	r15
    3856:	ef 90       	pop	r14
    3858:	08 95       	ret

0000385a <spi_FRAM_read>:
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	c8 2f       	mov	r28, r24
    386c:	d9 2f       	mov	r29, r25
    386e:	8b 01       	movw	r16, r22
    3870:	6a 01       	movw	r12, r20
    3872:	53 d8       	rcall	.-3930   	; 0x291a <selectFRAM>
    3874:	83 e0       	ldi	r24, 0x03	; 3
    3876:	e0 de       	rcall	.-576    	; 0x3638 <spiTransferByte>
    3878:	8d 2f       	mov	r24, r29
    387a:	de de       	rcall	.-580    	; 0x3638 <spiTransferByte>
    387c:	8c 2f       	mov	r24, r28
    387e:	dc de       	rcall	.-584    	; 0x3638 <spiTransferByte>
    3880:	c0 e0       	ldi	r28, 0x00	; 0
    3882:	d0 e0       	ldi	r29, 0x00	; 0
    3884:	0a c0       	rjmp	.+20     	; 0x389a <spi_FRAM_read+0x40>
    3886:	78 01       	movw	r14, r16
    3888:	8f ef       	ldi	r24, 0xFF	; 255
    388a:	e8 1a       	sub	r14, r24
    388c:	f8 0a       	sbc	r15, r24
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	d3 de       	rcall	.-602    	; 0x3638 <spiTransferByte>
    3892:	f8 01       	movw	r30, r16
    3894:	80 83       	st	Z, r24
    3896:	21 96       	adiw	r28, 0x01	; 1
    3898:	87 01       	movw	r16, r14
    389a:	cc 15       	cp	r28, r12
    389c:	dd 05       	cpc	r29, r13
    389e:	98 f3       	brcs	.-26     	; 0x3886 <spi_FRAM_read+0x2c>
    38a0:	40 d8       	rcall	.-3968   	; 0x2922 <deSelectFRAM>
    38a2:	df 91       	pop	r29
    38a4:	cf 91       	pop	r28
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	ff 90       	pop	r15
    38ac:	ef 90       	pop	r14
    38ae:	df 90       	pop	r13
    38b0:	cf 90       	pop	r12
    38b2:	08 95       	ret

000038b4 <read_FRAM_DeviceID>:
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	00 d0       	rcall	.+0      	; 0x38ba <read_FRAM_DeviceID+0x6>
    38ba:	1f 92       	push	r1
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	2c d8       	rcall	.-4008   	; 0x291a <selectFRAM>
    38c2:	8f ea       	ldi	r24, 0xAF	; 175
    38c4:	b9 de       	rcall	.-654    	; 0x3638 <spiTransferByte>
    38c6:	64 e0       	ldi	r22, 0x04	; 4
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	ce 01       	movw	r24, r28
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	cc de       	rcall	.-616    	; 0x3668 <spiGetBytes>
    38d0:	28 d8       	rcall	.-4016   	; 0x2922 <deSelectFRAM>
    38d2:	3c 81       	ldd	r19, Y+4	; 0x04
    38d4:	2b 81       	ldd	r18, Y+3	; 0x03
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	1f 92       	push	r1
    38dc:	3f 93       	push	r19
    38de:	1f 92       	push	r1
    38e0:	2f 93       	push	r18
    38e2:	1f 92       	push	r1
    38e4:	9f 93       	push	r25
    38e6:	1f 92       	push	r1
    38e8:	8f 93       	push	r24
    38ea:	80 e9       	ldi	r24, 0x90	; 144
    38ec:	97 e0       	ldi	r25, 0x07	; 7
    38ee:	9f 93       	push	r25
    38f0:	8f 93       	push	r24
    38f2:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <wrFRAM>:
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	28 97       	sbiw	r28, 0x08	; 8
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	5c df       	rcall	.-328    	; 0x37dc <spi_FRAM_writeEnable>
    3924:	8f e1       	ldi	r24, 0x1F	; 31
    3926:	8d 83       	std	Y+5, r24	; 0x05
    3928:	81 e4       	ldi	r24, 0x41	; 65
    392a:	8e 83       	std	Y+6, r24	; 0x06
    392c:	81 e8       	ldi	r24, 0x81	; 129
    392e:	8f 83       	std	Y+7, r24	; 0x07
    3930:	8a ef       	ldi	r24, 0xFA	; 250
    3932:	88 87       	std	Y+8, r24	; 0x08
    3934:	44 e0       	ldi	r20, 0x04	; 4
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	be 01       	movw	r22, r28
    393a:	6b 5f       	subi	r22, 0xFB	; 251
    393c:	7f 4f       	sbci	r23, 0xFF	; 255
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	94 e0       	ldi	r25, 0x04	; 4
    3942:	68 df       	rcall	.-304    	; 0x3814 <spi_FRAM_write>
    3944:	44 e0       	ldi	r20, 0x04	; 4
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	be 01       	movw	r22, r28
    394a:	6f 5f       	subi	r22, 0xFF	; 255
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	94 e0       	ldi	r25, 0x04	; 4
    3952:	83 df       	rcall	.-250    	; 0x385a <spi_FRAM_read>
    3954:	3c 81       	ldd	r19, Y+4	; 0x04
    3956:	2b 81       	ldd	r18, Y+3	; 0x03
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	1f 92       	push	r1
    395e:	3f 93       	push	r19
    3960:	1f 92       	push	r1
    3962:	2f 93       	push	r18
    3964:	1f 92       	push	r1
    3966:	9f 93       	push	r25
    3968:	1f 92       	push	r1
    396a:	8f 93       	push	r24
    396c:	83 ea       	ldi	r24, 0xA3	; 163
    396e:	97 e0       	ldi	r25, 0x07	; 7
    3970:	9f 93       	push	r25
    3972:	8f 93       	push	r24
    3974:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	28 96       	adiw	r28, 0x08	; 8
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	df 91       	pop	r29
    3990:	cf 91       	pop	r28
    3992:	08 95       	ret

00003994 <framSaveSerialNumber>:
    3994:	90 93 ad 09 	sts	0x09AD, r25	; 0x8009ad <serialNumber+0x1>
    3998:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <serialNumber>
    399c:	42 e0       	ldi	r20, 0x02	; 2
    399e:	50 e0       	ldi	r21, 0x00	; 0
    39a0:	6c ea       	ldi	r22, 0xAC	; 172
    39a2:	79 e0       	ldi	r23, 0x09	; 9
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	35 cf       	rjmp	.-406    	; 0x3814 <spi_FRAM_write>
    39aa:	08 95       	ret

000039ac <framReadSerialNumber>:
    39ac:	42 e0       	ldi	r20, 0x02	; 2
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	6c ea       	ldi	r22, 0xAC	; 172
    39b2:	79 e0       	ldi	r23, 0x09	; 9
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	50 df       	rcall	.-352    	; 0x385a <spi_FRAM_read>
    39ba:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <serialNumber+0x1>
    39be:	8f 93       	push	r24
    39c0:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <serialNumber>
    39c4:	8f 93       	push	r24
    39c6:	80 eb       	ldi	r24, 0xB0	; 176
    39c8:	97 e0       	ldi	r25, 0x07	; 7
    39ca:	9f 93       	push	r25
    39cc:	8f 93       	push	r24
    39ce:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	08 95       	ret

000039dc <spi_RTC_Write>:
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	d8 2f       	mov	r29, r24
    39e6:	8b 01       	movw	r16, r22
    39e8:	c4 2f       	mov	r28, r20
    39ea:	0e 94 cb 14 	call	0x2996	; 0x2996 <selectRTC>
    39ee:	8d 2f       	mov	r24, r29
    39f0:	80 62       	ori	r24, 0x20	; 32
    39f2:	22 de       	rcall	.-956    	; 0x3638 <spiTransferByte>
    39f4:	6c 2f       	mov	r22, r28
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	c8 01       	movw	r24, r16
    39fa:	24 de       	rcall	.-952    	; 0x3644 <spiSendBytes>
    39fc:	0e 94 c5 14 	call	0x298a	; 0x298a <deSelectRTC>
    3a00:	8c 2f       	mov	r24, r28
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	08 95       	ret

00003a0c <spi_RTC_Read>:
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	d8 2f       	mov	r29, r24
    3a16:	8b 01       	movw	r16, r22
    3a18:	c4 2f       	mov	r28, r20
    3a1a:	0e 94 cb 14 	call	0x2996	; 0x2996 <selectRTC>
    3a1e:	8d 2f       	mov	r24, r29
    3a20:	80 6a       	ori	r24, 0xA0	; 160
    3a22:	0a de       	rcall	.-1004   	; 0x3638 <spiTransferByte>
    3a24:	6c 2f       	mov	r22, r28
    3a26:	70 e0       	ldi	r23, 0x00	; 0
    3a28:	c8 01       	movw	r24, r16
    3a2a:	1e de       	rcall	.-964    	; 0x3668 <spiGetBytes>
    3a2c:	0e 94 c5 14 	call	0x298a	; 0x298a <deSelectRTC>
    3a30:	8c 2f       	mov	r24, r28
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	08 95       	ret

00003a3c <getMuxConfiguration>:
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	1f 92       	push	r1
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	41 e0       	ldi	r20, 0x01	; 1
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	be 01       	movw	r22, r28
    3a4c:	6f 5f       	subi	r22, 0xFF	; 255
    3a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a50:	80 e7       	ldi	r24, 0x70	; 112
    3a52:	80 d1       	rcall	.+768    	; 0x3d54 <twi_read_bytes>
    3a54:	89 2b       	or	r24, r25
    3a56:	21 f0       	breq	.+8      	; 0x3a60 <getMuxConfiguration+0x24>
    3a58:	87 eb       	ldi	r24, 0xB7	; 183
    3a5a:	97 e0       	ldi	r25, 0x07	; 7
    3a5c:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	0f 90       	pop	r0
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	08 95       	ret

00003a6a <setI2Cmux>:
    3a6a:	cf 93       	push	r28
    3a6c:	df 93       	push	r29
    3a6e:	1f 92       	push	r1
    3a70:	cd b7       	in	r28, 0x3d	; 61
    3a72:	de b7       	in	r29, 0x3e	; 62
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	84 30       	cpi	r24, 0x04	; 4
    3a78:	08 f0       	brcs	.+2      	; 0x3a7c <setI2Cmux+0x12>
    3a7a:	4f c0       	rjmp	.+158    	; 0x3b1a <setI2Cmux+0xb0>
    3a7c:	1f 92       	push	r1
    3a7e:	8f 93       	push	r24
    3a80:	81 ed       	ldi	r24, 0xD1	; 209
    3a82:	97 e0       	ldi	r25, 0x07	; 7
    3a84:	9f 93       	push	r25
    3a86:	8f 93       	push	r24
    3a88:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3a8c:	41 e0       	ldi	r20, 0x01	; 1
    3a8e:	be 01       	movw	r22, r28
    3a90:	6f 5f       	subi	r22, 0xFF	; 255
    3a92:	7f 4f       	sbci	r23, 0xFF	; 255
    3a94:	80 e7       	ldi	r24, 0x70	; 112
    3a96:	e7 d0       	rcall	.+462    	; 0x3c66 <twi_write_bytes>
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	89 2b       	or	r24, r25
    3aa2:	09 f1       	breq	.+66     	; 0x3ae6 <setI2Cmux+0x7c>
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	e8 2f       	mov	r30, r24
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	e6 5a       	subi	r30, 0xA6	; 166
    3aac:	f7 4f       	sbci	r31, 0xF7	; 247
    3aae:	90 81       	ld	r25, Z
    3ab0:	97 30       	cpi	r25, 0x07	; 7
    3ab2:	58 f0       	brcs	.+22     	; 0x3aca <setI2Cmux+0x60>
    3ab4:	61 d0       	rcall	.+194    	; 0x3b78 <init_twi>
    3ab6:	83 ee       	ldi	r24, 0xE3	; 227
    3ab8:	97 e0       	ldi	r25, 0x07	; 7
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	39 c0       	rjmp	.+114    	; 0x3b3c <setI2Cmux+0xd2>
    3aca:	1f 92       	push	r1
    3acc:	8f 93       	push	r24
    3ace:	88 ee       	ldi	r24, 0xE8	; 232
    3ad0:	97 e0       	ldi	r25, 0x07	; 7
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	2b c0       	rjmp	.+86     	; 0x3b3c <setI2Cmux+0xd2>
    3ae6:	aa df       	rcall	.-172    	; 0x3a3c <getMuxConfiguration>
    3ae8:	99 81       	ldd	r25, Y+1	; 0x01
    3aea:	89 17       	cp	r24, r25
    3aec:	21 f1       	breq	.+72     	; 0x3b36 <setI2Cmux+0xcc>
    3aee:	8a e0       	ldi	r24, 0x0A	; 10
    3af0:	98 e0       	ldi	r25, 0x08	; 8
    3af2:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    3af6:	e9 81       	ldd	r30, Y+1	; 0x01
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	e6 5a       	subi	r30, 0xA6	; 166
    3afc:	f7 4f       	sbci	r31, 0xF7	; 247
    3afe:	80 81       	ld	r24, Z
    3b00:	87 30       	cpi	r24, 0x07	; 7
    3b02:	d8 f0       	brcs	.+54     	; 0x3b3a <setI2Cmux+0xd0>
    3b04:	39 d0       	rcall	.+114    	; 0x3b78 <init_twi>
    3b06:	82 e3       	ldi	r24, 0x32	; 50
    3b08:	98 e0       	ldi	r25, 0x08	; 8
    3b0a:	9f 93       	push	r25
    3b0c:	8f 93       	push	r24
    3b0e:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	11 c0       	rjmp	.+34     	; 0x3b3c <setI2Cmux+0xd2>
    3b1a:	1f 92       	push	r1
    3b1c:	8f 93       	push	r24
    3b1e:	87 e3       	ldi	r24, 0x37	; 55
    3b20:	98 e0       	ldi	r25, 0x08	; 8
    3b22:	9f 93       	push	r25
    3b24:	8f 93       	push	r24
    3b26:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	03 c0       	rjmp	.+6      	; 0x3b3c <setI2Cmux+0xd2>
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	01 c0       	rjmp	.+2      	; 0x3b3c <setI2Cmux+0xd2>
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	0f 90       	pop	r0
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	08 95       	ret

00003b44 <setStatus>:
    3b44:	9f 93       	push	r25
    3b46:	8f 93       	push	r24
    3b48:	8e e5       	ldi	r24, 0x5E	; 94
    3b4a:	98 e0       	ldi	r25, 0x08	; 8
    3b4c:	9f 93       	push	r25
    3b4e:	8f 93       	push	r24
    3b50:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	08 95       	ret

00003b5e <showERRORcode>:
    3b5e:	1f 92       	push	r1
    3b60:	8f 93       	push	r24
    3b62:	82 e7       	ldi	r24, 0x72	; 114
    3b64:	98 e0       	ldi	r25, 0x08	; 8
    3b66:	9f 93       	push	r25
    3b68:	8f 93       	push	r24
    3b6a:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	08 95       	ret

00003b78 <init_twi>:
    3b78:	84 e9       	ldi	r24, 0x94	; 148
    3b7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b7e:	eb e0       	ldi	r30, 0x0B	; 11
    3b80:	f1 e0       	ldi	r31, 0x01	; 1
    3b82:	80 81       	ld	r24, Z
    3b84:	8f 7b       	andi	r24, 0xBF	; 191
    3b86:	80 83       	st	Z, r24
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	05 c0       	rjmp	.+10     	; 0x3b96 <init_twi+0x1e>
    3b8c:	e3 e0       	ldi	r30, 0x03	; 3
    3b8e:	f8 e4       	ldi	r31, 0x48	; 72
    3b90:	31 97       	sbiw	r30, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <init_twi+0x18>
    3b94:	8f 5f       	subi	r24, 0xFF	; 255
    3b96:	84 31       	cpi	r24, 0x14	; 20
    3b98:	c8 f3       	brcs	.-14     	; 0x3b8c <init_twi+0x14>
    3b9a:	eb e0       	ldi	r30, 0x0B	; 11
    3b9c:	f1 e0       	ldi	r31, 0x01	; 1
    3b9e:	80 81       	ld	r24, Z
    3ba0:	80 64       	ori	r24, 0x40	; 64
    3ba2:	80 83       	st	Z, r24
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	05 c0       	rjmp	.+10     	; 0x3bb2 <init_twi+0x3a>
    3ba8:	e3 e0       	ldi	r30, 0x03	; 3
    3baa:	f8 e4       	ldi	r31, 0x48	; 72
    3bac:	31 97       	sbiw	r30, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <init_twi+0x34>
    3bb0:	8f 5f       	subi	r24, 0xFF	; 255
    3bb2:	84 31       	cpi	r24, 0x14	; 20
    3bb4:	c8 f3       	brcs	.-14     	; 0x3ba8 <init_twi+0x30>
    3bb6:	eb e0       	ldi	r30, 0x0B	; 11
    3bb8:	f1 e0       	ldi	r31, 0x01	; 1
    3bba:	80 81       	ld	r24, Z
    3bbc:	8f 7b       	andi	r24, 0xBF	; 191
    3bbe:	80 83       	st	Z, r24
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	05 c0       	rjmp	.+10     	; 0x3bce <init_twi+0x56>
    3bc4:	e3 e0       	ldi	r30, 0x03	; 3
    3bc6:	f8 e4       	ldi	r31, 0x48	; 72
    3bc8:	31 97       	sbiw	r30, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <init_twi+0x50>
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	84 31       	cpi	r24, 0x14	; 20
    3bd0:	c8 f3       	brcs	.-14     	; 0x3bc4 <init_twi+0x4c>
    3bd2:	eb e0       	ldi	r30, 0x0B	; 11
    3bd4:	f1 e0       	ldi	r31, 0x01	; 1
    3bd6:	80 81       	ld	r24, Z
    3bd8:	80 64       	ori	r24, 0x40	; 64
    3bda:	80 83       	st	Z, r24
    3bdc:	e9 eb       	ldi	r30, 0xB9	; 185
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	8c 7f       	andi	r24, 0xFC	; 252
    3be4:	80 83       	st	Z, r24
    3be6:	80 81       	ld	r24, Z
    3be8:	80 83       	st	Z, r24
    3bea:	80 e1       	ldi	r24, 0x10	; 16
    3bec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3bf0:	ec eb       	ldi	r30, 0xBC	; 188
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	84 60       	ori	r24, 0x04	; 4
    3bf8:	80 83       	st	Z, r24
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <verbose>
    3c00:	08 95       	ret

00003c02 <twi_start>:
    3c02:	84 ea       	ldi	r24, 0xA4	; 164
    3c04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3c08:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x1>
    3c0c:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end>
    3c10:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3c14:	88 23       	and	r24, r24
    3c16:	34 f0       	brlt	.+12     	; 0x3c24 <twi_start+0x22>
    3c18:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3c1c:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3c20:	4e 97       	sbiw	r24, 0x1e	; 30
    3c22:	b0 f3       	brcs	.-20     	; 0x3c10 <twi_start+0xe>
    3c24:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3c28:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3c2c:	4e 97       	sbiw	r24, 0x1e	; 30
    3c2e:	30 f0       	brcs	.+12     	; 0x3c3c <twi_start+0x3a>
    3c30:	85 e8       	ldi	r24, 0x85	; 133
    3c32:	98 e0       	ldi	r25, 0x08	; 8
    3c34:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	08 95       	ret
    3c3c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3c40:	88 7f       	andi	r24, 0xF8	; 248
    3c42:	88 30       	cpi	r24, 0x08	; 8
    3c44:	71 f0       	breq	.+28     	; 0x3c62 <twi_start+0x60>
    3c46:	1f 92       	push	r1
    3c48:	8f 93       	push	r24
    3c4a:	8c e9       	ldi	r24, 0x9C	; 156
    3c4c:	98 e0       	ldi	r25, 0x08	; 8
    3c4e:	9f 93       	push	r25
    3c50:	8f 93       	push	r24
    3c52:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	08 95       	ret
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	08 95       	ret

00003c66 <twi_write_bytes>:
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	08 2f       	mov	r16, r24
    3c70:	eb 01       	movw	r28, r22
    3c72:	14 2f       	mov	r17, r20
    3c74:	c6 df       	rcall	.-116    	; 0x3c02 <twi_start>
    3c76:	81 11       	cpse	r24, r1
    3c78:	66 c0       	rjmp	.+204    	; 0x3d46 <twi_write_bytes+0xe0>
    3c7a:	00 0f       	add	r16, r16
    3c7c:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3c80:	84 e8       	ldi	r24, 0x84	; 132
    3c82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3c86:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x1>
    3c8a:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end>
    3c8e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3c92:	88 23       	and	r24, r24
    3c94:	34 f0       	brlt	.+12     	; 0x3ca2 <twi_write_bytes+0x3c>
    3c96:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3c9a:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3c9e:	4e 97       	sbiw	r24, 0x1e	; 30
    3ca0:	b0 f3       	brcs	.-20     	; 0x3c8e <twi_write_bytes+0x28>
    3ca2:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3ca6:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3caa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3cae:	88 7f       	andi	r24, 0xF8	; 248
    3cb0:	88 31       	cpi	r24, 0x18	; 24
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <twi_write_bytes+0x50>
    3cb4:	3f c0       	rjmp	.+126    	; 0x3d34 <twi_write_bytes+0xce>
    3cb6:	84 e9       	ldi	r24, 0x94	; 148
    3cb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3cbc:	80 e2       	ldi	r24, 0x20	; 32
    3cbe:	4f df       	rcall	.-354    	; 0x3b5e <showERRORcode>
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	42 c0       	rjmp	.+132    	; 0x3d4a <twi_write_bytes+0xe4>
    3cc6:	ae 01       	movw	r20, r28
    3cc8:	4f 5f       	subi	r20, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	88 81       	ld	r24, Y
    3cce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3cd2:	84 e8       	ldi	r24, 0x84	; 132
    3cd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3cd8:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x1>
    3cdc:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end>
    3ce0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3ce4:	88 23       	and	r24, r24
    3ce6:	34 f0       	brlt	.+12     	; 0x3cf4 <twi_write_bytes+0x8e>
    3ce8:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3cec:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3cf0:	4e 97       	sbiw	r24, 0x1e	; 30
    3cf2:	b0 f3       	brcs	.-20     	; 0x3ce0 <twi_write_bytes+0x7a>
    3cf4:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3cf8:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3cfc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3d00:	88 7f       	andi	r24, 0xF8	; 248
    3d02:	88 32       	cpi	r24, 0x28	; 40
    3d04:	a1 f0       	breq	.+40     	; 0x3d2e <twi_write_bytes+0xc8>
    3d06:	1f 92       	push	r1
    3d08:	8f 93       	push	r24
    3d0a:	8c eb       	ldi	r24, 0xBC	; 188
    3d0c:	98 e0       	ldi	r25, 0x08	; 8
    3d0e:	9f 93       	push	r25
    3d10:	8f 93       	push	r24
    3d12:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3d16:	84 e9       	ldi	r24, 0x94	; 148
    3d18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3d1c:	80 e3       	ldi	r24, 0x30	; 48
    3d1e:	1f df       	rcall	.-450    	; 0x3b5e <showERRORcode>
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0e c0       	rjmp	.+28     	; 0x3d4a <twi_write_bytes+0xe4>
    3d2e:	2f 5f       	subi	r18, 0xFF	; 255
    3d30:	ea 01       	movw	r28, r20
    3d32:	01 c0       	rjmp	.+2      	; 0x3d36 <twi_write_bytes+0xd0>
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	21 17       	cp	r18, r17
    3d38:	30 f2       	brcs	.-116    	; 0x3cc6 <twi_write_bytes+0x60>
    3d3a:	84 e9       	ldi	r24, 0x94	; 148
    3d3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <twi_write_bytes+0xe4>
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	1f 91       	pop	r17
    3d50:	0f 91       	pop	r16
    3d52:	08 95       	ret

00003d54 <twi_read_bytes>:
    3d54:	ff 92       	push	r15
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	f8 2e       	mov	r15, r24
    3d60:	8b 01       	movw	r16, r22
    3d62:	ea 01       	movw	r28, r20
    3d64:	4e df       	rcall	.-356    	; 0x3c02 <twi_start>
    3d66:	81 11       	cpse	r24, r1
    3d68:	79 c0       	rjmp	.+242    	; 0x3e5c <twi_read_bytes+0x108>
    3d6a:	8f 2d       	mov	r24, r15
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	88 0f       	add	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	81 60       	ori	r24, 0x01	; 1
    3d74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3d78:	84 e8       	ldi	r24, 0x84	; 132
    3d7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3d7e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x1>
    3d82:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end>
    3d86:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3d8a:	88 23       	and	r24, r24
    3d8c:	34 f0       	brlt	.+12     	; 0x3d9a <twi_read_bytes+0x46>
    3d8e:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3d92:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3d96:	4e 97       	sbiw	r24, 0x1e	; 30
    3d98:	b0 f3       	brcs	.-20     	; 0x3d86 <twi_read_bytes+0x32>
    3d9a:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3d9e:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3da2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3da6:	88 7f       	andi	r24, 0xF8	; 248
    3da8:	80 34       	cpi	r24, 0x40	; 64
    3daa:	09 f4       	brne	.+2      	; 0x3dae <twi_read_bytes+0x5a>
    3dac:	4d c0       	rjmp	.+154    	; 0x3e48 <twi_read_bytes+0xf4>
    3dae:	88 e4       	ldi	r24, 0x48	; 72
    3db0:	d6 de       	rcall	.-596    	; 0x3b5e <showERRORcode>
    3db2:	84 e9       	ldi	r24, 0x94	; 148
    3db4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3db8:	88 ed       	ldi	r24, 0xD8	; 216
    3dba:	98 e0       	ldi	r25, 0x08	; 8
    3dbc:	c3 de       	rcall	.-634    	; 0x3b44 <setStatus>
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	4e c0       	rjmp	.+156    	; 0x3e60 <twi_read_bytes+0x10c>
    3dc4:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x1>
    3dc8:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end>
    3dcc:	c1 30       	cpi	r28, 0x01	; 1
    3dce:	d1 05       	cpc	r29, r1
    3dd0:	11 f4       	brne	.+4      	; 0x3dd6 <twi_read_bytes+0x82>
    3dd2:	84 e8       	ldi	r24, 0x84	; 132
    3dd4:	01 c0       	rjmp	.+2      	; 0x3dd8 <twi_read_bytes+0x84>
    3dd6:	84 ec       	ldi	r24, 0xC4	; 196
    3dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3ddc:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x1>
    3de0:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end>
    3de4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3de8:	88 23       	and	r24, r24
    3dea:	34 f0       	brlt	.+12     	; 0x3df8 <twi_read_bytes+0xa4>
    3dec:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3df0:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3df4:	4e 97       	sbiw	r24, 0x1e	; 30
    3df6:	b0 f3       	brcs	.-20     	; 0x3de4 <twi_read_bytes+0x90>
    3df8:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end>
    3dfc:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__data_end+0x1>
    3e00:	4e 97       	sbiw	r24, 0x1e	; 30
    3e02:	d8 f0       	brcs	.+54     	; 0x3e3a <twi_read_bytes+0xe6>
    3e04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3e08:	1f 92       	push	r1
    3e0a:	8f 93       	push	r24
    3e0c:	df 93       	push	r29
    3e0e:	cf 93       	push	r28
    3e10:	81 ee       	ldi	r24, 0xE1	; 225
    3e12:	98 e0       	ldi	r25, 0x08	; 8
    3e14:	9f 93       	push	r25
    3e16:	8f 93       	push	r24
    3e18:	0e 94 73 28 	call	0x50e6	; 0x50e6 <printf>
    3e1c:	84 e9       	ldi	r24, 0x94	; 148
    3e1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3e22:	88 ed       	ldi	r24, 0xD8	; 216
    3e24:	98 e0       	ldi	r25, 0x08	; 8
    3e26:	8e de       	rcall	.-740    	; 0x3b44 <setStatus>
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	13 c0       	rjmp	.+38     	; 0x3e60 <twi_read_bytes+0x10c>
    3e3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3e3e:	f8 01       	movw	r30, r16
    3e40:	80 83       	st	Z, r24
    3e42:	21 97       	sbiw	r28, 0x01	; 1
    3e44:	0f 5f       	subi	r16, 0xFF	; 255
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	1c 16       	cp	r1, r28
    3e4a:	1d 06       	cpc	r1, r29
    3e4c:	0c f4       	brge	.+2      	; 0x3e50 <twi_read_bytes+0xfc>
    3e4e:	ba cf       	rjmp	.-140    	; 0x3dc4 <twi_read_bytes+0x70>
    3e50:	84 e9       	ldi	r24, 0x94	; 148
    3e52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <twi_read_bytes+0x10c>
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	df 91       	pop	r29
    3e62:	cf 91       	pop	r28
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	ff 90       	pop	r15
    3e6a:	08 95       	ret

00003e6c <init_Ports>:
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
    3e6e:	81 b9       	out	0x01, r24	; 1
    3e70:	97 ef       	ldi	r25, 0xF7	; 247
    3e72:	94 b9       	out	0x04, r25	; 4
    3e74:	87 b9       	out	0x07, r24	; 7
    3e76:	9b eb       	ldi	r25, 0xBB	; 187
    3e78:	9a b9       	out	0x0a, r25	; 10
    3e7a:	9e e3       	ldi	r25, 0x3E	; 62
    3e7c:	9d b9       	out	0x0d, r25	; 13
    3e7e:	10 ba       	out	0x10, r1	; 16
    3e80:	83 bb       	out	0x13, r24	; 19
    3e82:	9f e7       	ldi	r25, 0x7F	; 127
    3e84:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    3e88:	92 e7       	ldi	r25, 0x72	; 114
    3e8a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
    3e8e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    3e92:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    3e96:	88 b9       	out	0x08, r24	; 8
    3e98:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    3e9c:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <deSelectSDcard>
    3ea0:	08 95       	ret

00003ea2 <initialize>:
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	e0 ea       	ldi	r30, 0xA0	; 160
    3ea8:	fa e0       	ldi	r31, 0x0A	; 10
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	92 e0       	ldi	r25, 0x02	; 2
    3eae:	91 83       	std	Z+1, r25	; 0x01
    3eb0:	80 83       	st	Z, r24
    3eb2:	93 83       	std	Z+3, r25	; 0x03
    3eb4:	82 83       	std	Z+2, r24	; 0x02
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	c6 d0       	rcall	.+396    	; 0x4046 <init_uart>
    3eba:	d8 df       	rcall	.-80     	; 0x3e6c <init_Ports>
    3ebc:	b3 db       	rcall	.-2202   	; 0x3624 <init_spi>
    3ebe:	0e 94 40 10 	call	0x2080	; 0x2080 <init_CountersIimers>
    3ec2:	8f e0       	ldi	r24, 0x0F	; 15
    3ec4:	9f e8       	ldi	r25, 0x8F	; 143
    3ec6:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <hdwConfig+0x1>
    3eca:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <hdwConfig>
    3ece:	c0 e0       	ldi	r28, 0x00	; 0
    3ed0:	d0 e0       	ldi	r29, 0x00	; 0
    3ed2:	05 c0       	rjmp	.+10     	; 0x3ede <initialize+0x3c>
    3ed4:	8e e2       	ldi	r24, 0x2E	; 46
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 ad 28 	call	0x515a	; 0x515a <putchar>
    3edc:	21 96       	adiw	r28, 0x01	; 1
    3ede:	c0 35       	cpi	r28, 0x50	; 80
    3ee0:	d1 05       	cpc	r29, r1
    3ee2:	c0 f3       	brcs	.-16     	; 0x3ed4 <initialize+0x32>
    3ee4:	8a e0       	ldi	r24, 0x0A	; 10
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 ad 28 	call	0x515a	; 0x515a <putchar>
    3eec:	39 db       	rcall	.-2446   	; 0x3560 <RTC_config>
    3eee:	0e 94 79 10 	call	0x20f2	; 0x20f2 <initADC2518>
    3ef2:	42 de       	rcall	.-892    	; 0x3b78 <init_twi>
    3ef4:	0e 94 09 13 	call	0x2612	; 0x2612 <initPressureSensors>
    3ef8:	0e 94 31 12 	call	0x2462	; 0x2462 <init_adc>
    3efc:	0e 94 09 13 	call	0x2612	; 0x2612 <initPressureSensors>
    3f00:	78 94       	sei
    3f02:	87 e1       	ldi	r24, 0x17	; 23
    3f04:	99 e0       	ldi	r25, 0x09	; 9
    3f06:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	08 95       	ret

00003f10 <main>:
    3f10:	c8 df       	rcall	.-112    	; 0x3ea2 <initialize>
    3f12:	88 e2       	ldi	r24, 0x28	; 40
    3f14:	99 e0       	ldi	r25, 0x09	; 9
    3f16:	0e 94 b2 28 	call	0x5164	; 0x5164 <puts>
    3f1a:	27 d2       	rcall	.+1102   	; 0x436a <doUart>
    3f1c:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <commandCompleteFlag0>
    3f20:	88 23       	and	r24, r24
    3f22:	21 f0       	breq	.+8      	; 0x3f2c <main+0x1c>
    3f24:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <processCommand>
    3f28:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <commandCompleteFlag0>
    3f2c:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <halfSecFlag>
    3f30:	88 23       	and	r24, r24
    3f32:	41 f0       	breq	.+16     	; 0x3f44 <main+0x34>
    3f34:	eb e0       	ldi	r30, 0x0B	; 11
    3f36:	f1 e0       	ldi	r31, 0x01	; 1
    3f38:	90 81       	ld	r25, Z
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	89 27       	eor	r24, r25
    3f3e:	80 83       	st	Z, r24
    3f40:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <halfSecFlag>
    3f44:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <oneSecFlag>
    3f48:	88 23       	and	r24, r24
    3f4a:	39 f3       	breq	.-50     	; 0x3f1a <main+0xa>
    3f4c:	eb e0       	ldi	r30, 0x0B	; 11
    3f4e:	f1 e0       	ldi	r31, 0x01	; 1
    3f50:	90 81       	ld	r25, Z
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	89 27       	eor	r24, r25
    3f56:	80 83       	st	Z, r24
    3f58:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <pauseOutputForCmdCnt>
    3f5c:	88 23       	and	r24, r24
    3f5e:	19 f0       	breq	.+6      	; 0x3f66 <main+0x56>
    3f60:	81 50       	subi	r24, 0x01	; 1
    3f62:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <pauseOutputForCmdCnt>
    3f66:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <oneSecFlag>
    3f6a:	d7 cf       	rjmp	.-82     	; 0x3f1a <main+0xa>

00003f6c <majorGeneral_num_lines>:
	}
	
	uint8_t majorGeneral_num_lines(void)
	{
		return MAJORGENERAL_NUM_LINES;
	}
    3f6c:	89 e4       	ldi	r24, 0x49	; 73
    3f6e:	08 95       	ret

00003f70 <majorGeneral_get_line>:
	
	void majorGeneral_get_line(uint8_t linenum, char* buffer)
	{
    3f70:	9b 01       	movw	r18, r22
		strcpy_P(buffer, majorGeneral[linenum]);
    3f72:	4e e3       	ldi	r20, 0x3E	; 62
    3f74:	84 9f       	mul	r24, r20
    3f76:	c0 01       	movw	r24, r0
    3f78:	11 24       	eor	r1, r1
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	67 56       	subi	r22, 0x67	; 103
    3f7e:	79 4f       	sbci	r23, 0xF9	; 249
    3f80:	c9 01       	movw	r24, r18
    3f82:	0c 94 09 28 	jmp	0x5012	; 0x5012 <strcpy_P>
    3f86:	08 95       	ret

00003f88 <ringbuf_init>:
    3f88:	e7 ef       	ldi	r30, 0xF7	; 247
    3f8a:	f9 e0       	ldi	r31, 0x09	; 9
    3f8c:	60 83       	st	Z, r22
    3f8e:	11 82       	std	Z+1, r1	; 0x01
    3f90:	93 83       	std	Z+3, r25	; 0x03
    3f92:	82 83       	std	Z+2, r24	; 0x02
    3f94:	95 83       	std	Z+5, r25	; 0x05
    3f96:	84 83       	std	Z+4, r24	; 0x04
    3f98:	97 83       	std	Z+7, r25	; 0x07
    3f9a:	86 83       	std	Z+6, r24	; 0x06
    3f9c:	08 95       	ret

00003f9e <ringbuf_get>:
    3f9e:	9f b7       	in	r25, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <rb+0x1>
    3fa6:	81 11       	cpse	r24, r1
    3fa8:	04 c0       	rjmp	.+8      	; 0x3fb2 <ringbuf_get+0x14>
    3faa:	99 23       	and	r25, r25
    3fac:	04 f5       	brge	.+64     	; 0x3fee <ringbuf_get+0x50>
    3fae:	78 94       	sei
    3fb0:	08 95       	ret
    3fb2:	e7 ef       	ldi	r30, 0xF7	; 247
    3fb4:	f9 e0       	ldi	r31, 0x09	; 9
    3fb6:	a4 81       	ldd	r26, Z+4	; 0x04
    3fb8:	b5 81       	ldd	r27, Z+5	; 0x05
    3fba:	9d 01       	movw	r18, r26
    3fbc:	2f 5f       	subi	r18, 0xFF	; 255
    3fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc0:	35 83       	std	Z+5, r19	; 0x05
    3fc2:	24 83       	std	Z+4, r18	; 0x04
    3fc4:	8c 91       	ld	r24, X
    3fc6:	21 81       	ldd	r18, Z+1	; 0x01
    3fc8:	21 50       	subi	r18, 0x01	; 1
    3fca:	21 83       	std	Z+1, r18	; 0x01
    3fcc:	44 81       	ldd	r20, Z+4	; 0x04
    3fce:	55 81       	ldd	r21, Z+5	; 0x05
    3fd0:	26 81       	ldd	r18, Z+6	; 0x06
    3fd2:	37 81       	ldd	r19, Z+7	; 0x07
    3fd4:	60 81       	ld	r22, Z
    3fd6:	26 0f       	add	r18, r22
    3fd8:	31 1d       	adc	r19, r1
    3fda:	42 17       	cp	r20, r18
    3fdc:	53 07       	cpc	r21, r19
    3fde:	20 f0       	brcs	.+8      	; 0x3fe8 <ringbuf_get+0x4a>
    3fe0:	26 81       	ldd	r18, Z+6	; 0x06
    3fe2:	37 81       	ldd	r19, Z+7	; 0x07
    3fe4:	35 83       	std	Z+5, r19	; 0x05
    3fe6:	24 83       	std	Z+4, r18	; 0x04
    3fe8:	99 23       	and	r25, r25
    3fea:	0c f4       	brge	.+2      	; 0x3fee <ringbuf_get+0x50>
    3fec:	78 94       	sei
    3fee:	08 95       	ret

00003ff0 <ringbuf_put>:
    3ff0:	9f b7       	in	r25, 0x3f	; 63
    3ff2:	f8 94       	cli
    3ff4:	e7 ef       	ldi	r30, 0xF7	; 247
    3ff6:	f9 e0       	ldi	r31, 0x09	; 9
    3ff8:	31 81       	ldd	r19, Z+1	; 0x01
    3ffa:	20 81       	ld	r18, Z
    3ffc:	32 17       	cp	r19, r18
    3ffe:	20 f0       	brcs	.+8      	; 0x4008 <ringbuf_put+0x18>
    4000:	99 23       	and	r25, r25
    4002:	04 f5       	brge	.+64     	; 0x4044 <ringbuf_put+0x54>
    4004:	78 94       	sei
    4006:	08 95       	ret
    4008:	e7 ef       	ldi	r30, 0xF7	; 247
    400a:	f9 e0       	ldi	r31, 0x09	; 9
    400c:	a2 81       	ldd	r26, Z+2	; 0x02
    400e:	b3 81       	ldd	r27, Z+3	; 0x03
    4010:	9d 01       	movw	r18, r26
    4012:	2f 5f       	subi	r18, 0xFF	; 255
    4014:	3f 4f       	sbci	r19, 0xFF	; 255
    4016:	33 83       	std	Z+3, r19	; 0x03
    4018:	22 83       	std	Z+2, r18	; 0x02
    401a:	8c 93       	st	X, r24
    401c:	81 81       	ldd	r24, Z+1	; 0x01
    401e:	8f 5f       	subi	r24, 0xFF	; 255
    4020:	81 83       	std	Z+1, r24	; 0x01
    4022:	42 81       	ldd	r20, Z+2	; 0x02
    4024:	53 81       	ldd	r21, Z+3	; 0x03
    4026:	26 81       	ldd	r18, Z+6	; 0x06
    4028:	37 81       	ldd	r19, Z+7	; 0x07
    402a:	80 81       	ld	r24, Z
    402c:	28 0f       	add	r18, r24
    402e:	31 1d       	adc	r19, r1
    4030:	42 17       	cp	r20, r18
    4032:	53 07       	cpc	r21, r19
    4034:	20 f0       	brcs	.+8      	; 0x403e <ringbuf_put+0x4e>
    4036:	26 81       	ldd	r18, Z+6	; 0x06
    4038:	37 81       	ldd	r19, Z+7	; 0x07
    403a:	33 83       	std	Z+3, r19	; 0x03
    403c:	22 83       	std	Z+2, r18	; 0x02
    403e:	99 23       	and	r25, r25
    4040:	0c f4       	brge	.+2      	; 0x4044 <ringbuf_put+0x54>
    4042:	78 94       	sei
    4044:	08 95       	ret

00004046 <init_uart>:
    4046:	82 30       	cpi	r24, 0x02	; 2
    4048:	b9 f1       	breq	.+110    	; 0x40b8 <init_uart+0x72>
    404a:	84 30       	cpi	r24, 0x04	; 4
    404c:	b8 f5       	brcc	.+110    	; 0x40bc <init_uart+0x76>
    404e:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <currentUart>
    4052:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <userSettings>
    4056:	91 30       	cpi	r25, 0x01	; 1
    4058:	19 f0       	breq	.+6      	; 0x4060 <init_uart+0x1a>
    405a:	92 30       	cpi	r25, 0x02	; 2
    405c:	39 f0       	breq	.+14     	; 0x406c <init_uart+0x26>
    405e:	03 c0       	rjmp	.+6      	; 0x4066 <init_uart+0x20>
    4060:	9f e5       	ldi	r25, 0x5F	; 95
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	05 c0       	rjmp	.+10     	; 0x4070 <init_uart+0x2a>
    4066:	97 e0       	ldi	r25, 0x07	; 7
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	02 c0       	rjmp	.+4      	; 0x4070 <init_uart+0x2a>
    406c:	91 e0       	ldi	r25, 0x01	; 1
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	81 30       	cpi	r24, 0x01	; 1
    4072:	19 f0       	breq	.+6      	; 0x407a <init_uart+0x34>
    4074:	83 30       	cpi	r24, 0x03	; 3
    4076:	71 f0       	breq	.+28     	; 0x4094 <init_uart+0x4e>
    4078:	16 c0       	rjmp	.+44     	; 0x40a6 <init_uart+0x60>
    407a:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    407e:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    4082:	88 e9       	ldi	r24, 0x98	; 152
    4084:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    4088:	60 e8       	ldi	r22, 0x80	; 128
    408a:	8f ef       	ldi	r24, 0xFF	; 255
    408c:	99 e0       	ldi	r25, 0x09	; 9
    408e:	7c df       	rcall	.-264    	; 0x3f88 <ringbuf_init>
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	08 95       	ret
    4094:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    4098:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    409c:	88 e9       	ldi	r24, 0x98	; 152
    409e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	08 95       	ret
    40a6:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    40aa:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    40ae:	88 e9       	ldi	r24, 0x98	; 152
    40b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	08 95       	ret
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	08 95       	ret
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	08 95       	ret

000040c0 <uart0_putchar>:
    40c0:	cf 93       	push	r28
    40c2:	c8 2f       	mov	r28, r24
    40c4:	8a 30       	cpi	r24, 0x0A	; 10
    40c6:	31 f4       	brne	.+12     	; 0x40d4 <uart0_putchar+0x14>
    40c8:	60 91 a2 0a 	lds	r22, 0x0AA2	; 0x800aa2 <__iob+0x2>
    40cc:	70 91 a3 0a 	lds	r23, 0x0AA3	; 0x800aa3 <__iob+0x3>
    40d0:	8d e0       	ldi	r24, 0x0D	; 13
    40d2:	f6 df       	rcall	.-20     	; 0x40c0 <uart0_putchar>
    40d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    40d8:	85 ff       	sbrs	r24, 5
    40da:	fc cf       	rjmp	.-8      	; 0x40d4 <uart0_putchar+0x14>
    40dc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	cf 91       	pop	r28
    40e6:	08 95       	ret

000040e8 <uart1_put>:
    40e8:	cf 93       	push	r28
    40ea:	c8 2f       	mov	r28, r24
    40ec:	8a 30       	cpi	r24, 0x0A	; 10
    40ee:	11 f4       	brne	.+4      	; 0x40f4 <uart1_put+0xc>
    40f0:	8d e0       	ldi	r24, 0x0D	; 13
    40f2:	fa df       	rcall	.-12     	; 0x40e8 <uart1_put>
    40f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    40f8:	85 ff       	sbrs	r24, 5
    40fa:	fc cf       	rjmp	.-8      	; 0x40f4 <uart1_put+0xc>
    40fc:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	cf 91       	pop	r28
    4106:	08 95       	ret

00004108 <uarts_getchar>:
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	08 95       	ret

0000410e <__vector_25>:
    410e:	1f 92       	push	r1
    4110:	0f 92       	push	r0
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	0f 92       	push	r0
    4116:	11 24       	eor	r1, r1
    4118:	0b b6       	in	r0, 0x3b	; 59
    411a:	0f 92       	push	r0
    411c:	2f 93       	push	r18
    411e:	3f 93       	push	r19
    4120:	4f 93       	push	r20
    4122:	5f 93       	push	r21
    4124:	6f 93       	push	r22
    4126:	7f 93       	push	r23
    4128:	8f 93       	push	r24
    412a:	9f 93       	push	r25
    412c:	af 93       	push	r26
    412e:	bf 93       	push	r27
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	ef 93       	push	r30
    4136:	ff 93       	push	r31
    4138:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    413c:	84 fd       	sbrc	r24, 4
    413e:	08 c0       	rjmp	.+16     	; 0x4150 <__vector_25+0x42>
    4140:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    4144:	83 fd       	sbrc	r24, 3
    4146:	04 c0       	rjmp	.+8      	; 0x4150 <__vector_25+0x42>
    4148:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <commandCompleteFlag0>
    414c:	88 23       	and	r24, r24
    414e:	41 f0       	breq	.+16     	; 0x4160 <__vector_25+0x52>
    4150:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	90 93 b5 09 	sts	0x09B5, r25	; 0x8009b5 <clrError+0x1>
    415a:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <clrError>
    415e:	a1 c0       	rjmp	.+322    	; 0x42a2 <__vector_25+0x194>
    4160:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <bufIndex0>
    4164:	8f 31       	cpi	r24, 0x1F	; 31
    4166:	80 f0       	brcs	.+32     	; 0x4188 <__vector_25+0x7a>
    4168:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	90 93 b5 09 	sts	0x09B5, r25	; 0x8009b5 <clrError+0x1>
    4172:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <clrError>
    4176:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <bufIndex0>
    417a:	10 92 9f 0a 	sts	0x0A9F, r1	; 0x800a9f <buf+0x1f>
    417e:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <commandCompleteFlag0>
    4182:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <commandSize>
    4186:	8d c0       	rjmp	.+282    	; 0x42a2 <__vector_25+0x194>
    4188:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    418c:	f0 e0       	ldi	r31, 0x00	; 0
    418e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4192:	e0 58       	subi	r30, 0x80	; 128
    4194:	f5 4f       	sbci	r31, 0xF5	; 245
    4196:	80 83       	st	Z, r24
    4198:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    419c:	f0 e0       	ldi	r31, 0x00	; 0
    419e:	e0 58       	subi	r30, 0x80	; 128
    41a0:	f5 4f       	sbci	r31, 0xF5	; 245
    41a2:	80 81       	ld	r24, Z
    41a4:	8a 30       	cpi	r24, 0x0A	; 10
    41a6:	41 f0       	breq	.+16     	; 0x41b8 <__vector_25+0xaa>
    41a8:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	e0 58       	subi	r30, 0x80	; 128
    41b0:	f5 4f       	sbci	r31, 0xF5	; 245
    41b2:	80 81       	ld	r24, Z
    41b4:	8d 30       	cpi	r24, 0x0D	; 13
    41b6:	89 f4       	brne	.+34     	; 0x41da <__vector_25+0xcc>
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <commandCompleteFlag0>
    41be:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <commandSize>
    41c2:	8f 5f       	subi	r24, 0xFF	; 255
    41c4:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <commandSize>
    41c8:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    41cc:	f0 e0       	ldi	r31, 0x00	; 0
    41ce:	e0 58       	subi	r30, 0x80	; 128
    41d0:	f5 4f       	sbci	r31, 0xF5	; 245
    41d2:	10 82       	st	Z, r1
    41d4:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <bufIndex0>
    41d8:	64 c0       	rjmp	.+200    	; 0x42a2 <__vector_25+0x194>
    41da:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	e0 58       	subi	r30, 0x80	; 128
    41e2:	f5 4f       	sbci	r31, 0xF5	; 245
    41e4:	80 81       	ld	r24, Z
    41e6:	88 30       	cpi	r24, 0x08	; 8
    41e8:	41 f0       	breq	.+16     	; 0x41fa <__vector_25+0xec>
    41ea:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	e0 58       	subi	r30, 0x80	; 128
    41f2:	f5 4f       	sbci	r31, 0xF5	; 245
    41f4:	80 81       	ld	r24, Z
    41f6:	8f 37       	cpi	r24, 0x7F	; 127
    41f8:	39 f5       	brne	.+78     	; 0x4248 <__vector_25+0x13a>
    41fa:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <bufIndex0>
    41fe:	88 23       	and	r24, r24
    4200:	09 f4       	brne	.+2      	; 0x4204 <__vector_25+0xf6>
    4202:	4f c0       	rjmp	.+158    	; 0x42a2 <__vector_25+0x194>
    4204:	c0 ea       	ldi	r28, 0xA0	; 160
    4206:	da e0       	ldi	r29, 0x0A	; 10
    4208:	6a 81       	ldd	r22, Y+2	; 0x02
    420a:	7b 81       	ldd	r23, Y+3	; 0x03
    420c:	88 e0       	ldi	r24, 0x08	; 8
    420e:	58 df       	rcall	.-336    	; 0x40c0 <uart0_putchar>
    4210:	6a 81       	ldd	r22, Y+2	; 0x02
    4212:	7b 81       	ldd	r23, Y+3	; 0x03
    4214:	80 e2       	ldi	r24, 0x20	; 32
    4216:	54 df       	rcall	.-344    	; 0x40c0 <uart0_putchar>
    4218:	6a 81       	ldd	r22, Y+2	; 0x02
    421a:	7b 81       	ldd	r23, Y+3	; 0x03
    421c:	88 e0       	ldi	r24, 0x08	; 8
    421e:	50 df       	rcall	.-352    	; 0x40c0 <uart0_putchar>
    4220:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <bufIndex0>
    4224:	81 50       	subi	r24, 0x01	; 1
    4226:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <bufIndex0>
    422a:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <commandSize>
    422e:	81 50       	subi	r24, 0x01	; 1
    4230:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <commandSize>
    4234:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <outputCharacters>
    4238:	88 23       	and	r24, r24
    423a:	99 f1       	breq	.+102    	; 0x42a2 <__vector_25+0x194>
    423c:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <outputCharacters>
    4240:	81 50       	subi	r24, 0x01	; 1
    4242:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <outputCharacters>
    4246:	2d c0       	rjmp	.+90     	; 0x42a2 <__vector_25+0x194>
    4248:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	e0 58       	subi	r30, 0x80	; 128
    4250:	f5 4f       	sbci	r31, 0xF5	; 245
    4252:	80 81       	ld	r24, Z
    4254:	8c 32       	cpi	r24, 0x2C	; 44
    4256:	98 f0       	brcs	.+38     	; 0x427e <__vector_25+0x170>
    4258:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	e0 58       	subi	r30, 0x80	; 128
    4260:	f5 4f       	sbci	r31, 0xF5	; 245
    4262:	80 81       	ld	r24, Z
    4264:	8b 37       	cpi	r24, 0x7B	; 123
    4266:	58 f4       	brcc	.+22     	; 0x427e <__vector_25+0x170>
    4268:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <bufIndex0>
    426c:	8f 5f       	subi	r24, 0xFF	; 255
    426e:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <bufIndex0>
    4272:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <commandSize>
    4276:	8f 5f       	subi	r24, 0xFF	; 255
    4278:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <commandSize>
    427c:	12 c0       	rjmp	.+36     	; 0x42a2 <__vector_25+0x194>
    427e:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <bufIndex0>
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	e0 58       	subi	r30, 0x80	; 128
    4286:	f5 4f       	sbci	r31, 0xF5	; 245
    4288:	80 81       	ld	r24, Z
    428a:	8b 31       	cpi	r24, 0x1B	; 27
    428c:	51 f4       	brne	.+20     	; 0x42a2 <__vector_25+0x194>
    428e:	60 91 a2 0a 	lds	r22, 0x0AA2	; 0x800aa2 <__iob+0x2>
    4292:	70 91 a3 0a 	lds	r23, 0x0AA3	; 0x800aa3 <__iob+0x3>
    4296:	8d e0       	ldi	r24, 0x0D	; 13
    4298:	13 df       	rcall	.-474    	; 0x40c0 <uart0_putchar>
    429a:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <bufIndex0>
    429e:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <commandSize>
    42a2:	ff 91       	pop	r31
    42a4:	ef 91       	pop	r30
    42a6:	df 91       	pop	r29
    42a8:	cf 91       	pop	r28
    42aa:	bf 91       	pop	r27
    42ac:	af 91       	pop	r26
    42ae:	9f 91       	pop	r25
    42b0:	8f 91       	pop	r24
    42b2:	7f 91       	pop	r23
    42b4:	6f 91       	pop	r22
    42b6:	5f 91       	pop	r21
    42b8:	4f 91       	pop	r20
    42ba:	3f 91       	pop	r19
    42bc:	2f 91       	pop	r18
    42be:	0f 90       	pop	r0
    42c0:	0b be       	out	0x3b, r0	; 59
    42c2:	0f 90       	pop	r0
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	0f 90       	pop	r0
    42c8:	1f 90       	pop	r1
    42ca:	18 95       	reti

000042cc <__vector_36>:
    42cc:	1f 92       	push	r1
    42ce:	0f 92       	push	r0
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	0f 92       	push	r0
    42d4:	11 24       	eor	r1, r1
    42d6:	0b b6       	in	r0, 0x3b	; 59
    42d8:	0f 92       	push	r0
    42da:	2f 93       	push	r18
    42dc:	3f 93       	push	r19
    42de:	4f 93       	push	r20
    42e0:	5f 93       	push	r21
    42e2:	6f 93       	push	r22
    42e4:	7f 93       	push	r23
    42e6:	8f 93       	push	r24
    42e8:	9f 93       	push	r25
    42ea:	af 93       	push	r26
    42ec:	bf 93       	push	r27
    42ee:	ef 93       	push	r30
    42f0:	ff 93       	push	r31
    42f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    42f6:	84 fd       	sbrc	r24, 4
    42f8:	04 c0       	rjmp	.+8      	; 0x4302 <__vector_36+0x36>
    42fa:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    42fe:	83 ff       	sbrs	r24, 3
    4300:	08 c0       	rjmp	.+16     	; 0x4312 <__vector_36+0x46>
    4302:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	90 93 b5 09 	sts	0x09B5, r25	; 0x8009b5 <clrError+0x1>
    430c:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <clrError>
    4310:	19 c0       	rjmp	.+50     	; 0x4344 <__vector_36+0x78>
    4312:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4316:	8a 30       	cpi	r24, 0x0A	; 10
    4318:	41 f4       	brne	.+16     	; 0x432a <__vector_36+0x5e>
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	69 de       	rcall	.-814    	; 0x3ff0 <ringbuf_put>
    431e:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <commandCompleteFlag1>
    4322:	8f 5f       	subi	r24, 0xFF	; 255
    4324:	80 93 7f 0a 	sts	0x0A7F, r24	; 0x800a7f <commandCompleteFlag1>
    4328:	0d c0       	rjmp	.+26     	; 0x4344 <__vector_36+0x78>
    432a:	8d 30       	cpi	r24, 0x0D	; 13
    432c:	59 f0       	breq	.+22     	; 0x4344 <__vector_36+0x78>
    432e:	88 30       	cpi	r24, 0x08	; 8
    4330:	11 f0       	breq	.+4      	; 0x4336 <__vector_36+0x6a>
    4332:	8f 37       	cpi	r24, 0x7F	; 127
    4334:	11 f4       	brne	.+4      	; 0x433a <__vector_36+0x6e>
    4336:	33 de       	rcall	.-922    	; 0x3f9e <ringbuf_get>
    4338:	05 c0       	rjmp	.+10     	; 0x4344 <__vector_36+0x78>
    433a:	90 ee       	ldi	r25, 0xE0	; 224
    433c:	98 0f       	add	r25, r24
    433e:	9f 35       	cpi	r25, 0x5F	; 95
    4340:	08 f4       	brcc	.+2      	; 0x4344 <__vector_36+0x78>
    4342:	56 de       	rcall	.-852    	; 0x3ff0 <ringbuf_put>
    4344:	ff 91       	pop	r31
    4346:	ef 91       	pop	r30
    4348:	bf 91       	pop	r27
    434a:	af 91       	pop	r26
    434c:	9f 91       	pop	r25
    434e:	8f 91       	pop	r24
    4350:	7f 91       	pop	r23
    4352:	6f 91       	pop	r22
    4354:	5f 91       	pop	r21
    4356:	4f 91       	pop	r20
    4358:	3f 91       	pop	r19
    435a:	2f 91       	pop	r18
    435c:	0f 90       	pop	r0
    435e:	0b be       	out	0x3b, r0	; 59
    4360:	0f 90       	pop	r0
    4362:	0f be       	out	0x3f, r0	; 63
    4364:	0f 90       	pop	r0
    4366:	1f 90       	pop	r1
    4368:	18 95       	reti

0000436a <doUart>:
    436a:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <commandSize>
    436e:	88 23       	and	r24, r24
    4370:	69 f1       	breq	.+90     	; 0x43cc <doUart+0x62>
    4372:	90 91 b1 09 	lds	r25, 0x09B1	; 0x8009b1 <outputCharacters>
    4376:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <commandSize>
    437a:	98 17       	cp	r25, r24
    437c:	c0 f4       	brcc	.+48     	; 0x43ae <doUart+0x44>
    437e:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <commandCompleteFlag0>
    4382:	81 11       	cpse	r24, r1
    4384:	0b c0       	rjmp	.+22     	; 0x439c <doUart+0x32>
    4386:	60 91 a2 0a 	lds	r22, 0x0AA2	; 0x800aa2 <__iob+0x2>
    438a:	70 91 a3 0a 	lds	r23, 0x0AA3	; 0x800aa3 <__iob+0x3>
    438e:	e0 91 b1 09 	lds	r30, 0x09B1	; 0x8009b1 <outputCharacters>
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	e0 58       	subi	r30, 0x80	; 128
    4396:	f5 4f       	sbci	r31, 0xF5	; 245
    4398:	80 81       	ld	r24, Z
    439a:	92 de       	rcall	.-732    	; 0x40c0 <uart0_putchar>
    439c:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <outputCharacters>
    43a0:	8f 5f       	subi	r24, 0xFF	; 255
    43a2:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <outputCharacters>
    43a6:	8a e0       	ldi	r24, 0x0A	; 10
    43a8:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <pauseOutputForCmdCnt>
    43ac:	13 c0       	rjmp	.+38     	; 0x43d4 <doUart+0x6a>
    43ae:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <pauseOutputForCmdCnt>
    43b2:	81 11       	cpse	r24, r1
    43b4:	0f c0       	rjmp	.+30     	; 0x43d4 <doUart+0x6a>
    43b6:	8f b7       	in	r24, 0x3f	; 63
    43b8:	8f 77       	andi	r24, 0x7F	; 127
    43ba:	8f bf       	out	0x3f, r24	; 63
    43bc:	10 92 b1 09 	sts	0x09B1, r1	; 0x8009b1 <outputCharacters>
    43c0:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <commandSize>
    43c4:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <bufIndex0>
    43c8:	78 94       	sei
    43ca:	04 c0       	rjmp	.+8      	; 0x43d4 <doUart+0x6a>
    43cc:	10 92 b1 09 	sts	0x09B1, r1	; 0x8009b1 <outputCharacters>
    43d0:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <pauseOutputForCmdCnt>
    43d4:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <commandCompleteFlag0>
    43d8:	88 23       	and	r24, r24
    43da:	a9 f0       	breq	.+42     	; 0x4406 <doUart+0x9c>
    43dc:	80 e8       	ldi	r24, 0x80	; 128
    43de:	9a e0       	ldi	r25, 0x0A	; 10
    43e0:	9f 93       	push	r25
    43e2:	8f 93       	push	r24
    43e4:	84 e3       	ldi	r24, 0x34	; 52
    43e6:	99 e0       	ldi	r25, 0x09	; 9
    43e8:	9f 93       	push	r25
    43ea:	8f 93       	push	r24
    43ec:	7c d6       	rcall	.+3320   	; 0x50e6 <printf>
    43ee:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <bufIndex0>
    43f2:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <pauseOutputForCmdCnt>
    43f6:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <commandSize>
    43fa:	10 92 b1 09 	sts	0x09B1, r1	; 0x8009b1 <outputCharacters>
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <commandCompleteFlag1>
    440a:	88 23       	and	r24, r24
    440c:	99 f0       	breq	.+38     	; 0x4434 <doUart+0xca>
    440e:	8f ef       	ldi	r24, 0xFF	; 255
    4410:	99 e0       	ldi	r25, 0x09	; 9
    4412:	9f 93       	push	r25
    4414:	8f 93       	push	r24
    4416:	8e e3       	ldi	r24, 0x3E	; 62
    4418:	99 e0       	ldi	r25, 0x09	; 9
    441a:	9f 93       	push	r25
    441c:	8f 93       	push	r24
    441e:	63 d6       	rcall	.+3270   	; 0x50e6 <printf>
    4420:	8e e7       	ldi	r24, 0x7E	; 126
    4422:	62 de       	rcall	.-828    	; 0x40e8 <uart1_put>
    4424:	8a e2       	ldi	r24, 0x2A	; 42
    4426:	60 de       	rcall	.-832    	; 0x40e8 <uart1_put>
    4428:	8e e7       	ldi	r24, 0x7E	; 126
    442a:	5e de       	rcall	.-836    	; 0x40e8 <uart1_put>
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	08 95       	ret

00004436 <__fixunssfsi>:
    4436:	70 d0       	rcall	.+224    	; 0x4518 <__fp_splitA>
    4438:	88 f0       	brcs	.+34     	; 0x445c <__fixunssfsi+0x26>
    443a:	9f 57       	subi	r25, 0x7F	; 127
    443c:	90 f0       	brcs	.+36     	; 0x4462 <__fixunssfsi+0x2c>
    443e:	b9 2f       	mov	r27, r25
    4440:	99 27       	eor	r25, r25
    4442:	b7 51       	subi	r27, 0x17	; 23
    4444:	a0 f0       	brcs	.+40     	; 0x446e <__fixunssfsi+0x38>
    4446:	d1 f0       	breq	.+52     	; 0x447c <__fixunssfsi+0x46>
    4448:	66 0f       	add	r22, r22
    444a:	77 1f       	adc	r23, r23
    444c:	88 1f       	adc	r24, r24
    444e:	99 1f       	adc	r25, r25
    4450:	1a f0       	brmi	.+6      	; 0x4458 <__fixunssfsi+0x22>
    4452:	ba 95       	dec	r27
    4454:	c9 f7       	brne	.-14     	; 0x4448 <__fixunssfsi+0x12>
    4456:	12 c0       	rjmp	.+36     	; 0x447c <__fixunssfsi+0x46>
    4458:	b1 30       	cpi	r27, 0x01	; 1
    445a:	81 f0       	breq	.+32     	; 0x447c <__fixunssfsi+0x46>
    445c:	77 d0       	rcall	.+238    	; 0x454c <__fp_zero>
    445e:	b1 e0       	ldi	r27, 0x01	; 1
    4460:	08 95       	ret
    4462:	74 c0       	rjmp	.+232    	; 0x454c <__fp_zero>
    4464:	67 2f       	mov	r22, r23
    4466:	78 2f       	mov	r23, r24
    4468:	88 27       	eor	r24, r24
    446a:	b8 5f       	subi	r27, 0xF8	; 248
    446c:	39 f0       	breq	.+14     	; 0x447c <__fixunssfsi+0x46>
    446e:	b9 3f       	cpi	r27, 0xF9	; 249
    4470:	cc f3       	brlt	.-14     	; 0x4464 <__fixunssfsi+0x2e>
    4472:	86 95       	lsr	r24
    4474:	77 95       	ror	r23
    4476:	67 95       	ror	r22
    4478:	b3 95       	inc	r27
    447a:	d9 f7       	brne	.-10     	; 0x4472 <__fixunssfsi+0x3c>
    447c:	3e f4       	brtc	.+14     	; 0x448c <__fixunssfsi+0x56>
    447e:	90 95       	com	r25
    4480:	80 95       	com	r24
    4482:	70 95       	com	r23
    4484:	61 95       	neg	r22
    4486:	7f 4f       	sbci	r23, 0xFF	; 255
    4488:	8f 4f       	sbci	r24, 0xFF	; 255
    448a:	9f 4f       	sbci	r25, 0xFF	; 255
    448c:	08 95       	ret

0000448e <__floatunsisf>:
    448e:	e8 94       	clt
    4490:	09 c0       	rjmp	.+18     	; 0x44a4 <__floatsisf+0x12>

00004492 <__floatsisf>:
    4492:	97 fb       	bst	r25, 7
    4494:	3e f4       	brtc	.+14     	; 0x44a4 <__floatsisf+0x12>
    4496:	90 95       	com	r25
    4498:	80 95       	com	r24
    449a:	70 95       	com	r23
    449c:	61 95       	neg	r22
    449e:	7f 4f       	sbci	r23, 0xFF	; 255
    44a0:	8f 4f       	sbci	r24, 0xFF	; 255
    44a2:	9f 4f       	sbci	r25, 0xFF	; 255
    44a4:	99 23       	and	r25, r25
    44a6:	a9 f0       	breq	.+42     	; 0x44d2 <__floatsisf+0x40>
    44a8:	f9 2f       	mov	r31, r25
    44aa:	96 e9       	ldi	r25, 0x96	; 150
    44ac:	bb 27       	eor	r27, r27
    44ae:	93 95       	inc	r25
    44b0:	f6 95       	lsr	r31
    44b2:	87 95       	ror	r24
    44b4:	77 95       	ror	r23
    44b6:	67 95       	ror	r22
    44b8:	b7 95       	ror	r27
    44ba:	f1 11       	cpse	r31, r1
    44bc:	f8 cf       	rjmp	.-16     	; 0x44ae <__floatsisf+0x1c>
    44be:	fa f4       	brpl	.+62     	; 0x44fe <__floatsisf+0x6c>
    44c0:	bb 0f       	add	r27, r27
    44c2:	11 f4       	brne	.+4      	; 0x44c8 <__floatsisf+0x36>
    44c4:	60 ff       	sbrs	r22, 0
    44c6:	1b c0       	rjmp	.+54     	; 0x44fe <__floatsisf+0x6c>
    44c8:	6f 5f       	subi	r22, 0xFF	; 255
    44ca:	7f 4f       	sbci	r23, 0xFF	; 255
    44cc:	8f 4f       	sbci	r24, 0xFF	; 255
    44ce:	9f 4f       	sbci	r25, 0xFF	; 255
    44d0:	16 c0       	rjmp	.+44     	; 0x44fe <__floatsisf+0x6c>
    44d2:	88 23       	and	r24, r24
    44d4:	11 f0       	breq	.+4      	; 0x44da <__floatsisf+0x48>
    44d6:	96 e9       	ldi	r25, 0x96	; 150
    44d8:	11 c0       	rjmp	.+34     	; 0x44fc <__floatsisf+0x6a>
    44da:	77 23       	and	r23, r23
    44dc:	21 f0       	breq	.+8      	; 0x44e6 <__floatsisf+0x54>
    44de:	9e e8       	ldi	r25, 0x8E	; 142
    44e0:	87 2f       	mov	r24, r23
    44e2:	76 2f       	mov	r23, r22
    44e4:	05 c0       	rjmp	.+10     	; 0x44f0 <__floatsisf+0x5e>
    44e6:	66 23       	and	r22, r22
    44e8:	71 f0       	breq	.+28     	; 0x4506 <__floatsisf+0x74>
    44ea:	96 e8       	ldi	r25, 0x86	; 134
    44ec:	86 2f       	mov	r24, r22
    44ee:	70 e0       	ldi	r23, 0x00	; 0
    44f0:	60 e0       	ldi	r22, 0x00	; 0
    44f2:	2a f0       	brmi	.+10     	; 0x44fe <__floatsisf+0x6c>
    44f4:	9a 95       	dec	r25
    44f6:	66 0f       	add	r22, r22
    44f8:	77 1f       	adc	r23, r23
    44fa:	88 1f       	adc	r24, r24
    44fc:	da f7       	brpl	.-10     	; 0x44f4 <__floatsisf+0x62>
    44fe:	88 0f       	add	r24, r24
    4500:	96 95       	lsr	r25
    4502:	87 95       	ror	r24
    4504:	97 f9       	bld	r25, 7
    4506:	08 95       	ret

00004508 <__fp_split3>:
    4508:	57 fd       	sbrc	r21, 7
    450a:	90 58       	subi	r25, 0x80	; 128
    450c:	44 0f       	add	r20, r20
    450e:	55 1f       	adc	r21, r21
    4510:	59 f0       	breq	.+22     	; 0x4528 <__fp_splitA+0x10>
    4512:	5f 3f       	cpi	r21, 0xFF	; 255
    4514:	71 f0       	breq	.+28     	; 0x4532 <__fp_splitA+0x1a>
    4516:	47 95       	ror	r20

00004518 <__fp_splitA>:
    4518:	88 0f       	add	r24, r24
    451a:	97 fb       	bst	r25, 7
    451c:	99 1f       	adc	r25, r25
    451e:	61 f0       	breq	.+24     	; 0x4538 <__fp_splitA+0x20>
    4520:	9f 3f       	cpi	r25, 0xFF	; 255
    4522:	79 f0       	breq	.+30     	; 0x4542 <__fp_splitA+0x2a>
    4524:	87 95       	ror	r24
    4526:	08 95       	ret
    4528:	12 16       	cp	r1, r18
    452a:	13 06       	cpc	r1, r19
    452c:	14 06       	cpc	r1, r20
    452e:	55 1f       	adc	r21, r21
    4530:	f2 cf       	rjmp	.-28     	; 0x4516 <__fp_split3+0xe>
    4532:	46 95       	lsr	r20
    4534:	f1 df       	rcall	.-30     	; 0x4518 <__fp_splitA>
    4536:	08 c0       	rjmp	.+16     	; 0x4548 <__fp_splitA+0x30>
    4538:	16 16       	cp	r1, r22
    453a:	17 06       	cpc	r1, r23
    453c:	18 06       	cpc	r1, r24
    453e:	99 1f       	adc	r25, r25
    4540:	f1 cf       	rjmp	.-30     	; 0x4524 <__fp_splitA+0xc>
    4542:	86 95       	lsr	r24
    4544:	71 05       	cpc	r23, r1
    4546:	61 05       	cpc	r22, r1
    4548:	08 94       	sec
    454a:	08 95       	ret

0000454c <__fp_zero>:
    454c:	e8 94       	clt

0000454e <__fp_szero>:
    454e:	bb 27       	eor	r27, r27
    4550:	66 27       	eor	r22, r22
    4552:	77 27       	eor	r23, r23
    4554:	cb 01       	movw	r24, r22
    4556:	97 f9       	bld	r25, 7
    4558:	08 95       	ret

0000455a <__mulsf3>:
    455a:	0b d0       	rcall	.+22     	; 0x4572 <__mulsf3x>
    455c:	78 c0       	rjmp	.+240    	; 0x464e <__fp_round>
    455e:	69 d0       	rcall	.+210    	; 0x4632 <__fp_pscA>
    4560:	28 f0       	brcs	.+10     	; 0x456c <__mulsf3+0x12>
    4562:	6e d0       	rcall	.+220    	; 0x4640 <__fp_pscB>
    4564:	18 f0       	brcs	.+6      	; 0x456c <__mulsf3+0x12>
    4566:	95 23       	and	r25, r21
    4568:	09 f0       	breq	.+2      	; 0x456c <__mulsf3+0x12>
    456a:	5a c0       	rjmp	.+180    	; 0x4620 <__fp_inf>
    456c:	5f c0       	rjmp	.+190    	; 0x462c <__fp_nan>
    456e:	11 24       	eor	r1, r1
    4570:	ee cf       	rjmp	.-36     	; 0x454e <__fp_szero>

00004572 <__mulsf3x>:
    4572:	ca df       	rcall	.-108    	; 0x4508 <__fp_split3>
    4574:	a0 f3       	brcs	.-24     	; 0x455e <__mulsf3+0x4>

00004576 <__mulsf3_pse>:
    4576:	95 9f       	mul	r25, r21
    4578:	d1 f3       	breq	.-12     	; 0x456e <__mulsf3+0x14>
    457a:	95 0f       	add	r25, r21
    457c:	50 e0       	ldi	r21, 0x00	; 0
    457e:	55 1f       	adc	r21, r21
    4580:	62 9f       	mul	r22, r18
    4582:	f0 01       	movw	r30, r0
    4584:	72 9f       	mul	r23, r18
    4586:	bb 27       	eor	r27, r27
    4588:	f0 0d       	add	r31, r0
    458a:	b1 1d       	adc	r27, r1
    458c:	63 9f       	mul	r22, r19
    458e:	aa 27       	eor	r26, r26
    4590:	f0 0d       	add	r31, r0
    4592:	b1 1d       	adc	r27, r1
    4594:	aa 1f       	adc	r26, r26
    4596:	64 9f       	mul	r22, r20
    4598:	66 27       	eor	r22, r22
    459a:	b0 0d       	add	r27, r0
    459c:	a1 1d       	adc	r26, r1
    459e:	66 1f       	adc	r22, r22
    45a0:	82 9f       	mul	r24, r18
    45a2:	22 27       	eor	r18, r18
    45a4:	b0 0d       	add	r27, r0
    45a6:	a1 1d       	adc	r26, r1
    45a8:	62 1f       	adc	r22, r18
    45aa:	73 9f       	mul	r23, r19
    45ac:	b0 0d       	add	r27, r0
    45ae:	a1 1d       	adc	r26, r1
    45b0:	62 1f       	adc	r22, r18
    45b2:	83 9f       	mul	r24, r19
    45b4:	a0 0d       	add	r26, r0
    45b6:	61 1d       	adc	r22, r1
    45b8:	22 1f       	adc	r18, r18
    45ba:	74 9f       	mul	r23, r20
    45bc:	33 27       	eor	r19, r19
    45be:	a0 0d       	add	r26, r0
    45c0:	61 1d       	adc	r22, r1
    45c2:	23 1f       	adc	r18, r19
    45c4:	84 9f       	mul	r24, r20
    45c6:	60 0d       	add	r22, r0
    45c8:	21 1d       	adc	r18, r1
    45ca:	82 2f       	mov	r24, r18
    45cc:	76 2f       	mov	r23, r22
    45ce:	6a 2f       	mov	r22, r26
    45d0:	11 24       	eor	r1, r1
    45d2:	9f 57       	subi	r25, 0x7F	; 127
    45d4:	50 40       	sbci	r21, 0x00	; 0
    45d6:	8a f0       	brmi	.+34     	; 0x45fa <__mulsf3_pse+0x84>
    45d8:	e1 f0       	breq	.+56     	; 0x4612 <__mulsf3_pse+0x9c>
    45da:	88 23       	and	r24, r24
    45dc:	4a f0       	brmi	.+18     	; 0x45f0 <__mulsf3_pse+0x7a>
    45de:	ee 0f       	add	r30, r30
    45e0:	ff 1f       	adc	r31, r31
    45e2:	bb 1f       	adc	r27, r27
    45e4:	66 1f       	adc	r22, r22
    45e6:	77 1f       	adc	r23, r23
    45e8:	88 1f       	adc	r24, r24
    45ea:	91 50       	subi	r25, 0x01	; 1
    45ec:	50 40       	sbci	r21, 0x00	; 0
    45ee:	a9 f7       	brne	.-22     	; 0x45da <__mulsf3_pse+0x64>
    45f0:	9e 3f       	cpi	r25, 0xFE	; 254
    45f2:	51 05       	cpc	r21, r1
    45f4:	70 f0       	brcs	.+28     	; 0x4612 <__mulsf3_pse+0x9c>
    45f6:	14 c0       	rjmp	.+40     	; 0x4620 <__fp_inf>
    45f8:	aa cf       	rjmp	.-172    	; 0x454e <__fp_szero>
    45fa:	5f 3f       	cpi	r21, 0xFF	; 255
    45fc:	ec f3       	brlt	.-6      	; 0x45f8 <__mulsf3_pse+0x82>
    45fe:	98 3e       	cpi	r25, 0xE8	; 232
    4600:	dc f3       	brlt	.-10     	; 0x45f8 <__mulsf3_pse+0x82>
    4602:	86 95       	lsr	r24
    4604:	77 95       	ror	r23
    4606:	67 95       	ror	r22
    4608:	b7 95       	ror	r27
    460a:	f7 95       	ror	r31
    460c:	e7 95       	ror	r30
    460e:	9f 5f       	subi	r25, 0xFF	; 255
    4610:	c1 f7       	brne	.-16     	; 0x4602 <__mulsf3_pse+0x8c>
    4612:	fe 2b       	or	r31, r30
    4614:	88 0f       	add	r24, r24
    4616:	91 1d       	adc	r25, r1
    4618:	96 95       	lsr	r25
    461a:	87 95       	ror	r24
    461c:	97 f9       	bld	r25, 7
    461e:	08 95       	ret

00004620 <__fp_inf>:
    4620:	97 f9       	bld	r25, 7
    4622:	9f 67       	ori	r25, 0x7F	; 127
    4624:	80 e8       	ldi	r24, 0x80	; 128
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	60 e0       	ldi	r22, 0x00	; 0
    462a:	08 95       	ret

0000462c <__fp_nan>:
    462c:	9f ef       	ldi	r25, 0xFF	; 255
    462e:	80 ec       	ldi	r24, 0xC0	; 192
    4630:	08 95       	ret

00004632 <__fp_pscA>:
    4632:	00 24       	eor	r0, r0
    4634:	0a 94       	dec	r0
    4636:	16 16       	cp	r1, r22
    4638:	17 06       	cpc	r1, r23
    463a:	18 06       	cpc	r1, r24
    463c:	09 06       	cpc	r0, r25
    463e:	08 95       	ret

00004640 <__fp_pscB>:
    4640:	00 24       	eor	r0, r0
    4642:	0a 94       	dec	r0
    4644:	12 16       	cp	r1, r18
    4646:	13 06       	cpc	r1, r19
    4648:	14 06       	cpc	r1, r20
    464a:	05 06       	cpc	r0, r21
    464c:	08 95       	ret

0000464e <__fp_round>:
    464e:	09 2e       	mov	r0, r25
    4650:	03 94       	inc	r0
    4652:	00 0c       	add	r0, r0
    4654:	11 f4       	brne	.+4      	; 0x465a <__fp_round+0xc>
    4656:	88 23       	and	r24, r24
    4658:	52 f0       	brmi	.+20     	; 0x466e <__fp_round+0x20>
    465a:	bb 0f       	add	r27, r27
    465c:	40 f4       	brcc	.+16     	; 0x466e <__fp_round+0x20>
    465e:	bf 2b       	or	r27, r31
    4660:	11 f4       	brne	.+4      	; 0x4666 <__fp_round+0x18>
    4662:	60 ff       	sbrs	r22, 0
    4664:	04 c0       	rjmp	.+8      	; 0x466e <__fp_round+0x20>
    4666:	6f 5f       	subi	r22, 0xFF	; 255
    4668:	7f 4f       	sbci	r23, 0xFF	; 255
    466a:	8f 4f       	sbci	r24, 0xFF	; 255
    466c:	9f 4f       	sbci	r25, 0xFF	; 255
    466e:	08 95       	ret

00004670 <vfprintf>:
    4670:	2f 92       	push	r2
    4672:	3f 92       	push	r3
    4674:	4f 92       	push	r4
    4676:	5f 92       	push	r5
    4678:	6f 92       	push	r6
    467a:	7f 92       	push	r7
    467c:	8f 92       	push	r8
    467e:	9f 92       	push	r9
    4680:	af 92       	push	r10
    4682:	bf 92       	push	r11
    4684:	cf 92       	push	r12
    4686:	df 92       	push	r13
    4688:	ef 92       	push	r14
    468a:	ff 92       	push	r15
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	cf 93       	push	r28
    4692:	df 93       	push	r29
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
    4698:	60 97       	sbiw	r28, 0x10	; 16
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	f8 94       	cli
    469e:	de bf       	out	0x3e, r29	; 62
    46a0:	0f be       	out	0x3f, r0	; 63
    46a2:	cd bf       	out	0x3d, r28	; 61
    46a4:	7c 01       	movw	r14, r24
    46a6:	1b 01       	movw	r2, r22
    46a8:	6a 01       	movw	r12, r20
    46aa:	fc 01       	movw	r30, r24
    46ac:	17 82       	std	Z+7, r1	; 0x07
    46ae:	16 82       	std	Z+6, r1	; 0x06
    46b0:	83 81       	ldd	r24, Z+3	; 0x03
    46b2:	81 ff       	sbrs	r24, 1
    46b4:	2a c3       	rjmp	.+1620   	; 0x4d0a <vfprintf+0x69a>
    46b6:	9e 01       	movw	r18, r28
    46b8:	2f 5f       	subi	r18, 0xFF	; 255
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	39 01       	movw	r6, r18
    46be:	f7 01       	movw	r30, r14
    46c0:	93 81       	ldd	r25, Z+3	; 0x03
    46c2:	f1 01       	movw	r30, r2
    46c4:	93 fd       	sbrc	r25, 3
    46c6:	85 91       	lpm	r24, Z+
    46c8:	93 ff       	sbrs	r25, 3
    46ca:	81 91       	ld	r24, Z+
    46cc:	1f 01       	movw	r2, r30
    46ce:	88 23       	and	r24, r24
    46d0:	09 f4       	brne	.+2      	; 0x46d4 <vfprintf+0x64>
    46d2:	17 c3       	rjmp	.+1582   	; 0x4d02 <vfprintf+0x692>
    46d4:	85 32       	cpi	r24, 0x25	; 37
    46d6:	39 f4       	brne	.+14     	; 0x46e6 <vfprintf+0x76>
    46d8:	93 fd       	sbrc	r25, 3
    46da:	85 91       	lpm	r24, Z+
    46dc:	93 ff       	sbrs	r25, 3
    46de:	81 91       	ld	r24, Z+
    46e0:	1f 01       	movw	r2, r30
    46e2:	85 32       	cpi	r24, 0x25	; 37
    46e4:	31 f4       	brne	.+12     	; 0x46f2 <vfprintf+0x82>
    46e6:	b7 01       	movw	r22, r14
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	c1 d4       	rcall	.+2434   	; 0x506e <fputc>
    46ec:	56 01       	movw	r10, r12
    46ee:	65 01       	movw	r12, r10
    46f0:	e6 cf       	rjmp	.-52     	; 0x46be <vfprintf+0x4e>
    46f2:	10 e0       	ldi	r17, 0x00	; 0
    46f4:	51 2c       	mov	r5, r1
    46f6:	91 2c       	mov	r9, r1
    46f8:	ff e1       	ldi	r31, 0x1F	; 31
    46fa:	f9 15       	cp	r31, r9
    46fc:	d8 f0       	brcs	.+54     	; 0x4734 <vfprintf+0xc4>
    46fe:	8b 32       	cpi	r24, 0x2B	; 43
    4700:	79 f0       	breq	.+30     	; 0x4720 <vfprintf+0xb0>
    4702:	38 f4       	brcc	.+14     	; 0x4712 <vfprintf+0xa2>
    4704:	80 32       	cpi	r24, 0x20	; 32
    4706:	79 f0       	breq	.+30     	; 0x4726 <vfprintf+0xb6>
    4708:	83 32       	cpi	r24, 0x23	; 35
    470a:	a1 f4       	brne	.+40     	; 0x4734 <vfprintf+0xc4>
    470c:	f9 2d       	mov	r31, r9
    470e:	f0 61       	ori	r31, 0x10	; 16
    4710:	2e c0       	rjmp	.+92     	; 0x476e <vfprintf+0xfe>
    4712:	8d 32       	cpi	r24, 0x2D	; 45
    4714:	61 f0       	breq	.+24     	; 0x472e <vfprintf+0xbe>
    4716:	80 33       	cpi	r24, 0x30	; 48
    4718:	69 f4       	brne	.+26     	; 0x4734 <vfprintf+0xc4>
    471a:	29 2d       	mov	r18, r9
    471c:	21 60       	ori	r18, 0x01	; 1
    471e:	2d c0       	rjmp	.+90     	; 0x477a <vfprintf+0x10a>
    4720:	39 2d       	mov	r19, r9
    4722:	32 60       	ori	r19, 0x02	; 2
    4724:	93 2e       	mov	r9, r19
    4726:	89 2d       	mov	r24, r9
    4728:	84 60       	ori	r24, 0x04	; 4
    472a:	98 2e       	mov	r9, r24
    472c:	2a c0       	rjmp	.+84     	; 0x4782 <vfprintf+0x112>
    472e:	e9 2d       	mov	r30, r9
    4730:	e8 60       	ori	r30, 0x08	; 8
    4732:	15 c0       	rjmp	.+42     	; 0x475e <vfprintf+0xee>
    4734:	97 fc       	sbrc	r9, 7
    4736:	2d c0       	rjmp	.+90     	; 0x4792 <vfprintf+0x122>
    4738:	20 ed       	ldi	r18, 0xD0	; 208
    473a:	28 0f       	add	r18, r24
    473c:	2a 30       	cpi	r18, 0x0A	; 10
    473e:	88 f4       	brcc	.+34     	; 0x4762 <vfprintf+0xf2>
    4740:	96 fe       	sbrs	r9, 6
    4742:	06 c0       	rjmp	.+12     	; 0x4750 <vfprintf+0xe0>
    4744:	3a e0       	ldi	r19, 0x0A	; 10
    4746:	13 9f       	mul	r17, r19
    4748:	20 0d       	add	r18, r0
    474a:	11 24       	eor	r1, r1
    474c:	12 2f       	mov	r17, r18
    474e:	19 c0       	rjmp	.+50     	; 0x4782 <vfprintf+0x112>
    4750:	8a e0       	ldi	r24, 0x0A	; 10
    4752:	58 9e       	mul	r5, r24
    4754:	20 0d       	add	r18, r0
    4756:	11 24       	eor	r1, r1
    4758:	52 2e       	mov	r5, r18
    475a:	e9 2d       	mov	r30, r9
    475c:	e0 62       	ori	r30, 0x20	; 32
    475e:	9e 2e       	mov	r9, r30
    4760:	10 c0       	rjmp	.+32     	; 0x4782 <vfprintf+0x112>
    4762:	8e 32       	cpi	r24, 0x2E	; 46
    4764:	31 f4       	brne	.+12     	; 0x4772 <vfprintf+0x102>
    4766:	96 fc       	sbrc	r9, 6
    4768:	cc c2       	rjmp	.+1432   	; 0x4d02 <vfprintf+0x692>
    476a:	f9 2d       	mov	r31, r9
    476c:	f0 64       	ori	r31, 0x40	; 64
    476e:	9f 2e       	mov	r9, r31
    4770:	08 c0       	rjmp	.+16     	; 0x4782 <vfprintf+0x112>
    4772:	8c 36       	cpi	r24, 0x6C	; 108
    4774:	21 f4       	brne	.+8      	; 0x477e <vfprintf+0x10e>
    4776:	29 2d       	mov	r18, r9
    4778:	20 68       	ori	r18, 0x80	; 128
    477a:	92 2e       	mov	r9, r18
    477c:	02 c0       	rjmp	.+4      	; 0x4782 <vfprintf+0x112>
    477e:	88 36       	cpi	r24, 0x68	; 104
    4780:	41 f4       	brne	.+16     	; 0x4792 <vfprintf+0x122>
    4782:	f1 01       	movw	r30, r2
    4784:	93 fd       	sbrc	r25, 3
    4786:	85 91       	lpm	r24, Z+
    4788:	93 ff       	sbrs	r25, 3
    478a:	81 91       	ld	r24, Z+
    478c:	1f 01       	movw	r2, r30
    478e:	81 11       	cpse	r24, r1
    4790:	b3 cf       	rjmp	.-154    	; 0x46f8 <vfprintf+0x88>
    4792:	9b eb       	ldi	r25, 0xBB	; 187
    4794:	98 0f       	add	r25, r24
    4796:	93 30       	cpi	r25, 0x03	; 3
    4798:	20 f4       	brcc	.+8      	; 0x47a2 <vfprintf+0x132>
    479a:	99 2d       	mov	r25, r9
    479c:	90 61       	ori	r25, 0x10	; 16
    479e:	80 5e       	subi	r24, 0xE0	; 224
    47a0:	07 c0       	rjmp	.+14     	; 0x47b0 <vfprintf+0x140>
    47a2:	9b e9       	ldi	r25, 0x9B	; 155
    47a4:	98 0f       	add	r25, r24
    47a6:	93 30       	cpi	r25, 0x03	; 3
    47a8:	08 f0       	brcs	.+2      	; 0x47ac <vfprintf+0x13c>
    47aa:	59 c1       	rjmp	.+690    	; 0x4a5e <vfprintf+0x3ee>
    47ac:	99 2d       	mov	r25, r9
    47ae:	9f 7e       	andi	r25, 0xEF	; 239
    47b0:	96 ff       	sbrs	r25, 6
    47b2:	16 e0       	ldi	r17, 0x06	; 6
    47b4:	9f 73       	andi	r25, 0x3F	; 63
    47b6:	99 2e       	mov	r9, r25
    47b8:	85 36       	cpi	r24, 0x65	; 101
    47ba:	19 f4       	brne	.+6      	; 0x47c2 <vfprintf+0x152>
    47bc:	90 64       	ori	r25, 0x40	; 64
    47be:	99 2e       	mov	r9, r25
    47c0:	08 c0       	rjmp	.+16     	; 0x47d2 <vfprintf+0x162>
    47c2:	86 36       	cpi	r24, 0x66	; 102
    47c4:	21 f4       	brne	.+8      	; 0x47ce <vfprintf+0x15e>
    47c6:	39 2f       	mov	r19, r25
    47c8:	30 68       	ori	r19, 0x80	; 128
    47ca:	93 2e       	mov	r9, r19
    47cc:	02 c0       	rjmp	.+4      	; 0x47d2 <vfprintf+0x162>
    47ce:	11 11       	cpse	r17, r1
    47d0:	11 50       	subi	r17, 0x01	; 1
    47d2:	97 fe       	sbrs	r9, 7
    47d4:	07 c0       	rjmp	.+14     	; 0x47e4 <vfprintf+0x174>
    47d6:	1c 33       	cpi	r17, 0x3C	; 60
    47d8:	50 f4       	brcc	.+20     	; 0x47ee <vfprintf+0x17e>
    47da:	44 24       	eor	r4, r4
    47dc:	43 94       	inc	r4
    47de:	41 0e       	add	r4, r17
    47e0:	27 e0       	ldi	r18, 0x07	; 7
    47e2:	0b c0       	rjmp	.+22     	; 0x47fa <vfprintf+0x18a>
    47e4:	18 30       	cpi	r17, 0x08	; 8
    47e6:	38 f0       	brcs	.+14     	; 0x47f6 <vfprintf+0x186>
    47e8:	27 e0       	ldi	r18, 0x07	; 7
    47ea:	17 e0       	ldi	r17, 0x07	; 7
    47ec:	05 c0       	rjmp	.+10     	; 0x47f8 <vfprintf+0x188>
    47ee:	27 e0       	ldi	r18, 0x07	; 7
    47f0:	9c e3       	ldi	r25, 0x3C	; 60
    47f2:	49 2e       	mov	r4, r25
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <vfprintf+0x18a>
    47f6:	21 2f       	mov	r18, r17
    47f8:	41 2c       	mov	r4, r1
    47fa:	56 01       	movw	r10, r12
    47fc:	84 e0       	ldi	r24, 0x04	; 4
    47fe:	a8 0e       	add	r10, r24
    4800:	b1 1c       	adc	r11, r1
    4802:	f6 01       	movw	r30, r12
    4804:	60 81       	ld	r22, Z
    4806:	71 81       	ldd	r23, Z+1	; 0x01
    4808:	82 81       	ldd	r24, Z+2	; 0x02
    480a:	93 81       	ldd	r25, Z+3	; 0x03
    480c:	04 2d       	mov	r16, r4
    480e:	a3 01       	movw	r20, r6
    4810:	28 d3       	rcall	.+1616   	; 0x4e62 <__ftoa_engine>
    4812:	6c 01       	movw	r12, r24
    4814:	f9 81       	ldd	r31, Y+1	; 0x01
    4816:	fc 87       	std	Y+12, r31	; 0x0c
    4818:	f0 ff       	sbrs	r31, 0
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <vfprintf+0x1b0>
    481c:	f3 ff       	sbrs	r31, 3
    481e:	06 c0       	rjmp	.+12     	; 0x482c <vfprintf+0x1bc>
    4820:	91 fc       	sbrc	r9, 1
    4822:	06 c0       	rjmp	.+12     	; 0x4830 <vfprintf+0x1c0>
    4824:	92 fe       	sbrs	r9, 2
    4826:	06 c0       	rjmp	.+12     	; 0x4834 <vfprintf+0x1c4>
    4828:	00 e2       	ldi	r16, 0x20	; 32
    482a:	05 c0       	rjmp	.+10     	; 0x4836 <vfprintf+0x1c6>
    482c:	0d e2       	ldi	r16, 0x2D	; 45
    482e:	03 c0       	rjmp	.+6      	; 0x4836 <vfprintf+0x1c6>
    4830:	0b e2       	ldi	r16, 0x2B	; 43
    4832:	01 c0       	rjmp	.+2      	; 0x4836 <vfprintf+0x1c6>
    4834:	00 e0       	ldi	r16, 0x00	; 0
    4836:	8c 85       	ldd	r24, Y+12	; 0x0c
    4838:	8c 70       	andi	r24, 0x0C	; 12
    483a:	19 f0       	breq	.+6      	; 0x4842 <vfprintf+0x1d2>
    483c:	01 11       	cpse	r16, r1
    483e:	43 c2       	rjmp	.+1158   	; 0x4cc6 <vfprintf+0x656>
    4840:	80 c2       	rjmp	.+1280   	; 0x4d42 <vfprintf+0x6d2>
    4842:	97 fe       	sbrs	r9, 7
    4844:	10 c0       	rjmp	.+32     	; 0x4866 <vfprintf+0x1f6>
    4846:	4c 0c       	add	r4, r12
    4848:	fc 85       	ldd	r31, Y+12	; 0x0c
    484a:	f4 ff       	sbrs	r31, 4
    484c:	04 c0       	rjmp	.+8      	; 0x4856 <vfprintf+0x1e6>
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	81 33       	cpi	r24, 0x31	; 49
    4852:	09 f4       	brne	.+2      	; 0x4856 <vfprintf+0x1e6>
    4854:	4a 94       	dec	r4
    4856:	14 14       	cp	r1, r4
    4858:	74 f5       	brge	.+92     	; 0x48b6 <vfprintf+0x246>
    485a:	28 e0       	ldi	r18, 0x08	; 8
    485c:	24 15       	cp	r18, r4
    485e:	78 f5       	brcc	.+94     	; 0x48be <vfprintf+0x24e>
    4860:	88 e0       	ldi	r24, 0x08	; 8
    4862:	48 2e       	mov	r4, r24
    4864:	2c c0       	rjmp	.+88     	; 0x48be <vfprintf+0x24e>
    4866:	96 fc       	sbrc	r9, 6
    4868:	2a c0       	rjmp	.+84     	; 0x48be <vfprintf+0x24e>
    486a:	81 2f       	mov	r24, r17
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	8c 15       	cp	r24, r12
    4870:	9d 05       	cpc	r25, r13
    4872:	9c f0       	brlt	.+38     	; 0x489a <vfprintf+0x22a>
    4874:	3c ef       	ldi	r19, 0xFC	; 252
    4876:	c3 16       	cp	r12, r19
    4878:	3f ef       	ldi	r19, 0xFF	; 255
    487a:	d3 06       	cpc	r13, r19
    487c:	74 f0       	brlt	.+28     	; 0x489a <vfprintf+0x22a>
    487e:	89 2d       	mov	r24, r9
    4880:	80 68       	ori	r24, 0x80	; 128
    4882:	98 2e       	mov	r9, r24
    4884:	0a c0       	rjmp	.+20     	; 0x489a <vfprintf+0x22a>
    4886:	e2 e0       	ldi	r30, 0x02	; 2
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	ec 0f       	add	r30, r28
    488c:	fd 1f       	adc	r31, r29
    488e:	e1 0f       	add	r30, r17
    4890:	f1 1d       	adc	r31, r1
    4892:	80 81       	ld	r24, Z
    4894:	80 33       	cpi	r24, 0x30	; 48
    4896:	19 f4       	brne	.+6      	; 0x489e <vfprintf+0x22e>
    4898:	11 50       	subi	r17, 0x01	; 1
    489a:	11 11       	cpse	r17, r1
    489c:	f4 cf       	rjmp	.-24     	; 0x4886 <vfprintf+0x216>
    489e:	97 fe       	sbrs	r9, 7
    48a0:	0e c0       	rjmp	.+28     	; 0x48be <vfprintf+0x24e>
    48a2:	44 24       	eor	r4, r4
    48a4:	43 94       	inc	r4
    48a6:	41 0e       	add	r4, r17
    48a8:	81 2f       	mov	r24, r17
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	c8 16       	cp	r12, r24
    48ae:	d9 06       	cpc	r13, r25
    48b0:	2c f4       	brge	.+10     	; 0x48bc <vfprintf+0x24c>
    48b2:	1c 19       	sub	r17, r12
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <vfprintf+0x24e>
    48b6:	44 24       	eor	r4, r4
    48b8:	43 94       	inc	r4
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <vfprintf+0x24e>
    48bc:	10 e0       	ldi	r17, 0x00	; 0
    48be:	97 fe       	sbrs	r9, 7
    48c0:	06 c0       	rjmp	.+12     	; 0x48ce <vfprintf+0x25e>
    48c2:	1c 14       	cp	r1, r12
    48c4:	1d 04       	cpc	r1, r13
    48c6:	34 f4       	brge	.+12     	; 0x48d4 <vfprintf+0x264>
    48c8:	c6 01       	movw	r24, r12
    48ca:	01 96       	adiw	r24, 0x01	; 1
    48cc:	05 c0       	rjmp	.+10     	; 0x48d8 <vfprintf+0x268>
    48ce:	85 e0       	ldi	r24, 0x05	; 5
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <vfprintf+0x268>
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	01 11       	cpse	r16, r1
    48da:	01 96       	adiw	r24, 0x01	; 1
    48dc:	11 23       	and	r17, r17
    48de:	31 f0       	breq	.+12     	; 0x48ec <vfprintf+0x27c>
    48e0:	21 2f       	mov	r18, r17
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	2f 5f       	subi	r18, 0xFF	; 255
    48e6:	3f 4f       	sbci	r19, 0xFF	; 255
    48e8:	82 0f       	add	r24, r18
    48ea:	93 1f       	adc	r25, r19
    48ec:	25 2d       	mov	r18, r5
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	82 17       	cp	r24, r18
    48f2:	93 07       	cpc	r25, r19
    48f4:	14 f4       	brge	.+4      	; 0x48fa <vfprintf+0x28a>
    48f6:	58 1a       	sub	r5, r24
    48f8:	01 c0       	rjmp	.+2      	; 0x48fc <vfprintf+0x28c>
    48fa:	51 2c       	mov	r5, r1
    48fc:	89 2d       	mov	r24, r9
    48fe:	89 70       	andi	r24, 0x09	; 9
    4900:	41 f4       	brne	.+16     	; 0x4912 <vfprintf+0x2a2>
    4902:	55 20       	and	r5, r5
    4904:	31 f0       	breq	.+12     	; 0x4912 <vfprintf+0x2a2>
    4906:	b7 01       	movw	r22, r14
    4908:	80 e2       	ldi	r24, 0x20	; 32
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	b0 d3       	rcall	.+1888   	; 0x506e <fputc>
    490e:	5a 94       	dec	r5
    4910:	f8 cf       	rjmp	.-16     	; 0x4902 <vfprintf+0x292>
    4912:	00 23       	and	r16, r16
    4914:	21 f0       	breq	.+8      	; 0x491e <vfprintf+0x2ae>
    4916:	b7 01       	movw	r22, r14
    4918:	80 2f       	mov	r24, r16
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	a8 d3       	rcall	.+1872   	; 0x506e <fputc>
    491e:	93 fc       	sbrc	r9, 3
    4920:	08 c0       	rjmp	.+16     	; 0x4932 <vfprintf+0x2c2>
    4922:	55 20       	and	r5, r5
    4924:	31 f0       	breq	.+12     	; 0x4932 <vfprintf+0x2c2>
    4926:	b7 01       	movw	r22, r14
    4928:	80 e3       	ldi	r24, 0x30	; 48
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	a0 d3       	rcall	.+1856   	; 0x506e <fputc>
    492e:	5a 94       	dec	r5
    4930:	f8 cf       	rjmp	.-16     	; 0x4922 <vfprintf+0x2b2>
    4932:	97 fe       	sbrs	r9, 7
    4934:	4a c0       	rjmp	.+148    	; 0x49ca <vfprintf+0x35a>
    4936:	46 01       	movw	r8, r12
    4938:	d7 fe       	sbrs	r13, 7
    493a:	02 c0       	rjmp	.+4      	; 0x4940 <vfprintf+0x2d0>
    493c:	81 2c       	mov	r8, r1
    493e:	91 2c       	mov	r9, r1
    4940:	c6 01       	movw	r24, r12
    4942:	88 19       	sub	r24, r8
    4944:	99 09       	sbc	r25, r9
    4946:	f3 01       	movw	r30, r6
    4948:	e8 0f       	add	r30, r24
    494a:	f9 1f       	adc	r31, r25
    494c:	fe 87       	std	Y+14, r31	; 0x0e
    494e:	ed 87       	std	Y+13, r30	; 0x0d
    4950:	96 01       	movw	r18, r12
    4952:	24 19       	sub	r18, r4
    4954:	31 09       	sbc	r19, r1
    4956:	38 8b       	std	Y+16, r19	; 0x10
    4958:	2f 87       	std	Y+15, r18	; 0x0f
    495a:	01 2f       	mov	r16, r17
    495c:	10 e0       	ldi	r17, 0x00	; 0
    495e:	11 95       	neg	r17
    4960:	01 95       	neg	r16
    4962:	11 09       	sbc	r17, r1
    4964:	3f ef       	ldi	r19, 0xFF	; 255
    4966:	83 16       	cp	r8, r19
    4968:	93 06       	cpc	r9, r19
    496a:	21 f4       	brne	.+8      	; 0x4974 <vfprintf+0x304>
    496c:	b7 01       	movw	r22, r14
    496e:	8e e2       	ldi	r24, 0x2E	; 46
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	7d d3       	rcall	.+1786   	; 0x506e <fputc>
    4974:	c8 14       	cp	r12, r8
    4976:	d9 04       	cpc	r13, r9
    4978:	4c f0       	brlt	.+18     	; 0x498c <vfprintf+0x31c>
    497a:	8f 85       	ldd	r24, Y+15	; 0x0f
    497c:	98 89       	ldd	r25, Y+16	; 0x10
    497e:	88 15       	cp	r24, r8
    4980:	99 05       	cpc	r25, r9
    4982:	24 f4       	brge	.+8      	; 0x498c <vfprintf+0x31c>
    4984:	ed 85       	ldd	r30, Y+13	; 0x0d
    4986:	fe 85       	ldd	r31, Y+14	; 0x0e
    4988:	81 81       	ldd	r24, Z+1	; 0x01
    498a:	01 c0       	rjmp	.+2      	; 0x498e <vfprintf+0x31e>
    498c:	80 e3       	ldi	r24, 0x30	; 48
    498e:	f1 e0       	ldi	r31, 0x01	; 1
    4990:	8f 1a       	sub	r8, r31
    4992:	91 08       	sbc	r9, r1
    4994:	2d 85       	ldd	r18, Y+13	; 0x0d
    4996:	3e 85       	ldd	r19, Y+14	; 0x0e
    4998:	2f 5f       	subi	r18, 0xFF	; 255
    499a:	3f 4f       	sbci	r19, 0xFF	; 255
    499c:	3e 87       	std	Y+14, r19	; 0x0e
    499e:	2d 87       	std	Y+13, r18	; 0x0d
    49a0:	80 16       	cp	r8, r16
    49a2:	91 06       	cpc	r9, r17
    49a4:	24 f0       	brlt	.+8      	; 0x49ae <vfprintf+0x33e>
    49a6:	b7 01       	movw	r22, r14
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	61 d3       	rcall	.+1730   	; 0x506e <fputc>
    49ac:	db cf       	rjmp	.-74     	; 0x4964 <vfprintf+0x2f4>
    49ae:	c8 14       	cp	r12, r8
    49b0:	d9 04       	cpc	r13, r9
    49b2:	41 f4       	brne	.+16     	; 0x49c4 <vfprintf+0x354>
    49b4:	9a 81       	ldd	r25, Y+2	; 0x02
    49b6:	96 33       	cpi	r25, 0x36	; 54
    49b8:	20 f4       	brcc	.+8      	; 0x49c2 <vfprintf+0x352>
    49ba:	95 33       	cpi	r25, 0x35	; 53
    49bc:	19 f4       	brne	.+6      	; 0x49c4 <vfprintf+0x354>
    49be:	3c 85       	ldd	r19, Y+12	; 0x0c
    49c0:	34 ff       	sbrs	r19, 4
    49c2:	81 e3       	ldi	r24, 0x31	; 49
    49c4:	b7 01       	movw	r22, r14
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	48 c0       	rjmp	.+144    	; 0x4a5a <vfprintf+0x3ea>
    49ca:	8a 81       	ldd	r24, Y+2	; 0x02
    49cc:	81 33       	cpi	r24, 0x31	; 49
    49ce:	19 f0       	breq	.+6      	; 0x49d6 <vfprintf+0x366>
    49d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    49d2:	9f 7e       	andi	r25, 0xEF	; 239
    49d4:	9c 87       	std	Y+12, r25	; 0x0c
    49d6:	b7 01       	movw	r22, r14
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	49 d3       	rcall	.+1682   	; 0x506e <fputc>
    49dc:	11 11       	cpse	r17, r1
    49de:	05 c0       	rjmp	.+10     	; 0x49ea <vfprintf+0x37a>
    49e0:	94 fc       	sbrc	r9, 4
    49e2:	16 c0       	rjmp	.+44     	; 0x4a10 <vfprintf+0x3a0>
    49e4:	85 e6       	ldi	r24, 0x65	; 101
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	15 c0       	rjmp	.+42     	; 0x4a14 <vfprintf+0x3a4>
    49ea:	b7 01       	movw	r22, r14
    49ec:	8e e2       	ldi	r24, 0x2E	; 46
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	3e d3       	rcall	.+1660   	; 0x506e <fputc>
    49f2:	1e 5f       	subi	r17, 0xFE	; 254
    49f4:	82 e0       	ldi	r24, 0x02	; 2
    49f6:	01 e0       	ldi	r16, 0x01	; 1
    49f8:	08 0f       	add	r16, r24
    49fa:	f3 01       	movw	r30, r6
    49fc:	e8 0f       	add	r30, r24
    49fe:	f1 1d       	adc	r31, r1
    4a00:	80 81       	ld	r24, Z
    4a02:	b7 01       	movw	r22, r14
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	33 d3       	rcall	.+1638   	; 0x506e <fputc>
    4a08:	80 2f       	mov	r24, r16
    4a0a:	01 13       	cpse	r16, r17
    4a0c:	f4 cf       	rjmp	.-24     	; 0x49f6 <vfprintf+0x386>
    4a0e:	e8 cf       	rjmp	.-48     	; 0x49e0 <vfprintf+0x370>
    4a10:	85 e4       	ldi	r24, 0x45	; 69
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	b7 01       	movw	r22, r14
    4a16:	2b d3       	rcall	.+1622   	; 0x506e <fputc>
    4a18:	d7 fc       	sbrc	r13, 7
    4a1a:	06 c0       	rjmp	.+12     	; 0x4a28 <vfprintf+0x3b8>
    4a1c:	c1 14       	cp	r12, r1
    4a1e:	d1 04       	cpc	r13, r1
    4a20:	41 f4       	brne	.+16     	; 0x4a32 <vfprintf+0x3c2>
    4a22:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a24:	e4 ff       	sbrs	r30, 4
    4a26:	05 c0       	rjmp	.+10     	; 0x4a32 <vfprintf+0x3c2>
    4a28:	d1 94       	neg	r13
    4a2a:	c1 94       	neg	r12
    4a2c:	d1 08       	sbc	r13, r1
    4a2e:	8d e2       	ldi	r24, 0x2D	; 45
    4a30:	01 c0       	rjmp	.+2      	; 0x4a34 <vfprintf+0x3c4>
    4a32:	8b e2       	ldi	r24, 0x2B	; 43
    4a34:	b7 01       	movw	r22, r14
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	1a d3       	rcall	.+1588   	; 0x506e <fputc>
    4a3a:	80 e3       	ldi	r24, 0x30	; 48
    4a3c:	2a e0       	ldi	r18, 0x0A	; 10
    4a3e:	c2 16       	cp	r12, r18
    4a40:	d1 04       	cpc	r13, r1
    4a42:	2c f0       	brlt	.+10     	; 0x4a4e <vfprintf+0x3de>
    4a44:	8f 5f       	subi	r24, 0xFF	; 255
    4a46:	fa e0       	ldi	r31, 0x0A	; 10
    4a48:	cf 1a       	sub	r12, r31
    4a4a:	d1 08       	sbc	r13, r1
    4a4c:	f7 cf       	rjmp	.-18     	; 0x4a3c <vfprintf+0x3cc>
    4a4e:	b7 01       	movw	r22, r14
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	0d d3       	rcall	.+1562   	; 0x506e <fputc>
    4a54:	b7 01       	movw	r22, r14
    4a56:	c6 01       	movw	r24, r12
    4a58:	c0 96       	adiw	r24, 0x30	; 48
    4a5a:	09 d3       	rcall	.+1554   	; 0x506e <fputc>
    4a5c:	49 c1       	rjmp	.+658    	; 0x4cf0 <vfprintf+0x680>
    4a5e:	83 36       	cpi	r24, 0x63	; 99
    4a60:	31 f0       	breq	.+12     	; 0x4a6e <vfprintf+0x3fe>
    4a62:	83 37       	cpi	r24, 0x73	; 115
    4a64:	79 f0       	breq	.+30     	; 0x4a84 <vfprintf+0x414>
    4a66:	83 35       	cpi	r24, 0x53	; 83
    4a68:	09 f0       	breq	.+2      	; 0x4a6c <vfprintf+0x3fc>
    4a6a:	52 c0       	rjmp	.+164    	; 0x4b10 <vfprintf+0x4a0>
    4a6c:	1f c0       	rjmp	.+62     	; 0x4aac <vfprintf+0x43c>
    4a6e:	56 01       	movw	r10, r12
    4a70:	32 e0       	ldi	r19, 0x02	; 2
    4a72:	a3 0e       	add	r10, r19
    4a74:	b1 1c       	adc	r11, r1
    4a76:	f6 01       	movw	r30, r12
    4a78:	80 81       	ld	r24, Z
    4a7a:	89 83       	std	Y+1, r24	; 0x01
    4a7c:	01 e0       	ldi	r16, 0x01	; 1
    4a7e:	10 e0       	ldi	r17, 0x00	; 0
    4a80:	63 01       	movw	r12, r6
    4a82:	11 c0       	rjmp	.+34     	; 0x4aa6 <vfprintf+0x436>
    4a84:	56 01       	movw	r10, r12
    4a86:	f2 e0       	ldi	r31, 0x02	; 2
    4a88:	af 0e       	add	r10, r31
    4a8a:	b1 1c       	adc	r11, r1
    4a8c:	f6 01       	movw	r30, r12
    4a8e:	c0 80       	ld	r12, Z
    4a90:	d1 80       	ldd	r13, Z+1	; 0x01
    4a92:	96 fe       	sbrs	r9, 6
    4a94:	03 c0       	rjmp	.+6      	; 0x4a9c <vfprintf+0x42c>
    4a96:	61 2f       	mov	r22, r17
    4a98:	70 e0       	ldi	r23, 0x00	; 0
    4a9a:	02 c0       	rjmp	.+4      	; 0x4aa0 <vfprintf+0x430>
    4a9c:	6f ef       	ldi	r22, 0xFF	; 255
    4a9e:	7f ef       	ldi	r23, 0xFF	; 255
    4aa0:	c6 01       	movw	r24, r12
    4aa2:	d2 d2       	rcall	.+1444   	; 0x5048 <strnlen>
    4aa4:	8c 01       	movw	r16, r24
    4aa6:	f9 2d       	mov	r31, r9
    4aa8:	ff 77       	andi	r31, 0x7F	; 127
    4aaa:	13 c0       	rjmp	.+38     	; 0x4ad2 <vfprintf+0x462>
    4aac:	56 01       	movw	r10, r12
    4aae:	22 e0       	ldi	r18, 0x02	; 2
    4ab0:	a2 0e       	add	r10, r18
    4ab2:	b1 1c       	adc	r11, r1
    4ab4:	f6 01       	movw	r30, r12
    4ab6:	c0 80       	ld	r12, Z
    4ab8:	d1 80       	ldd	r13, Z+1	; 0x01
    4aba:	96 fe       	sbrs	r9, 6
    4abc:	03 c0       	rjmp	.+6      	; 0x4ac4 <vfprintf+0x454>
    4abe:	61 2f       	mov	r22, r17
    4ac0:	70 e0       	ldi	r23, 0x00	; 0
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <vfprintf+0x458>
    4ac4:	6f ef       	ldi	r22, 0xFF	; 255
    4ac6:	7f ef       	ldi	r23, 0xFF	; 255
    4ac8:	c6 01       	movw	r24, r12
    4aca:	aa d2       	rcall	.+1364   	; 0x5020 <strnlen_P>
    4acc:	8c 01       	movw	r16, r24
    4ace:	f9 2d       	mov	r31, r9
    4ad0:	f0 68       	ori	r31, 0x80	; 128
    4ad2:	9f 2e       	mov	r9, r31
    4ad4:	f3 fd       	sbrc	r31, 3
    4ad6:	18 c0       	rjmp	.+48     	; 0x4b08 <vfprintf+0x498>
    4ad8:	85 2d       	mov	r24, r5
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	08 17       	cp	r16, r24
    4ade:	19 07       	cpc	r17, r25
    4ae0:	98 f4       	brcc	.+38     	; 0x4b08 <vfprintf+0x498>
    4ae2:	b7 01       	movw	r22, r14
    4ae4:	80 e2       	ldi	r24, 0x20	; 32
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	c2 d2       	rcall	.+1412   	; 0x506e <fputc>
    4aea:	5a 94       	dec	r5
    4aec:	f5 cf       	rjmp	.-22     	; 0x4ad8 <vfprintf+0x468>
    4aee:	f6 01       	movw	r30, r12
    4af0:	97 fc       	sbrc	r9, 7
    4af2:	85 91       	lpm	r24, Z+
    4af4:	97 fe       	sbrs	r9, 7
    4af6:	81 91       	ld	r24, Z+
    4af8:	6f 01       	movw	r12, r30
    4afa:	b7 01       	movw	r22, r14
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	b7 d2       	rcall	.+1390   	; 0x506e <fputc>
    4b00:	51 10       	cpse	r5, r1
    4b02:	5a 94       	dec	r5
    4b04:	01 50       	subi	r16, 0x01	; 1
    4b06:	11 09       	sbc	r17, r1
    4b08:	01 15       	cp	r16, r1
    4b0a:	11 05       	cpc	r17, r1
    4b0c:	81 f7       	brne	.-32     	; 0x4aee <vfprintf+0x47e>
    4b0e:	f0 c0       	rjmp	.+480    	; 0x4cf0 <vfprintf+0x680>
    4b10:	84 36       	cpi	r24, 0x64	; 100
    4b12:	11 f0       	breq	.+4      	; 0x4b18 <vfprintf+0x4a8>
    4b14:	89 36       	cpi	r24, 0x69	; 105
    4b16:	59 f5       	brne	.+86     	; 0x4b6e <vfprintf+0x4fe>
    4b18:	56 01       	movw	r10, r12
    4b1a:	97 fe       	sbrs	r9, 7
    4b1c:	09 c0       	rjmp	.+18     	; 0x4b30 <vfprintf+0x4c0>
    4b1e:	24 e0       	ldi	r18, 0x04	; 4
    4b20:	a2 0e       	add	r10, r18
    4b22:	b1 1c       	adc	r11, r1
    4b24:	f6 01       	movw	r30, r12
    4b26:	60 81       	ld	r22, Z
    4b28:	71 81       	ldd	r23, Z+1	; 0x01
    4b2a:	82 81       	ldd	r24, Z+2	; 0x02
    4b2c:	93 81       	ldd	r25, Z+3	; 0x03
    4b2e:	0a c0       	rjmp	.+20     	; 0x4b44 <vfprintf+0x4d4>
    4b30:	f2 e0       	ldi	r31, 0x02	; 2
    4b32:	af 0e       	add	r10, r31
    4b34:	b1 1c       	adc	r11, r1
    4b36:	f6 01       	movw	r30, r12
    4b38:	60 81       	ld	r22, Z
    4b3a:	71 81       	ldd	r23, Z+1	; 0x01
    4b3c:	07 2e       	mov	r0, r23
    4b3e:	00 0c       	add	r0, r0
    4b40:	88 0b       	sbc	r24, r24
    4b42:	99 0b       	sbc	r25, r25
    4b44:	f9 2d       	mov	r31, r9
    4b46:	ff 76       	andi	r31, 0x6F	; 111
    4b48:	9f 2e       	mov	r9, r31
    4b4a:	97 ff       	sbrs	r25, 7
    4b4c:	09 c0       	rjmp	.+18     	; 0x4b60 <vfprintf+0x4f0>
    4b4e:	90 95       	com	r25
    4b50:	80 95       	com	r24
    4b52:	70 95       	com	r23
    4b54:	61 95       	neg	r22
    4b56:	7f 4f       	sbci	r23, 0xFF	; 255
    4b58:	8f 4f       	sbci	r24, 0xFF	; 255
    4b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b5c:	f0 68       	ori	r31, 0x80	; 128
    4b5e:	9f 2e       	mov	r9, r31
    4b60:	2a e0       	ldi	r18, 0x0A	; 10
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	a3 01       	movw	r20, r6
    4b66:	2e d3       	rcall	.+1628   	; 0x51c4 <__ultoa_invert>
    4b68:	c8 2e       	mov	r12, r24
    4b6a:	c6 18       	sub	r12, r6
    4b6c:	3e c0       	rjmp	.+124    	; 0x4bea <vfprintf+0x57a>
    4b6e:	09 2d       	mov	r16, r9
    4b70:	85 37       	cpi	r24, 0x75	; 117
    4b72:	21 f4       	brne	.+8      	; 0x4b7c <vfprintf+0x50c>
    4b74:	0f 7e       	andi	r16, 0xEF	; 239
    4b76:	2a e0       	ldi	r18, 0x0A	; 10
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	1d c0       	rjmp	.+58     	; 0x4bb6 <vfprintf+0x546>
    4b7c:	09 7f       	andi	r16, 0xF9	; 249
    4b7e:	8f 36       	cpi	r24, 0x6F	; 111
    4b80:	91 f0       	breq	.+36     	; 0x4ba6 <vfprintf+0x536>
    4b82:	18 f4       	brcc	.+6      	; 0x4b8a <vfprintf+0x51a>
    4b84:	88 35       	cpi	r24, 0x58	; 88
    4b86:	59 f0       	breq	.+22     	; 0x4b9e <vfprintf+0x52e>
    4b88:	bc c0       	rjmp	.+376    	; 0x4d02 <vfprintf+0x692>
    4b8a:	80 37       	cpi	r24, 0x70	; 112
    4b8c:	19 f0       	breq	.+6      	; 0x4b94 <vfprintf+0x524>
    4b8e:	88 37       	cpi	r24, 0x78	; 120
    4b90:	11 f0       	breq	.+4      	; 0x4b96 <vfprintf+0x526>
    4b92:	b7 c0       	rjmp	.+366    	; 0x4d02 <vfprintf+0x692>
    4b94:	00 61       	ori	r16, 0x10	; 16
    4b96:	04 ff       	sbrs	r16, 4
    4b98:	09 c0       	rjmp	.+18     	; 0x4bac <vfprintf+0x53c>
    4b9a:	04 60       	ori	r16, 0x04	; 4
    4b9c:	07 c0       	rjmp	.+14     	; 0x4bac <vfprintf+0x53c>
    4b9e:	94 fe       	sbrs	r9, 4
    4ba0:	08 c0       	rjmp	.+16     	; 0x4bb2 <vfprintf+0x542>
    4ba2:	06 60       	ori	r16, 0x06	; 6
    4ba4:	06 c0       	rjmp	.+12     	; 0x4bb2 <vfprintf+0x542>
    4ba6:	28 e0       	ldi	r18, 0x08	; 8
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	05 c0       	rjmp	.+10     	; 0x4bb6 <vfprintf+0x546>
    4bac:	20 e1       	ldi	r18, 0x10	; 16
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	02 c0       	rjmp	.+4      	; 0x4bb6 <vfprintf+0x546>
    4bb2:	20 e1       	ldi	r18, 0x10	; 16
    4bb4:	32 e0       	ldi	r19, 0x02	; 2
    4bb6:	56 01       	movw	r10, r12
    4bb8:	07 ff       	sbrs	r16, 7
    4bba:	09 c0       	rjmp	.+18     	; 0x4bce <vfprintf+0x55e>
    4bbc:	84 e0       	ldi	r24, 0x04	; 4
    4bbe:	a8 0e       	add	r10, r24
    4bc0:	b1 1c       	adc	r11, r1
    4bc2:	f6 01       	movw	r30, r12
    4bc4:	60 81       	ld	r22, Z
    4bc6:	71 81       	ldd	r23, Z+1	; 0x01
    4bc8:	82 81       	ldd	r24, Z+2	; 0x02
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	08 c0       	rjmp	.+16     	; 0x4bde <vfprintf+0x56e>
    4bce:	f2 e0       	ldi	r31, 0x02	; 2
    4bd0:	af 0e       	add	r10, r31
    4bd2:	b1 1c       	adc	r11, r1
    4bd4:	f6 01       	movw	r30, r12
    4bd6:	60 81       	ld	r22, Z
    4bd8:	71 81       	ldd	r23, Z+1	; 0x01
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	a3 01       	movw	r20, r6
    4be0:	f1 d2       	rcall	.+1506   	; 0x51c4 <__ultoa_invert>
    4be2:	c8 2e       	mov	r12, r24
    4be4:	c6 18       	sub	r12, r6
    4be6:	0f 77       	andi	r16, 0x7F	; 127
    4be8:	90 2e       	mov	r9, r16
    4bea:	96 fe       	sbrs	r9, 6
    4bec:	0b c0       	rjmp	.+22     	; 0x4c04 <vfprintf+0x594>
    4bee:	09 2d       	mov	r16, r9
    4bf0:	0e 7f       	andi	r16, 0xFE	; 254
    4bf2:	c1 16       	cp	r12, r17
    4bf4:	50 f4       	brcc	.+20     	; 0x4c0a <vfprintf+0x59a>
    4bf6:	94 fe       	sbrs	r9, 4
    4bf8:	0a c0       	rjmp	.+20     	; 0x4c0e <vfprintf+0x59e>
    4bfa:	92 fc       	sbrc	r9, 2
    4bfc:	08 c0       	rjmp	.+16     	; 0x4c0e <vfprintf+0x59e>
    4bfe:	09 2d       	mov	r16, r9
    4c00:	0e 7e       	andi	r16, 0xEE	; 238
    4c02:	05 c0       	rjmp	.+10     	; 0x4c0e <vfprintf+0x59e>
    4c04:	dc 2c       	mov	r13, r12
    4c06:	09 2d       	mov	r16, r9
    4c08:	03 c0       	rjmp	.+6      	; 0x4c10 <vfprintf+0x5a0>
    4c0a:	dc 2c       	mov	r13, r12
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <vfprintf+0x5a0>
    4c0e:	d1 2e       	mov	r13, r17
    4c10:	04 ff       	sbrs	r16, 4
    4c12:	0d c0       	rjmp	.+26     	; 0x4c2e <vfprintf+0x5be>
    4c14:	fe 01       	movw	r30, r28
    4c16:	ec 0d       	add	r30, r12
    4c18:	f1 1d       	adc	r31, r1
    4c1a:	80 81       	ld	r24, Z
    4c1c:	80 33       	cpi	r24, 0x30	; 48
    4c1e:	11 f4       	brne	.+4      	; 0x4c24 <vfprintf+0x5b4>
    4c20:	09 7e       	andi	r16, 0xE9	; 233
    4c22:	09 c0       	rjmp	.+18     	; 0x4c36 <vfprintf+0x5c6>
    4c24:	02 ff       	sbrs	r16, 2
    4c26:	06 c0       	rjmp	.+12     	; 0x4c34 <vfprintf+0x5c4>
    4c28:	d3 94       	inc	r13
    4c2a:	d3 94       	inc	r13
    4c2c:	04 c0       	rjmp	.+8      	; 0x4c36 <vfprintf+0x5c6>
    4c2e:	80 2f       	mov	r24, r16
    4c30:	86 78       	andi	r24, 0x86	; 134
    4c32:	09 f0       	breq	.+2      	; 0x4c36 <vfprintf+0x5c6>
    4c34:	d3 94       	inc	r13
    4c36:	03 fd       	sbrc	r16, 3
    4c38:	10 c0       	rjmp	.+32     	; 0x4c5a <vfprintf+0x5ea>
    4c3a:	00 ff       	sbrs	r16, 0
    4c3c:	06 c0       	rjmp	.+12     	; 0x4c4a <vfprintf+0x5da>
    4c3e:	1c 2d       	mov	r17, r12
    4c40:	d5 14       	cp	r13, r5
    4c42:	78 f4       	brcc	.+30     	; 0x4c62 <vfprintf+0x5f2>
    4c44:	15 0d       	add	r17, r5
    4c46:	1d 19       	sub	r17, r13
    4c48:	0c c0       	rjmp	.+24     	; 0x4c62 <vfprintf+0x5f2>
    4c4a:	d5 14       	cp	r13, r5
    4c4c:	50 f4       	brcc	.+20     	; 0x4c62 <vfprintf+0x5f2>
    4c4e:	b7 01       	movw	r22, r14
    4c50:	80 e2       	ldi	r24, 0x20	; 32
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	0c d2       	rcall	.+1048   	; 0x506e <fputc>
    4c56:	d3 94       	inc	r13
    4c58:	f8 cf       	rjmp	.-16     	; 0x4c4a <vfprintf+0x5da>
    4c5a:	d5 14       	cp	r13, r5
    4c5c:	10 f4       	brcc	.+4      	; 0x4c62 <vfprintf+0x5f2>
    4c5e:	5d 18       	sub	r5, r13
    4c60:	01 c0       	rjmp	.+2      	; 0x4c64 <vfprintf+0x5f4>
    4c62:	51 2c       	mov	r5, r1
    4c64:	04 ff       	sbrs	r16, 4
    4c66:	0f c0       	rjmp	.+30     	; 0x4c86 <vfprintf+0x616>
    4c68:	b7 01       	movw	r22, r14
    4c6a:	80 e3       	ldi	r24, 0x30	; 48
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	ff d1       	rcall	.+1022   	; 0x506e <fputc>
    4c70:	02 ff       	sbrs	r16, 2
    4c72:	16 c0       	rjmp	.+44     	; 0x4ca0 <vfprintf+0x630>
    4c74:	01 fd       	sbrc	r16, 1
    4c76:	03 c0       	rjmp	.+6      	; 0x4c7e <vfprintf+0x60e>
    4c78:	88 e7       	ldi	r24, 0x78	; 120
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	02 c0       	rjmp	.+4      	; 0x4c82 <vfprintf+0x612>
    4c7e:	88 e5       	ldi	r24, 0x58	; 88
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	b7 01       	movw	r22, r14
    4c84:	0c c0       	rjmp	.+24     	; 0x4c9e <vfprintf+0x62e>
    4c86:	80 2f       	mov	r24, r16
    4c88:	86 78       	andi	r24, 0x86	; 134
    4c8a:	51 f0       	breq	.+20     	; 0x4ca0 <vfprintf+0x630>
    4c8c:	01 ff       	sbrs	r16, 1
    4c8e:	02 c0       	rjmp	.+4      	; 0x4c94 <vfprintf+0x624>
    4c90:	8b e2       	ldi	r24, 0x2B	; 43
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <vfprintf+0x626>
    4c94:	80 e2       	ldi	r24, 0x20	; 32
    4c96:	07 fd       	sbrc	r16, 7
    4c98:	8d e2       	ldi	r24, 0x2D	; 45
    4c9a:	b7 01       	movw	r22, r14
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	e7 d1       	rcall	.+974    	; 0x506e <fputc>
    4ca0:	c1 16       	cp	r12, r17
    4ca2:	30 f4       	brcc	.+12     	; 0x4cb0 <vfprintf+0x640>
    4ca4:	b7 01       	movw	r22, r14
    4ca6:	80 e3       	ldi	r24, 0x30	; 48
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	e1 d1       	rcall	.+962    	; 0x506e <fputc>
    4cac:	11 50       	subi	r17, 0x01	; 1
    4cae:	f8 cf       	rjmp	.-16     	; 0x4ca0 <vfprintf+0x630>
    4cb0:	ca 94       	dec	r12
    4cb2:	f3 01       	movw	r30, r6
    4cb4:	ec 0d       	add	r30, r12
    4cb6:	f1 1d       	adc	r31, r1
    4cb8:	80 81       	ld	r24, Z
    4cba:	b7 01       	movw	r22, r14
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	d7 d1       	rcall	.+942    	; 0x506e <fputc>
    4cc0:	c1 10       	cpse	r12, r1
    4cc2:	f6 cf       	rjmp	.-20     	; 0x4cb0 <vfprintf+0x640>
    4cc4:	15 c0       	rjmp	.+42     	; 0x4cf0 <vfprintf+0x680>
    4cc6:	f4 e0       	ldi	r31, 0x04	; 4
    4cc8:	f5 15       	cp	r31, r5
    4cca:	50 f5       	brcc	.+84     	; 0x4d20 <vfprintf+0x6b0>
    4ccc:	84 e0       	ldi	r24, 0x04	; 4
    4cce:	58 1a       	sub	r5, r24
    4cd0:	93 fe       	sbrs	r9, 3
    4cd2:	1e c0       	rjmp	.+60     	; 0x4d10 <vfprintf+0x6a0>
    4cd4:	01 11       	cpse	r16, r1
    4cd6:	25 c0       	rjmp	.+74     	; 0x4d22 <vfprintf+0x6b2>
    4cd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    4cda:	23 ff       	sbrs	r18, 3
    4cdc:	27 c0       	rjmp	.+78     	; 0x4d2c <vfprintf+0x6bc>
    4cde:	04 ee       	ldi	r16, 0xE4	; 228
    4ce0:	10 e0       	ldi	r17, 0x00	; 0
    4ce2:	39 2d       	mov	r19, r9
    4ce4:	30 71       	andi	r19, 0x10	; 16
    4ce6:	93 2e       	mov	r9, r19
    4ce8:	f8 01       	movw	r30, r16
    4cea:	84 91       	lpm	r24, Z
    4cec:	81 11       	cpse	r24, r1
    4cee:	21 c0       	rjmp	.+66     	; 0x4d32 <vfprintf+0x6c2>
    4cf0:	55 20       	and	r5, r5
    4cf2:	09 f4       	brne	.+2      	; 0x4cf6 <vfprintf+0x686>
    4cf4:	fc cc       	rjmp	.-1544   	; 0x46ee <vfprintf+0x7e>
    4cf6:	b7 01       	movw	r22, r14
    4cf8:	80 e2       	ldi	r24, 0x20	; 32
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	b8 d1       	rcall	.+880    	; 0x506e <fputc>
    4cfe:	5a 94       	dec	r5
    4d00:	f7 cf       	rjmp	.-18     	; 0x4cf0 <vfprintf+0x680>
    4d02:	f7 01       	movw	r30, r14
    4d04:	86 81       	ldd	r24, Z+6	; 0x06
    4d06:	97 81       	ldd	r25, Z+7	; 0x07
    4d08:	23 c0       	rjmp	.+70     	; 0x4d50 <vfprintf+0x6e0>
    4d0a:	8f ef       	ldi	r24, 0xFF	; 255
    4d0c:	9f ef       	ldi	r25, 0xFF	; 255
    4d0e:	20 c0       	rjmp	.+64     	; 0x4d50 <vfprintf+0x6e0>
    4d10:	b7 01       	movw	r22, r14
    4d12:	80 e2       	ldi	r24, 0x20	; 32
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	ab d1       	rcall	.+854    	; 0x506e <fputc>
    4d18:	5a 94       	dec	r5
    4d1a:	51 10       	cpse	r5, r1
    4d1c:	f9 cf       	rjmp	.-14     	; 0x4d10 <vfprintf+0x6a0>
    4d1e:	da cf       	rjmp	.-76     	; 0x4cd4 <vfprintf+0x664>
    4d20:	51 2c       	mov	r5, r1
    4d22:	b7 01       	movw	r22, r14
    4d24:	80 2f       	mov	r24, r16
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	a2 d1       	rcall	.+836    	; 0x506e <fputc>
    4d2a:	d6 cf       	rjmp	.-84     	; 0x4cd8 <vfprintf+0x668>
    4d2c:	08 ee       	ldi	r16, 0xE8	; 232
    4d2e:	10 e0       	ldi	r17, 0x00	; 0
    4d30:	d8 cf       	rjmp	.-80     	; 0x4ce2 <vfprintf+0x672>
    4d32:	91 10       	cpse	r9, r1
    4d34:	80 52       	subi	r24, 0x20	; 32
    4d36:	b7 01       	movw	r22, r14
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	99 d1       	rcall	.+818    	; 0x506e <fputc>
    4d3c:	0f 5f       	subi	r16, 0xFF	; 255
    4d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d40:	d3 cf       	rjmp	.-90     	; 0x4ce8 <vfprintf+0x678>
    4d42:	23 e0       	ldi	r18, 0x03	; 3
    4d44:	25 15       	cp	r18, r5
    4d46:	10 f4       	brcc	.+4      	; 0x4d4c <vfprintf+0x6dc>
    4d48:	83 e0       	ldi	r24, 0x03	; 3
    4d4a:	c1 cf       	rjmp	.-126    	; 0x4cce <vfprintf+0x65e>
    4d4c:	51 2c       	mov	r5, r1
    4d4e:	c4 cf       	rjmp	.-120    	; 0x4cd8 <vfprintf+0x668>
    4d50:	60 96       	adiw	r28, 0x10	; 16
    4d52:	0f b6       	in	r0, 0x3f	; 63
    4d54:	f8 94       	cli
    4d56:	de bf       	out	0x3e, r29	; 62
    4d58:	0f be       	out	0x3f, r0	; 63
    4d5a:	cd bf       	out	0x3d, r28	; 61
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	1f 91       	pop	r17
    4d62:	0f 91       	pop	r16
    4d64:	ff 90       	pop	r15
    4d66:	ef 90       	pop	r14
    4d68:	df 90       	pop	r13
    4d6a:	cf 90       	pop	r12
    4d6c:	bf 90       	pop	r11
    4d6e:	af 90       	pop	r10
    4d70:	9f 90       	pop	r9
    4d72:	8f 90       	pop	r8
    4d74:	7f 90       	pop	r7
    4d76:	6f 90       	pop	r6
    4d78:	5f 90       	pop	r5
    4d7a:	4f 90       	pop	r4
    4d7c:	3f 90       	pop	r3
    4d7e:	2f 90       	pop	r2
    4d80:	08 95       	ret

00004d82 <__divmodsi4>:
    4d82:	05 2e       	mov	r0, r21
    4d84:	97 fb       	bst	r25, 7
    4d86:	16 f4       	brtc	.+4      	; 0x4d8c <__divmodsi4+0xa>
    4d88:	00 94       	com	r0
    4d8a:	0f d0       	rcall	.+30     	; 0x4daa <__negsi2>
    4d8c:	57 fd       	sbrc	r21, 7
    4d8e:	05 d0       	rcall	.+10     	; 0x4d9a <__divmodsi4_neg2>
    4d90:	29 d0       	rcall	.+82     	; 0x4de4 <__udivmodsi4>
    4d92:	07 fc       	sbrc	r0, 7
    4d94:	02 d0       	rcall	.+4      	; 0x4d9a <__divmodsi4_neg2>
    4d96:	46 f4       	brtc	.+16     	; 0x4da8 <__divmodsi4_exit>
    4d98:	08 c0       	rjmp	.+16     	; 0x4daa <__negsi2>

00004d9a <__divmodsi4_neg2>:
    4d9a:	50 95       	com	r21
    4d9c:	40 95       	com	r20
    4d9e:	30 95       	com	r19
    4da0:	21 95       	neg	r18
    4da2:	3f 4f       	sbci	r19, 0xFF	; 255
    4da4:	4f 4f       	sbci	r20, 0xFF	; 255
    4da6:	5f 4f       	sbci	r21, 0xFF	; 255

00004da8 <__divmodsi4_exit>:
    4da8:	08 95       	ret

00004daa <__negsi2>:
    4daa:	90 95       	com	r25
    4dac:	80 95       	com	r24
    4dae:	70 95       	com	r23
    4db0:	61 95       	neg	r22
    4db2:	7f 4f       	sbci	r23, 0xFF	; 255
    4db4:	8f 4f       	sbci	r24, 0xFF	; 255
    4db6:	9f 4f       	sbci	r25, 0xFF	; 255
    4db8:	08 95       	ret

00004dba <__umulhisi3>:
    4dba:	a2 9f       	mul	r26, r18
    4dbc:	b0 01       	movw	r22, r0
    4dbe:	b3 9f       	mul	r27, r19
    4dc0:	c0 01       	movw	r24, r0
    4dc2:	a3 9f       	mul	r26, r19
    4dc4:	70 0d       	add	r23, r0
    4dc6:	81 1d       	adc	r24, r1
    4dc8:	11 24       	eor	r1, r1
    4dca:	91 1d       	adc	r25, r1
    4dcc:	b2 9f       	mul	r27, r18
    4dce:	70 0d       	add	r23, r0
    4dd0:	81 1d       	adc	r24, r1
    4dd2:	11 24       	eor	r1, r1
    4dd4:	91 1d       	adc	r25, r1
    4dd6:	08 95       	ret

00004dd8 <__usmulhisi3>:
    4dd8:	f0 df       	rcall	.-32     	; 0x4dba <__umulhisi3>

00004dda <__usmulhisi3_tail>:
    4dda:	b7 ff       	sbrs	r27, 7
    4ddc:	08 95       	ret
    4dde:	82 1b       	sub	r24, r18
    4de0:	93 0b       	sbc	r25, r19
    4de2:	08 95       	ret

00004de4 <__udivmodsi4>:
    4de4:	a1 e2       	ldi	r26, 0x21	; 33
    4de6:	1a 2e       	mov	r1, r26
    4de8:	aa 1b       	sub	r26, r26
    4dea:	bb 1b       	sub	r27, r27
    4dec:	fd 01       	movw	r30, r26
    4dee:	0d c0       	rjmp	.+26     	; 0x4e0a <__udivmodsi4_ep>

00004df0 <__udivmodsi4_loop>:
    4df0:	aa 1f       	adc	r26, r26
    4df2:	bb 1f       	adc	r27, r27
    4df4:	ee 1f       	adc	r30, r30
    4df6:	ff 1f       	adc	r31, r31
    4df8:	a2 17       	cp	r26, r18
    4dfa:	b3 07       	cpc	r27, r19
    4dfc:	e4 07       	cpc	r30, r20
    4dfe:	f5 07       	cpc	r31, r21
    4e00:	20 f0       	brcs	.+8      	; 0x4e0a <__udivmodsi4_ep>
    4e02:	a2 1b       	sub	r26, r18
    4e04:	b3 0b       	sbc	r27, r19
    4e06:	e4 0b       	sbc	r30, r20
    4e08:	f5 0b       	sbc	r31, r21

00004e0a <__udivmodsi4_ep>:
    4e0a:	66 1f       	adc	r22, r22
    4e0c:	77 1f       	adc	r23, r23
    4e0e:	88 1f       	adc	r24, r24
    4e10:	99 1f       	adc	r25, r25
    4e12:	1a 94       	dec	r1
    4e14:	69 f7       	brne	.-38     	; 0x4df0 <__udivmodsi4_loop>
    4e16:	60 95       	com	r22
    4e18:	70 95       	com	r23
    4e1a:	80 95       	com	r24
    4e1c:	90 95       	com	r25
    4e1e:	9b 01       	movw	r18, r22
    4e20:	ac 01       	movw	r20, r24
    4e22:	bd 01       	movw	r22, r26
    4e24:	cf 01       	movw	r24, r30
    4e26:	08 95       	ret

00004e28 <atoi>:
    4e28:	fc 01       	movw	r30, r24
    4e2a:	88 27       	eor	r24, r24
    4e2c:	99 27       	eor	r25, r25
    4e2e:	e8 94       	clt
    4e30:	21 91       	ld	r18, Z+
    4e32:	20 32       	cpi	r18, 0x20	; 32
    4e34:	e9 f3       	breq	.-6      	; 0x4e30 <atoi+0x8>
    4e36:	29 30       	cpi	r18, 0x09	; 9
    4e38:	10 f0       	brcs	.+4      	; 0x4e3e <atoi+0x16>
    4e3a:	2e 30       	cpi	r18, 0x0E	; 14
    4e3c:	c8 f3       	brcs	.-14     	; 0x4e30 <atoi+0x8>
    4e3e:	2b 32       	cpi	r18, 0x2B	; 43
    4e40:	39 f0       	breq	.+14     	; 0x4e50 <atoi+0x28>
    4e42:	2d 32       	cpi	r18, 0x2D	; 45
    4e44:	31 f4       	brne	.+12     	; 0x4e52 <atoi+0x2a>
    4e46:	68 94       	set
    4e48:	03 c0       	rjmp	.+6      	; 0x4e50 <atoi+0x28>
    4e4a:	09 d1       	rcall	.+530    	; 0x505e <__mulhi_const_10>
    4e4c:	82 0f       	add	r24, r18
    4e4e:	91 1d       	adc	r25, r1
    4e50:	21 91       	ld	r18, Z+
    4e52:	20 53       	subi	r18, 0x30	; 48
    4e54:	2a 30       	cpi	r18, 0x0A	; 10
    4e56:	c8 f3       	brcs	.-14     	; 0x4e4a <atoi+0x22>
    4e58:	1e f4       	brtc	.+6      	; 0x4e60 <atoi+0x38>
    4e5a:	90 95       	com	r25
    4e5c:	81 95       	neg	r24
    4e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e60:	08 95       	ret

00004e62 <__ftoa_engine>:
    4e62:	28 30       	cpi	r18, 0x08	; 8
    4e64:	08 f0       	brcs	.+2      	; 0x4e68 <__ftoa_engine+0x6>
    4e66:	27 e0       	ldi	r18, 0x07	; 7
    4e68:	33 27       	eor	r19, r19
    4e6a:	da 01       	movw	r26, r20
    4e6c:	99 0f       	add	r25, r25
    4e6e:	31 1d       	adc	r19, r1
    4e70:	87 fd       	sbrc	r24, 7
    4e72:	91 60       	ori	r25, 0x01	; 1
    4e74:	00 96       	adiw	r24, 0x00	; 0
    4e76:	61 05       	cpc	r22, r1
    4e78:	71 05       	cpc	r23, r1
    4e7a:	39 f4       	brne	.+14     	; 0x4e8a <__ftoa_engine+0x28>
    4e7c:	32 60       	ori	r19, 0x02	; 2
    4e7e:	2e 5f       	subi	r18, 0xFE	; 254
    4e80:	3d 93       	st	X+, r19
    4e82:	30 e3       	ldi	r19, 0x30	; 48
    4e84:	2a 95       	dec	r18
    4e86:	e1 f7       	brne	.-8      	; 0x4e80 <__ftoa_engine+0x1e>
    4e88:	08 95       	ret
    4e8a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e8c:	30 f0       	brcs	.+12     	; 0x4e9a <__ftoa_engine+0x38>
    4e8e:	80 38       	cpi	r24, 0x80	; 128
    4e90:	71 05       	cpc	r23, r1
    4e92:	61 05       	cpc	r22, r1
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <__ftoa_engine+0x36>
    4e96:	3c 5f       	subi	r19, 0xFC	; 252
    4e98:	3c 5f       	subi	r19, 0xFC	; 252
    4e9a:	3d 93       	st	X+, r19
    4e9c:	91 30       	cpi	r25, 0x01	; 1
    4e9e:	08 f0       	brcs	.+2      	; 0x4ea2 <__ftoa_engine+0x40>
    4ea0:	80 68       	ori	r24, 0x80	; 128
    4ea2:	91 1d       	adc	r25, r1
    4ea4:	df 93       	push	r29
    4ea6:	cf 93       	push	r28
    4ea8:	1f 93       	push	r17
    4eaa:	0f 93       	push	r16
    4eac:	ff 92       	push	r15
    4eae:	ef 92       	push	r14
    4eb0:	19 2f       	mov	r17, r25
    4eb2:	98 7f       	andi	r25, 0xF8	; 248
    4eb4:	96 95       	lsr	r25
    4eb6:	e9 2f       	mov	r30, r25
    4eb8:	96 95       	lsr	r25
    4eba:	96 95       	lsr	r25
    4ebc:	e9 0f       	add	r30, r25
    4ebe:	ff 27       	eor	r31, r31
    4ec0:	ea 5b       	subi	r30, 0xBA	; 186
    4ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec4:	99 27       	eor	r25, r25
    4ec6:	33 27       	eor	r19, r19
    4ec8:	ee 24       	eor	r14, r14
    4eca:	ff 24       	eor	r15, r15
    4ecc:	a7 01       	movw	r20, r14
    4ece:	e7 01       	movw	r28, r14
    4ed0:	05 90       	lpm	r0, Z+
    4ed2:	08 94       	sec
    4ed4:	07 94       	ror	r0
    4ed6:	28 f4       	brcc	.+10     	; 0x4ee2 <__ftoa_engine+0x80>
    4ed8:	36 0f       	add	r19, r22
    4eda:	e7 1e       	adc	r14, r23
    4edc:	f8 1e       	adc	r15, r24
    4ede:	49 1f       	adc	r20, r25
    4ee0:	51 1d       	adc	r21, r1
    4ee2:	66 0f       	add	r22, r22
    4ee4:	77 1f       	adc	r23, r23
    4ee6:	88 1f       	adc	r24, r24
    4ee8:	99 1f       	adc	r25, r25
    4eea:	06 94       	lsr	r0
    4eec:	a1 f7       	brne	.-24     	; 0x4ed6 <__ftoa_engine+0x74>
    4eee:	05 90       	lpm	r0, Z+
    4ef0:	07 94       	ror	r0
    4ef2:	28 f4       	brcc	.+10     	; 0x4efe <__ftoa_engine+0x9c>
    4ef4:	e7 0e       	add	r14, r23
    4ef6:	f8 1e       	adc	r15, r24
    4ef8:	49 1f       	adc	r20, r25
    4efa:	56 1f       	adc	r21, r22
    4efc:	c1 1d       	adc	r28, r1
    4efe:	77 0f       	add	r23, r23
    4f00:	88 1f       	adc	r24, r24
    4f02:	99 1f       	adc	r25, r25
    4f04:	66 1f       	adc	r22, r22
    4f06:	06 94       	lsr	r0
    4f08:	a1 f7       	brne	.-24     	; 0x4ef2 <__ftoa_engine+0x90>
    4f0a:	05 90       	lpm	r0, Z+
    4f0c:	07 94       	ror	r0
    4f0e:	28 f4       	brcc	.+10     	; 0x4f1a <__ftoa_engine+0xb8>
    4f10:	f8 0e       	add	r15, r24
    4f12:	49 1f       	adc	r20, r25
    4f14:	56 1f       	adc	r21, r22
    4f16:	c7 1f       	adc	r28, r23
    4f18:	d1 1d       	adc	r29, r1
    4f1a:	88 0f       	add	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	66 1f       	adc	r22, r22
    4f20:	77 1f       	adc	r23, r23
    4f22:	06 94       	lsr	r0
    4f24:	a1 f7       	brne	.-24     	; 0x4f0e <__ftoa_engine+0xac>
    4f26:	05 90       	lpm	r0, Z+
    4f28:	07 94       	ror	r0
    4f2a:	20 f4       	brcc	.+8      	; 0x4f34 <__ftoa_engine+0xd2>
    4f2c:	49 0f       	add	r20, r25
    4f2e:	56 1f       	adc	r21, r22
    4f30:	c7 1f       	adc	r28, r23
    4f32:	d8 1f       	adc	r29, r24
    4f34:	99 0f       	add	r25, r25
    4f36:	66 1f       	adc	r22, r22
    4f38:	77 1f       	adc	r23, r23
    4f3a:	88 1f       	adc	r24, r24
    4f3c:	06 94       	lsr	r0
    4f3e:	a9 f7       	brne	.-22     	; 0x4f2a <__ftoa_engine+0xc8>
    4f40:	84 91       	lpm	r24, Z
    4f42:	10 95       	com	r17
    4f44:	17 70       	andi	r17, 0x07	; 7
    4f46:	41 f0       	breq	.+16     	; 0x4f58 <__ftoa_engine+0xf6>
    4f48:	d6 95       	lsr	r29
    4f4a:	c7 95       	ror	r28
    4f4c:	57 95       	ror	r21
    4f4e:	47 95       	ror	r20
    4f50:	f7 94       	ror	r15
    4f52:	e7 94       	ror	r14
    4f54:	1a 95       	dec	r17
    4f56:	c1 f7       	brne	.-16     	; 0x4f48 <__ftoa_engine+0xe6>
    4f58:	ec ee       	ldi	r30, 0xEC	; 236
    4f5a:	f0 e0       	ldi	r31, 0x00	; 0
    4f5c:	68 94       	set
    4f5e:	15 90       	lpm	r1, Z+
    4f60:	15 91       	lpm	r17, Z+
    4f62:	35 91       	lpm	r19, Z+
    4f64:	65 91       	lpm	r22, Z+
    4f66:	95 91       	lpm	r25, Z+
    4f68:	05 90       	lpm	r0, Z+
    4f6a:	7f e2       	ldi	r23, 0x2F	; 47
    4f6c:	73 95       	inc	r23
    4f6e:	e1 18       	sub	r14, r1
    4f70:	f1 0a       	sbc	r15, r17
    4f72:	43 0b       	sbc	r20, r19
    4f74:	56 0b       	sbc	r21, r22
    4f76:	c9 0b       	sbc	r28, r25
    4f78:	d0 09       	sbc	r29, r0
    4f7a:	c0 f7       	brcc	.-16     	; 0x4f6c <__ftoa_engine+0x10a>
    4f7c:	e1 0c       	add	r14, r1
    4f7e:	f1 1e       	adc	r15, r17
    4f80:	43 1f       	adc	r20, r19
    4f82:	56 1f       	adc	r21, r22
    4f84:	c9 1f       	adc	r28, r25
    4f86:	d0 1d       	adc	r29, r0
    4f88:	7e f4       	brtc	.+30     	; 0x4fa8 <__ftoa_engine+0x146>
    4f8a:	70 33       	cpi	r23, 0x30	; 48
    4f8c:	11 f4       	brne	.+4      	; 0x4f92 <__ftoa_engine+0x130>
    4f8e:	8a 95       	dec	r24
    4f90:	e6 cf       	rjmp	.-52     	; 0x4f5e <__ftoa_engine+0xfc>
    4f92:	e8 94       	clt
    4f94:	01 50       	subi	r16, 0x01	; 1
    4f96:	30 f0       	brcs	.+12     	; 0x4fa4 <__ftoa_engine+0x142>
    4f98:	08 0f       	add	r16, r24
    4f9a:	0a f4       	brpl	.+2      	; 0x4f9e <__ftoa_engine+0x13c>
    4f9c:	00 27       	eor	r16, r16
    4f9e:	02 17       	cp	r16, r18
    4fa0:	08 f4       	brcc	.+2      	; 0x4fa4 <__ftoa_engine+0x142>
    4fa2:	20 2f       	mov	r18, r16
    4fa4:	23 95       	inc	r18
    4fa6:	02 2f       	mov	r16, r18
    4fa8:	7a 33       	cpi	r23, 0x3A	; 58
    4faa:	28 f0       	brcs	.+10     	; 0x4fb6 <__ftoa_engine+0x154>
    4fac:	79 e3       	ldi	r23, 0x39	; 57
    4fae:	7d 93       	st	X+, r23
    4fb0:	2a 95       	dec	r18
    4fb2:	e9 f7       	brne	.-6      	; 0x4fae <__ftoa_engine+0x14c>
    4fb4:	10 c0       	rjmp	.+32     	; 0x4fd6 <__ftoa_engine+0x174>
    4fb6:	7d 93       	st	X+, r23
    4fb8:	2a 95       	dec	r18
    4fba:	89 f6       	brne	.-94     	; 0x4f5e <__ftoa_engine+0xfc>
    4fbc:	06 94       	lsr	r0
    4fbe:	97 95       	ror	r25
    4fc0:	67 95       	ror	r22
    4fc2:	37 95       	ror	r19
    4fc4:	17 95       	ror	r17
    4fc6:	17 94       	ror	r1
    4fc8:	e1 18       	sub	r14, r1
    4fca:	f1 0a       	sbc	r15, r17
    4fcc:	43 0b       	sbc	r20, r19
    4fce:	56 0b       	sbc	r21, r22
    4fd0:	c9 0b       	sbc	r28, r25
    4fd2:	d0 09       	sbc	r29, r0
    4fd4:	98 f0       	brcs	.+38     	; 0x4ffc <__ftoa_engine+0x19a>
    4fd6:	23 95       	inc	r18
    4fd8:	7e 91       	ld	r23, -X
    4fda:	73 95       	inc	r23
    4fdc:	7a 33       	cpi	r23, 0x3A	; 58
    4fde:	08 f0       	brcs	.+2      	; 0x4fe2 <__ftoa_engine+0x180>
    4fe0:	70 e3       	ldi	r23, 0x30	; 48
    4fe2:	7c 93       	st	X, r23
    4fe4:	20 13       	cpse	r18, r16
    4fe6:	b8 f7       	brcc	.-18     	; 0x4fd6 <__ftoa_engine+0x174>
    4fe8:	7e 91       	ld	r23, -X
    4fea:	70 61       	ori	r23, 0x10	; 16
    4fec:	7d 93       	st	X+, r23
    4fee:	30 f0       	brcs	.+12     	; 0x4ffc <__ftoa_engine+0x19a>
    4ff0:	83 95       	inc	r24
    4ff2:	71 e3       	ldi	r23, 0x31	; 49
    4ff4:	7d 93       	st	X+, r23
    4ff6:	70 e3       	ldi	r23, 0x30	; 48
    4ff8:	2a 95       	dec	r18
    4ffa:	e1 f7       	brne	.-8      	; 0x4ff4 <__ftoa_engine+0x192>
    4ffc:	11 24       	eor	r1, r1
    4ffe:	ef 90       	pop	r14
    5000:	ff 90       	pop	r15
    5002:	0f 91       	pop	r16
    5004:	1f 91       	pop	r17
    5006:	cf 91       	pop	r28
    5008:	df 91       	pop	r29
    500a:	99 27       	eor	r25, r25
    500c:	87 fd       	sbrc	r24, 7
    500e:	90 95       	com	r25
    5010:	08 95       	ret

00005012 <strcpy_P>:
    5012:	fb 01       	movw	r30, r22
    5014:	dc 01       	movw	r26, r24
    5016:	05 90       	lpm	r0, Z+
    5018:	0d 92       	st	X+, r0
    501a:	00 20       	and	r0, r0
    501c:	e1 f7       	brne	.-8      	; 0x5016 <strcpy_P+0x4>
    501e:	08 95       	ret

00005020 <strnlen_P>:
    5020:	fc 01       	movw	r30, r24
    5022:	05 90       	lpm	r0, Z+
    5024:	61 50       	subi	r22, 0x01	; 1
    5026:	70 40       	sbci	r23, 0x00	; 0
    5028:	01 10       	cpse	r0, r1
    502a:	d8 f7       	brcc	.-10     	; 0x5022 <strnlen_P+0x2>
    502c:	80 95       	com	r24
    502e:	90 95       	com	r25
    5030:	8e 0f       	add	r24, r30
    5032:	9f 1f       	adc	r25, r31
    5034:	08 95       	ret

00005036 <strcmp>:
    5036:	fb 01       	movw	r30, r22
    5038:	dc 01       	movw	r26, r24
    503a:	8d 91       	ld	r24, X+
    503c:	01 90       	ld	r0, Z+
    503e:	80 19       	sub	r24, r0
    5040:	01 10       	cpse	r0, r1
    5042:	d9 f3       	breq	.-10     	; 0x503a <strcmp+0x4>
    5044:	99 0b       	sbc	r25, r25
    5046:	08 95       	ret

00005048 <strnlen>:
    5048:	fc 01       	movw	r30, r24
    504a:	61 50       	subi	r22, 0x01	; 1
    504c:	70 40       	sbci	r23, 0x00	; 0
    504e:	01 90       	ld	r0, Z+
    5050:	01 10       	cpse	r0, r1
    5052:	d8 f7       	brcc	.-10     	; 0x504a <strnlen+0x2>
    5054:	80 95       	com	r24
    5056:	90 95       	com	r25
    5058:	8e 0f       	add	r24, r30
    505a:	9f 1f       	adc	r25, r31
    505c:	08 95       	ret

0000505e <__mulhi_const_10>:
    505e:	7a e0       	ldi	r23, 0x0A	; 10
    5060:	97 9f       	mul	r25, r23
    5062:	90 2d       	mov	r25, r0
    5064:	87 9f       	mul	r24, r23
    5066:	80 2d       	mov	r24, r0
    5068:	91 0d       	add	r25, r1
    506a:	11 24       	eor	r1, r1
    506c:	08 95       	ret

0000506e <fputc>:
    506e:	0f 93       	push	r16
    5070:	1f 93       	push	r17
    5072:	cf 93       	push	r28
    5074:	df 93       	push	r29
    5076:	fb 01       	movw	r30, r22
    5078:	23 81       	ldd	r18, Z+3	; 0x03
    507a:	21 fd       	sbrc	r18, 1
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <fputc+0x16>
    507e:	8f ef       	ldi	r24, 0xFF	; 255
    5080:	9f ef       	ldi	r25, 0xFF	; 255
    5082:	2c c0       	rjmp	.+88     	; 0x50dc <fputc+0x6e>
    5084:	22 ff       	sbrs	r18, 2
    5086:	16 c0       	rjmp	.+44     	; 0x50b4 <fputc+0x46>
    5088:	46 81       	ldd	r20, Z+6	; 0x06
    508a:	57 81       	ldd	r21, Z+7	; 0x07
    508c:	24 81       	ldd	r18, Z+4	; 0x04
    508e:	35 81       	ldd	r19, Z+5	; 0x05
    5090:	42 17       	cp	r20, r18
    5092:	53 07       	cpc	r21, r19
    5094:	44 f4       	brge	.+16     	; 0x50a6 <fputc+0x38>
    5096:	a0 81       	ld	r26, Z
    5098:	b1 81       	ldd	r27, Z+1	; 0x01
    509a:	9d 01       	movw	r18, r26
    509c:	2f 5f       	subi	r18, 0xFF	; 255
    509e:	3f 4f       	sbci	r19, 0xFF	; 255
    50a0:	31 83       	std	Z+1, r19	; 0x01
    50a2:	20 83       	st	Z, r18
    50a4:	8c 93       	st	X, r24
    50a6:	26 81       	ldd	r18, Z+6	; 0x06
    50a8:	37 81       	ldd	r19, Z+7	; 0x07
    50aa:	2f 5f       	subi	r18, 0xFF	; 255
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	37 83       	std	Z+7, r19	; 0x07
    50b0:	26 83       	std	Z+6, r18	; 0x06
    50b2:	14 c0       	rjmp	.+40     	; 0x50dc <fputc+0x6e>
    50b4:	8b 01       	movw	r16, r22
    50b6:	ec 01       	movw	r28, r24
    50b8:	fb 01       	movw	r30, r22
    50ba:	00 84       	ldd	r0, Z+8	; 0x08
    50bc:	f1 85       	ldd	r31, Z+9	; 0x09
    50be:	e0 2d       	mov	r30, r0
    50c0:	19 95       	eicall
    50c2:	89 2b       	or	r24, r25
    50c4:	e1 f6       	brne	.-72     	; 0x507e <fputc+0x10>
    50c6:	d8 01       	movw	r26, r16
    50c8:	16 96       	adiw	r26, 0x06	; 6
    50ca:	8d 91       	ld	r24, X+
    50cc:	9c 91       	ld	r25, X
    50ce:	17 97       	sbiw	r26, 0x07	; 7
    50d0:	01 96       	adiw	r24, 0x01	; 1
    50d2:	17 96       	adiw	r26, 0x07	; 7
    50d4:	9c 93       	st	X, r25
    50d6:	8e 93       	st	-X, r24
    50d8:	16 97       	sbiw	r26, 0x06	; 6
    50da:	ce 01       	movw	r24, r28
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	1f 91       	pop	r17
    50e2:	0f 91       	pop	r16
    50e4:	08 95       	ret

000050e6 <printf>:
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	cd b7       	in	r28, 0x3d	; 61
    50ec:	de b7       	in	r29, 0x3e	; 62
    50ee:	ae 01       	movw	r20, r28
    50f0:	4a 5f       	subi	r20, 0xFA	; 250
    50f2:	5f 4f       	sbci	r21, 0xFF	; 255
    50f4:	fa 01       	movw	r30, r20
    50f6:	61 91       	ld	r22, Z+
    50f8:	71 91       	ld	r23, Z+
    50fa:	af 01       	movw	r20, r30
    50fc:	80 91 a2 0a 	lds	r24, 0x0AA2	; 0x800aa2 <__iob+0x2>
    5100:	90 91 a3 0a 	lds	r25, 0x0AA3	; 0x800aa3 <__iob+0x3>
    5104:	b5 da       	rcall	.-2710   	; 0x4670 <vfprintf>
    5106:	df 91       	pop	r29
    5108:	cf 91       	pop	r28
    510a:	08 95       	ret

0000510c <printf_P>:
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
    5118:	ae 01       	movw	r20, r28
    511a:	48 5f       	subi	r20, 0xF8	; 248
    511c:	5f 4f       	sbci	r21, 0xFF	; 255
    511e:	da 01       	movw	r26, r20
    5120:	6d 91       	ld	r22, X+
    5122:	7d 91       	ld	r23, X+
    5124:	ad 01       	movw	r20, r26
    5126:	00 ea       	ldi	r16, 0xA0	; 160
    5128:	1a e0       	ldi	r17, 0x0A	; 10
    512a:	f8 01       	movw	r30, r16
    512c:	82 81       	ldd	r24, Z+2	; 0x02
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	dc 01       	movw	r26, r24
    5132:	13 96       	adiw	r26, 0x03	; 3
    5134:	2c 91       	ld	r18, X
    5136:	13 97       	sbiw	r26, 0x03	; 3
    5138:	28 60       	ori	r18, 0x08	; 8
    513a:	13 96       	adiw	r26, 0x03	; 3
    513c:	2c 93       	st	X, r18
    513e:	98 da       	rcall	.-2768   	; 0x4670 <vfprintf>
    5140:	d8 01       	movw	r26, r16
    5142:	12 96       	adiw	r26, 0x02	; 2
    5144:	ed 91       	ld	r30, X+
    5146:	fc 91       	ld	r31, X
    5148:	13 97       	sbiw	r26, 0x03	; 3
    514a:	23 81       	ldd	r18, Z+3	; 0x03
    514c:	27 7f       	andi	r18, 0xF7	; 247
    514e:	23 83       	std	Z+3, r18	; 0x03
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	08 95       	ret

0000515a <putchar>:
    515a:	60 91 a2 0a 	lds	r22, 0x0AA2	; 0x800aa2 <__iob+0x2>
    515e:	70 91 a3 0a 	lds	r23, 0x0AA3	; 0x800aa3 <__iob+0x3>
    5162:	85 cf       	rjmp	.-246    	; 0x506e <fputc>

00005164 <puts>:
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	e0 91 a2 0a 	lds	r30, 0x0AA2	; 0x800aa2 <__iob+0x2>
    5170:	f0 91 a3 0a 	lds	r31, 0x0AA3	; 0x800aa3 <__iob+0x3>
    5174:	23 81       	ldd	r18, Z+3	; 0x03
    5176:	21 ff       	sbrs	r18, 1
    5178:	1b c0       	rjmp	.+54     	; 0x51b0 <puts+0x4c>
    517a:	8c 01       	movw	r16, r24
    517c:	d0 e0       	ldi	r29, 0x00	; 0
    517e:	c0 e0       	ldi	r28, 0x00	; 0
    5180:	f8 01       	movw	r30, r16
    5182:	81 91       	ld	r24, Z+
    5184:	8f 01       	movw	r16, r30
    5186:	60 91 a2 0a 	lds	r22, 0x0AA2	; 0x800aa2 <__iob+0x2>
    518a:	70 91 a3 0a 	lds	r23, 0x0AA3	; 0x800aa3 <__iob+0x3>
    518e:	db 01       	movw	r26, r22
    5190:	18 96       	adiw	r26, 0x08	; 8
    5192:	ed 91       	ld	r30, X+
    5194:	fc 91       	ld	r31, X
    5196:	19 97       	sbiw	r26, 0x09	; 9
    5198:	88 23       	and	r24, r24
    519a:	31 f0       	breq	.+12     	; 0x51a8 <puts+0x44>
    519c:	19 95       	eicall
    519e:	89 2b       	or	r24, r25
    51a0:	79 f3       	breq	.-34     	; 0x5180 <puts+0x1c>
    51a2:	df ef       	ldi	r29, 0xFF	; 255
    51a4:	cf ef       	ldi	r28, 0xFF	; 255
    51a6:	ec cf       	rjmp	.-40     	; 0x5180 <puts+0x1c>
    51a8:	8a e0       	ldi	r24, 0x0A	; 10
    51aa:	19 95       	eicall
    51ac:	89 2b       	or	r24, r25
    51ae:	19 f0       	breq	.+6      	; 0x51b6 <puts+0x52>
    51b0:	8f ef       	ldi	r24, 0xFF	; 255
    51b2:	9f ef       	ldi	r25, 0xFF	; 255
    51b4:	02 c0       	rjmp	.+4      	; 0x51ba <puts+0x56>
    51b6:	8d 2f       	mov	r24, r29
    51b8:	9c 2f       	mov	r25, r28
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	08 95       	ret

000051c4 <__ultoa_invert>:
    51c4:	fa 01       	movw	r30, r20
    51c6:	aa 27       	eor	r26, r26
    51c8:	28 30       	cpi	r18, 0x08	; 8
    51ca:	51 f1       	breq	.+84     	; 0x5220 <__ultoa_invert+0x5c>
    51cc:	20 31       	cpi	r18, 0x10	; 16
    51ce:	81 f1       	breq	.+96     	; 0x5230 <__ultoa_invert+0x6c>
    51d0:	e8 94       	clt
    51d2:	6f 93       	push	r22
    51d4:	6e 7f       	andi	r22, 0xFE	; 254
    51d6:	6e 5f       	subi	r22, 0xFE	; 254
    51d8:	7f 4f       	sbci	r23, 0xFF	; 255
    51da:	8f 4f       	sbci	r24, 0xFF	; 255
    51dc:	9f 4f       	sbci	r25, 0xFF	; 255
    51de:	af 4f       	sbci	r26, 0xFF	; 255
    51e0:	b1 e0       	ldi	r27, 0x01	; 1
    51e2:	3e d0       	rcall	.+124    	; 0x5260 <__ultoa_invert+0x9c>
    51e4:	b4 e0       	ldi	r27, 0x04	; 4
    51e6:	3c d0       	rcall	.+120    	; 0x5260 <__ultoa_invert+0x9c>
    51e8:	67 0f       	add	r22, r23
    51ea:	78 1f       	adc	r23, r24
    51ec:	89 1f       	adc	r24, r25
    51ee:	9a 1f       	adc	r25, r26
    51f0:	a1 1d       	adc	r26, r1
    51f2:	68 0f       	add	r22, r24
    51f4:	79 1f       	adc	r23, r25
    51f6:	8a 1f       	adc	r24, r26
    51f8:	91 1d       	adc	r25, r1
    51fa:	a1 1d       	adc	r26, r1
    51fc:	6a 0f       	add	r22, r26
    51fe:	71 1d       	adc	r23, r1
    5200:	81 1d       	adc	r24, r1
    5202:	91 1d       	adc	r25, r1
    5204:	a1 1d       	adc	r26, r1
    5206:	20 d0       	rcall	.+64     	; 0x5248 <__ultoa_invert+0x84>
    5208:	09 f4       	brne	.+2      	; 0x520c <__ultoa_invert+0x48>
    520a:	68 94       	set
    520c:	3f 91       	pop	r19
    520e:	2a e0       	ldi	r18, 0x0A	; 10
    5210:	26 9f       	mul	r18, r22
    5212:	11 24       	eor	r1, r1
    5214:	30 19       	sub	r19, r0
    5216:	30 5d       	subi	r19, 0xD0	; 208
    5218:	31 93       	st	Z+, r19
    521a:	de f6       	brtc	.-74     	; 0x51d2 <__ultoa_invert+0xe>
    521c:	cf 01       	movw	r24, r30
    521e:	08 95       	ret
    5220:	46 2f       	mov	r20, r22
    5222:	47 70       	andi	r20, 0x07	; 7
    5224:	40 5d       	subi	r20, 0xD0	; 208
    5226:	41 93       	st	Z+, r20
    5228:	b3 e0       	ldi	r27, 0x03	; 3
    522a:	0f d0       	rcall	.+30     	; 0x524a <__ultoa_invert+0x86>
    522c:	c9 f7       	brne	.-14     	; 0x5220 <__ultoa_invert+0x5c>
    522e:	f6 cf       	rjmp	.-20     	; 0x521c <__ultoa_invert+0x58>
    5230:	46 2f       	mov	r20, r22
    5232:	4f 70       	andi	r20, 0x0F	; 15
    5234:	40 5d       	subi	r20, 0xD0	; 208
    5236:	4a 33       	cpi	r20, 0x3A	; 58
    5238:	18 f0       	brcs	.+6      	; 0x5240 <__ultoa_invert+0x7c>
    523a:	49 5d       	subi	r20, 0xD9	; 217
    523c:	31 fd       	sbrc	r19, 1
    523e:	40 52       	subi	r20, 0x20	; 32
    5240:	41 93       	st	Z+, r20
    5242:	02 d0       	rcall	.+4      	; 0x5248 <__ultoa_invert+0x84>
    5244:	a9 f7       	brne	.-22     	; 0x5230 <__ultoa_invert+0x6c>
    5246:	ea cf       	rjmp	.-44     	; 0x521c <__ultoa_invert+0x58>
    5248:	b4 e0       	ldi	r27, 0x04	; 4
    524a:	a6 95       	lsr	r26
    524c:	97 95       	ror	r25
    524e:	87 95       	ror	r24
    5250:	77 95       	ror	r23
    5252:	67 95       	ror	r22
    5254:	ba 95       	dec	r27
    5256:	c9 f7       	brne	.-14     	; 0x524a <__ultoa_invert+0x86>
    5258:	00 97       	sbiw	r24, 0x00	; 0
    525a:	61 05       	cpc	r22, r1
    525c:	71 05       	cpc	r23, r1
    525e:	08 95       	ret
    5260:	9b 01       	movw	r18, r22
    5262:	ac 01       	movw	r20, r24
    5264:	0a 2e       	mov	r0, r26
    5266:	06 94       	lsr	r0
    5268:	57 95       	ror	r21
    526a:	47 95       	ror	r20
    526c:	37 95       	ror	r19
    526e:	27 95       	ror	r18
    5270:	ba 95       	dec	r27
    5272:	c9 f7       	brne	.-14     	; 0x5266 <__ultoa_invert+0xa2>
    5274:	62 0f       	add	r22, r18
    5276:	73 1f       	adc	r23, r19
    5278:	84 1f       	adc	r24, r20
    527a:	95 1f       	adc	r25, r21
    527c:	a0 1d       	adc	r26, r0
    527e:	08 95       	ret

00005280 <_exit>:
    5280:	f8 94       	cli

00005282 <__stop_program>:
    5282:	ff cf       	rjmp	.-2      	; 0x5282 <__stop_program>


SchuylerBoardTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006da  00800200  00003d4e  00003de2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  008008da  008008da  000044bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000687e  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025af  00000000  00000000  0000b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a1a  00000000  00000000  0000d985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011c0  00000000  00000000  000113a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015ab  00000000  00000000  00012560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b54  00000000  00000000  00013b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  0001765f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c3       	rjmp	.+1688   	; 0x69a <__ctors_end>
       2:	00 00       	nop
       4:	6b c3       	rjmp	.+1750   	; 0x6dc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c3       	rjmp	.+1746   	; 0x6dc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c3       	rjmp	.+1742   	; 0x6dc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c3       	rjmp	.+1738   	; 0x6dc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c3       	rjmp	.+1734   	; 0x6dc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c3       	rjmp	.+1730   	; 0x6dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c3       	rjmp	.+1726   	; 0x6dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	fd c5       	rjmp	.+3066   	; 0xc1c <__vector_8>
      22:	00 00       	nop
      24:	5b c3       	rjmp	.+1718   	; 0x6dc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c3       	rjmp	.+1714   	; 0x6dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c3       	rjmp	.+1710   	; 0x6dc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c3       	rjmp	.+1706   	; 0x6dc <__bad_interrupt>
      32:	00 00       	nop
      34:	fd c5       	rjmp	.+3066   	; 0xc30 <__vector_13>
      36:	00 00       	nop
      38:	51 c3       	rjmp	.+1698   	; 0x6dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c3       	rjmp	.+1694   	; 0x6dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c3       	rjmp	.+1690   	; 0x6dc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c3       	rjmp	.+1686   	; 0x6dc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c3       	rjmp	.+1682   	; 0x6dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c3       	rjmp	.+1678   	; 0x6dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c3       	rjmp	.+1674   	; 0x6dc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c3       	rjmp	.+1670   	; 0x6dc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c3       	rjmp	.+1666   	; 0x6dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c3       	rjmp	.+1662   	; 0x6dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c3       	rjmp	.+1658   	; 0x6dc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__vector_25>
      68:	39 c3       	rjmp	.+1650   	; 0x6dc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c3       	rjmp	.+1646   	; 0x6dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c3       	rjmp	.+1642   	; 0x6dc <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c7       	rjmp	.+3792   	; 0xf46 <__vector_29>
      76:	00 00       	nop
      78:	31 c3       	rjmp	.+1634   	; 0x6dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c3       	rjmp	.+1630   	; 0x6dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c3       	rjmp	.+1626   	; 0x6dc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c3       	rjmp	.+1622   	; 0x6dc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c3       	rjmp	.+1618   	; 0x6dc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 c3       	rjmp	.+1614   	; 0x6dc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__vector_36>
      94:	23 c3       	rjmp	.+1606   	; 0x6dc <__bad_interrupt>
      96:	00 00       	nop
      98:	21 c3       	rjmp	.+1602   	; 0x6dc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1f c3       	rjmp	.+1598   	; 0x6dc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1d c3       	rjmp	.+1594   	; 0x6dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1b c3       	rjmp	.+1590   	; 0x6dc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	19 c3       	rjmp	.+1586   	; 0x6dc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	17 c3       	rjmp	.+1582   	; 0x6dc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	15 c3       	rjmp	.+1578   	; 0x6dc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	13 c3       	rjmp	.+1574   	; 0x6dc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	11 c3       	rjmp	.+1570   	; 0x6dc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0f c3       	rjmp	.+1566   	; 0x6dc <__bad_interrupt>
      be:	00 00       	nop
      c0:	0d c3       	rjmp	.+1562   	; 0x6dc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0b c3       	rjmp	.+1558   	; 0x6dc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	09 c3       	rjmp	.+1554   	; 0x6dc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	07 c3       	rjmp	.+1550   	; 0x6dc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	05 c3       	rjmp	.+1546   	; 0x6dc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	03 c3       	rjmp	.+1542   	; 0x6dc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	01 c3       	rjmp	.+1538   	; 0x6dc <__bad_interrupt>
      da:	00 00       	nop
      dc:	ff c2       	rjmp	.+1534   	; 0x6dc <__bad_interrupt>
      de:	00 00       	nop
      e0:	fd c2       	rjmp	.+1530   	; 0x6dc <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__c.2497>:
     1e6:	46 4c 41 53 48 20 72 65 61 64 20 66 61 69 6c 65     FLASH read faile
     1f6:	64 0a 00                                            d..

000001f9 <__c.2481>:
     1f9:	46 4c 41 53 48 20 77 72 69 74 65 20 66 61 69 6c     FLASH write fail
     209:	65 64 0a 00                                         ed..

0000020d <__c.2046>:
     20d:	75 6e 6b 6e 6f 77 6e 20 41 44 43 32 35 31 38 20     unknown ADC2518 
     21d:	6f 73 63 69 6c 61 74 6f 72 53 70 65 65 64 0a 00     oscilatorSpeed..

0000022d <__c.2037>:
     22d:	4f 53 52 3a 20 6c 6f 67 32 73 61 6d 70 6c 65 73     OSR: log2samples
     23d:	20 3e 20 37 00                                       > 7.

00000242 <__c.2082>:
     242:	0a 00                                               ..

00000244 <__c.2077>:
     244:	25 64 20 00                                         %d .

00000248 <__c.2071>:
     248:	45 52 52 4f 52 3a 20 4e 6f 20 41 44 43 20 43 68     ERROR: No ADC Ch
     258:	61 6e 6e 65 6c 73 20 61 63 74 69 76 65 0a 00        annels active..

00000267 <__c.2042>:
     267:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     277:	49 6e 74 65 72 6e 61 6c 20 46 61 75 6c 74 20 25     Internal Fault %
     287:	64 0a 00                                            d..

0000028a <__c.2040>:
     28a:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     29a:	52 65 61 64 69 6e 67 20 25 64 0a 00                 Reading %d..

000002a6 <__c.2038>:
     2a6:	0a 53 65 6e 73 6f 72 20 25 64 20 69 6e 20 50 72     .Sensor %d in Pr
     2b6:	6f 67 72 61 6d 6d 69 6e 67 20 4d 6f 64 65 0a 00     ogramming Mode..

000002c6 <__c.2114>:
     2c6:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     2d6:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     2e6:	74 20 64 69 73 61 62 6c 65 20 77 72 69 74 65 0a     t disable write.
	...

000002f7 <__c.2116>:
     2f7:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     307:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     317:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     327:	74 61 20 6c 6f 61 64 0a 00                          ta load..

00000330 <__c.2118>:
     330:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     340:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     350:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     360:	74 61 20 6c 6f 61 64 0a 00                          ta load..

00000369 <__c.2120>:
     369:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     379:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     389:	74 20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00     t enable write..

00000399 <__c.2122>:
     399:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     3a9:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     3b9:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 70 61     r ready after pa
     3c9:	67 65 20 72 65 61 64 0a 00                          ge read..

000003d2 <__c.2124>:
     3d2:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     3e2:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     3f2:	72 20 72 65 61 64 79 0a 00                          r ready..

000003fb <__c.2126>:
     3fb:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     40b:	50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72 6f     Page: buffer cro
     41b:	73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64 61     sses page bounda
     42b:	72 79 0a 00                                         ry..

0000042f <__c.2138>:
     42f:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     43f:	32 6e 64 20 70 61 67 65 20 77 72 69 74 65 20 66     2nd page write f
     44f:	61 69 6c 65 64 0a 00                                ailed..

00000456 <__c.2140>:
     456:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     466:	31 73 74 20 70 61 67 65 20 77 72 69 74 65 20 66     1st page write f
     476:	61 69 6c 65 64 0a 00                                ailed..

0000047d <__c.2155>:
     47d:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     48d:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     49d:	65 72 20 72 65 61 64 79 20 61 66 74 65 72 20 70     er ready after p
     4ad:	61 67 65 20 72 65 61 64 0a 00                       age read..

000004b7 <__c.2157>:
     4b7:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     4c7:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     4d7:	65 72 20 72 65 61 64 79 0a 00                       er ready..

000004e1 <__c.2159>:
     4e1:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     4f1:	6d 50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72     mPage: buffer cr
     501:	6f 73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64     osses page bound
     511:	61 72 79 0a 00                                      ary..

00000516 <__c.2171>:
     516:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 32     spi_FlashRead: 2
     526:	6e 64 20 70 61 67 65 20 72 65 61 64 20 66 61 69     nd page read fai
     536:	6c 65 64 0a 00                                      led..

0000053b <__c.2173>:
     53b:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 31     spi_FlashRead: 1
     54b:	73 74 20 70 61 67 65 20 72 65 61 64 20 66 61 69     st page read fai
     55b:	6c 65 64 0a 00                                      led..

00000560 <__c.2180>:
     560:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     570:	6f 63 6b 3a 20 57 72 69 74 65 20 64 69 61 73 62     ock: Write diasb
     580:	6c 65 20 66 61 69 6c 65 64 0a 00                    le failed..

0000058b <__c.2182>:
     58b:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     59b:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     5ab:	20 72 65 61 64 79 20 61 66 74 65 72 20 62 6c 6f      ready after blo
     5bb:	63 6b 20 65 72 61 73 65 0a 00                       ck erase..

000005c5 <__c.2184>:
     5c5:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     5d5:	6f 63 6b 3a 20 46 6c 61 73 68 20 77 6f 6e 27 74     ock: Flash won't
     5e5:	20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00         enable write..

000005f4 <__c.2186>:
     5f4:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     604:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     614:	20 72 65 61 64 79 0a 00                              ready..

0000061c <__c.2188>:
     61c:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     62c:	6f 63 6b 3a 20 41 64 64 72 65 73 73 20 65 78 63     ock: Address exc
     63c:	65 65 64 73 20 61 76 61 69 6c 61 62 6c 65 20 62     eeds available b
     64c:	6c 6f 63 6b 73 0a 00                                locks..

00000653 <__c.2196>:
     653:	45 72 61 73 69 6e 67 20 62 6c 6f 63 6b 20 25 64     Erasing block %d
     663:	0a 00                                               ..

00000665 <__c.2198>:
     665:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 41 6c     spi_FlashEraseAl
     675:	6c 42 6c 6f 63 6b 73 3a 20 45 72 61 73 65 20 66     lBlocks: Erase f
     685:	61 69 6c 75 72 65 20 61 74 20 62 6c 6f 63 6b 20     ailure at block 
     695:	25 64 0a 00 00                                      %d...

0000069a <__ctors_end>:
     69a:	11 24       	eor	r1, r1
     69c:	1f be       	out	0x3f, r1	; 63
     69e:	cf ef       	ldi	r28, 0xFF	; 255
     6a0:	d1 e2       	ldi	r29, 0x21	; 33
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	00 e0       	ldi	r16, 0x00	; 0
     6a8:	0c bf       	out	0x3c, r16	; 60

000006aa <__do_copy_data>:
     6aa:	18 e0       	ldi	r17, 0x08	; 8
     6ac:	a0 e0       	ldi	r26, 0x00	; 0
     6ae:	b2 e0       	ldi	r27, 0x02	; 2
     6b0:	ee e4       	ldi	r30, 0x4E	; 78
     6b2:	fd e3       	ldi	r31, 0x3D	; 61
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	0b bf       	out	0x3b, r16	; 59
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <__do_copy_data+0x14>
     6ba:	07 90       	elpm	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	aa 3d       	cpi	r26, 0xDA	; 218
     6c0:	b1 07       	cpc	r27, r17
     6c2:	d9 f7       	brne	.-10     	; 0x6ba <__do_copy_data+0x10>

000006c4 <__do_clear_bss>:
     6c4:	2a e0       	ldi	r18, 0x0A	; 10
     6c6:	aa ed       	ldi	r26, 0xDA	; 218
     6c8:	b8 e0       	ldi	r27, 0x08	; 8
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <.do_clear_bss_start>

000006cc <.do_clear_bss_loop>:
     6cc:	1d 92       	st	X+, r1

000006ce <.do_clear_bss_start>:
     6ce:	a2 31       	cpi	r26, 0x12	; 18
     6d0:	b2 07       	cpc	r27, r18
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <.do_clear_bss_loop>
     6d4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <main>
     6d8:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <_exit>

000006dc <__bad_interrupt>:
     6dc:	91 cc       	rjmp	.-1758   	; 0x0 <__vectors>

000006de <doFlashWriteTest>:
#define WRITE_TEST_SIZE 200
#define NUM_WRITES 10
#define SOURCE_STR_SIZE 10

void doFlashWriteTest(void)
{
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	c8 5c       	subi	r28, 0xC8	; 200
     6f2:	d1 09       	sbc	r29, r1
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     6fe:	10 e0       	ldi	r17, 0x00	; 0
void doFlashWriteTest(void)
{
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     706:	36 c0       	rjmp	.+108    	; 0x774 <doFlashWriteTest+0x96>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
			buffer[j] = testChars[j % SOURCE_STR_SIZE];
     708:	8d ec       	ldi	r24, 0xCD	; 205
     70a:	98 9f       	mul	r25, r24
     70c:	81 2d       	mov	r24, r1
     70e:	11 24       	eor	r1, r1
     710:	86 95       	lsr	r24
     712:	86 95       	lsr	r24
     714:	86 95       	lsr	r24
     716:	88 0f       	add	r24, r24
     718:	28 2f       	mov	r18, r24
     71a:	22 0f       	add	r18, r18
     71c:	22 0f       	add	r18, r18
     71e:	82 0f       	add	r24, r18
     720:	e9 2f       	mov	r30, r25
     722:	e8 1b       	sub	r30, r24
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ed 5c       	subi	r30, 0xCD	; 205
     728:	fc 4f       	sbci	r31, 0xFC	; 252
     72a:	80 81       	ld	r24, Z
     72c:	e1 e0       	ldi	r30, 0x01	; 1
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	ec 0f       	add	r30, r28
     732:	fd 1f       	adc	r31, r29
     734:	e9 0f       	add	r30, r25
     736:	f1 1d       	adc	r31, r1
     738:	80 83       	st	Z, r24
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
     73a:	9f 5f       	subi	r25, 0xFF	; 255
     73c:	01 c0       	rjmp	.+2      	; 0x740 <doFlashWriteTest+0x62>
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	98 3c       	cpi	r25, 0xC8	; 200
     742:	10 f3       	brcs	.-60     	; 0x708 <doFlashWriteTest+0x2a>
			buffer[j] = testChars[j % SOURCE_STR_SIZE];
		if (spi_FlashWrite(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
     744:	28 ec       	ldi	r18, 0xC8	; 200
     746:	ae 01       	movw	r20, r28
     748:	4f 5f       	subi	r20, 0xFF	; 255
     74a:	5f 4f       	sbci	r21, 0xFF	; 255
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	0e 94 57 0d 	call	0x1aae	; 0x1aae <spi_FlashWrite>
     754:	88 3c       	cpi	r24, 0xC8	; 200
     756:	41 f0       	breq	.+16     	; 0x768 <doFlashWriteTest+0x8a>
		{
			printf_P(PSTR("FLASH write failed\n"));
     758:	89 ef       	ldi	r24, 0xF9	; 249
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
		}
		address += WRITE_TEST_SIZE;
     768:	88 ec       	ldi	r24, 0xC8	; 200
     76a:	c8 0e       	add	r12, r24
     76c:	d1 1c       	adc	r13, r1
     76e:	e1 1c       	adc	r14, r1
     770:	f1 1c       	adc	r15, r1
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     772:	1f 5f       	subi	r17, 0xFF	; 255
     774:	1a 30       	cpi	r17, 0x0A	; 10
     776:	18 f3       	brcs	.-58     	; 0x73e <doFlashWriteTest+0x60>
			printf_P(PSTR("FLASH write failed\n"));
		}
		address += WRITE_TEST_SIZE;
	}
	
}
     778:	c8 53       	subi	r28, 0x38	; 56
     77a:	df 4f       	sbci	r29, 0xFF	; 255
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	08 95       	ret

00000796 <doFlashReadTest>:

void doFlashReadTest(void)
{
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	c9 5c       	subi	r28, 0xC9	; 201
     7aa:	d1 09       	sbc	r29, r1
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
     7b6:	8e e3       	ldi	r24, 0x3E	; 62
     7b8:	93 e0       	ldi	r25, 0x03	; 3
     7ba:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     7be:	10 e0       	ldi	r17, 0x00	; 0

void doFlashReadTest(void)
{
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
     7c0:	c1 2c       	mov	r12, r1
     7c2:	d1 2c       	mov	r13, r1
     7c4:	76 01       	movw	r14, r12

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     7c6:	3a c0       	rjmp	.+116    	; 0x83c <doFlashReadTest+0xa6>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++) buffer[j] = (char) 0;
     7c8:	e1 e0       	ldi	r30, 0x01	; 1
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	ec 0f       	add	r30, r28
     7ce:	fd 1f       	adc	r31, r29
     7d0:	e8 0f       	add	r30, r24
     7d2:	f1 1d       	adc	r31, r1
     7d4:	10 82       	st	Z, r1
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <doFlashReadTest+0x46>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	88 3c       	cpi	r24, 0xC8	; 200
     7de:	a0 f3       	brcs	.-24     	; 0x7c8 <doFlashReadTest+0x32>
		printf("record %d:\n", i);
     7e0:	1f 92       	push	r1
     7e2:	1f 93       	push	r17
     7e4:	82 e5       	ldi	r24, 0x52	; 82
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
		if (spi_FlashRead(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
     7f0:	28 ec       	ldi	r18, 0xC8	; 200
     7f2:	ae 01       	movw	r20, r28
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <spi_FlashRead>
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	88 3c       	cpi	r24, 0xC8	; 200
     80a:	49 f0       	breq	.+18     	; 0x81e <doFlashReadTest+0x88>
		{
			printf_P(PSTR("FLASH read failed\n"));
     80c:	86 ee       	ldi	r24, 0xE6	; 230
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	09 c0       	rjmp	.+18     	; 0x830 <doFlashReadTest+0x9a>
		}
		else
		{
			buffer[WRITE_TEST_SIZE] = '\0';
     81e:	c7 53       	subi	r28, 0x37	; 55
     820:	df 4f       	sbci	r29, 0xFF	; 255
     822:	18 82       	st	Y, r1
     824:	c9 5c       	subi	r28, 0xC9	; 201
     826:	d0 40       	sbci	r29, 0x00	; 0
			printf("%s\n",buffer);
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
		}
		address += WRITE_TEST_SIZE;
     830:	88 ec       	ldi	r24, 0xC8	; 200
     832:	c8 0e       	add	r12, r24
     834:	d1 1c       	adc	r13, r1
     836:	e1 1c       	adc	r14, r1
     838:	f1 1c       	adc	r15, r1
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     83a:	1f 5f       	subi	r17, 0xFF	; 255
     83c:	1a 30       	cpi	r17, 0x0A	; 10
     83e:	68 f2       	brcs	.-102    	; 0x7da <doFlashReadTest+0x44>
			printf("%s\n",buffer);
		}
		address += WRITE_TEST_SIZE;
	}
	
}
     840:	c7 53       	subi	r28, 0x37	; 55
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	08 95       	ret

0000085e <doFlashEraseTest>:

void doFlashEraseTest(void)
{
	spi_FlashEraseAllBlocks();
     85e:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <spi_FlashEraseAllBlocks>
     862:	08 95       	ret

00000864 <processCommand>:
void doFlashWriteTest(void);
void doFlashReadTest(void);
void doFlashEraseTest(void);

void processCommand(void)
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
		// else
		if (buf[0] == 'A')	{
     868:	c0 91 ec 09 	lds	r28, 0x09EC	; 0x8009ec <buf>
     86c:	c1 34       	cpi	r28, 0x41	; 65
     86e:	81 f5       	brne	.+96     	; 0x8d0 <processCommand+0x6c>
			if (buf[1] == 's')		ADC_rdSystemStatus();		
     870:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     874:	83 37       	cpi	r24, 0x73	; 115
     876:	11 f4       	brne	.+4      	; 0x87c <processCommand+0x18>
     878:	44 d2       	rcall	.+1160   	; 0xd02 <ADC_rdSystemStatus>
     87a:	1b c0       	rjmp	.+54     	; 0x8b2 <processCommand+0x4e>
			else if (buf[1] == 'm')	ADC_manualMode();
     87c:	8d 36       	cpi	r24, 0x6D	; 109
     87e:	11 f4       	brne	.+4      	; 0x884 <processCommand+0x20>
     880:	a8 d2       	rcall	.+1360   	; 0xdd2 <ADC_manualMode>
     882:	17 c0       	rjmp	.+46     	; 0x8b2 <processCommand+0x4e>
			else if (buf[1] == 'c')	ADC_ReadManualModeAnalogCh(buf[2] - '0');
     884:	83 36       	cpi	r24, 0x63	; 99
     886:	29 f4       	brne	.+10     	; 0x892 <processCommand+0x2e>
     888:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <buf+0x2>
     88c:	80 53       	subi	r24, 0x30	; 48
     88e:	a5 d2       	rcall	.+1354   	; 0xdda <ADC_ReadManualModeAnalogCh>
     890:	10 c0       	rjmp	.+32     	; 0x8b2 <processCommand+0x4e>
			else if (buf[1] == 'o')	ADC_OverSample(buf[2] - '0');   // oversample 2^N   N<7
     892:	8f 36       	cpi	r24, 0x6F	; 111
     894:	29 f4       	brne	.+10     	; 0x8a0 <processCommand+0x3c>
     896:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <buf+0x2>
     89a:	80 53       	subi	r24, 0x30	; 48
     89c:	6d d2       	rcall	.+1242   	; 0xd78 <ADC_OverSample>
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <processCommand+0x4e>
			else if (buf[1] == 'l')	ADC_OscSpeed(ADC2518_LowSpeedOSC);
     8a0:	8c 36       	cpi	r24, 0x6C	; 108
     8a2:	19 f4       	brne	.+6      	; 0x8aa <processCommand+0x46>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	79 d2       	rcall	.+1266   	; 0xd9a <ADC_OscSpeed>
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <processCommand+0x4e>
			else if (buf[1] == 'h')	ADC_OscSpeed(ADC2518_HiSpeedOSC);
     8aa:	88 36       	cpi	r24, 0x68	; 104
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <processCommand+0x4e>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	74 d2       	rcall	.+1256   	; 0xd9a <ADC_OscSpeed>
     8b2:	8c ee       	ldi	r24, 0xEC	; 236
			printf("cmd %s--", buf);
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	9f 93       	push	r25
     8b8:	8f 93       	push	r24
     8ba:	8e e5       	ldi	r24, 0x5E	; 94
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	9f 93       	push	r25
     8c0:	8f 93       	push	r24
     8c2:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	a3 c1       	rjmp	.+838    	; 0xc16 <processCommand+0x3b2>
		}
//		else if (buf[0] == 'F')	{
//			FETstate(buf[1] -'0', buf[2]-'0');
//		}	
		else if (buf[0] == 'p')		readABSPress(); 
     8d0:	c0 37       	cpi	r28, 0x70	; 112
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <processCommand+0x74>
     8d4:	25 d5       	rcall	.+2634   	; 0x1320 <readABSPress>
     8d6:	9f c1       	rjmp	.+830    	; 0xc16 <processCommand+0x3b2>
		else if (buf[0] == 'P')		readDiffPress(); 
     8d8:	c0 35       	cpi	r28, 0x50	; 80
     8da:	11 f4       	brne	.+4      	; 0x8e0 <processCommand+0x7c>
     8dc:	13 d5       	rcall	.+2598   	; 0x1304 <readDiffPress>
     8de:	9b c1       	rjmp	.+822    	; 0xc16 <processCommand+0x3b2>
     8e0:	67 e6       	ldi	r22, 0x67	; 103
		else if (strcmp(buf,"u47")==0)  readU47();
     8e2:	73 e0       	ldi	r23, 0x03	; 3
     8e4:	8c ee       	ldi	r24, 0xEC	; 236
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <strcmp>
     8ec:	89 2b       	or	r24, r25
     8ee:	11 f4       	brne	.+4      	; 0x8f4 <processCommand+0x90>
     8f0:	25 d5       	rcall	.+2634   	; 0x133c <readU47>
     8f2:	91 c1       	rjmp	.+802    	; 0xc16 <processCommand+0x3b2>
     8f4:	cd 34       	cpi	r28, 0x4D	; 77

		else if (buf[0] == 'M')		getMuxConfiguration(); 
     8f6:	19 f4       	brne	.+6      	; 0x8fe <processCommand+0x9a>
     8f8:	0e 94 98 12 	call	0x2530	; 0x2530 <getMuxConfiguration>
     8fc:	8c c1       	rjmp	.+792    	; 0xc16 <processCommand+0x3b2>
     8fe:	c2 33       	cpi	r28, 0x32	; 50
		else if (buf[0] == '2')		setI2Cmux(atoi(buf+1));
     900:	39 f4       	brne	.+14     	; 0x910 <processCommand+0xac>
     902:	8d ee       	ldi	r24, 0xED	; 237
     904:	99 e0       	ldi	r25, 0x09	; 9
     906:	0e 94 80 1c 	call	0x3900	; 0x3900 <atoi>
     90a:	0e 94 af 12 	call	0x255e	; 0x255e <setI2Cmux>
     90e:	83 c1       	rjmp	.+774    	; 0xc16 <processCommand+0x3b2>
		
		else if (buf[0] == 'R')	{
     910:	c2 35       	cpi	r28, 0x52	; 82
     912:	61 f4       	brne	.+24     	; 0x92c <processCommand+0xc8>
			if (buf[1] == 'S') startRH_T_conversion();
     914:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     918:	83 35       	cpi	r24, 0x53	; 83
     91a:	09 f4       	brne	.+2      	; 0x91e <processCommand+0xba>
     91c:	1d d5       	rcall	.+2618   	; 0x1358 <startRH_T_conversion>
			if (buf[1] == 'R') readRH_T();
     91e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     922:	82 35       	cpi	r24, 0x52	; 82
     924:	09 f0       	breq	.+2      	; 0x928 <processCommand+0xc4>
     926:	77 c1       	rjmp	.+750    	; 0xc16 <processCommand+0x3b2>
     928:	2c d5       	rcall	.+2648   	; 0x1382 <readRH_T>
     92a:	75 c1       	rjmp	.+746    	; 0xc16 <processCommand+0x3b2>
     92c:	c2 37       	cpi	r28, 0x72	; 114
		}
		else if (buf[0] == 'r')		{ 
     92e:	19 f4       	brne	.+6      	; 0x936 <processCommand+0xd2>
			RTC_config();
     930:	0e 94 2e 10 	call	0x205c	; 0x205c <RTC_config>
		}
		else if (buf[0] == 'a') {
     934:	70 c1       	rjmp	.+736    	; 0xc16 <processCommand+0x3b2>
     936:	c1 36       	cpi	r28, 0x61	; 97
			if (  buf[1] == 'a' ) showActiveADCs();
     938:	79 f4       	brne	.+30     	; 0x958 <processCommand+0xf4>
     93a:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     93e:	81 36       	cpi	r24, 0x61	; 97
     940:	11 f4       	brne	.+4      	; 0x946 <processCommand+0xe2>
			else if (  buf[1] == 's' ) startADCcycle();			
     942:	ac d2       	rcall	.+1368   	; 0xe9c <showActiveADCs>
     944:	68 c1       	rjmp	.+720    	; 0xc16 <processCommand+0x3b2>
     946:	83 37       	cpi	r24, 0x73	; 115
     948:	11 f4       	brne	.+4      	; 0x94e <processCommand+0xea>
			else if (  buf[1] == 'd' ) doAdc();			
     94a:	ab d3       	rcall	.+1878   	; 0x10a2 <startADCcycle>
     94c:	64 c1       	rjmp	.+712    	; 0xc16 <processCommand+0x3b2>
     94e:	84 36       	cpi	r24, 0x64	; 100
     950:	09 f0       	breq	.+2      	; 0x954 <processCommand+0xf0>
     952:	61 c1       	rjmp	.+706    	; 0xc16 <processCommand+0x3b2>
		}
		else if (buf[0] == 'F') {		
     954:	7b d3       	rcall	.+1782   	; 0x104c <doAdc>
			spi_FlashReadID();
     956:	5f c1       	rjmp	.+702    	; 0xc16 <processCommand+0x3b2>
     958:	c6 34       	cpi	r28, 0x46	; 70
			if (  buf[1] == 'w' ) doFlashWriteTest();
     95a:	e9 f4       	brne	.+58     	; 0x996 <processCommand+0x132>
     95c:	64 d6       	rcall	.+3272   	; 0x1626 <spi_FlashReadID>
     95e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     962:	87 37       	cpi	r24, 0x77	; 119
			else if (  buf[1] == 'r' ) doFlashReadTest();
     964:	11 f4       	brne	.+4      	; 0x96a <processCommand+0x106>
     966:	bb de       	rcall	.-650    	; 0x6de <doFlashWriteTest>
     968:	56 c1       	rjmp	.+684    	; 0xc16 <processCommand+0x3b2>
     96a:	82 37       	cpi	r24, 0x72	; 114
     96c:	11 f4       	brne	.+4      	; 0x972 <processCommand+0x10e>
			else if (  buf[1] == 'e' ) doFlashEraseTest();
     96e:	13 df       	rcall	.-474    	; 0x796 <doFlashReadTest>
     970:	52 c1       	rjmp	.+676    	; 0xc16 <processCommand+0x3b2>
     972:	85 36       	cpi	r24, 0x65	; 101
     974:	11 f4       	brne	.+4      	; 0x97a <processCommand+0x116>
     976:	73 df       	rcall	.-282    	; 0x85e <doFlashEraseTest>
			else if (  buf[1] == 'u' ) spi_FlashUnlockAllBlocks();
     978:	4e c1       	rjmp	.+668    	; 0xc16 <processCommand+0x3b2>
     97a:	85 37       	cpi	r24, 0x75	; 117
     97c:	11 f4       	brne	.+4      	; 0x982 <processCommand+0x11e>
     97e:	55 d7       	rcall	.+3754   	; 0x182a <spi_FlashUnlockAllBlocks>
     980:	4a c1       	rjmp	.+660    	; 0xc16 <processCommand+0x3b2>
			else if (  buf[1] == 's' ) spi_FlashDisplayFeatureRegisters();			
     982:	83 37       	cpi	r24, 0x73	; 115
     984:	11 f4       	brne	.+4      	; 0x98a <processCommand+0x126>
     986:	cc d6       	rcall	.+3480   	; 0x1720 <spi_FlashDisplayFeatureRegisters>
     988:	46 c1       	rjmp	.+652    	; 0xc16 <processCommand+0x3b2>
     98a:	88 37       	cpi	r24, 0x78	; 120
			else if (  buf[1] == 'x' ) spi_FlashReset();			
     98c:	09 f0       	breq	.+2      	; 0x990 <processCommand+0x12c>
     98e:	43 c1       	rjmp	.+646    	; 0xc16 <processCommand+0x3b2>
     990:	0e 94 0b 10 	call	0x2016	; 0x2016 <spi_FlashReset>
     994:	40 c1       	rjmp	.+640    	; 0xc16 <processCommand+0x3b2>
     996:	c6 36       	cpi	r28, 0x66	; 102
/*			if (  buf[1] == 'w' )       getFlashStatusReister();
			else if (  buf[1] == 'e' )  spi_FlashEnableWrite();
			else if (  buf[1] == 'd' ) spi_FlashDisableWrite();
*/			
		}
		else if (buf[0] == 'f') {
     998:	b9 f4       	brne	.+46     	; 0x9c8 <processCommand+0x164>
     99a:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
				if (  buf[1] == 's' ) FRAM_ReadStatusRegister();
     99e:	83 37       	cpi	r24, 0x73	; 115
     9a0:	19 f4       	brne	.+6      	; 0x9a8 <processCommand+0x144>
     9a2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <FRAM_ReadStatusRegister>
     9a6:	37 c1       	rjmp	.+622    	; 0xc16 <processCommand+0x3b2>
     9a8:	89 36       	cpi	r24, 0x69	; 105
				else if (buf[1] == 'i') read_FRAM_DeviceID();
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <processCommand+0x14e>
     9ac:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <read_FRAM_DeviceID>
     9b0:	32 c1       	rjmp	.+612    	; 0xc16 <processCommand+0x3b2>
     9b2:	8a 36       	cpi	r24, 0x6A	; 106
				else if (buf[1] == 'j') wrFRAM();
     9b4:	19 f4       	brne	.+6      	; 0x9bc <processCommand+0x158>
     9b6:	0e 94 05 12 	call	0x240a	; 0x240a <wrFRAM>
     9ba:	2d c1       	rjmp	.+602    	; 0xc16 <processCommand+0x3b2>
     9bc:	85 36       	cpi	r24, 0x65	; 101
				else if (buf[1] == 'e') spi_FRAM_writeEnable();
     9be:	09 f0       	breq	.+2      	; 0x9c2 <processCommand+0x15e>
     9c0:	2a c1       	rjmp	.+596    	; 0xc16 <processCommand+0x3b2>
     9c2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <spi_FRAM_writeEnable>
     9c6:	27 c1       	rjmp	.+590    	; 0xc16 <processCommand+0x3b2>
     9c8:	c3 37       	cpi	r28, 0x73	; 115
		}
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
     9ca:	c1 f4       	brne	.+48     	; 0x9fc <processCommand+0x198>
     9cc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 48 12 	call	0x2490	; 0x2490 <framSaveSerialNumber>
     9d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	98 0f       	add	r25, r24
     9de:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     9e2:	1f 92       	push	r1
     9e4:	8f 93       	push	r24
     9e6:	8b e6       	ldi	r24, 0x6B	; 107
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	9f 93       	push	r25
     9ec:	8f 93       	push	r24
     9ee:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0d c1       	rjmp	.+538    	; 0xc16 <processCommand+0x3b2>
     9fc:	ce 36       	cpi	r28, 0x6E	; 110
		else if (buf[0] == 'n') framReadSerialNumber();
     9fe:	19 f4       	brne	.+6      	; 0xa06 <processCommand+0x1a2>
     a00:	0e 94 54 12 	call	0x24a8	; 0x24a8 <framReadSerialNumber>
     a04:	08 c1       	rjmp	.+528    	; 0xc16 <processCommand+0x3b2>
		else if (buf[0] == 'c') RTC_readCLKF();			
     a06:	c3 36       	cpi	r28, 0x63	; 99
     a08:	19 f4       	brne	.+6      	; 0xa10 <processCommand+0x1ac>
     a0a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <RTC_readCLKF>
		else if (buf[0] == 'e') {
     a0e:	03 c1       	rjmp	.+518    	; 0xc16 <processCommand+0x3b2>
     a10:	c5 36       	cpi	r28, 0x65	; 101
			if (  buf[1] == '0'
     a12:	51 f5       	brne	.+84     	; 0xa68 <processCommand+0x204>
     a14:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			   || buf[1] == '1' 
     a18:	90 ed       	ldi	r25, 0xD0	; 208
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
		else if (buf[0] == 'n') framReadSerialNumber();
		else if (buf[0] == 'c') RTC_readCLKF();			
		else if (buf[0] == 'e') {
			if (  buf[1] == '0'
     a1a:	98 0f       	add	r25, r24
     a1c:	92 30       	cpi	r25, 0x02	; 2
			   || buf[1] == '1' 
			   || buf[1] == '4' )  {enableBuck014(); printf("bucks 0,1,4 (c,i,s1) enabled\n");}
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <processCommand+0x1c0>
     a20:	84 33       	cpi	r24, 0x34	; 52
     a22:	29 f4       	brne	.+10     	; 0xa2e <processCommand+0x1ca>
     a24:	80 d5       	rcall	.+2816   	; 0x1526 <enableBuck014>
     a26:	82 e7       	ldi	r24, 0x72	; 114
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
			if (buf[1] == '2')  {enableBuck2(); printf("buck2 (Mod) enabled\n");}
     a2e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a32:	82 33       	cpi	r24, 0x32	; 50
     a34:	29 f4       	brne	.+10     	; 0xa40 <processCommand+0x1dc>
     a36:	83 d5       	rcall	.+2822   	; 0x153e <enableBuck2>
     a38:	8f e8       	ldi	r24, 0x8F	; 143
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
			if (buf[1] == '3')	{enableBuck3();  printf("buck4 (OptHtr) enabled\n");}
     a40:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a44:	83 33       	cpi	r24, 0x33	; 51
     a46:	29 f4       	brne	.+10     	; 0xa52 <processCommand+0x1ee>
     a48:	82 d5       	rcall	.+2820   	; 0x154e <enableBuck3>
     a4a:	83 ea       	ldi	r24, 0xA3	; 163
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
			if (buf[1] == '5')	{enableBuck5(); printf("buck5 (spare2) enabled\n");}
     a52:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a56:	85 33       	cpi	r24, 0x35	; 53
     a58:	09 f0       	breq	.+2      	; 0xa5c <processCommand+0x1f8>
     a5a:	dd c0       	rjmp	.+442    	; 0xc16 <processCommand+0x3b2>
     a5c:	80 d5       	rcall	.+2816   	; 0x155e <enableBuck5>
     a5e:	8a eb       	ldi	r24, 0xBA	; 186
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
		}
		else if (buf[0] == 'd') {
     a66:	d7 c0       	rjmp	.+430    	; 0xc16 <processCommand+0x3b2>
			if (buf[1] == '0')  {disableBuck014();printf("bucks 0,1,4 (c,i,s1) disabled\n");}
     a68:	c4 36       	cpi	r28, 0x64	; 100
     a6a:	31 f5       	brne	.+76     	; 0xab8 <processCommand+0x254>
     a6c:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a70:	80 33       	cpi	r24, 0x30	; 48
     a72:	29 f4       	brne	.+10     	; 0xa7e <processCommand+0x21a>
     a74:	5e d5       	rcall	.+2748   	; 0x1532 <disableBuck014>
     a76:	81 ed       	ldi	r24, 0xD1	; 209
     a78:	93 e0       	ldi	r25, 0x03	; 3
			if (buf[1] == '2')  {disableBuck2();printf("buck2 (Mod) disabled\n");}
     a7a:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
     a7e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a82:	82 33       	cpi	r24, 0x32	; 50
     a84:	29 f4       	brne	.+10     	; 0xa90 <processCommand+0x22c>
     a86:	5f d5       	rcall	.+2750   	; 0x1546 <disableBuck2>
     a88:	8f ee       	ldi	r24, 0xEF	; 239
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
			if (buf[1] == '3')	{disableBuck3();printf("buck3 (OptHtr) disabled\n");}
     a90:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a94:	83 33       	cpi	r24, 0x33	; 51
     a96:	29 f4       	brne	.+10     	; 0xaa2 <processCommand+0x23e>
     a98:	5e d5       	rcall	.+2748   	; 0x1556 <disableBuck3>
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	94 e0       	ldi	r25, 0x04	; 4
     a9e:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
			if (buf[1] == '5')	{disableBuck5();printf("buck5 (Spare2) disabled\n");}
     aa2:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     aa6:	85 33       	cpi	r24, 0x35	; 53
     aa8:	09 f0       	breq	.+2      	; 0xaac <processCommand+0x248>
     aaa:	b5 c0       	rjmp	.+362    	; 0xc16 <processCommand+0x3b2>
     aac:	5e d5       	rcall	.+2748   	; 0x156a <disableBuck5>
     aae:	8c e1       	ldi	r24, 0x1C	; 28
     ab0:	94 e0       	ldi	r25, 0x04	; 4
     ab2:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
     ab6:	af c0       	rjmp	.+350    	; 0xc16 <processCommand+0x3b2>
     ab8:	cf 36       	cpi	r28, 0x6F	; 111
		}

		else if (buf[0] == 'o') {
     aba:	f1 f4       	brne	.+60     	; 0xaf8 <processCommand+0x294>
     abc:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint16_t v = (buf[1]-'0') *511;
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	c0 97       	sbiw	r24, 0x30	; 48
     ac4:	2f ef       	ldi	r18, 0xFF	; 255
     ac6:	31 e0       	ldi	r19, 0x01	; 1
     ac8:	82 9f       	mul	r24, r18
     aca:	e0 01       	movw	r28, r0
     acc:	83 9f       	mul	r24, r19
     ace:	d0 0d       	add	r29, r0
     ad0:	92 9f       	mul	r25, r18
     ad2:	d0 0d       	add	r29, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	8c 2f       	mov	r24, r28
			if (v>=0 || v< 4096) spi_OpticsDAC_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
     ad8:	9d 2f       	mov	r25, r29
     ada:	0e 94 48 11 	call	0x2290	; 0x2290 <spi_OpticsDAC_BroadCast>
     ade:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
     ae0:	cf 93       	push	r28
     ae2:	84 e3       	ldi	r24, 0x34	; 52
     ae4:	94 e0       	ldi	r25, 0x04	; 4
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	8f c0       	rjmp	.+286    	; 0xc16 <processCommand+0x3b2>
     af8:	cf 34       	cpi	r28, 0x4F	; 79
		}
		else if (buf[0] == 'O') {
     afa:	e1 f4       	brne	.+56     	; 0xb34 <processCommand+0x2d0>
     afc:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint8_t ch = (buf[1]-'0');
     b00:	80 53       	subi	r24, 0x30	; 48
     b02:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
     b04:	08 f0       	brcs	.+2      	; 0xb08 <processCommand+0x2a4>
     b06:	87 c0       	rjmp	.+270    	; 0xc16 <processCommand+0x3b2>
     b08:	c0 91 ee 09 	lds	r28, 0x09EE	; 0x8009ee <buf+0x2>
				uint16_t v = buf[2]-'0' * 511;
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
     b0e:	c0 5d       	subi	r28, 0xD0	; 208
     b10:	df 45       	sbci	r29, 0x5F	; 95
     b12:	6c 2f       	mov	r22, r28
				if (v>=0 || v< 4096) spi_OpticsDAC(ch,v);   
     b14:	7d 2f       	mov	r23, r29
     b16:	0e 94 11 11 	call	0x2222	; 0x2222 <spi_OpticsDAC>
     b1a:	df 93       	push	r29
				else printf("incorrect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= 0x%X\n", v);
     b1c:	cf 93       	push	r28
     b1e:	8b e3       	ldi	r24, 0x3B	; 59
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	71 c0       	rjmp	.+226    	; 0xc16 <processCommand+0x3b2>
     b34:	c2 36       	cpi	r28, 0x62	; 98

			}
		}
		else if (buf[0] == 'b') {
     b36:	09 f5       	brne	.+66     	; 0xb7a <processCommand+0x316>
     b38:	84 e4       	ldi	r24, 0x44	; 68
			printf("WTF\n");
     b3a:	94 e0       	ldi	r25, 0x04	; 4
     b3c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
     b40:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint16_t v = ((uint16_t)(buf[1]-'0')) * 511;
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	c0 97       	sbiw	r24, 0x30	; 48
     b48:	2f ef       	ldi	r18, 0xFF	; 255
     b4a:	31 e0       	ldi	r19, 0x01	; 1
     b4c:	82 9f       	mul	r24, r18
     b4e:	e0 01       	movw	r28, r0
     b50:	83 9f       	mul	r24, r19
     b52:	d0 0d       	add	r29, r0
     b54:	92 9f       	mul	r25, r18
     b56:	d0 0d       	add	r29, r0
     b58:	11 24       	eor	r1, r1
     b5a:	ce 01       	movw	r24, r28
			if (v>=0 || v< 4096) spi_OpticsBuckCtl_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
     b5c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <spi_OpticsBuckCtl_BroadCast>
     b60:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
     b62:	cf 93       	push	r28
     b64:	84 e3       	ldi	r24, 0x34	; 52
     b66:	94 e0       	ldi	r25, 0x04	; 4
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	4e c0       	rjmp	.+156    	; 0xc16 <processCommand+0x3b2>
     b7a:	c2 34       	cpi	r28, 0x42	; 66
		}
		else if (buf[0] == 'B') {
     b7c:	21 f5       	brne	.+72     	; 0xbc6 <processCommand+0x362>
     b7e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint8_t ch = buf[1]-'0';
     b82:	80 53       	subi	r24, 0x30	; 48
     b84:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
     b86:	08 f0       	brcs	.+2      	; 0xb8a <processCommand+0x326>
     b88:	46 c0       	rjmp	.+140    	; 0xc16 <processCommand+0x3b2>
     b8a:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <buf+0x2>
				uint16_t v = ((uint16_t)(buf[2]-'0')) * 511;  
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	20 53       	subi	r18, 0x30	; 48
     b92:	31 09       	sbc	r19, r1
     b94:	4f ef       	ldi	r20, 0xFF	; 255
     b96:	51 e0       	ldi	r21, 0x01	; 1
     b98:	24 9f       	mul	r18, r20
     b9a:	e0 01       	movw	r28, r0
     b9c:	25 9f       	mul	r18, r21
     b9e:	d0 0d       	add	r29, r0
     ba0:	34 9f       	mul	r19, r20
     ba2:	d0 0d       	add	r29, r0
     ba4:	11 24       	eor	r1, r1
				if (v>=0 || v< 4096) spi_buckCtrlDac(ch,v);
     ba6:	be 01       	movw	r22, r28
     ba8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <spi_buckCtrlDac>
				else printf("incorect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= %d\n", v);
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	84 e3       	ldi	r24, 0x34	; 52
     bb2:	94 e0       	ldi	r25, 0x04	; 4
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
			}
		}
		else if (buf[0]=='w') {
     bc2:	0f 90       	pop	r0
     bc4:	28 c0       	rjmp	.+80     	; 0xc16 <processCommand+0x3b2>
			if (buf[1] == '1')  powerUpWickSensor();
     bc6:	c7 37       	cpi	r28, 0x77	; 119
     bc8:	59 f4       	brne	.+22     	; 0xbe0 <processCommand+0x37c>
     bca:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     bce:	81 33       	cpi	r24, 0x31	; 49
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <processCommand+0x370>
			if (buf[1] == '0') 	powerDownWickSensor();
     bd2:	d1 d4       	rcall	.+2466   	; 0x1576 <powerUpWickSensor>
     bd4:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     bd8:	80 33       	cpi	r24, 0x30	; 48
     bda:	e9 f4       	brne	.+58     	; 0xc16 <processCommand+0x3b2>
     bdc:	d0 d4       	rcall	.+2464   	; 0x157e <powerDownWickSensor>
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <processCommand+0x3b2>
		}
		
		else if (buf[0]=='m') {
     be0:	cd 36       	cpi	r28, 0x6D	; 109
     be2:	59 f4       	brne	.+22     	; 0xbfa <processCommand+0x396>
				if (buf[1] == '1')  selectSDcard();
     be4:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     be8:	81 33       	cpi	r24, 0x31	; 49
     bea:	09 f4       	brne	.+2      	; 0xbee <processCommand+0x38a>
     bec:	10 d5       	rcall	.+2592   	; 0x160e <selectSDcard>
     bee:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
				if (buf[1] == '0') 	deSelectSDcard();	
     bf2:	80 33       	cpi	r24, 0x30	; 48
     bf4:	81 f4       	brne	.+32     	; 0xc16 <processCommand+0x3b2>
     bf6:	11 d5       	rcall	.+2594   	; 0x161a <deSelectSDcard>
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <processCommand+0x3b2>
     bfa:	8c ee       	ldi	r24, 0xEC	; 236
     bfc:	99 e0       	ldi	r25, 0x09	; 9
		}
		else printf("\nno cmd:%s \n", buf);
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	88 e4       	ldi	r24, 0x48	; 72
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
		
				
}
     c1a:	08 95       	ret

00000c1c <__vector_8>:
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	0f 90       	pop	r0
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	0f 90       	pop	r0
     c2c:	1f 90       	pop	r1
     c2e:	18 95       	reti

00000c30 <__vector_13>:
     c30:	1f 92       	push	r1
     c32:	0f 92       	push	r0
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	0f 92       	push	r0
     c38:	11 24       	eor	r1, r1
     c3a:	2f 93       	push	r18
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	8f b7       	in	r24, 0x3f	; 63
     c42:	8f 77       	andi	r24, 0x7F	; 127
     c44:	8f bf       	out	0x3f, r24	; 63
     c46:	88 b1       	in	r24, 0x08	; 8
     c48:	80 58       	subi	r24, 0x80	; 128
     c4a:	88 b9       	out	0x08, r24	; 8
     c4c:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c50:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <counter1024Hz+0x1>
     c5a:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <counter1024Hz>
     c5e:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c62:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c66:	81 15       	cp	r24, r1
     c68:	92 40       	sbci	r25, 0x02	; 2
     c6a:	19 f4       	brne	.+6      	; 0xc72 <__vector_13+0x42>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <halfSecFlag>
     c72:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c76:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c7a:	81 15       	cp	r24, r1
     c7c:	94 40       	sbci	r25, 0x04	; 4
     c7e:	a8 f0       	brcs	.+42     	; 0xcaa <__vector_13+0x7a>
     c80:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c84:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c88:	94 50       	subi	r25, 0x04	; 4
     c8a:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <counter1024Hz+0x1>
     c8e:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <counter1024Hz>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <oneSecFlag>
     c98:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
     c9c:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <__data_end+0x1>
     ca6:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <__data_end>
     caa:	78 94       	sei
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <init_timer2>:
     cbc:	85 e5       	ldi	r24, 0x55	; 85
     cbe:	94 e0       	ldi	r25, 0x04	; 4
     cc0:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
     cc4:	80 e8       	ldi	r24, 0x80	; 128
     cc6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
     cd6:	80 ee       	ldi	r24, 0xE0	; 224
     cd8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
     cdc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
     ce0:	e0 e7       	ldi	r30, 0x70	; 112
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	80 83       	st	Z, r24
     cea:	08 95       	ret

00000cec <init_CountersIimers>:
     cec:	e7 df       	rcall	.-50     	; 0xcbc <init_timer2>
     cee:	80 ec       	ldi	r24, 0xC0	; 192
     cf0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     cf4:	80 e8       	ldi	r24, 0x80	; 128
     cf6:	8d bb       	out	0x1d, r24	; 29
     cf8:	89 e6       	ldi	r24, 0x69	; 105
     cfa:	94 e0       	ldi	r25, 0x04	; 4
     cfc:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <puts>
     d00:	08 95       	ret

00000d02 <ADC_rdSystemStatus>:
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	cd d3       	rcall	.+1946   	; 0x14a2 <ADC_RegisterRead>
     d08:	1f 92       	push	r1
     d0a:	8f 93       	push	r24
     d0c:	85 e8       	ldi	r24, 0x85	; 133
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	08 95       	ret

00000d22 <ADC_wrGPO>:
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	d8 2f       	mov	r29, r24
     d28:	c6 2f       	mov	r28, r22
     d2a:	88 30       	cpi	r24, 0x08	; 8
     d2c:	10 f4       	brcc	.+4      	; 0xd32 <ADC_wrGPO+0x10>
     d2e:	62 30       	cpi	r22, 0x02	; 2
     d30:	40 f0       	brcs	.+16     	; 0xd42 <ADC_wrGPO+0x20>
     d32:	87 e9       	ldi	r24, 0x97	; 151
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cc 23       	and	r28, r28
     d44:	31 f0       	breq	.+12     	; 0xd52 <ADC_wrGPO+0x30>
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <ADC_wrGPO+0x2a>
     d4a:	66 0f       	add	r22, r22
     d4c:	da 95       	dec	r29
     d4e:	ea f7       	brpl	.-6      	; 0xd4a <ADC_wrGPO+0x28>
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <ADC_wrGPO+0x32>
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	8b e0       	ldi	r24, 0x0B	; 11
     d56:	96 d3       	rcall	.+1836   	; 0x1484 <ADC_RegisterWrite>
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <initADC2518>:
     d5e:	60 e4       	ldi	r22, 0x40	; 64
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	90 d3       	rcall	.+1824   	; 0x1484 <ADC_RegisterWrite>
     d64:	60 e4       	ldi	r22, 0x40	; 64
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	8d d3       	rcall	.+1818   	; 0x1484 <ADC_RegisterWrite>
     d6a:	60 e4       	ldi	r22, 0x40	; 64
     d6c:	89 e0       	ldi	r24, 0x09	; 9
     d6e:	8a d3       	rcall	.+1812   	; 0x1484 <ADC_RegisterWrite>
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	86 e0       	ldi	r24, 0x06	; 6
     d74:	d6 cf       	rjmp	.-84     	; 0xd22 <ADC_wrGPO>
     d76:	08 95       	ret

00000d78 <ADC_OverSample>:
     d78:	cf 93       	push	r28
     d7a:	c8 2f       	mov	r28, r24
     d7c:	88 30       	cpi	r24, 0x08	; 8
     d7e:	40 f0       	brcs	.+16     	; 0xd90 <ADC_OverSample+0x18>
     d80:	8d e2       	ldi	r24, 0x2D	; 45
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	9f 93       	push	r25
     d86:	8f 93       	push	r24
     d88:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	6c 2f       	mov	r22, r28
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	77 d3       	rcall	.+1774   	; 0x1484 <ADC_RegisterWrite>
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <ADC_OscSpeed>:
     d9a:	cf 93       	push	r28
     d9c:	c8 2f       	mov	r28, r24
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	84 e0       	ldi	r24, 0x04	; 4
     da2:	7f d3       	rcall	.+1790   	; 0x14a2 <ADC_RegisterRead>
     da4:	c1 11       	cpse	r28, r1
     da6:	03 c0       	rjmp	.+6      	; 0xdae <ADC_OscSpeed+0x14>
     da8:	68 2f       	mov	r22, r24
     daa:	6f 7e       	andi	r22, 0xEF	; 239
     dac:	0e c0       	rjmp	.+28     	; 0xdca <ADC_OscSpeed+0x30>
     dae:	c1 30       	cpi	r28, 0x01	; 1
     db0:	19 f4       	brne	.+6      	; 0xdb8 <ADC_OscSpeed+0x1e>
     db2:	68 2f       	mov	r22, r24
     db4:	60 61       	ori	r22, 0x10	; 16
     db6:	09 c0       	rjmp	.+18     	; 0xdca <ADC_OscSpeed+0x30>
     db8:	8d e0       	ldi	r24, 0x0D	; 13
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <ADC_OscSpeed+0x34>
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	5b d3       	rcall	.+1718   	; 0x1484 <ADC_RegisterWrite>
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <ADC_manualMode>:
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	80 e1       	ldi	r24, 0x10	; 16
     dd6:	56 c3       	rjmp	.+1708   	; 0x1484 <ADC_RegisterWrite>
     dd8:	08 95       	ret

00000dda <ADC_ReadManualModeAnalogCh>:
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	18 2f       	mov	r17, r24
     de2:	68 2f       	mov	r22, r24
     de4:	81 e1       	ldi	r24, 0x11	; 17
     de6:	75 d3       	rcall	.+1770   	; 0x14d2 <ADC_RegisterReadWrite>
     de8:	d8 2f       	mov	r29, r24
     dea:	c9 2f       	mov	r28, r25
     dec:	28 2f       	mov	r18, r24
     dee:	39 2f       	mov	r19, r25
     df0:	a0 e5       	ldi	r26, 0x50	; 80
     df2:	b3 ec       	ldi	r27, 0xC3	; 195
     df4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__umulhisi3>
     df8:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__floatsisf>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	59 e3       	ldi	r21, 0x39	; 57
     e04:	0e 94 19 18 	call	0x3032	; 0x3032 <__mulsf3>
     e08:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__fixunssfsi>
     e0c:	7f 93       	push	r23
     e0e:	6f 93       	push	r22
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	1f 92       	push	r1
     e16:	1f 93       	push	r17
     e18:	8e ea       	ldi	r24, 0xAE	; 174
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	9f 93       	push	r25
     e1e:	8f 93       	push	r24
     e20:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     e24:	8d b7       	in	r24, 0x3d	; 61
     e26:	9e b7       	in	r25, 0x3e	; 62
     e28:	08 96       	adiw	r24, 0x08	; 8
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	9e bf       	out	0x3e, r25	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	8d bf       	out	0x3d, r24	; 61
     e34:	8d 2f       	mov	r24, r29
     e36:	9c 2f       	mov	r25, r28
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	08 95       	ret

00000e40 <nextADC>:
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	c8 2f       	mov	r28, r24
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	13 c0       	rjmp	.+38     	; 0xe70 <nextADC+0x30>
     e4a:	cf 5f       	subi	r28, 0xFF	; 255
     e4c:	cf 70       	andi	r28, 0x0F	; 15
     e4e:	20 91 5a 09 	lds	r18, 0x095A	; 0x80095a <hdwConfig>
     e52:	30 91 5b 09 	lds	r19, 0x095B	; 0x80095b <hdwConfig+0x1>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0c 2e       	mov	r0, r28
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <nextADC+0x22>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <nextADC+0x1e>
     e66:	82 23       	and	r24, r18
     e68:	93 23       	and	r25, r19
     e6a:	2d 2f       	mov	r18, r29
     e6c:	89 2b       	or	r24, r25
     e6e:	21 f4       	brne	.+8      	; 0xe78 <nextADC+0x38>
     e70:	d1 e0       	ldi	r29, 0x01	; 1
     e72:	d2 0f       	add	r29, r18
     e74:	21 31       	cpi	r18, 0x11	; 17
     e76:	48 f3       	brcs	.-46     	; 0xe4a <nextADC+0xa>
     e78:	d1 31       	cpi	r29, 0x11	; 17
     e7a:	41 f4       	brne	.+16     	; 0xe8c <nextADC+0x4c>
     e7c:	88 e4       	ldi	r24, 0x48	; 72
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	d1 31       	cpi	r29, 0x11	; 17
     e8e:	11 f0       	breq	.+4      	; 0xe94 <nextADC+0x54>
     e90:	8c 2f       	mov	r24, r28
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <nextADC+0x56>
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <showActiveADCs>:
     e9c:	cf 93       	push	r28
     e9e:	c0 e0       	ldi	r28, 0x00	; 0
     ea0:	1d c0       	rjmp	.+58     	; 0xedc <showActiveADCs+0x40>
     ea2:	20 91 5a 09 	lds	r18, 0x095A	; 0x80095a <hdwConfig>
     ea6:	30 91 5b 09 	lds	r19, 0x095B	; 0x80095b <hdwConfig+0x1>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0c 2e       	mov	r0, r28
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <showActiveADCs+0x1a>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <showActiveADCs+0x16>
     eba:	82 23       	and	r24, r18
     ebc:	93 23       	and	r25, r19
     ebe:	89 2b       	or	r24, r25
     ec0:	61 f0       	breq	.+24     	; 0xeda <showActiveADCs+0x3e>
     ec2:	1f 92       	push	r1
     ec4:	cf 93       	push	r28
     ec6:	84 e4       	ldi	r24, 0x44	; 68
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 5f       	subi	r28, 0xFF	; 255
     edc:	c0 31       	cpi	r28, 0x10	; 16
     ede:	08 f3       	brcs	.-62     	; 0xea2 <showActiveADCs+0x6>
     ee0:	82 e4       	ldi	r24, 0x42	; 66
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
     eec:	ea e5       	ldi	r30, 0x5A	; 90
     eee:	f9 e0       	ldi	r31, 0x09	; 9
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	8f 93       	push	r24
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 93       	push	r24
     ef8:	8f ec       	ldi	r24, 0xCF	; 207
     efa:	94 e0       	ldi	r25, 0x04	; 4
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <incADC_MUX>:
     f14:	95 df       	rcall	.-214    	; 0xe40 <nextADC>
     f16:	ec e7       	ldi	r30, 0x7C	; 124
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	90 81       	ld	r25, Z
     f1c:	90 7e       	andi	r25, 0xE0	; 224
     f1e:	90 83       	st	Z, r25
     f20:	90 81       	ld	r25, Z
     f22:	28 2f       	mov	r18, r24
     f24:	27 70       	andi	r18, 0x07	; 7
     f26:	92 2b       	or	r25, r18
     f28:	90 83       	st	Z, r25
     f2a:	83 ff       	sbrs	r24, 3
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <incADC_MUX+0x26>
     f2e:	eb e7       	ldi	r30, 0x7B	; 123
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	90 81       	ld	r25, Z
     f34:	98 60       	ori	r25, 0x08	; 8
     f36:	90 83       	st	Z, r25
     f38:	08 95       	ret
     f3a:	eb e7       	ldi	r30, 0x7B	; 123
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	90 81       	ld	r25, Z
     f40:	97 7f       	andi	r25, 0xF7	; 247
     f42:	90 83       	st	Z, r25
     f44:	08 95       	ret

00000f46 <__vector_29>:
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	0b b6       	in	r0, 0x3b	; 59
     f52:	0f 92       	push	r0
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     f70:	40 91 e2 08 	lds	r20, 0x08E2	; 0x8008e2 <currentADCchannel>
     f74:	64 2f       	mov	r22, r20
     f76:	04 2e       	mov	r0, r20
     f78:	00 0c       	add	r0, r0
     f7a:	77 0b       	sbc	r23, r23
     f7c:	fb 01       	movw	r30, r22
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	eb 51       	subi	r30, 0x1B	; 27
     f84:	f7 4f       	sbci	r31, 0xF7	; 247
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	dc 01       	movw	r26, r24
     f8c:	a2 0f       	add	r26, r18
     f8e:	b1 1d       	adc	r27, r1
     f90:	9d 01       	movw	r18, r26
     f92:	b1 83       	std	Z+1, r27	; 0x01
     f94:	a0 83       	st	Z, r26
     f96:	a9 e7       	ldi	r26, 0x79	; 121
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	9c 91       	ld	r25, X
     f9c:	89 2f       	mov	r24, r25
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	98 2f       	mov	r25, r24
     fa2:	88 27       	eor	r24, r24
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	3c 91       	ld	r19, X
     fae:	2c 91       	ld	r18, X
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	1f 92       	push	r1
     fb6:	3f 93       	push	r19
     fb8:	1f 92       	push	r1
     fba:	2f 93       	push	r18
     fbc:	7f 93       	push	r23
     fbe:	4f 93       	push	r20
     fc0:	84 ee       	ldi	r24, 0xE4	; 228
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	9f 93       	push	r25
     fc6:	8f 93       	push	r24
     fc8:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
     fcc:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <currentADCchannel>
     fd0:	a1 df       	rcall	.-190    	; 0xf14 <incADC_MUX>
     fd2:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <currentADCchannel>
     fd6:	90 91 e3 08 	lds	r25, 0x08E3	; 0x8008e3 <firstADCchannel>
     fda:	2d b7       	in	r18, 0x3d	; 61
     fdc:	3e b7       	in	r19, 0x3e	; 62
     fde:	26 5f       	subi	r18, 0xF6	; 246
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	3e bf       	out	0x3e, r19	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	2d bf       	out	0x3d, r18	; 61
     fec:	89 13       	cpse	r24, r25
     fee:	12 c0       	rjmp	.+36     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ff0:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <numReadings.2095>
     ff4:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <numReadings.2095+0x1>
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <numReadings.2095+0x1>
     ffe:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <numReadings.2095>
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	39 f4       	brne	.+14     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <adcCompleteFlag>
    100c:	10 92 e1 08 	sts	0x08E1, r1	; 0x8008e1 <numReadings.2095+0x1>
    1010:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <numReadings.2095>
    1014:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <adcCompleteFlag>
    1018:	81 11       	cpse	r24, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    101c:	ea e7       	ldi	r30, 0x7A	; 122
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 64       	ori	r24, 0x40	; 64
    1024:	80 83       	st	Z, r24
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0b be       	out	0x3b, r0	; 59
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <doAdc>:
    104c:	cf 93       	push	r28
    104e:	c0 91 e3 08 	lds	r28, 0x08E3	; 0x8008e3 <firstADCchannel>
    1052:	8a e0       	ldi	r24, 0x0A	; 10
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <putchar>
    105a:	8c 2f       	mov	r24, r28
    105c:	0c 2e       	mov	r0, r28
    105e:	00 0c       	add	r0, r0
    1060:	99 0b       	sbc	r25, r25
    1062:	fc 01       	movw	r30, r24
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	eb 51       	subi	r30, 0x1B	; 27
    106a:	f7 4f       	sbci	r31, 0xF7	; 247
    106c:	81 81       	ldd	r24, Z+1	; 0x01
    106e:	8f 93       	push	r24
    1070:	80 81       	ld	r24, Z
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	cf 93       	push	r28
    1078:	88 ef       	ldi	r24, 0xF8	; 248
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	9f 93       	push	r25
    107e:	8f 93       	push	r24
    1080:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1084:	8c 2f       	mov	r24, r28
    1086:	dc de       	rcall	.-584    	; 0xe40 <nextADC>
    1088:	c8 2f       	mov	r28, r24
    108a:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <firstADCchannel>
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	c8 13       	cpse	r28, r24
    109c:	da cf       	rjmp	.-76     	; 0x1052 <doAdc+0x6>
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <startADCcycle>:
    10a2:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <adcCompleteFlag>
    10a6:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <firstADCchannel>
    10aa:	e8 2f       	mov	r30, r24
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 0b       	sbc	r31, r31
    10b0:	eb 51       	subi	r30, 0x1B	; 27
    10b2:	f7 4f       	sbci	r31, 0xF7	; 247
    10b4:	11 82       	std	Z+1, r1	; 0x01
    10b6:	10 82       	st	Z, r1
    10b8:	c3 de       	rcall	.-634    	; 0xe40 <nextADC>
    10ba:	90 91 e3 08 	lds	r25, 0x08E3	; 0x8008e3 <firstADCchannel>
    10be:	89 13       	cpse	r24, r25
    10c0:	f4 cf       	rjmp	.-24     	; 0x10aa <startADCcycle+0x8>
    10c2:	ea e7       	ldi	r30, 0x7A	; 122
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 64       	ori	r24, 0x40	; 64
    10ca:	80 83       	st	Z, r24
    10cc:	08 95       	ret

000010ce <init_adc>:
    10ce:	8f e0       	ldi	r24, 0x0F	; 15
    10d0:	21 df       	rcall	.-446    	; 0xf14 <incADC_MUX>
    10d2:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <currentADCchannel>
    10d6:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <firstADCchannel>
    10da:	8f 3f       	cpi	r24, 0xFF	; 255
    10dc:	71 f0       	breq	.+28     	; 0x10fa <init_adc+0x2c>
    10de:	ea e7       	ldi	r30, 0x7A	; 122
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 83       	st	Z, r24
    10e8:	8f e8       	ldi	r24, 0x8F	; 143
    10ea:	80 83       	st	Z, r24
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
    10f2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
    10f6:	d5 cf       	rjmp	.-86     	; 0x10a2 <startADCcycle>
    10f8:	08 95       	ret
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	95 e0       	ldi	r25, 0x05	; 5
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	08 95       	ret

0000110c <readDiff_CH>:
    110c:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <npaFlow+0x5>
    1110:	1f 92       	push	r1
    1112:	8f 93       	push	r24
    1114:	8a e1       	ldi	r24, 0x1A	; 26
    1116:	95 e0       	ldi	r25, 0x05	; 5
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	08 95       	ret

0000112a <readNPA700>:
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	2a 97       	sbiw	r28, 0x0a	; 10
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	1a 82       	std	Y+2, r1	; 0x02
    114c:	1b 82       	std	Y+3, r1	; 0x03
    114e:	1c 82       	std	Y+4, r1	; 0x04
    1150:	f9 2e       	mov	r15, r25
    1152:	c9 2e       	mov	r12, r25
    1154:	d1 2c       	mov	r13, r1
    1156:	1f 92       	push	r1
    1158:	9f 93       	push	r25
    115a:	01 e3       	ldi	r16, 0x31	; 49
    115c:	15 e0       	ldi	r17, 0x05	; 5
    115e:	1f 93       	push	r17
    1160:	0f 93       	push	r16
    1162:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1166:	8f 2d       	mov	r24, r15
    1168:	0e 94 af 12 	call	0x255e	; 0x255e <setI2Cmux>
    116c:	1f 92       	push	r1
    116e:	ff 92       	push	r15
    1170:	1f 93       	push	r17
    1172:	0f 93       	push	r16
    1174:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	be 01       	movw	r22, r28
    117e:	6f 5f       	subi	r22, 0xFF	; 255
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	88 e2       	ldi	r24, 0x28	; 40
    1184:	0e 94 24 14 	call	0x2848	; 0x2848 <twi_read_bytes>
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	98 2f       	mov	r25, r24
    118c:	92 95       	swap	r25
    118e:	96 95       	lsr	r25
    1190:	96 95       	lsr	r25
    1192:	93 70       	andi	r25, 0x03	; 3
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	c9 f1       	breq	.+114    	; 0x1212 <readNPA700+0xe8>
    11a0:	91 30       	cpi	r25, 0x01	; 1
    11a2:	89 f4       	brne	.+34     	; 0x11c6 <readNPA700+0x9c>
    11a4:	31 e0       	ldi	r19, 0x01	; 1
    11a6:	c3 1a       	sub	r12, r19
    11a8:	d1 08       	sbc	r13, r1
    11aa:	df 92       	push	r13
    11ac:	cf 92       	push	r12
    11ae:	86 ea       	ldi	r24, 0xA6	; 166
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	4e c0       	rjmp	.+156    	; 0x1262 <readNPA700+0x138>
    11c6:	92 30       	cpi	r25, 0x02	; 2
    11c8:	89 f4       	brne	.+34     	; 0x11ec <readNPA700+0xc2>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	c8 1a       	sub	r12, r24
    11ce:	d1 08       	sbc	r13, r1
    11d0:	df 92       	push	r13
    11d2:	cf 92       	push	r12
    11d4:	8a e8       	ldi	r24, 0x8A	; 138
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	9f 93       	push	r25
    11da:	8f 93       	push	r24
    11dc:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	3b c0       	rjmp	.+118    	; 0x1262 <readNPA700+0x138>
    11ec:	93 30       	cpi	r25, 0x03	; 3
    11ee:	c1 f5       	brne	.+112    	; 0x1260 <readNPA700+0x136>
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	c2 1a       	sub	r12, r18
    11f4:	d1 08       	sbc	r13, r1
    11f6:	df 92       	push	r13
    11f8:	cf 92       	push	r12
    11fa:	87 e6       	ldi	r24, 0x67	; 103
    11fc:	92 e0       	ldi	r25, 0x02	; 2
    11fe:	9f 93       	push	r25
    1200:	8f 93       	push	r24
    1202:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	28 c0       	rjmp	.+80     	; 0x1262 <readNPA700+0x138>
    1212:	8f 73       	andi	r24, 0x3F	; 63
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	98 2f       	mov	r25, r24
    1218:	88 27       	eor	r24, r24
    121a:	2a 81       	ldd	r18, Y+2	; 0x02
    121c:	82 0f       	add	r24, r18
    121e:	91 1d       	adc	r25, r1
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	4c 81       	ldd	r20, Y+4	; 0x04
    1232:	42 95       	swap	r20
    1234:	46 95       	lsr	r20
    1236:	47 70       	andi	r20, 0x07	; 7
    1238:	24 0f       	add	r18, r20
    123a:	31 1d       	adc	r19, r1
    123c:	3f 93       	push	r19
    123e:	2f 93       	push	r18
    1240:	9f 93       	push	r25
    1242:	8f 93       	push	r24
    1244:	83 e4       	ldi	r24, 0x43	; 67
    1246:	95 e0       	ldi	r25, 0x05	; 5
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <readNPA700+0x138>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	2a 96       	adiw	r28, 0x0a	; 10
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	08 95       	ret

0000127e <initPressureSensors>:
    127e:	cf 93       	push	r28
    1280:	e1 e1       	ldi	r30, 0x11	; 17
    1282:	f9 e0       	ldi	r31, 0x09	; 9
    1284:	c1 e0       	ldi	r28, 0x01	; 1
    1286:	c4 83       	std	Z+4, r28	; 0x04
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	85 83       	std	Z+5, r24	; 0x05
    128c:	3f df       	rcall	.-386    	; 0x110c <readDiff_CH>
    128e:	eb e0       	ldi	r30, 0x0B	; 11
    1290:	f9 e0       	ldi	r31, 0x09	; 9
    1292:	c5 83       	std	Z+5, r28	; 0x05
    1294:	14 82       	std	Z+4, r1	; 0x04
    1296:	e5 e0       	ldi	r30, 0x05	; 5
    1298:	f9 e0       	ldi	r31, 0x09	; 9
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	85 83       	std	Z+5, r24	; 0x05
    129e:	c4 83       	std	Z+4, r28	; 0x04
    12a0:	40 91 11 09 	lds	r20, 0x0911	; 0x800911 <npaFlow>
    12a4:	50 91 12 09 	lds	r21, 0x0912	; 0x800912 <npaFlow+0x1>
    12a8:	60 91 13 09 	lds	r22, 0x0913	; 0x800913 <npaFlow+0x2>
    12ac:	70 91 14 09 	lds	r23, 0x0914	; 0x800914 <npaFlow+0x3>
    12b0:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <npaFlow+0x4>
    12b4:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <npaFlow+0x5>
    12b8:	38 df       	rcall	.-400    	; 0x112a <readNPA700>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	98 e4       	ldi	r25, 0x48	; 72
    12be:	fc 01       	movw	r30, r24
    12c0:	31 97       	sbiw	r30, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <initPressureSensors+0x42>
    12c4:	fc 01       	movw	r30, r24
    12c6:	31 97       	sbiw	r30, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <initPressureSensors+0x48>
    12ca:	fc 01       	movw	r30, r24
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <initPressureSensors+0x4e>
    12d0:	fc 01       	movw	r30, r24
    12d2:	31 97       	sbiw	r30, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <initPressureSensors+0x54>
    12d6:	fc 01       	movw	r30, r24
    12d8:	31 97       	sbiw	r30, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <initPressureSensors+0x5a>
    12dc:	fc 01       	movw	r30, r24
    12de:	31 97       	sbiw	r30, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <initPressureSensors+0x60>
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <initPressureSensors+0x64>
    12e6:	40 91 0b 09 	lds	r20, 0x090B	; 0x80090b <npaAbsP>
    12ea:	50 91 0c 09 	lds	r21, 0x090C	; 0x80090c <npaAbsP+0x1>
    12ee:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <npaAbsP+0x2>
    12f2:	70 91 0e 09 	lds	r23, 0x090E	; 0x80090e <npaAbsP+0x3>
    12f6:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <npaAbsP+0x4>
    12fa:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <npaAbsP+0x5>
    12fe:	15 df       	rcall	.-470    	; 0x112a <readNPA700>
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <readDiffPress>:
    1304:	40 91 11 09 	lds	r20, 0x0911	; 0x800911 <npaFlow>
    1308:	50 91 12 09 	lds	r21, 0x0912	; 0x800912 <npaFlow+0x1>
    130c:	60 91 13 09 	lds	r22, 0x0913	; 0x800913 <npaFlow+0x2>
    1310:	70 91 14 09 	lds	r23, 0x0914	; 0x800914 <npaFlow+0x3>
    1314:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <npaFlow+0x4>
    1318:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <npaFlow+0x5>
    131c:	06 cf       	rjmp	.-500    	; 0x112a <readNPA700>
    131e:	08 95       	ret

00001320 <readABSPress>:
    1320:	40 91 0b 09 	lds	r20, 0x090B	; 0x80090b <npaAbsP>
    1324:	50 91 0c 09 	lds	r21, 0x090C	; 0x80090c <npaAbsP+0x1>
    1328:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <npaAbsP+0x2>
    132c:	70 91 0e 09 	lds	r23, 0x090E	; 0x80090e <npaAbsP+0x3>
    1330:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <npaAbsP+0x4>
    1334:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <npaAbsP+0x5>
    1338:	f8 ce       	rjmp	.-528    	; 0x112a <readNPA700>
    133a:	08 95       	ret

0000133c <readU47>:
    133c:	40 91 05 09 	lds	r20, 0x0905	; 0x800905 <npaU47>
    1340:	50 91 06 09 	lds	r21, 0x0906	; 0x800906 <npaU47+0x1>
    1344:	60 91 07 09 	lds	r22, 0x0907	; 0x800907 <npaU47+0x2>
    1348:	70 91 08 09 	lds	r23, 0x0908	; 0x800908 <npaU47+0x3>
    134c:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <npaU47+0x4>
    1350:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <npaU47+0x5>
    1354:	ea ce       	rjmp	.-556    	; 0x112a <readNPA700>
    1356:	08 95       	ret

00001358 <startRH_T_conversion>:
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	87 e2       	ldi	r24, 0x27	; 39
    1360:	0e 94 ad 13 	call	0x275a	; 0x275a <twi_write_bytes>
    1364:	89 2b       	or	r24, r25
    1366:	41 f4       	brne	.+16     	; 0x1378 <startRH_T_conversion+0x20>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 93 17 09 	sts	0x0917, r24	; 0x800917 <rhStarted>
    136e:	8a e4       	ldi	r24, 0x4A	; 74
    1370:	95 e0       	ldi	r25, 0x05	; 5
    1372:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <puts>
    1376:	08 95       	ret
    1378:	82 e6       	ldi	r24, 0x62	; 98
    137a:	95 e0       	ldi	r25, 0x05	; 5
    137c:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <puts>
    1380:	08 95       	ret

00001382 <readRH_T>:
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	00 d0       	rcall	.+0      	; 0x1390 <readRH_T+0xe>
    1390:	1f 92       	push	r1
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	19 82       	std	Y+1, r1	; 0x01
    1398:	1a 82       	std	Y+2, r1	; 0x02
    139a:	1b 82       	std	Y+3, r1	; 0x03
    139c:	1c 82       	std	Y+4, r1	; 0x04
    139e:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <rhStarted>
    13a2:	88 23       	and	r24, r24
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <readRH_T+0x26>
    13a6:	63 c0       	rjmp	.+198    	; 0x146e <readRH_T+0xec>
    13a8:	10 92 17 09 	sts	0x0917, r1	; 0x800917 <rhStarted>
    13ac:	44 e0       	ldi	r20, 0x04	; 4
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	be 01       	movw	r22, r28
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	87 e2       	ldi	r24, 0x27	; 39
    13b8:	0e 94 24 14 	call	0x2848	; 0x2848 <twi_read_bytes>
    13bc:	89 2b       	or	r24, r25
    13be:	29 f0       	breq	.+10     	; 0x13ca <readRH_T+0x48>
    13c0:	82 e6       	ldi	r24, 0x62	; 98
    13c2:	95 e0       	ldi	r25, 0x05	; 5
    13c4:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    13c8:	52 c0       	rjmp	.+164    	; 0x146e <readRH_T+0xec>
    13ca:	a9 81       	ldd	r26, Y+1	; 0x01
    13cc:	8a 2f       	mov	r24, r26
    13ce:	82 95       	swap	r24
    13d0:	86 95       	lsr	r24
    13d2:	86 95       	lsr	r24
    13d4:	83 70       	andi	r24, 0x03	; 3
    13d6:	29 f0       	breq	.+10     	; 0x13e2 <readRH_T+0x60>
    13d8:	84 e7       	ldi	r24, 0x74	; 116
    13da:	95 e0       	ldi	r25, 0x05	; 5
    13dc:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <readRH_T+0xec>
    13e2:	af 73       	andi	r26, 0x3F	; 63
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ba 2f       	mov	r27, r26
    13e8:	aa 27       	eor	r26, r26
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	a8 2b       	or	r26, r24
    13ee:	28 ee       	ldi	r18, 0xE8	; 232
    13f0:	33 e0       	ldi	r19, 0x03	; 3
    13f2:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__usmulhisi3>
    13f6:	0f 2e       	mov	r0, r31
    13f8:	fe ef       	ldi	r31, 0xFE	; 254
    13fa:	cf 2e       	mov	r12, r31
    13fc:	ff e3       	ldi	r31, 0x3F	; 63
    13fe:	df 2e       	mov	r13, r31
    1400:	e1 2c       	mov	r14, r1
    1402:	f1 2c       	mov	r15, r1
    1404:	f0 2d       	mov	r31, r0
    1406:	a7 01       	movw	r20, r14
    1408:	96 01       	movw	r18, r12
    140a:	0e 94 4f 1c 	call	0x389e	; 0x389e <__divmodsi4>
    140e:	5f 93       	push	r21
    1410:	4f 93       	push	r20
    1412:	3f 93       	push	r19
    1414:	2f 93       	push	r18
    1416:	84 e8       	ldi	r24, 0x84	; 132
    1418:	95 e0       	ldi	r25, 0x05	; 5
    141a:	9f 93       	push	r25
    141c:	8f 93       	push	r24
    141e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1422:	ab 81       	ldd	r26, Y+3	; 0x03
    1424:	80 e4       	ldi	r24, 0x40	; 64
    1426:	a8 9f       	mul	r26, r24
    1428:	d0 01       	movw	r26, r0
    142a:	11 24       	eor	r1, r1
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	a8 2b       	or	r26, r24
    1434:	24 e7       	ldi	r18, 0x74	; 116
    1436:	30 e4       	ldi	r19, 0x40	; 64
    1438:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__usmulhisi3>
    143c:	a7 01       	movw	r20, r14
    143e:	96 01       	movw	r18, r12
    1440:	0e 94 4f 1c 	call	0x389e	; 0x389e <__divmodsi4>
    1444:	da 01       	movw	r26, r20
    1446:	c9 01       	movw	r24, r18
    1448:	80 5a       	subi	r24, 0xA0	; 160
    144a:	9f 40       	sbci	r25, 0x0F	; 15
    144c:	a1 09       	sbc	r26, r1
    144e:	b1 09       	sbc	r27, r1
    1450:	bf 93       	push	r27
    1452:	af 93       	push	r26
    1454:	9f 93       	push	r25
    1456:	8f 93       	push	r24
    1458:	84 ea       	ldi	r24, 0xA4	; 164
    145a:	95 e0       	ldi	r25, 0x05	; 5
    145c:	9f 93       	push	r25
    145e:	8f 93       	push	r24
    1460:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	08 95       	ret

00001484 <ADC_RegisterWrite>:
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	d8 2f       	mov	r29, r24
    148a:	c6 2f       	mov	r28, r22
    148c:	90 d0       	rcall	.+288    	; 0x15ae <selectADC2518>
    148e:	88 e0       	ldi	r24, 0x08	; 8
    1490:	51 d6       	rcall	.+3234   	; 0x2134 <spiTransferByte>
    1492:	8d 2f       	mov	r24, r29
    1494:	4f d6       	rcall	.+3230   	; 0x2134 <spiTransferByte>
    1496:	8c 2f       	mov	r24, r28
    1498:	4d d6       	rcall	.+3226   	; 0x2134 <spiTransferByte>
    149a:	8f d0       	rcall	.+286    	; 0x15ba <deSelectADC2518>
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <ADC_RegisterRead>:
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	d8 2f       	mov	r29, r24
    14a8:	c6 2f       	mov	r28, r22
    14aa:	81 d0       	rcall	.+258    	; 0x15ae <selectADC2518>
    14ac:	80 e1       	ldi	r24, 0x10	; 16
    14ae:	42 d6       	rcall	.+3204   	; 0x2134 <spiTransferByte>
    14b0:	8d 2f       	mov	r24, r29
    14b2:	40 d6       	rcall	.+3200   	; 0x2134 <spiTransferByte>
    14b4:	8c 2f       	mov	r24, r28
    14b6:	3e d6       	rcall	.+3196   	; 0x2134 <spiTransferByte>
    14b8:	80 d0       	rcall	.+256    	; 0x15ba <deSelectADC2518>
    14ba:	79 d0       	rcall	.+242    	; 0x15ae <selectADC2518>
    14bc:	80 e1       	ldi	r24, 0x10	; 16
    14be:	3a d6       	rcall	.+3188   	; 0x2134 <spiTransferByte>
    14c0:	c8 2f       	mov	r28, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	37 d6       	rcall	.+3182   	; 0x2134 <spiTransferByte>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	35 d6       	rcall	.+3178   	; 0x2134 <spiTransferByte>
    14ca:	8c 2f       	mov	r24, r28
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <ADC_RegisterReadWrite>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	08 2f       	mov	r16, r24
    14dc:	16 2f       	mov	r17, r22
    14de:	67 d0       	rcall	.+206    	; 0x15ae <selectADC2518>
    14e0:	88 e0       	ldi	r24, 0x08	; 8
    14e2:	28 d6       	rcall	.+3152   	; 0x2134 <spiTransferByte>
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	c9 2f       	mov	r28, r25
    14e8:	d8 2f       	mov	r29, r24
    14ea:	80 2f       	mov	r24, r16
    14ec:	23 d6       	rcall	.+3142   	; 0x2134 <spiTransferByte>
    14ee:	c8 0f       	add	r28, r24
    14f0:	d1 1d       	adc	r29, r1
    14f2:	81 2f       	mov	r24, r17
    14f4:	1f d6       	rcall	.+3134   	; 0x2134 <spiTransferByte>
    14f6:	18 2f       	mov	r17, r24
    14f8:	60 d0       	rcall	.+192    	; 0x15ba <deSelectADC2518>
    14fa:	1f 92       	push	r1
    14fc:	1f 93       	push	r17
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	85 ec       	ldi	r24, 0xC5	; 197
    1504:	95 e0       	ldi	r25, 0x05	; 5
    1506:	9f 93       	push	r25
    1508:	8f 93       	push	r24
    150a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	ce 01       	movw	r24, r28
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <enableBuck014>:
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	86 e0       	ldi	r24, 0x06	; 6
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	f9 cb       	rjmp	.-2062   	; 0xd22 <ADC_wrGPO>
    1530:	08 95       	ret

00001532 <disableBuck014>:
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	86 e0       	ldi	r24, 0x06	; 6
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	f3 cb       	rjmp	.-2074   	; 0xd22 <ADC_wrGPO>
    153c:	08 95       	ret

0000153e <enableBuck2>:
    153e:	84 b3       	in	r24, 0x14	; 20
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	84 bb       	out	0x14, r24	; 20
    1544:	08 95       	ret

00001546 <disableBuck2>:
    1546:	84 b3       	in	r24, 0x14	; 20
    1548:	8e 7f       	andi	r24, 0xFE	; 254
    154a:	84 bb       	out	0x14, r24	; 20
    154c:	08 95       	ret

0000154e <enableBuck3>:
    154e:	84 b3       	in	r24, 0x14	; 20
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	84 bb       	out	0x14, r24	; 20
    1554:	08 95       	ret

00001556 <disableBuck3>:
    1556:	84 b3       	in	r24, 0x14	; 20
    1558:	8d 7f       	andi	r24, 0xFD	; 253
    155a:	84 bb       	out	0x14, r24	; 20
    155c:	08 95       	ret

0000155e <enableBuck5>:
    155e:	eb e0       	ldi	r30, 0x0B	; 11
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	80 81       	ld	r24, Z
    1564:	80 68       	ori	r24, 0x80	; 128
    1566:	80 83       	st	Z, r24
    1568:	08 95       	ret

0000156a <disableBuck5>:
    156a:	eb e0       	ldi	r30, 0x0B	; 11
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	80 81       	ld	r24, Z
    1570:	8f 77       	andi	r24, 0x7F	; 127
    1572:	80 83       	st	Z, r24
    1574:	08 95       	ret

00001576 <powerUpWickSensor>:
    1576:	8e b1       	in	r24, 0x0e	; 14
    1578:	8b 7f       	andi	r24, 0xFB	; 251
    157a:	8e b9       	out	0x0e, r24	; 14
    157c:	08 95       	ret

0000157e <powerDownWickSensor>:
    157e:	8e b1       	in	r24, 0x0e	; 14
    1580:	84 60       	ori	r24, 0x04	; 4
    1582:	8e b9       	out	0x0e, r24	; 14
    1584:	08 95       	ret

00001586 <selectFRAM>:
    1586:	85 b1       	in	r24, 0x05	; 5
    1588:	8e 7f       	andi	r24, 0xFE	; 254
    158a:	85 b9       	out	0x05, r24	; 5
    158c:	08 95       	ret

0000158e <deSelectFRAM>:
    158e:	85 b1       	in	r24, 0x05	; 5
    1590:	81 60       	ori	r24, 0x01	; 1
    1592:	85 b9       	out	0x05, r24	; 5
    1594:	08 95       	ret

00001596 <selectOpticsDAC>:
    1596:	e2 e0       	ldi	r30, 0x02	; 2
    1598:	f1 e0       	ldi	r31, 0x01	; 1
    159a:	80 81       	ld	r24, Z
    159c:	8e 7f       	andi	r24, 0xFE	; 254
    159e:	80 83       	st	Z, r24
    15a0:	08 95       	ret

000015a2 <deSelectOpticsDAC>:
    15a2:	e2 e0       	ldi	r30, 0x02	; 2
    15a4:	f1 e0       	ldi	r31, 0x01	; 1
    15a6:	80 81       	ld	r24, Z
    15a8:	81 60       	ori	r24, 0x01	; 1
    15aa:	80 83       	st	Z, r24
    15ac:	08 95       	ret

000015ae <selectADC2518>:
    15ae:	e2 e0       	ldi	r30, 0x02	; 2
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	80 81       	ld	r24, Z
    15b4:	8d 7f       	andi	r24, 0xFD	; 253
    15b6:	80 83       	st	Z, r24
    15b8:	08 95       	ret

000015ba <deSelectADC2518>:
    15ba:	e2 e0       	ldi	r30, 0x02	; 2
    15bc:	f1 e0       	ldi	r31, 0x01	; 1
    15be:	80 81       	ld	r24, Z
    15c0:	82 60       	ori	r24, 0x02	; 2
    15c2:	80 83       	st	Z, r24
    15c4:	08 95       	ret

000015c6 <selectBuckCtrlDAC>:
    15c6:	e2 e0       	ldi	r30, 0x02	; 2
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	80 81       	ld	r24, Z
    15cc:	8b 7f       	andi	r24, 0xFB	; 251
    15ce:	80 83       	st	Z, r24
    15d0:	08 95       	ret

000015d2 <deSelectBuckCtrlDAC>:
    15d2:	e2 e0       	ldi	r30, 0x02	; 2
    15d4:	f1 e0       	ldi	r31, 0x01	; 1
    15d6:	80 81       	ld	r24, Z
    15d8:	84 60       	ori	r24, 0x04	; 4
    15da:	80 83       	st	Z, r24
    15dc:	08 95       	ret

000015de <selectFlash>:
    15de:	e2 e0       	ldi	r30, 0x02	; 2
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	80 81       	ld	r24, Z
    15e4:	87 7f       	andi	r24, 0xF7	; 247
    15e6:	80 83       	st	Z, r24
    15e8:	08 95       	ret

000015ea <deSelectFlash>:
    15ea:	e2 e0       	ldi	r30, 0x02	; 2
    15ec:	f1 e0       	ldi	r31, 0x01	; 1
    15ee:	80 81       	ld	r24, Z
    15f0:	88 60       	ori	r24, 0x08	; 8
    15f2:	80 83       	st	Z, r24
    15f4:	08 95       	ret

000015f6 <deSelectRTC>:
    15f6:	e2 e0       	ldi	r30, 0x02	; 2
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	80 81       	ld	r24, Z
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	80 83       	st	Z, r24
    1600:	08 95       	ret

00001602 <selectRTC>:
    1602:	e2 e0       	ldi	r30, 0x02	; 2
    1604:	f1 e0       	ldi	r31, 0x01	; 1
    1606:	80 81       	ld	r24, Z
    1608:	8f 7e       	andi	r24, 0xEF	; 239
    160a:	80 83       	st	Z, r24
    160c:	08 95       	ret

0000160e <selectSDcard>:
    160e:	e2 e0       	ldi	r30, 0x02	; 2
    1610:	f1 e0       	ldi	r31, 0x01	; 1
    1612:	80 81       	ld	r24, Z
    1614:	80 62       	ori	r24, 0x20	; 32
    1616:	80 83       	st	Z, r24
    1618:	08 95       	ret

0000161a <deSelectSDcard>:
    161a:	e2 e0       	ldi	r30, 0x02	; 2
    161c:	f1 e0       	ldi	r31, 0x01	; 1
    161e:	80 81       	ld	r24, Z
    1620:	8f 7d       	andi	r24, 0xDF	; 223
    1622:	80 83       	st	Z, r24
    1624:	08 95       	ret

00001626 <spi_FlashReadID>:
	while (loopcnt--);
}

//Read Flash ID:  0 address, 1 dummy, 2 Data
void spi_FlashReadID(void)     
{
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	1f 92       	push	r1
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	uint8_t miso[2];
	
	selectFlash();
    1632:	d5 df       	rcall	.-86     	; 0x15de <selectFlash>
	spiTransferByte(FLASH_READ_ID);
    1634:	8f e9       	ldi	r24, 0x9F	; 159
    1636:	7e d5       	rcall	.+2812   	; 0x2134 <spiTransferByte>
	spiTransferByte(0);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	7c d5       	rcall	.+2808   	; 0x2134 <spiTransferByte>
	miso[1] = spiTransferByte(0);
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	7a d5       	rcall	.+2804   	; 0x2134 <spiTransferByte>
    1640:	8a 83       	std	Y+2, r24	; 0x02
	miso[2] = spiTransferByte(0);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	77 d5       	rcall	.+2798   	; 0x2134 <spiTransferByte>
    1646:	8b 83       	std	Y+3, r24	; 0x03
    1648:	d0 df       	rcall	.-96     	; 0x15ea <deSelectFlash>
	deSelectFlash();
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	28 2f       	mov	r18, r24
	printf("\n0x%02x, 0x%02x\n", miso[1],miso[2]);
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	43 2f       	mov	r20, r19
    1658:	4f 93       	push	r20
    165a:	2f 93       	push	r18
    165c:	29 2f       	mov	r18, r25
    165e:	2f 93       	push	r18
    1660:	8f 93       	push	r24
    1662:	8f e0       	ldi	r24, 0x0F	; 15
    1664:	92 e0       	ldi	r25, 0x02	; 2
    1666:	89 2f       	mov	r24, r25
    1668:	8f 93       	push	r24
    166a:	8f e0       	ldi	r24, 0x0F	; 15
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	8f 93       	push	r24
    1670:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	00 00       	nop
    1682:	0f 90       	pop	r0
	
}
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <spi_FlashWaitUntilReady>:
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29


uint8_t spi_FlashWaitUntilReady()
{
    1690:	1f 92       	push	r1
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	uint8_t retry = FLASH_RETRY_MAX;
    1696:	8a e0       	ldi	r24, 0x0A	; 10
    1698:	89 83       	std	Y+1, r24	; 0x01
	do 
	{
		retry--;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	81 50       	subi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
	} while (spi_FlashIsBusy() && retry);
    16a0:	0e d0       	rcall	.+28     	; 0x16be <spi_FlashIsBusy>
    16a2:	88 23       	and	r24, r24
    16a4:	19 f0       	breq	.+6      	; 0x16ac <spi_FlashWaitUntilReady+0x20>
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	88 23       	and	r24, r24
    16aa:	b9 f7       	brne	.-18     	; 0x169a <spi_FlashWaitUntilReady+0xe>
	return (retry > 0); 
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	99 81       	ldd	r25, Y+1	; 0x01
    16b0:	99 23       	and	r25, r25
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <spi_FlashWaitUntilReady+0x2a>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
	
}
    16b6:	0f 90       	pop	r0
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	08 95       	ret

000016be <spi_FlashIsBusy>:
/*********************************************************************
 *  check operation in progress bit (OIP) in feature status register to see if chip is busy.
 *  returns zero if ready, and 1 if busy with previous command.
**********************************************************************/
uint8_t spi_FlashIsBusy(void)   
{
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	1f 92       	push	r1
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t ret;	
	ret = spi_FlashGetStatusRegister();  // check response
    16c8:	22 d0       	rcall	.+68     	; 0x170e <spi_FlashGetStatusRegister>
    16ca:	89 83       	std	Y+1, r24	; 0x01
	printf("spi_FlashIsBusy: 0x%02x\n", ret);
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	29 2f       	mov	r18, r25
    16d4:	2f 93       	push	r18
    16d6:	8f 93       	push	r24
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	89 2f       	mov	r24, r25
    16de:	8f 93       	push	r24
    16e0:	80 e2       	ldi	r24, 0x20	; 32
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	8f 93       	push	r24
    16e6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
	return (ret & FLASH_STATUS_BIT_OIP) ? 1 : 0;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	81 70       	andi	r24, 0x01	; 1
    16fa:	99 27       	eor	r25, r25
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	89 2b       	or	r24, r25
    1700:	09 f4       	brne	.+2      	; 0x1704 <spi_FlashIsBusy+0x46>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	82 2f       	mov	r24, r18
}
    1706:	0f 90       	pop	r0
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <spi_FlashGetStatusRegister>:

uint8_t spi_FlashGetStatusRegister(void)
{
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	return 	spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS);
    1716:	80 ec       	ldi	r24, 0xC0	; 192
    1718:	5b d0       	rcall	.+182    	; 0x17d0 <spi_FlashGetFeatures>
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <spi_FlashDisplayFeatureRegisters>:

void spi_FlashDisplayFeatureRegisters(void)
{
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	printf("Flash Block Lock    0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK));
    1728:	80 ea       	ldi	r24, 0xA0	; 160
    172a:	52 d0       	rcall	.+164    	; 0x17d0 <spi_FlashGetFeatures>
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	29 2f       	mov	r18, r25
    1732:	2f 93       	push	r18
    1734:	8f 93       	push	r24
    1736:	89 e3       	ldi	r24, 0x39	; 57
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	89 2f       	mov	r24, r25
    173c:	8f 93       	push	r24
    173e:	89 e3       	ldi	r24, 0x39	; 57
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	8f 93       	push	r24
    1744:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
	printf("Flash Config        0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_CONFIG));
    1750:	80 eb       	ldi	r24, 0xB0	; 176
    1752:	3e d0       	rcall	.+124    	; 0x17d0 <spi_FlashGetFeatures>
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	29 2f       	mov	r18, r25
    175a:	2f 93       	push	r18
    175c:	8f 93       	push	r24
    175e:	85 e5       	ldi	r24, 0x55	; 85
    1760:	92 e0       	ldi	r25, 0x02	; 2
    1762:	89 2f       	mov	r24, r25
    1764:	8f 93       	push	r24
    1766:	85 e5       	ldi	r24, 0x55	; 85
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	8f 93       	push	r24
    176c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
	printf("Flash Status        0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS));
    1778:	80 ec       	ldi	r24, 0xC0	; 192
    177a:	2a d0       	rcall	.+84     	; 0x17d0 <spi_FlashGetFeatures>
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	29 2f       	mov	r18, r25
    1782:	2f 93       	push	r18
    1784:	8f 93       	push	r24
    1786:	81 e7       	ldi	r24, 0x71	; 113
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	89 2f       	mov	r24, r25
    178c:	8f 93       	push	r24
    178e:	81 e7       	ldi	r24, 0x71	; 113
    1790:	92 e0       	ldi	r25, 0x02	; 2
    1792:	8f 93       	push	r24
    1794:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
	printf("Flash Die Select    0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_DIE_SELECT));
    17a0:	80 ed       	ldi	r24, 0xD0	; 208
    17a2:	16 d0       	rcall	.+44     	; 0x17d0 <spi_FlashGetFeatures>
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	29 2f       	mov	r18, r25
    17aa:	2f 93       	push	r18
    17ac:	8f 93       	push	r24
    17ae:	8d e8       	ldi	r24, 0x8D	; 141
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	89 2f       	mov	r24, r25
    17b4:	8f 93       	push	r24
    17b6:	8d e8       	ldi	r24, 0x8D	; 141
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	8f 93       	push	r24
    17bc:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	00 00       	nop
	
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <spi_FlashGetFeatures>:
    17d0:	cf 93       	push	r28
 *      Returns feature register content
 *      
 *
**********************************************************************/
uint8_t spi_FlashGetFeatures(uint8_t fregister)
{
    17d2:	df 93       	push	r29
    17d4:	1f 92       	push	r1
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t features;
		
	selectFlash();
    17de:	ff de       	rcall	.-514    	; 0x15de <selectFlash>
	spiTransferByte(FLASH_GET_FEATURES);
    17e0:	8f e0       	ldi	r24, 0x0F	; 15
    17e2:	a8 d4       	rcall	.+2384   	; 0x2134 <spiTransferByte>
	spiTransferByte(fregister);
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	a6 d4       	rcall	.+2380   	; 0x2134 <spiTransferByte>
	features = spiTransferByte(0);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	a4 d4       	rcall	.+2376   	; 0x2134 <spiTransferByte>
    17ec:	89 83       	std	Y+1, r24	; 0x01
	deSelectFlash();
    17ee:	fd de       	rcall	.-518    	; 0x15ea <deSelectFlash>
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
	return features;
    17f2:	0f 90       	pop	r0
}
    17f4:	0f 90       	pop	r0
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <spi_FlashSetFeatures>:
    17fc:	cf 93       	push	r28
 *      Returns feature register content
 *      
 *
**********************************************************************/
uint8_t spi_FlashSetFeatures(uint8_t fregister, uint8_t features)
{
    17fe:	df 93       	push	r29
    1800:	1f 92       	push	r1
    1802:	1f 92       	push	r1
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	6a 83       	std	Y+2, r22	; 0x02
	selectFlash();
    180c:	e8 de       	rcall	.-560    	; 0x15de <selectFlash>
	spiTransferByte(FLASH_SET_FEATURES);
    180e:	8f e1       	ldi	r24, 0x1F	; 31
    1810:	91 d4       	rcall	.+2338   	; 0x2134 <spiTransferByte>
	spiTransferByte(fregister);
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	8f d4       	rcall	.+2334   	; 0x2134 <spiTransferByte>
	spiTransferByte(features);
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	8d d4       	rcall	.+2330   	; 0x2134 <spiTransferByte>
	deSelectFlash();
    181a:	e7 de       	rcall	.-562    	; 0x15ea <deSelectFlash>
    181c:	89 81       	ldd	r24, Y+1	; 0x01
	return spi_FlashGetFeatures(fregister);
    181e:	d8 df       	rcall	.-80     	; 0x17d0 <spi_FlashGetFeatures>
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
}
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <spi_FlashUnlockAllBlocks>:
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29

void spi_FlashUnlockAllBlocks(void)
{
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	uint8_t features;
	
	//features = spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK);
	//printf("spi_FlashUnlockAllBlocks: lock reg starts at 0x%02x\n", features);
	
	spi_FlashSetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK, 0x00);
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	80 ea       	ldi	r24, 0xA0	; 160
    1838:	e1 df       	rcall	.-62     	; 0x17fc <spi_FlashSetFeatures>

	features = spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK);
    183a:	80 ea       	ldi	r24, 0xA0	; 160
    183c:	c9 df       	rcall	.-110    	; 0x17d0 <spi_FlashGetFeatures>
    183e:	89 83       	std	Y+1, r24	; 0x01
	printf("spi_FlashUnlockAllBlocks: lock reg now  0x%02x\n", features);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	29 2f       	mov	r18, r25
    1848:	2f 93       	push	r18
    184a:	8f 93       	push	r24
    184c:	89 ea       	ldi	r24, 0xA9	; 169
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	89 2f       	mov	r24, r25
    1852:	8f 93       	push	r24
    1854:	89 ea       	ldi	r24, 0xA9	; 169
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	8f 93       	push	r24
    185a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
}
    1866:	00 00       	nop
    1868:	0f 90       	pop	r0
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

00001870 <spi_FlashEnableWrite>:
 *      Return zero if WIP = 1 or WEL = 0;
 *
**********************************************************************/

uint8_t spi_FlashEnableWrite(void)   
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	1f 92       	push	r1
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62

	selectFlash();
    187a:	b1 de       	rcall	.-670    	; 0x15de <selectFlash>
	spiTransferByte(FLASH_WRITE_ENABLE);         
    187c:	86 e0       	ldi	r24, 0x06	; 6
	deSelectFlash();
    187e:	5a d4       	rcall	.+2228   	; 0x2134 <spiTransferByte>
    1880:	b4 de       	rcall	.-664    	; 0x15ea <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    1882:	45 df       	rcall	.-374    	; 0x170e <spi_FlashGetStatusRegister>
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	89 81       	ldd	r24, Y+1	; 0x01
	printf("spi_FlashEnableWrite: 0x%02x\n", statReg);
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	29 2f       	mov	r18, r25
    188e:	2f 93       	push	r18
    1890:	8f 93       	push	r24
    1892:	89 ed       	ldi	r24, 0xD9	; 217
    1894:	92 e0       	ldi	r25, 0x02	; 2
    1896:	89 2f       	mov	r24, r25
    1898:	8f 93       	push	r24
    189a:	89 ed       	ldi	r24, 0xD9	; 217
    189c:	92 e0       	ldi	r25, 0x02	; 2
    189e:	8f 93       	push	r24
    18a0:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
		
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 1 : 0  ;  
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	82 70       	andi	r24, 0x02	; 2
    18b4:	99 27       	eor	r25, r25
    18b6:	21 e0       	ldi	r18, 0x01	; 1
    18b8:	89 2b       	or	r24, r25
    18ba:	09 f4       	brne	.+2      	; 0x18be <spi_FlashEnableWrite+0x4e>
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	82 2f       	mov	r24, r18
    18c0:	0f 90       	pop	r0
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <spi_FlashDisableWrite>:
    18c8:	cf 93       	push	r28

uint8_t spi_FlashDisableWrite(void)
{
    18ca:	df 93       	push	r29
    18cc:	1f 92       	push	r1
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62

	selectFlash();
    18d2:	85 de       	rcall	.-758    	; 0x15de <selectFlash>
	spiTransferByte(FLASH_WRITE_DISABLE);
    18d4:	84 e0       	ldi	r24, 0x04	; 4
	deSelectFlash();
    18d6:	2e d4       	rcall	.+2140   	; 0x2134 <spiTransferByte>
    18d8:	88 de       	rcall	.-752    	; 0x15ea <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    18da:	19 df       	rcall	.-462    	; 0x170e <spi_FlashGetStatusRegister>
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	89 81       	ldd	r24, Y+1	; 0x01
	printf("spi_FlashDisableWrite: 0x%02x\n", statReg);
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	29 2f       	mov	r18, r25
    18e6:	2f 93       	push	r18
    18e8:	8f 93       	push	r24
    18ea:	87 ef       	ldi	r24, 0xF7	; 247
    18ec:	92 e0       	ldi	r25, 0x02	; 2
    18ee:	89 2f       	mov	r24, r25
    18f0:	8f 93       	push	r24
    18f2:	87 ef       	ldi	r24, 0xF7	; 247
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	8f 93       	push	r24
    18f8:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	89 81       	ldd	r24, Y+1	; 0x01
	
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 0 : 1  ;
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	82 70       	andi	r24, 0x02	; 2
    190c:	99 27       	eor	r25, r25
    190e:	21 e0       	ldi	r18, 0x01	; 1
    1910:	89 2b       	or	r24, r25
    1912:	09 f0       	breq	.+2      	; 0x1916 <spi_FlashDisableWrite+0x4e>
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	82 2f       	mov	r24, r18
    1918:	0f 90       	pop	r0
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <spi_FlashWriteToPage>:
    1920:	0f 93       	push	r16
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	62 97       	sbiw	r28, 0x12	; 18
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	6a 87       	std	Y+10, r22	; 0x0a
    1938:	7b 87       	std	Y+11, r23	; 0x0b
    193a:	8c 87       	std	Y+12, r24	; 0x0c
    193c:	9d 87       	std	Y+13, r25	; 0x0d
    193e:	5f 87       	std	Y+15, r21	; 0x0f
    1940:	4e 87       	std	Y+14, r20	; 0x0e
    1942:	39 8b       	std	Y+17, r19	; 0x11
    1944:	28 8b       	std	Y+16, r18	; 0x10
    1946:	0a 8b       	std	Y+18, r16	; 0x12
	uint16_t ret = 0;
    1948:	1a 82       	std	Y+2, r1	; 0x02
    194a:	19 82       	std	Y+1, r1	; 0x01
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
    194c:	8a 85       	ldd	r24, Y+10	; 0x0a
    194e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1950:	ac 85       	ldd	r26, Y+12	; 0x0c
    1952:	bd 85       	ldd	r27, Y+13	; 0x0d
    1954:	8c 83       	std	Y+4, r24	; 0x04
    1956:	9d 83       	std	Y+5, r25	; 0x05
    1958:	ae 83       	std	Y+6, r26	; 0x06
    195a:	bf 83       	std	Y+7, r27	; 0x07
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    195c:	8a 89       	ldd	r24, Y+18	; 0x12
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8e 85       	ldd	r24, Y+14	; 0x0e
    1964:	9f 85       	ldd	r25, Y+15	; 0x0f
    1966:	82 0f       	add	r24, r18
    1968:	93 1f       	adc	r25, r19
    196a:	81 38       	cpi	r24, 0x81	; 129
    196c:	98 40       	sbci	r25, 0x08	; 8
    196e:	08 f0       	brcs	.+2      	; 0x1972 <spi_FlashWriteToPage+0x52>
    1970:	8a c0       	rjmp	.+276    	; 0x1a86 <spi_FlashWriteToPage+0x166>
	{
		if (spi_FlashWaitUntilReady())
    1972:	8c de       	rcall	.-744    	; 0x168c <spi_FlashWaitUntilReady>
    1974:	88 23       	and	r24, r24
    1976:	09 f4       	brne	.+2      	; 0x197a <spi_FlashWriteToPage+0x5a>
    1978:	7c c0       	rjmp	.+248    	; 0x1a72 <spi_FlashWriteToPage+0x152>
		{
			selectFlash();
    197a:	31 de       	rcall	.-926    	; 0x15de <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    197c:	83 e1       	ldi	r24, 0x13	; 19
    197e:	da d3       	rcall	.+1972   	; 0x2134 <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	d8 d3       	rcall	.+1968   	; 0x2134 <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
			spiTransferByte(pageAddress.byte[0]);
    1986:	d6 d3       	rcall	.+1964   	; 0x2134 <spiTransferByte>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
			deSelectFlash();
    198a:	d4 d3       	rcall	.+1960   	; 0x2134 <spiTransferByte>
    198c:	2e de       	rcall	.-932    	; 0x15ea <deSelectFlash>
			if (spi_FlashWaitUntilReady())
    198e:	7e de       	rcall	.-772    	; 0x168c <spi_FlashWaitUntilReady>
    1990:	88 23       	and	r24, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <spi_FlashWriteToPage+0x76>
    1994:	64 c0       	rjmp	.+200    	; 0x1a5e <spi_FlashWriteToPage+0x13e>
    1996:	6c df       	rcall	.-296    	; 0x1870 <spi_FlashEnableWrite>
			{
				if (spi_FlashEnableWrite())
    1998:	88 23       	and	r24, r24
    199a:	09 f4       	brne	.+2      	; 0x199e <spi_FlashWriteToPage+0x7e>
    199c:	56 c0       	rjmp	.+172    	; 0x1a4a <spi_FlashWriteToPage+0x12a>
				{
					union twoBytes addrInPage;
					addrInPage.word = address;
    199e:	8e 85       	ldd	r24, Y+14	; 0x0e
    19a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19a2:	99 87       	std	Y+9, r25	; 0x09
					selectFlash();
    19a4:	88 87       	std	Y+8, r24	; 0x08
    19a6:	1b de       	rcall	.-970    	; 0x15de <selectFlash>
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
    19a8:	84 e8       	ldi	r24, 0x84	; 132
    19aa:	c4 d3       	rcall	.+1928   	; 0x2134 <spiTransferByte>
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
					spiTransferByte(addrInPage.byte[1]);
    19ae:	c2 d3       	rcall	.+1924   	; 0x2134 <spiTransferByte>
    19b0:	88 85       	ldd	r24, Y+8	; 0x08
    19b2:	c0 d3       	rcall	.+1920   	; 0x2134 <spiTransferByte>
					spiTransferByte(addrInPage.byte[0]);
    19b4:	1b 82       	std	Y+3, r1	; 0x03
    19b6:	0d c0       	rjmp	.+26     	; 0x19d2 <spi_FlashWriteToPage+0xb2>
					for (uint8_t i = 0; i < nbytes; i++)
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	88 2f       	mov	r24, r24
					{
						spiTransferByte(buffer[i]);
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	28 89       	ldd	r18, Y+16	; 0x10
    19c0:	39 89       	ldd	r19, Y+17	; 0x11
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	fc 01       	movw	r30, r24
    19c8:	80 81       	ld	r24, Z
    19ca:	b4 d3       	rcall	.+1896   	; 0x2134 <spiTransferByte>
					addrInPage.word = address;
					selectFlash();
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
					spiTransferByte(addrInPage.byte[1]);
					spiTransferByte(addrInPage.byte[0]);
					for (uint8_t i = 0; i < nbytes; i++)
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
					{
						spiTransferByte(buffer[i]);
					}
					deSelectFlash();
    19d4:	8a 89       	ldd	r24, Y+18	; 0x12
					if (spi_FlashWaitUntilReady())
    19d6:	98 17       	cp	r25, r24
    19d8:	78 f3       	brcs	.-34     	; 0x19b8 <spi_FlashWriteToPage+0x98>
    19da:	07 de       	rcall	.-1010   	; 0x15ea <deSelectFlash>
					{
						selectFlash();
    19dc:	57 de       	rcall	.-850    	; 0x168c <spi_FlashWaitUntilReady>
    19de:	88 23       	and	r24, r24
						spiTransferByte(FLASH_PROGRAM_EXECUTE);
    19e0:	51 f1       	breq	.+84     	; 0x1a36 <spi_FlashWriteToPage+0x116>
    19e2:	fd dd       	rcall	.-1030   	; 0x15de <selectFlash>
    19e4:	80 e1       	ldi	r24, 0x10	; 16
						spiTransferByte(pageAddress.byte[2]);
    19e6:	a6 d3       	rcall	.+1868   	; 0x2134 <spiTransferByte>
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	a4 d3       	rcall	.+1864   	; 0x2134 <spiTransferByte>
						spiTransferByte(pageAddress.byte[1]);
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	a2 d3       	rcall	.+1860   	; 0x2134 <spiTransferByte>
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
						spiTransferByte(pageAddress.byte[0]);
    19f2:	a0 d3       	rcall	.+1856   	; 0x2134 <spiTransferByte>
    19f4:	fa dd       	rcall	.-1036   	; 0x15ea <deSelectFlash>
    19f6:	4a de       	rcall	.-876    	; 0x168c <spi_FlashWaitUntilReady>
						deSelectFlash();
    19f8:	88 23       	and	r24, r24
    19fa:	99 f0       	breq	.+38     	; 0x1a22 <spi_FlashWriteToPage+0x102>
						if (spi_FlashWaitUntilReady())
    19fc:	65 df       	rcall	.-310    	; 0x18c8 <spi_FlashDisableWrite>
    19fe:	88 23       	and	r24, r24
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <spi_FlashWriteToPage+0xee>
    1a02:	8a 89       	ldd	r24, Y+18	; 0x12
						{
							if (spi_FlashDisableWrite())
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
								ret = nbytes;
    1a0c:	45 c0       	rjmp	.+138    	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a0e:	86 ec       	ldi	r24, 0xC6	; 198
    1a10:	92 e0       	ldi	r25, 0x02	; 2
    1a12:	29 2f       	mov	r18, r25
    1a14:	2f 93       	push	r18
    1a16:	8f 93       	push	r24
							else
								printf_P(PSTR("spi_FlashWriteToPage: Flash won't disable write\n"));
    1a18:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	3b c0       	rjmp	.+118    	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a22:	87 ef       	ldi	r24, 0xF7	; 247
    1a24:	92 e0       	ldi	r25, 0x02	; 2
    1a26:	29 2f       	mov	r18, r25
    1a28:	2f 93       	push	r18
    1a2a:	8f 93       	push	r24
						}
						else
							printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    1a2c:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	31 c0       	rjmp	.+98     	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a36:	80 e3       	ldi	r24, 0x30	; 48
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	29 2f       	mov	r18, r25
    1a3c:	2f 93       	push	r18
    1a3e:	8f 93       	push	r24
					}
					else
						printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    1a40:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	27 c0       	rjmp	.+78     	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a4a:	89 e6       	ldi	r24, 0x69	; 105
    1a4c:	93 e0       	ldi	r25, 0x03	; 3
    1a4e:	29 2f       	mov	r18, r25
    1a50:	2f 93       	push	r18
    1a52:	8f 93       	push	r24
				}
				else
					printf_P(PSTR("spi_FlashWriteToPage: Flash won't enable write\n"));
    1a54:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	1d c0       	rjmp	.+58     	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a5e:	89 e9       	ldi	r24, 0x99	; 153
    1a60:	93 e0       	ldi	r25, 0x03	; 3
    1a62:	29 2f       	mov	r18, r25
    1a64:	2f 93       	push	r18
    1a66:	8f 93       	push	r24
			}
			else
				printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after page read\n"));
    1a68:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	13 c0       	rjmp	.+38     	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a72:	82 ed       	ldi	r24, 0xD2	; 210
    1a74:	93 e0       	ldi	r25, 0x03	; 3
    1a76:	29 2f       	mov	r18, r25
    1a78:	2f 93       	push	r18
    1a7a:	8f 93       	push	r24
		}
		else
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
    1a7c:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <spi_FlashWriteToPage+0x178>
    1a86:	8b ef       	ldi	r24, 0xFB	; 251
    1a88:	93 e0       	ldi	r25, 0x03	; 3
    1a8a:	29 2f       	mov	r18, r25
    1a8c:	2f 93       	push	r18
    1a8e:	8f 93       	push	r24
	}
	else
		printf_P(PSTR("spi_FlashWriteToPage: buffer crosses page boundary\n"));
    1a90:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	62 96       	adiw	r28, 0x12	; 18
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
	return ret;
    1aa2:	0f be       	out	0x3f, r0	; 63
}
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <spi_FlashWrite>:
    1aae:	0f 93       	push	r16
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
*  Crosses page if necessary
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    1ab8:	60 97       	sbiw	r28, 0x10	; 16
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	6a 87       	std	Y+10, r22	; 0x0a
    1ac6:	7b 87       	std	Y+11, r23	; 0x0b
    1ac8:	8c 87       	std	Y+12, r24	; 0x0c
    1aca:	9d 87       	std	Y+13, r25	; 0x0d
    1acc:	5f 87       	std	Y+15, r21	; 0x0f
    1ace:	4e 87       	std	Y+14, r20	; 0x0e
    1ad0:	28 8b       	std	Y+16, r18	; 0x10
	uint8_t ret = 0;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    1ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1ada:	bd 85       	ldd	r27, Y+13	; 0x0d
    1adc:	20 e8       	ldi	r18, 0x80	; 128
    1ade:	38 e0       	ldi	r19, 0x08	; 8
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 2d 1c 	call	0x385a	; 0x385a <__udivmodsi4>
    1aec:	da 01       	movw	r26, r20
    1aee:	c9 01       	movw	r24, r18
    1af0:	8c 83       	std	Y+4, r24	; 0x04
    1af2:	9d 83       	std	Y+5, r25	; 0x05
    1af4:	ae 83       	std	Y+6, r26	; 0x06
    1af6:	bf 83       	std	Y+7, r27	; 0x07
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    1af8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1afa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1afc:	ac 85       	ldd	r26, Y+12	; 0x0c
    1afe:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b00:	20 e8       	ldi	r18, 0x80	; 128
    1b02:	38 e0       	ldi	r19, 0x08	; 8
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 2d 1c 	call	0x385a	; 0x385a <__udivmodsi4>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	99 87       	std	Y+9, r25	; 0x09
    1b16:	88 87       	std	Y+8, r24	; 0x08
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    1b18:	1b 82       	std	Y+3, r1	; 0x03
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    1b1a:	88 89       	ldd	r24, Y+16	; 0x10
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	88 85       	ldd	r24, Y+8	; 0x08
    1b22:	99 85       	ldd	r25, Y+9	; 0x09
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	81 38       	cpi	r24, 0x81	; 129
    1b2a:	98 40       	sbci	r25, 0x08	; 8
    1b2c:	40 f0       	brcs	.+16     	; 0x1b3e <spi_FlashWrite+0x90>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    1b2e:	98 85       	ldd	r25, Y+8	; 0x08
    1b30:	88 89       	ldd	r24, Y+16	; 0x10
    1b32:	89 0f       	add	r24, r25
    1b34:	80 58       	subi	r24, 0x80	; 128
    1b36:	8a 83       	std	Y+2, r24	; 0x02
		crossesPage = true;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <spi_FlashWrite+0x94>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    1b3e:	88 89       	ldd	r24, Y+16	; 0x10
    1b40:	8a 83       	std	Y+2, r24	; 0x02
	}
    if (spi_FlashWriteToPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    1b42:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b44:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b46:	48 85       	ldd	r20, Y+8	; 0x08
    1b48:	59 85       	ldd	r21, Y+9	; 0x09
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	ae 81       	ldd	r26, Y+6	; 0x06
    1b50:	bf 81       	ldd	r27, Y+7	; 0x07
    1b52:	0a 81       	ldd	r16, Y+2	; 0x02
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	e3 de       	rcall	.-570    	; 0x1920 <spi_FlashWriteToPage>
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	98 17       	cp	r25, r24
    1b60:	d1 f5       	brne	.+116    	; 0x1bd6 <spi_FlashWrite+0x128>
	{
		if (crossesPage)
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	88 23       	and	r24, r24
    1b66:	a1 f1       	breq	.+104    	; 0x1bd0 <spi_FlashWrite+0x122>
		{
			if (spi_FlashWriteToPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    1b68:	98 89       	ldd	r25, Y+16	; 0x10
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	49 2f       	mov	r20, r25
    1b6e:	48 1b       	sub	r20, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b78:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b7a:	28 0f       	add	r18, r24
    1b7c:	39 1f       	adc	r19, r25
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	9d 81       	ldd	r25, Y+5	; 0x05
    1b82:	ae 81       	ldd	r26, Y+6	; 0x06
    1b84:	bf 81       	ldd	r27, Y+7	; 0x07
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	a1 1d       	adc	r26, r1
    1b8a:	b1 1d       	adc	r27, r1
    1b8c:	04 2f       	mov	r16, r20
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	c4 de       	rcall	.-632    	; 0x1920 <spi_FlashWriteToPage>
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	88 89       	ldd	r24, Y+16	; 0x10
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	ba 01       	movw	r22, r20
    1baa:	68 1b       	sub	r22, r24
    1bac:	79 0b       	sbc	r23, r25
    1bae:	cb 01       	movw	r24, r22
    1bb0:	28 17       	cp	r18, r24
    1bb2:	39 07       	cpc	r19, r25
    1bb4:	19 f4       	brne	.+6      	; 0x1bbc <spi_FlashWrite+0x10e>
			{
				// success
				ret = numBytes;
    1bb6:	88 89       	ldd	r24, Y+16	; 0x10
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	16 c0       	rjmp	.+44     	; 0x1be8 <spi_FlashWrite+0x13a>
			}
			else
				printf_P(PSTR("spi_FlashWrite: 2nd page write failed\n"));
    1bbc:	8f e2       	ldi	r24, 0x2F	; 47
    1bbe:	94 e0       	ldi	r25, 0x04	; 4
    1bc0:	29 2f       	mov	r18, r25
    1bc2:	2f 93       	push	r18
    1bc4:	8f 93       	push	r24
    1bc6:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0c c0       	rjmp	.+24     	; 0x1be8 <spi_FlashWrite+0x13a>
		}
		else
		{
			// success
			ret = numBytes;
    1bd0:	88 89       	ldd	r24, Y+16	; 0x10
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <spi_FlashWrite+0x13a>
		}
	}
	else
		printf_P(PSTR("spi_FlashWrite: 1st page write failed\n"));
    1bd6:	86 e5       	ldi	r24, 0x56	; 86
    1bd8:	94 e0       	ldi	r25, 0x04	; 4
    1bda:	29 2f       	mov	r18, r25
    1bdc:	2f 93       	push	r18
    1bde:	8f 93       	push	r24
    1be0:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0

	return ret;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bea:	60 96       	adiw	r28, 0x10	; 16
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <spi_FlashReadFromPage>:
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	62 97       	sbiw	r28, 0x12	; 18
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	6a 87       	std	Y+10, r22	; 0x0a
    1c18:	7b 87       	std	Y+11, r23	; 0x0b
    1c1a:	8c 87       	std	Y+12, r24	; 0x0c
    1c1c:	9d 87       	std	Y+13, r25	; 0x0d
    1c1e:	5f 87       	std	Y+15, r21	; 0x0f
    1c20:	4e 87       	std	Y+14, r20	; 0x0e
    1c22:	39 8b       	std	Y+17, r19	; 0x11
    1c24:	28 8b       	std	Y+16, r18	; 0x10
    1c26:	0a 8b       	std	Y+18, r16	; 0x12
	uint16_t ret = 0;
    1c28:	1a 82       	std	Y+2, r1	; 0x02
    1c2a:	19 82       	std	Y+1, r1	; 0x01
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
    1c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c30:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c32:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c34:	8c 83       	std	Y+4, r24	; 0x04
    1c36:	9d 83       	std	Y+5, r25	; 0x05
    1c38:	ae 83       	std	Y+6, r26	; 0x06
    1c3a:	bf 83       	std	Y+7, r27	; 0x07
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    1c3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c46:	82 0f       	add	r24, r18
    1c48:	93 1f       	adc	r25, r19
    1c4a:	81 38       	cpi	r24, 0x81	; 129
    1c4c:	98 40       	sbci	r25, 0x08	; 8
    1c4e:	08 f0       	brcs	.+2      	; 0x1c52 <spi_FlashReadFromPage+0x54>
    1c50:	4e c0       	rjmp	.+156    	; 0x1cee <spi_FlashReadFromPage+0xf0>
	{
		if (spi_FlashWaitUntilReady())
    1c52:	1c dd       	rcall	.-1480   	; 0x168c <spi_FlashWaitUntilReady>
    1c54:	88 23       	and	r24, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <spi_FlashReadFromPage+0x5c>
    1c58:	40 c0       	rjmp	.+128    	; 0x1cda <spi_FlashReadFromPage+0xdc>
		{
			selectFlash();
    1c5a:	c1 dc       	rcall	.-1662   	; 0x15de <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    1c5c:	83 e1       	ldi	r24, 0x13	; 19
    1c5e:	6a d2       	rcall	.+1236   	; 0x2134 <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	68 d2       	rcall	.+1232   	; 0x2134 <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
			spiTransferByte(pageAddress.byte[0]);
    1c66:	66 d2       	rcall	.+1228   	; 0x2134 <spiTransferByte>
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	64 d2       	rcall	.+1224   	; 0x2134 <spiTransferByte>
			deSelectFlash();
    1c6c:	be dc       	rcall	.-1668   	; 0x15ea <deSelectFlash>
    1c6e:	0e dd       	rcall	.-1508   	; 0x168c <spi_FlashWaitUntilReady>
			if (spi_FlashWaitUntilReady())
    1c70:	88 23       	and	r24, r24
    1c72:	49 f1       	breq	.+82     	; 0x1cc6 <spi_FlashReadFromPage+0xc8>
			{
				union twoBytes addrInPage;
				addrInPage.word = address;
    1c74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c76:	9f 85       	ldd	r25, Y+15	; 0x0f
				selectFlash();
    1c78:	99 87       	std	Y+9, r25	; 0x09
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
    1c7a:	88 87       	std	Y+8, r24	; 0x08
    1c7c:	b0 dc       	rcall	.-1696   	; 0x15de <selectFlash>
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
				spiTransferByte(addrInPage.byte[1]);
    1c80:	59 d2       	rcall	.+1202   	; 0x2134 <spiTransferByte>
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	57 d2       	rcall	.+1198   	; 0x2134 <spiTransferByte>
				spiTransferByte(addrInPage.byte[0]);
    1c86:	88 85       	ldd	r24, Y+8	; 0x08
    1c88:	55 d2       	rcall	.+1194   	; 0x2134 <spiTransferByte>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
				spiTransferByte(0);  // dummy byte required
    1c8c:	53 d2       	rcall	.+1190   	; 0x2134 <spiTransferByte>
    1c8e:	1b 82       	std	Y+3, r1	; 0x03
				for (uint8_t i = 0; i < nbytes; i++)
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <spi_FlashReadFromPage+0xb2>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
				{
					buffer[i] = spiTransferByte(0);
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	28 89       	ldd	r18, Y+16	; 0x10
    1c9a:	39 89       	ldd	r19, Y+17	; 0x11
    1c9c:	89 01       	movw	r16, r18
    1c9e:	08 0f       	add	r16, r24
    1ca0:	19 1f       	adc	r17, r25
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	47 d2       	rcall	.+1166   	; 0x2134 <spiTransferByte>
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	80 83       	st	Z, r24
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
				selectFlash();
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
				spiTransferByte(addrInPage.byte[1]);
				spiTransferByte(addrInPage.byte[0]);
				spiTransferByte(0);  // dummy byte required
				for (uint8_t i = 0; i < nbytes; i++)
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb4:	98 17       	cp	r25, r24
    1cb6:	68 f3       	brcs	.-38     	; 0x1c92 <spi_FlashReadFromPage+0x94>
    1cb8:	98 dc       	rcall	.-1744   	; 0x15ea <deSelectFlash>
				{
					buffer[i] = spiTransferByte(0);
				}
				deSelectFlash();
    1cba:	8a 89       	ldd	r24, Y+18	; 0x12
    1cbc:	88 2f       	mov	r24, r24
				ret = nbytes;
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	1d c0       	rjmp	.+58     	; 0x1d00 <spi_FlashReadFromPage+0x102>
    1cc6:	8d e7       	ldi	r24, 0x7D	; 125
    1cc8:	94 e0       	ldi	r25, 0x04	; 4
			}
			else
				printf_P(PSTR("spi_FlashReadFromPage: Flash never ready after page read\n"));
    1cca:	29 2f       	mov	r18, r25
    1ccc:	2f 93       	push	r18
    1cce:	8f 93       	push	r24
    1cd0:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	13 c0       	rjmp	.+38     	; 0x1d00 <spi_FlashReadFromPage+0x102>
    1cda:	87 eb       	ldi	r24, 0xB7	; 183
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
		}
		else
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
    1cde:	29 2f       	mov	r18, r25
    1ce0:	2f 93       	push	r18
    1ce2:	8f 93       	push	r24
    1ce4:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <spi_FlashReadFromPage+0x102>
    1cee:	81 ee       	ldi	r24, 0xE1	; 225
    1cf0:	94 e0       	ldi	r25, 0x04	; 4
	}
	else
		printf_P(PSTR("spi_FlashReadFromPage: buffer crosses page boundary\n"));
    1cf2:	29 2f       	mov	r18, r25
    1cf4:	2f 93       	push	r18
    1cf6:	8f 93       	push	r24
    1cf8:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	62 96       	adiw	r28, 0x12	; 18
	return ret;
    1d04:	0f b6       	in	r0, 0x3f	; 63
}
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <spi_FlashRead>:
    1d18:	0f 93       	push	r16
    1d1a:	cf 93       	push	r28
*  Crosses page boundary if necessary
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    1d1c:	df 93       	push	r29
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	60 97       	sbiw	r28, 0x10	; 16
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	6a 87       	std	Y+10, r22	; 0x0a
    1d30:	7b 87       	std	Y+11, r23	; 0x0b
    1d32:	8c 87       	std	Y+12, r24	; 0x0c
    1d34:	9d 87       	std	Y+13, r25	; 0x0d
    1d36:	5f 87       	std	Y+15, r21	; 0x0f
    1d38:	4e 87       	std	Y+14, r20	; 0x0e
    1d3a:	28 8b       	std	Y+16, r18	; 0x10
	uint8_t ret = 0;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    1d3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d42:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d44:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d46:	20 e8       	ldi	r18, 0x80	; 128
    1d48:	38 e0       	ldi	r19, 0x08	; 8
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 2d 1c 	call	0x385a	; 0x385a <__udivmodsi4>
    1d56:	da 01       	movw	r26, r20
    1d58:	c9 01       	movw	r24, r18
    1d5a:	8c 83       	std	Y+4, r24	; 0x04
    1d5c:	9d 83       	std	Y+5, r25	; 0x05
    1d5e:	ae 83       	std	Y+6, r26	; 0x06
    1d60:	bf 83       	std	Y+7, r27	; 0x07
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    1d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d66:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d68:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d6a:	20 e8       	ldi	r18, 0x80	; 128
    1d6c:	38 e0       	ldi	r19, 0x08	; 8
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 2d 1c 	call	0x385a	; 0x385a <__udivmodsi4>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	99 87       	std	Y+9, r25	; 0x09
    1d80:	88 87       	std	Y+8, r24	; 0x08
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    1d82:	1b 82       	std	Y+3, r1	; 0x03
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    1d84:	88 89       	ldd	r24, Y+16	; 0x10
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	88 85       	ldd	r24, Y+8	; 0x08
    1d8c:	99 85       	ldd	r25, Y+9	; 0x09
    1d8e:	82 0f       	add	r24, r18
    1d90:	93 1f       	adc	r25, r19
    1d92:	81 38       	cpi	r24, 0x81	; 129
    1d94:	98 40       	sbci	r25, 0x08	; 8
    1d96:	40 f0       	brcs	.+16     	; 0x1da8 <spi_FlashRead+0x90>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    1d98:	98 85       	ldd	r25, Y+8	; 0x08
    1d9a:	88 89       	ldd	r24, Y+16	; 0x10
    1d9c:	89 0f       	add	r24, r25
    1d9e:	80 58       	subi	r24, 0x80	; 128
    1da0:	8a 83       	std	Y+2, r24	; 0x02
		crossesPage = true;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <spi_FlashRead+0x94>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    1da8:	88 89       	ldd	r24, Y+16	; 0x10
    1daa:	8a 83       	std	Y+2, r24	; 0x02
	}
    if (spi_FlashReadFromPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    1dac:	2e 85       	ldd	r18, Y+14	; 0x0e
    1dae:	3f 85       	ldd	r19, Y+15	; 0x0f
    1db0:	48 85       	ldd	r20, Y+8	; 0x08
    1db2:	59 85       	ldd	r21, Y+9	; 0x09
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	9d 81       	ldd	r25, Y+5	; 0x05
    1db8:	ae 81       	ldd	r26, Y+6	; 0x06
    1dba:	bf 81       	ldd	r27, Y+7	; 0x07
    1dbc:	0a 81       	ldd	r16, Y+2	; 0x02
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	1d df       	rcall	.-454    	; 0x1bfe <spi_FlashReadFromPage>
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	98 17       	cp	r25, r24
    1dca:	d1 f5       	brne	.+116    	; 0x1e40 <spi_FlashRead+0x128>
	{
		if (crossesPage)
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	88 23       	and	r24, r24
    1dd0:	a1 f1       	breq	.+104    	; 0x1e3a <spi_FlashRead+0x122>
		{
			if (spi_FlashReadFromPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    1dd2:	98 89       	ldd	r25, Y+16	; 0x10
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	49 2f       	mov	r20, r25
    1dd8:	48 1b       	sub	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1de2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1de4:	28 0f       	add	r18, r24
    1de6:	39 1f       	adc	r19, r25
    1de8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dea:	9d 81       	ldd	r25, Y+5	; 0x05
    1dec:	ae 81       	ldd	r26, Y+6	; 0x06
    1dee:	bf 81       	ldd	r27, Y+7	; 0x07
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	a1 1d       	adc	r26, r1
    1df4:	b1 1d       	adc	r27, r1
    1df6:	04 2f       	mov	r16, r20
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	fe de       	rcall	.-516    	; 0x1bfe <spi_FlashReadFromPage>
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	88 89       	ldd	r24, Y+16	; 0x10
    1e08:	48 2f       	mov	r20, r24
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	ba 01       	movw	r22, r20
    1e14:	68 1b       	sub	r22, r24
    1e16:	79 0b       	sbc	r23, r25
    1e18:	cb 01       	movw	r24, r22
    1e1a:	28 17       	cp	r18, r24
    1e1c:	39 07       	cpc	r19, r25
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <spi_FlashRead+0x10e>
			{
				// success
				ret = numBytes;
    1e20:	88 89       	ldd	r24, Y+16	; 0x10
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	16 c0       	rjmp	.+44     	; 0x1e52 <spi_FlashRead+0x13a>
			}
			else
				printf_P(PSTR("spi_FlashRead: 2nd page read failed\n"));
    1e26:	86 e1       	ldi	r24, 0x16	; 22
    1e28:	95 e0       	ldi	r25, 0x05	; 5
    1e2a:	29 2f       	mov	r18, r25
    1e2c:	2f 93       	push	r18
    1e2e:	8f 93       	push	r24
    1e30:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0c c0       	rjmp	.+24     	; 0x1e52 <spi_FlashRead+0x13a>
		}
		else
		{
			// success
			ret = numBytes;
    1e3a:	88 89       	ldd	r24, Y+16	; 0x10
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	09 c0       	rjmp	.+18     	; 0x1e52 <spi_FlashRead+0x13a>
		}
	}
	else
		printf_P(PSTR("spi_FlashRead: 1st page read failed\n"));
    1e40:	8b e3       	ldi	r24, 0x3B	; 59
    1e42:	95 e0       	ldi	r25, 0x05	; 5
    1e44:	29 2f       	mov	r18, r25
    1e46:	2f 93       	push	r18
    1e48:	8f 93       	push	r24
    1e4a:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0

	return ret;
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e54:	60 96       	adiw	r28, 0x10	; 16
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <spi_FlashEraseBlock>:
/***********************************
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	2a 97       	sbiw	r28, 0x0a	; 10
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	6f 83       	std	Y+7, r22	; 0x07
    1e7e:	78 87       	std	Y+8, r23	; 0x08
    1e80:	89 87       	std	Y+9, r24	; 0x09
    1e82:	9a 87       	std	Y+10, r25	; 0x0a
	uint16_t ret = 0;
    1e84:	1a 82       	std	Y+2, r1	; 0x02
    1e86:	19 82       	std	Y+1, r1	; 0x01
	union fourBytes blockAddress;
	
	blockAddress.word = baddress;
    1e88:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8a:	98 85       	ldd	r25, Y+8	; 0x08
    1e8c:	a9 85       	ldd	r26, Y+9	; 0x09
    1e8e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	9c 83       	std	Y+4, r25	; 0x04
    1e94:	ad 83       	std	Y+5, r26	; 0x05
    1e96:	be 83       	std	Y+6, r27	; 0x06
	
	if (baddress <  FLASH_NUM_BLOCKS)
    1e98:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9a:	98 85       	ldd	r25, Y+8	; 0x08
    1e9c:	a9 85       	ldd	r26, Y+9	; 0x09
    1e9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ea0:	81 15       	cp	r24, r1
    1ea2:	98 40       	sbci	r25, 0x08	; 8
    1ea4:	a1 05       	cpc	r26, r1
    1ea6:	b1 05       	cpc	r27, r1
    1ea8:	08 f0       	brcs	.+2      	; 0x1eac <spi_FlashEraseBlock+0x44>
    1eaa:	44 c0       	rjmp	.+136    	; 0x1f34 <spi_FlashEraseBlock+0xcc>
	{
		if (spi_FlashWaitUntilReady())
    1eac:	ef db       	rcall	.-2082   	; 0x168c <spi_FlashWaitUntilReady>
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <spi_FlashEraseBlock+0x4c>
    1eb2:	36 c0       	rjmp	.+108    	; 0x1f20 <spi_FlashEraseBlock+0xb8>
		{
			if (spi_FlashEnableWrite())
    1eb4:	dd dc       	rcall	.-1606   	; 0x1870 <spi_FlashEnableWrite>
    1eb6:	88 23       	and	r24, r24
    1eb8:	49 f1       	breq	.+82     	; 0x1f0c <spi_FlashEraseBlock+0xa4>
			{
				selectFlash();
    1eba:	91 db       	rcall	.-2270   	; 0x15de <selectFlash>
				spiTransferByte(FLASH_BLOCK_ERASE);
    1ebc:	88 ed       	ldi	r24, 0xD8	; 216
    1ebe:	3a d1       	rcall	.+628    	; 0x2134 <spiTransferByte>
				spiTransferByte(blockAddress.byte[2]);
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	38 d1       	rcall	.+624    	; 0x2134 <spiTransferByte>
				spiTransferByte(blockAddress.byte[1]);
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	36 d1       	rcall	.+620    	; 0x2134 <spiTransferByte>
				spiTransferByte(blockAddress.byte[0]);
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	34 d1       	rcall	.+616    	; 0x2134 <spiTransferByte>
				deSelectFlash();
    1ecc:	8e db       	rcall	.-2276   	; 0x15ea <deSelectFlash>
    1ece:	de db       	rcall	.-2116   	; 0x168c <spi_FlashWaitUntilReady>
				if (spi_FlashWaitUntilReady())
    1ed0:	88 23       	and	r24, r24
    1ed2:	91 f0       	breq	.+36     	; 0x1ef8 <spi_FlashEraseBlock+0x90>
    1ed4:	f9 dc       	rcall	.-1550   	; 0x18c8 <spi_FlashDisableWrite>
    1ed6:	88 23       	and	r24, r24
				{
					if (spi_FlashDisableWrite())
    1ed8:	29 f0       	breq	.+10     	; 0x1ee4 <spi_FlashEraseBlock+0x7c>
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9a 83       	std	Y+2, r25	; 0x02
						ret = 1;
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	31 c0       	rjmp	.+98     	; 0x1f46 <spi_FlashEraseBlock+0xde>
    1ee4:	80 e6       	ldi	r24, 0x60	; 96
    1ee6:	95 e0       	ldi	r25, 0x05	; 5
    1ee8:	29 2f       	mov	r18, r25
					else
						printf_P(PSTR("spi_FlashEraseBlock: Write diasble failed\n"));
    1eea:	2f 93       	push	r18
    1eec:	8f 93       	push	r24
    1eee:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	27 c0       	rjmp	.+78     	; 0x1f46 <spi_FlashEraseBlock+0xde>
    1ef8:	8b e8       	ldi	r24, 0x8B	; 139
    1efa:	95 e0       	ldi	r25, 0x05	; 5
    1efc:	29 2f       	mov	r18, r25
				}
				else
					printf_P(PSTR("spi_FlashEraseBlock: Flash never ready after block erase\n"));
    1efe:	2f 93       	push	r18
    1f00:	8f 93       	push	r24
    1f02:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	1d c0       	rjmp	.+58     	; 0x1f46 <spi_FlashEraseBlock+0xde>
    1f0c:	85 ec       	ldi	r24, 0xC5	; 197
    1f0e:	95 e0       	ldi	r25, 0x05	; 5
    1f10:	29 2f       	mov	r18, r25
			}
			else
				printf_P(PSTR("spi_FlashEraseBlock: Flash won't enable write\n"));
    1f12:	2f 93       	push	r18
    1f14:	8f 93       	push	r24
    1f16:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	13 c0       	rjmp	.+38     	; 0x1f46 <spi_FlashEraseBlock+0xde>
    1f20:	84 ef       	ldi	r24, 0xF4	; 244
    1f22:	95 e0       	ldi	r25, 0x05	; 5
    1f24:	29 2f       	mov	r18, r25

		}
		else
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
    1f26:	2f 93       	push	r18
    1f28:	8f 93       	push	r24
    1f2a:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	09 c0       	rjmp	.+18     	; 0x1f46 <spi_FlashEraseBlock+0xde>
    1f34:	8c e1       	ldi	r24, 0x1C	; 28
    1f36:	96 e0       	ldi	r25, 0x06	; 6
    1f38:	29 2f       	mov	r18, r25
	}
	else
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
    1f3a:	2f 93       	push	r18
    1f3c:	8f 93       	push	r24
    1f3e:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	2a 96       	adiw	r28, 0x0a	; 10
    1f4a:	0f b6       	in	r0, 0x3f	; 63
	return ret;
    1f4c:	f8 94       	cli
}
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	08 95       	ret

00001f5a <spi_FlashEraseAllBlocks>:
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	cd b7       	in	r28, 0x3d	; 61

uint8_t spi_FlashEraseAllBlocks()
{
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	29 97       	sbiw	r28, 0x09	; 9
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
	uint8_t ret = true;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	89 83       	std	Y+1, r24	; 0x01
	uint16_t blockNum = 0;
    1f72:	1b 82       	std	Y+3, r1	; 0x03
    1f74:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t blockAddr;
	uint16_t numBlocks = FLASH_NUM_BLOCKS;
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	98 e0       	ldi	r25, 0x08	; 8
    1f7a:	9d 83       	std	Y+5, r25	; 0x05
    1f7c:	8c 83       	std	Y+4, r24	; 0x04
	
	spi_FlashReset();
    1f7e:	4b d0       	rcall	.+150    	; 0x2016 <spi_FlashReset>
	spi_FlashUnlockAllBlocks();
    1f80:	54 dc       	rcall	.-1880   	; 0x182a <spi_FlashUnlockAllBlocks>
    1f82:	1b 82       	std	Y+3, r1	; 0x03
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1f84:	1a 82       	std	Y+2, r1	; 0x02
    1f86:	36 c0       	rjmp	.+108    	; 0x1ff4 <spi_FlashEraseAllBlocks+0x9a>
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		blockAddr = blockNum;
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	cc 01       	movw	r24, r24
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	8e 83       	std	Y+6, r24	; 0x06
    1f94:	9f 83       	std	Y+7, r25	; 0x07
    1f96:	a8 87       	std	Y+8, r26	; 0x08
    1f98:	b9 87       	std	Y+9, r27	; 0x09
    1f9a:	83 e5       	ldi	r24, 0x53	; 83
		printf_P(PSTR("Erasing block %d\n"),blockNum);
    1f9c:	96 e0       	ldi	r25, 0x06	; 6
    1f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa0:	2f 93       	push	r18
    1fa2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa4:	2f 93       	push	r18
    1fa6:	29 2f       	mov	r18, r25
    1fa8:	2f 93       	push	r18
    1faa:	8f 93       	push	r24
    1fac:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
		if (!spi_FlashEraseBlock(blockAddr))
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	a8 85       	ldd	r26, Y+8	; 0x08
    1fbe:	b9 85       	ldd	r27, Y+9	; 0x09
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	51 df       	rcall	.-350    	; 0x1e68 <spi_FlashEraseBlock>
    1fc6:	88 23       	and	r24, r24
    1fc8:	81 f4       	brne	.+32     	; 0x1fea <spi_FlashEraseAllBlocks+0x90>
    1fca:	85 e6       	ldi	r24, 0x65	; 101
		{
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
    1fcc:	96 e0       	ldi	r25, 0x06	; 6
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	2f 93       	push	r18
    1fd2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fd4:	2f 93       	push	r18
    1fd6:	29 2f       	mov	r18, r25
    1fd8:	2f 93       	push	r18
    1fda:	8f 93       	push	r24
    1fdc:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <printf_P>
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	19 82       	std	Y+1, r1	; 0x01
			ret = false;
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
	uint16_t numBlocks = FLASH_NUM_BLOCKS;
	
	spi_FlashReset();
	spi_FlashUnlockAllBlocks();
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	9b 83       	std	Y+3, r25	; 0x03
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
    1ff4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	28 17       	cp	r18, r24
    1ffe:	39 07       	cpc	r19, r25
    2000:	18 f2       	brcs	.-122    	; 0x1f88 <spi_FlashEraseAllBlocks+0x2e>
    2002:	89 81       	ldd	r24, Y+1	; 0x01
		{
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
			ret = false;
		}
	}
	return ret;
    2004:	29 96       	adiw	r28, 0x09	; 9
}
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <spi_FlashReset>:
    2016:	cf 93       	push	r28

uint8_t spi_FlashReset(void)
{
    2018:	df 93       	push	r29
    201a:	1f 92       	push	r1
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
		
	selectFlash();
    2020:	de da       	rcall	.-2628   	; 0x15de <selectFlash>
	spiTransferByte(FLASH_RESET);
    2022:	8f ef       	ldi	r24, 0xFF	; 255
	deSelectFlash();
    2024:	87 d0       	rcall	.+270    	; 0x2134 <spiTransferByte>
    2026:	e1 da       	rcall	.-2622   	; 0x15ea <deSelectFlash>
	status = spi_FlashGetStatusRegister();
    2028:	72 db       	rcall	.-2332   	; 0x170e <spi_FlashGetStatusRegister>
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
	printf("spi_Reset: status is 0x%02x\n", status);
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	29 2f       	mov	r18, r25
    2034:	2f 93       	push	r18
    2036:	8f 93       	push	r24
    2038:	86 e1       	ldi	r24, 0x16	; 22
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	89 2f       	mov	r24, r25
    203e:	8f 93       	push	r24
    2040:	86 e1       	ldi	r24, 0x16	; 22
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	8f 93       	push	r24
    2046:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	89 81       	ldd	r24, Y+1	; 0x01
	
	return status; 
    2054:	0f 90       	pop	r0
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	08 95       	ret

0000205c <RTC_config>:
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	1f 92       	push	r1
    2064:	1f 92       	push	r1
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	85 e0       	ldi	r24, 0x05	; 5
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	8a ed       	ldi	r24, 0xDA	; 218
    2070:	95 e0       	ldi	r25, 0x05	; 5
    2072:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	29 c0       	rjmp	.+82     	; 0x20cc <RTC_config+0x70>
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	be 01       	movw	r22, r28
    207e:	6e 5f       	subi	r22, 0xFE	; 254
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	8f e0       	ldi	r24, 0x0F	; 15
    2084:	3f d2       	rcall	.+1150   	; 0x2504 <spi_RTC_Read>
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	85 30       	cpi	r24, 0x05	; 5
    208a:	11 f1       	breq	.+68     	; 0x20d0 <RTC_config+0x74>
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	be 01       	movw	r22, r28
    2090:	6f 5f       	subi	r22, 0xFF	; 255
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	8f e0       	ldi	r24, 0x0F	; 15
    2096:	20 d2       	rcall	.+1088   	; 0x24d8 <spi_RTC_Write>
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	1f 92       	push	r1
    209c:	8f 93       	push	r24
    209e:	1f 92       	push	r1
    20a0:	1f 93       	push	r17
    20a2:	8b ee       	ldi	r24, 0xEB	; 235
    20a4:	95 e0       	ldi	r25, 0x05	; 5
    20a6:	9f 93       	push	r25
    20a8:	8f 93       	push	r24
    20aa:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	1f 92       	push	r1
    20b2:	8f 93       	push	r24
    20b4:	8c ef       	ldi	r24, 0xFC	; 252
    20b6:	95 e0       	ldi	r25, 0x05	; 5
    20b8:	9f 93       	push	r25
    20ba:	8f 93       	push	r24
    20bc:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    20c0:	1f 5f       	subi	r17, 0xFF	; 255
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	14 31       	cpi	r17, 0x14	; 20
    20ce:	a8 f2       	brcs	.-86     	; 0x207a <RTC_config+0x1e>
    20d0:	14 31       	cpi	r17, 0x14	; 20
    20d2:	20 f0       	brcs	.+8      	; 0x20dc <RTC_config+0x80>
    20d4:	8b e0       	ldi	r24, 0x0B	; 11
    20d6:	96 e0       	ldi	r25, 0x06	; 6
    20d8:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	08 95       	ret

000020e8 <RTC_readCLKF>:
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	1f 92       	push	r1
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	be 01       	movw	r22, r28
    20f6:	6f 5f       	subi	r22, 0xFF	; 255
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	8f e0       	ldi	r24, 0x0F	; 15
    20fc:	03 d2       	rcall	.+1030   	; 0x2504 <spi_RTC_Read>
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	1f 92       	push	r1
    2102:	8f 93       	push	r24
    2104:	82 e3       	ldi	r24, 0x32	; 50
    2106:	96 e0       	ldi	r25, 0x06	; 6
    2108:	9f 93       	push	r25
    210a:	8f 93       	push	r24
    210c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <init_spi>:
    2120:	1d bc       	out	0x2d, r1	; 45
    2122:	81 e5       	ldi	r24, 0x51	; 81
    2124:	8c bd       	out	0x2c, r24	; 44
    2126:	61 da       	rcall	.-2878   	; 0x15ea <deSelectFlash>
    2128:	32 da       	rcall	.-2972   	; 0x158e <deSelectFRAM>
    212a:	3b da       	rcall	.-2954   	; 0x15a2 <deSelectOpticsDAC>
    212c:	64 da       	rcall	.-2872   	; 0x15f6 <deSelectRTC>
    212e:	51 da       	rcall	.-2910   	; 0x15d2 <deSelectBuckCtrlDAC>
    2130:	44 ca       	rjmp	.-2936   	; 0x15ba <deSelectADC2518>
    2132:	08 95       	ret

00002134 <spiTransferByte>:
    2134:	8e bd       	out	0x2e, r24	; 46
    2136:	0d b4       	in	r0, 0x2d	; 45
    2138:	07 fe       	sbrs	r0, 7
    213a:	fd cf       	rjmp	.-6      	; 0x2136 <spiTransferByte+0x2>
    213c:	8e b5       	in	r24, 0x2e	; 46
    213e:	08 95       	ret

00002140 <spiSendBytes>:
    2140:	fc 01       	movw	r30, r24
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	0a c0       	rjmp	.+20     	; 0x215c <spiSendBytes+0x1c>
    2148:	cf 01       	movw	r24, r30
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	40 81       	ld	r20, Z
    214e:	4e bd       	out	0x2e, r20	; 46
    2150:	0d b4       	in	r0, 0x2d	; 45
    2152:	07 fe       	sbrs	r0, 7
    2154:	fd cf       	rjmp	.-6      	; 0x2150 <spiSendBytes+0x10>
    2156:	2f 5f       	subi	r18, 0xFF	; 255
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	fc 01       	movw	r30, r24
    215c:	26 17       	cp	r18, r22
    215e:	37 07       	cpc	r19, r23
    2160:	98 f3       	brcs	.-26     	; 0x2148 <spiSendBytes+0x8>
    2162:	08 95       	ret

00002164 <spiGetBytes>:
    2164:	fc 01       	movw	r30, r24
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	09 c0       	rjmp	.+18     	; 0x217e <spiGetBytes+0x1a>
    216c:	1e bc       	out	0x2e, r1	; 46
    216e:	0d b4       	in	r0, 0x2d	; 45
    2170:	07 fe       	sbrs	r0, 7
    2172:	fd cf       	rjmp	.-6      	; 0x216e <spiGetBytes+0xa>
    2174:	8e b5       	in	r24, 0x2e	; 46
    2176:	80 83       	st	Z, r24
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	31 96       	adiw	r30, 0x01	; 1
    217e:	26 17       	cp	r18, r22
    2180:	37 07       	cpc	r19, r23
    2182:	a0 f3       	brcs	.-24     	; 0x216c <spiGetBytes+0x8>
    2184:	08 95       	ret

00002186 <spiSend2ByteBigEndian>:
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	1f 92       	push	r1
    218c:	1f 92       	push	r1
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	8e bd       	out	0x2e, r24	; 46
    219a:	0d b4       	in	r0, 0x2d	; 45
    219c:	07 fe       	sbrs	r0, 7
    219e:	fd cf       	rjmp	.-6      	; 0x219a <spiSend2ByteBigEndian+0x14>
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	8e bd       	out	0x2e, r24	; 46
    21a4:	0d b4       	in	r0, 0x2d	; 45
    21a6:	07 fe       	sbrs	r0, 7
    21a8:	fd cf       	rjmp	.-6      	; 0x21a4 <spiSend2ByteBigEndian+0x1e>
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <spi_buckCtrlDac>:
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	eb 01       	movw	r28, r22
    21c0:	18 2f       	mov	r17, r24
    21c2:	17 70       	andi	r17, 0x07	; 7
    21c4:	90 e1       	ldi	r25, 0x10	; 16
    21c6:	19 9f       	mul	r17, r25
    21c8:	90 01       	movw	r18, r0
    21ca:	11 24       	eor	r1, r1
    21cc:	e7 2e       	mov	r14, r23
    21ce:	ff 24       	eor	r15, r15
    21d0:	ab 01       	movw	r20, r22
    21d2:	55 27       	eor	r21, r21
    21d4:	5f 93       	push	r21
    21d6:	4f 93       	push	r20
    21d8:	2e 29       	or	r18, r14
    21da:	3f 29       	or	r19, r15
    21dc:	3f 93       	push	r19
    21de:	2f 93       	push	r18
    21e0:	df 93       	push	r29
    21e2:	6f 93       	push	r22
    21e4:	1f 92       	push	r1
    21e6:	8f 93       	push	r24
    21e8:	8a e4       	ldi	r24, 0x4A	; 74
    21ea:	96 e0       	ldi	r25, 0x06	; 6
    21ec:	9f 93       	push	r25
    21ee:	8f 93       	push	r24
    21f0:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    21f4:	e8 d9       	rcall	.-3120   	; 0x15c6 <selectBuckCtrlDAC>
    21f6:	81 2f       	mov	r24, r17
    21f8:	82 95       	swap	r24
    21fa:	80 7f       	andi	r24, 0xF0	; 240
    21fc:	8e 29       	or	r24, r14
    21fe:	9a df       	rcall	.-204    	; 0x2134 <spiTransferByte>
    2200:	8c 2f       	mov	r24, r28
    2202:	98 df       	rcall	.-208    	; 0x2134 <spiTransferByte>
    2204:	e6 d9       	rcall	.-3124   	; 0x15d2 <deSelectBuckCtrlDAC>
    2206:	8d b7       	in	r24, 0x3d	; 61
    2208:	9e b7       	in	r25, 0x3e	; 62
    220a:	0a 96       	adiw	r24, 0x0a	; 10
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	9e bf       	out	0x3e, r25	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	8d bf       	out	0x3d, r24	; 61
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	08 95       	ret

00002222 <spi_OpticsDAC>:
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	eb 01       	movw	r28, r22
    222e:	18 2f       	mov	r17, r24
    2230:	17 70       	andi	r17, 0x07	; 7
    2232:	90 e1       	ldi	r25, 0x10	; 16
    2234:	19 9f       	mul	r17, r25
    2236:	90 01       	movw	r18, r0
    2238:	11 24       	eor	r1, r1
    223a:	e7 2e       	mov	r14, r23
    223c:	ff 24       	eor	r15, r15
    223e:	ab 01       	movw	r20, r22
    2240:	55 27       	eor	r21, r21
    2242:	5f 93       	push	r21
    2244:	4f 93       	push	r20
    2246:	2e 29       	or	r18, r14
    2248:	3f 29       	or	r19, r15
    224a:	3f 93       	push	r19
    224c:	2f 93       	push	r18
    224e:	df 93       	push	r29
    2250:	6f 93       	push	r22
    2252:	1f 92       	push	r1
    2254:	8f 93       	push	r24
    2256:	8b e7       	ldi	r24, 0x7B	; 123
    2258:	96 e0       	ldi	r25, 0x06	; 6
    225a:	9f 93       	push	r25
    225c:	8f 93       	push	r24
    225e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2262:	99 d9       	rcall	.-3278   	; 0x1596 <selectOpticsDAC>
    2264:	81 2f       	mov	r24, r17
    2266:	82 95       	swap	r24
    2268:	80 7f       	andi	r24, 0xF0	; 240
    226a:	8e 29       	or	r24, r14
    226c:	63 df       	rcall	.-314    	; 0x2134 <spiTransferByte>
    226e:	8c 2f       	mov	r24, r28
    2270:	61 df       	rcall	.-318    	; 0x2134 <spiTransferByte>
    2272:	97 d9       	rcall	.-3282   	; 0x15a2 <deSelectOpticsDAC>
    2274:	8d b7       	in	r24, 0x3d	; 61
    2276:	9e b7       	in	r25, 0x3e	; 62
    2278:	0a 96       	adiw	r24, 0x0a	; 10
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	9e bf       	out	0x3e, r25	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	8d bf       	out	0x3d, r24	; 61
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	08 95       	ret

00002290 <spi_OpticsDAC_BroadCast>:
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	c8 2f       	mov	r28, r24
    2296:	d9 2f       	mov	r29, r25
    2298:	8c ea       	ldi	r24, 0xAC	; 172
    229a:	96 e0       	ldi	r25, 0x06	; 6
    229c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    22a0:	7a d9       	rcall	.-3340   	; 0x1596 <selectOpticsDAC>
    22a2:	8d 2f       	mov	r24, r29
    22a4:	80 6c       	ori	r24, 0xC0	; 192
    22a6:	46 df       	rcall	.-372    	; 0x2134 <spiTransferByte>
    22a8:	8c 2f       	mov	r24, r28
    22aa:	44 df       	rcall	.-376    	; 0x2134 <spiTransferByte>
    22ac:	7a d9       	rcall	.-3340   	; 0x15a2 <deSelectOpticsDAC>
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <spi_OpticsBuckCtl_BroadCast>:
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	c8 2f       	mov	r28, r24
    22ba:	d9 2f       	mov	r29, r25
    22bc:	83 ec       	ldi	r24, 0xC3	; 195
    22be:	96 e0       	ldi	r25, 0x06	; 6
    22c0:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    22c4:	80 d9       	rcall	.-3328   	; 0x15c6 <selectBuckCtrlDAC>
    22c6:	8d 2f       	mov	r24, r29
    22c8:	80 6c       	ori	r24, 0xC0	; 192
    22ca:	34 df       	rcall	.-408    	; 0x2134 <spiTransferByte>
    22cc:	8c 2f       	mov	r24, r28
    22ce:	32 df       	rcall	.-412    	; 0x2134 <spiTransferByte>
    22d0:	80 d9       	rcall	.-3328   	; 0x15d2 <deSelectBuckCtrlDAC>
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	08 95       	ret

000022d8 <spi_FRAM_writeEnable>:
    22d8:	56 d9       	rcall	.-3412   	; 0x1586 <selectFRAM>
    22da:	86 e0       	ldi	r24, 0x06	; 6
    22dc:	2b df       	rcall	.-426    	; 0x2134 <spiTransferByte>
    22de:	57 c9       	rjmp	.-3410   	; 0x158e <deSelectFRAM>
    22e0:	08 95       	ret

000022e2 <FRAM_ReadStatusRegister>:
    22e2:	cf 93       	push	r28
    22e4:	50 d9       	rcall	.-3424   	; 0x1586 <selectFRAM>
    22e6:	85 e0       	ldi	r24, 0x05	; 5
    22e8:	25 df       	rcall	.-438    	; 0x2134 <spiTransferByte>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	23 df       	rcall	.-442    	; 0x2134 <spiTransferByte>
    22ee:	c8 2f       	mov	r28, r24
    22f0:	4e d9       	rcall	.-3428   	; 0x158e <deSelectFRAM>
    22f2:	1f 92       	push	r1
    22f4:	cf 93       	push	r28
    22f6:	8c e3       	ldi	r24, 0x3C	; 60
    22f8:	98 e0       	ldi	r25, 0x08	; 8
    22fa:	9f 93       	push	r25
    22fc:	8f 93       	push	r24
    22fe:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	8c 2f       	mov	r24, r28
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <spi_FRAM_write>:
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	8c 01       	movw	r16, r24
    231e:	7b 01       	movw	r14, r22
    2320:	ea 01       	movw	r28, r20
    2322:	84 0f       	add	r24, r20
    2324:	95 1f       	adc	r25, r21
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	90 42       	sbci	r25, 0x20	; 32
    232a:	20 f0       	brcs	.+8      	; 0x2334 <spi_FRAM_write+0x24>
    232c:	89 ed       	ldi	r24, 0xD9	; 217
    232e:	96 e0       	ldi	r25, 0x06	; 6
    2330:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    2334:	d1 df       	rcall	.-94     	; 0x22d8 <spi_FRAM_writeEnable>
    2336:	27 d9       	rcall	.-3506   	; 0x1586 <selectFRAM>
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	fc de       	rcall	.-520    	; 0x2134 <spiTransferByte>
    233c:	c8 01       	movw	r24, r16
    233e:	23 df       	rcall	.-442    	; 0x2186 <spiSend2ByteBigEndian>
    2340:	be 01       	movw	r22, r28
    2342:	c7 01       	movw	r24, r14
    2344:	fd de       	rcall	.-518    	; 0x2140 <spiSendBytes>
    2346:	23 d9       	rcall	.-3514   	; 0x158e <deSelectFRAM>
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	08 95       	ret

00002356 <spi_FRAM_read>:
    2356:	cf 92       	push	r12
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	c8 2f       	mov	r28, r24
    2368:	d9 2f       	mov	r29, r25
    236a:	8b 01       	movw	r16, r22
    236c:	6a 01       	movw	r12, r20
    236e:	0b d9       	rcall	.-3562   	; 0x1586 <selectFRAM>
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	e0 de       	rcall	.-576    	; 0x2134 <spiTransferByte>
    2374:	8d 2f       	mov	r24, r29
    2376:	de de       	rcall	.-580    	; 0x2134 <spiTransferByte>
    2378:	8c 2f       	mov	r24, r28
    237a:	dc de       	rcall	.-584    	; 0x2134 <spiTransferByte>
    237c:	c0 e0       	ldi	r28, 0x00	; 0
    237e:	d0 e0       	ldi	r29, 0x00	; 0
    2380:	0a c0       	rjmp	.+20     	; 0x2396 <spi_FRAM_read+0x40>
    2382:	78 01       	movw	r14, r16
    2384:	8f ef       	ldi	r24, 0xFF	; 255
    2386:	e8 1a       	sub	r14, r24
    2388:	f8 0a       	sbc	r15, r24
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	d3 de       	rcall	.-602    	; 0x2134 <spiTransferByte>
    238e:	f8 01       	movw	r30, r16
    2390:	80 83       	st	Z, r24
    2392:	21 96       	adiw	r28, 0x01	; 1
    2394:	87 01       	movw	r16, r14
    2396:	cc 15       	cp	r28, r12
    2398:	dd 05       	cpc	r29, r13
    239a:	98 f3       	brcs	.-26     	; 0x2382 <spi_FRAM_read+0x2c>
    239c:	f8 d8       	rcall	.-3600   	; 0x158e <deSelectFRAM>
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	1f 91       	pop	r17
    23a4:	0f 91       	pop	r16
    23a6:	ff 90       	pop	r15
    23a8:	ef 90       	pop	r14
    23aa:	df 90       	pop	r13
    23ac:	cf 90       	pop	r12
    23ae:	08 95       	ret

000023b0 <read_FRAM_DeviceID>:
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <read_FRAM_DeviceID+0x6>
    23b6:	1f 92       	push	r1
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	e4 d8       	rcall	.-3640   	; 0x1586 <selectFRAM>
    23be:	8f ea       	ldi	r24, 0xAF	; 175
    23c0:	b9 de       	rcall	.-654    	; 0x2134 <spiTransferByte>
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	cc de       	rcall	.-616    	; 0x2164 <spiGetBytes>
    23cc:	e0 d8       	rcall	.-3648   	; 0x158e <deSelectFRAM>
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	2b 81       	ldd	r18, Y+3	; 0x03
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	1f 92       	push	r1
    23d8:	3f 93       	push	r19
    23da:	1f 92       	push	r1
    23dc:	2f 93       	push	r18
    23de:	1f 92       	push	r1
    23e0:	9f 93       	push	r25
    23e2:	1f 92       	push	r1
    23e4:	8f 93       	push	r24
    23e6:	8c ef       	ldi	r24, 0xFC	; 252
    23e8:	96 e0       	ldi	r25, 0x06	; 6
    23ea:	9f 93       	push	r25
    23ec:	8f 93       	push	r24
    23ee:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret

0000240a <wrFRAM>:
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	28 97       	sbiw	r28, 0x08	; 8
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	5c df       	rcall	.-328    	; 0x22d8 <spi_FRAM_writeEnable>
    2420:	8f e1       	ldi	r24, 0x1F	; 31
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	81 e4       	ldi	r24, 0x41	; 65
    2426:	8e 83       	std	Y+6, r24	; 0x06
    2428:	81 e8       	ldi	r24, 0x81	; 129
    242a:	8f 83       	std	Y+7, r24	; 0x07
    242c:	8a ef       	ldi	r24, 0xFA	; 250
    242e:	88 87       	std	Y+8, r24	; 0x08
    2430:	44 e0       	ldi	r20, 0x04	; 4
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	be 01       	movw	r22, r28
    2436:	6b 5f       	subi	r22, 0xFB	; 251
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	94 e0       	ldi	r25, 0x04	; 4
    243e:	68 df       	rcall	.-304    	; 0x2310 <spi_FRAM_write>
    2440:	44 e0       	ldi	r20, 0x04	; 4
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	be 01       	movw	r22, r28
    2446:	6f 5f       	subi	r22, 0xFF	; 255
    2448:	7f 4f       	sbci	r23, 0xFF	; 255
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	94 e0       	ldi	r25, 0x04	; 4
    244e:	83 df       	rcall	.-250    	; 0x2356 <spi_FRAM_read>
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	2b 81       	ldd	r18, Y+3	; 0x03
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	1f 92       	push	r1
    245a:	3f 93       	push	r19
    245c:	1f 92       	push	r1
    245e:	2f 93       	push	r18
    2460:	1f 92       	push	r1
    2462:	9f 93       	push	r25
    2464:	1f 92       	push	r1
    2466:	8f 93       	push	r24
    2468:	8f e0       	ldi	r24, 0x0F	; 15
    246a:	97 e0       	ldi	r25, 0x07	; 7
    246c:	9f 93       	push	r25
    246e:	8f 93       	push	r24
    2470:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	28 96       	adiw	r28, 0x08	; 8
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	08 95       	ret

00002490 <framSaveSerialNumber>:
    2490:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <serialNumber+0x1>
    2494:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <serialNumber>
    2498:	42 e0       	ldi	r20, 0x02	; 2
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	68 e1       	ldi	r22, 0x18	; 24
    249e:	79 e0       	ldi	r23, 0x09	; 9
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	35 cf       	rjmp	.-406    	; 0x2310 <spi_FRAM_write>
    24a6:	08 95       	ret

000024a8 <framReadSerialNumber>:
    24a8:	42 e0       	ldi	r20, 0x02	; 2
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	68 e1       	ldi	r22, 0x18	; 24
    24ae:	79 e0       	ldi	r23, 0x09	; 9
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	50 df       	rcall	.-352    	; 0x2356 <spi_FRAM_read>
    24b6:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <serialNumber+0x1>
    24ba:	8f 93       	push	r24
    24bc:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <serialNumber>
    24c0:	8f 93       	push	r24
    24c2:	8c e1       	ldi	r24, 0x1C	; 28
    24c4:	97 e0       	ldi	r25, 0x07	; 7
    24c6:	9f 93       	push	r25
    24c8:	8f 93       	push	r24
    24ca:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	08 95       	ret

000024d8 <spi_RTC_Write>:
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	d8 2f       	mov	r29, r24
    24e2:	8b 01       	movw	r16, r22
    24e4:	c4 2f       	mov	r28, r20
    24e6:	8d d8       	rcall	.-3814   	; 0x1602 <selectRTC>
    24e8:	8d 2f       	mov	r24, r29
    24ea:	80 62       	ori	r24, 0x20	; 32
    24ec:	23 de       	rcall	.-954    	; 0x2134 <spiTransferByte>
    24ee:	6c 2f       	mov	r22, r28
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	c8 01       	movw	r24, r16
    24f4:	25 de       	rcall	.-950    	; 0x2140 <spiSendBytes>
    24f6:	7f d8       	rcall	.-3842   	; 0x15f6 <deSelectRTC>
    24f8:	8c 2f       	mov	r24, r28
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <spi_RTC_Read>:
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	d8 2f       	mov	r29, r24
    250e:	8b 01       	movw	r16, r22
    2510:	c4 2f       	mov	r28, r20
    2512:	77 d8       	rcall	.-3858   	; 0x1602 <selectRTC>
    2514:	8d 2f       	mov	r24, r29
    2516:	80 6a       	ori	r24, 0xA0	; 160
    2518:	0d de       	rcall	.-998    	; 0x2134 <spiTransferByte>
    251a:	6c 2f       	mov	r22, r28
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	c8 01       	movw	r24, r16
    2520:	21 de       	rcall	.-958    	; 0x2164 <spiGetBytes>
    2522:	69 d8       	rcall	.-3886   	; 0x15f6 <deSelectRTC>
    2524:	8c 2f       	mov	r24, r28
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <getMuxConfiguration>:
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	1f 92       	push	r1
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	be 01       	movw	r22, r28
    2540:	6f 5f       	subi	r22, 0xFF	; 255
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	80 e7       	ldi	r24, 0x70	; 112
    2546:	80 d1       	rcall	.+768    	; 0x2848 <twi_read_bytes>
    2548:	89 2b       	or	r24, r25
    254a:	21 f0       	breq	.+8      	; 0x2554 <getMuxConfiguration+0x24>
    254c:	83 e2       	ldi	r24, 0x23	; 35
    254e:	97 e0       	ldi	r25, 0x07	; 7
    2550:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	0f 90       	pop	r0
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <setI2Cmux>:
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	1f 92       	push	r1
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	08 f0       	brcs	.+2      	; 0x2570 <setI2Cmux+0x12>
    256e:	4f c0       	rjmp	.+158    	; 0x260e <setI2Cmux+0xb0>
    2570:	1f 92       	push	r1
    2572:	8f 93       	push	r24
    2574:	8d e3       	ldi	r24, 0x3D	; 61
    2576:	97 e0       	ldi	r25, 0x07	; 7
    2578:	9f 93       	push	r25
    257a:	8f 93       	push	r24
    257c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	be 01       	movw	r22, r28
    2584:	6f 5f       	subi	r22, 0xFF	; 255
    2586:	7f 4f       	sbci	r23, 0xFF	; 255
    2588:	80 e7       	ldi	r24, 0x70	; 112
    258a:	e7 d0       	rcall	.+462    	; 0x275a <twi_write_bytes>
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	89 2b       	or	r24, r25
    2596:	09 f1       	breq	.+66     	; 0x25da <setI2Cmux+0x7c>
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	e8 2f       	mov	r30, r24
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	ea 53       	subi	r30, 0x3A	; 58
    25a0:	f8 4f       	sbci	r31, 0xF8	; 248
    25a2:	90 81       	ld	r25, Z
    25a4:	97 30       	cpi	r25, 0x07	; 7
    25a6:	58 f0       	brcs	.+22     	; 0x25be <setI2Cmux+0x60>
    25a8:	61 d0       	rcall	.+194    	; 0x266c <init_twi>
    25aa:	8f e4       	ldi	r24, 0x4F	; 79
    25ac:	97 e0       	ldi	r25, 0x07	; 7
    25ae:	9f 93       	push	r25
    25b0:	8f 93       	push	r24
    25b2:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	39 c0       	rjmp	.+114    	; 0x2630 <setI2Cmux+0xd2>
    25be:	1f 92       	push	r1
    25c0:	8f 93       	push	r24
    25c2:	84 e5       	ldi	r24, 0x54	; 84
    25c4:	97 e0       	ldi	r25, 0x07	; 7
    25c6:	9f 93       	push	r25
    25c8:	8f 93       	push	r24
    25ca:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	2b c0       	rjmp	.+86     	; 0x2630 <setI2Cmux+0xd2>
    25da:	aa df       	rcall	.-172    	; 0x2530 <getMuxConfiguration>
    25dc:	99 81       	ldd	r25, Y+1	; 0x01
    25de:	89 17       	cp	r24, r25
    25e0:	21 f1       	breq	.+72     	; 0x262a <setI2Cmux+0xcc>
    25e2:	86 e7       	ldi	r24, 0x76	; 118
    25e4:	97 e0       	ldi	r25, 0x07	; 7
    25e6:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	ea 53       	subi	r30, 0x3A	; 58
    25f0:	f8 4f       	sbci	r31, 0xF8	; 248
    25f2:	80 81       	ld	r24, Z
    25f4:	87 30       	cpi	r24, 0x07	; 7
    25f6:	d8 f0       	brcs	.+54     	; 0x262e <setI2Cmux+0xd0>
    25f8:	39 d0       	rcall	.+114    	; 0x266c <init_twi>
    25fa:	8e e9       	ldi	r24, 0x9E	; 158
    25fc:	97 e0       	ldi	r25, 0x07	; 7
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	11 c0       	rjmp	.+34     	; 0x2630 <setI2Cmux+0xd2>
    260e:	1f 92       	push	r1
    2610:	8f 93       	push	r24
    2612:	83 ea       	ldi	r24, 0xA3	; 163
    2614:	97 e0       	ldi	r25, 0x07	; 7
    2616:	9f 93       	push	r25
    2618:	8f 93       	push	r24
    261a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <setI2Cmux+0xd2>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <setI2Cmux+0xd2>
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	0f 90       	pop	r0
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <setStatus>:
    2638:	9f 93       	push	r25
    263a:	8f 93       	push	r24
    263c:	8a ec       	ldi	r24, 0xCA	; 202
    263e:	97 e0       	ldi	r25, 0x07	; 7
    2640:	9f 93       	push	r25
    2642:	8f 93       	push	r24
    2644:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	08 95       	ret

00002652 <showERRORcode>:
    2652:	1f 92       	push	r1
    2654:	8f 93       	push	r24
    2656:	8e ed       	ldi	r24, 0xDE	; 222
    2658:	97 e0       	ldi	r25, 0x07	; 7
    265a:	9f 93       	push	r25
    265c:	8f 93       	push	r24
    265e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	08 95       	ret

0000266c <init_twi>:
    266c:	84 e9       	ldi	r24, 0x94	; 148
    266e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2672:	eb e0       	ldi	r30, 0x0B	; 11
    2674:	f1 e0       	ldi	r31, 0x01	; 1
    2676:	80 81       	ld	r24, Z
    2678:	8f 7b       	andi	r24, 0xBF	; 191
    267a:	80 83       	st	Z, r24
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	05 c0       	rjmp	.+10     	; 0x268a <init_twi+0x1e>
    2680:	e3 e0       	ldi	r30, 0x03	; 3
    2682:	f8 e4       	ldi	r31, 0x48	; 72
    2684:	31 97       	sbiw	r30, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <init_twi+0x18>
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	84 31       	cpi	r24, 0x14	; 20
    268c:	c8 f3       	brcs	.-14     	; 0x2680 <init_twi+0x14>
    268e:	eb e0       	ldi	r30, 0x0B	; 11
    2690:	f1 e0       	ldi	r31, 0x01	; 1
    2692:	80 81       	ld	r24, Z
    2694:	80 64       	ori	r24, 0x40	; 64
    2696:	80 83       	st	Z, r24
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	05 c0       	rjmp	.+10     	; 0x26a6 <init_twi+0x3a>
    269c:	e3 e0       	ldi	r30, 0x03	; 3
    269e:	f8 e4       	ldi	r31, 0x48	; 72
    26a0:	31 97       	sbiw	r30, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <init_twi+0x34>
    26a4:	8f 5f       	subi	r24, 0xFF	; 255
    26a6:	84 31       	cpi	r24, 0x14	; 20
    26a8:	c8 f3       	brcs	.-14     	; 0x269c <init_twi+0x30>
    26aa:	eb e0       	ldi	r30, 0x0B	; 11
    26ac:	f1 e0       	ldi	r31, 0x01	; 1
    26ae:	80 81       	ld	r24, Z
    26b0:	8f 7b       	andi	r24, 0xBF	; 191
    26b2:	80 83       	st	Z, r24
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	05 c0       	rjmp	.+10     	; 0x26c2 <init_twi+0x56>
    26b8:	e3 e0       	ldi	r30, 0x03	; 3
    26ba:	f8 e4       	ldi	r31, 0x48	; 72
    26bc:	31 97       	sbiw	r30, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <init_twi+0x50>
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	84 31       	cpi	r24, 0x14	; 20
    26c4:	c8 f3       	brcs	.-14     	; 0x26b8 <init_twi+0x4c>
    26c6:	eb e0       	ldi	r30, 0x0B	; 11
    26c8:	f1 e0       	ldi	r31, 0x01	; 1
    26ca:	80 81       	ld	r24, Z
    26cc:	80 64       	ori	r24, 0x40	; 64
    26ce:	80 83       	st	Z, r24
    26d0:	e9 eb       	ldi	r30, 0xB9	; 185
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	8c 7f       	andi	r24, 0xFC	; 252
    26d8:	80 83       	st	Z, r24
    26da:	80 81       	ld	r24, Z
    26dc:	80 83       	st	Z, r24
    26de:	80 e1       	ldi	r24, 0x10	; 16
    26e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    26e4:	ec eb       	ldi	r30, 0xBC	; 188
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	84 60       	ori	r24, 0x04	; 4
    26ec:	80 83       	st	Z, r24
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <verbose>
    26f4:	08 95       	ret

000026f6 <twi_start>:
    26f6:	84 ea       	ldi	r24, 0xA4	; 164
    26f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    26fc:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    2700:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    2704:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2708:	88 23       	and	r24, r24
    270a:	34 f0       	brlt	.+12     	; 0x2718 <twi_start+0x22>
    270c:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2710:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2714:	4e 97       	sbiw	r24, 0x1e	; 30
    2716:	b0 f3       	brcs	.-20     	; 0x2704 <twi_start+0xe>
    2718:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    271c:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2720:	4e 97       	sbiw	r24, 0x1e	; 30
    2722:	30 f0       	brcs	.+12     	; 0x2730 <twi_start+0x3a>
    2724:	81 ef       	ldi	r24, 0xF1	; 241
    2726:	97 e0       	ldi	r25, 0x07	; 7
    2728:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	08 95       	ret
    2730:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2734:	88 7f       	andi	r24, 0xF8	; 248
    2736:	88 30       	cpi	r24, 0x08	; 8
    2738:	71 f0       	breq	.+28     	; 0x2756 <twi_start+0x60>
    273a:	1f 92       	push	r1
    273c:	8f 93       	push	r24
    273e:	88 e0       	ldi	r24, 0x08	; 8
    2740:	98 e0       	ldi	r25, 0x08	; 8
    2742:	9f 93       	push	r25
    2744:	8f 93       	push	r24
    2746:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	08 95       	ret
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	08 95       	ret

0000275a <twi_write_bytes>:
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	08 2f       	mov	r16, r24
    2764:	eb 01       	movw	r28, r22
    2766:	14 2f       	mov	r17, r20
    2768:	c6 df       	rcall	.-116    	; 0x26f6 <twi_start>
    276a:	81 11       	cpse	r24, r1
    276c:	66 c0       	rjmp	.+204    	; 0x283a <twi_write_bytes+0xe0>
    276e:	00 0f       	add	r16, r16
    2770:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2774:	84 e8       	ldi	r24, 0x84	; 132
    2776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    277a:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    277e:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    2782:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2786:	88 23       	and	r24, r24
    2788:	34 f0       	brlt	.+12     	; 0x2796 <twi_write_bytes+0x3c>
    278a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    278e:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2792:	4e 97       	sbiw	r24, 0x1e	; 30
    2794:	b0 f3       	brcs	.-20     	; 0x2782 <twi_write_bytes+0x28>
    2796:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    279a:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    279e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    27a2:	88 7f       	andi	r24, 0xF8	; 248
    27a4:	88 31       	cpi	r24, 0x18	; 24
    27a6:	09 f4       	brne	.+2      	; 0x27aa <twi_write_bytes+0x50>
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <twi_write_bytes+0xce>
    27aa:	84 e9       	ldi	r24, 0x94	; 148
    27ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    27b0:	80 e2       	ldi	r24, 0x20	; 32
    27b2:	4f df       	rcall	.-354    	; 0x2652 <showERRORcode>
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	42 c0       	rjmp	.+132    	; 0x283e <twi_write_bytes+0xe4>
    27ba:	ae 01       	movw	r20, r28
    27bc:	4f 5f       	subi	r20, 0xFF	; 255
    27be:	5f 4f       	sbci	r21, 0xFF	; 255
    27c0:	88 81       	ld	r24, Y
    27c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    27c6:	84 e8       	ldi	r24, 0x84	; 132
    27c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    27cc:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    27d0:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    27d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    27d8:	88 23       	and	r24, r24
    27da:	34 f0       	brlt	.+12     	; 0x27e8 <twi_write_bytes+0x8e>
    27dc:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    27e0:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    27e4:	4e 97       	sbiw	r24, 0x1e	; 30
    27e6:	b0 f3       	brcs	.-20     	; 0x27d4 <twi_write_bytes+0x7a>
    27e8:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    27ec:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    27f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    27f4:	88 7f       	andi	r24, 0xF8	; 248
    27f6:	88 32       	cpi	r24, 0x28	; 40
    27f8:	a1 f0       	breq	.+40     	; 0x2822 <twi_write_bytes+0xc8>
    27fa:	1f 92       	push	r1
    27fc:	8f 93       	push	r24
    27fe:	88 e2       	ldi	r24, 0x28	; 40
    2800:	98 e0       	ldi	r25, 0x08	; 8
    2802:	9f 93       	push	r25
    2804:	8f 93       	push	r24
    2806:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    280a:	84 e9       	ldi	r24, 0x94	; 148
    280c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2810:	80 e3       	ldi	r24, 0x30	; 48
    2812:	1f df       	rcall	.-450    	; 0x2652 <showERRORcode>
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e c0       	rjmp	.+28     	; 0x283e <twi_write_bytes+0xe4>
    2822:	2f 5f       	subi	r18, 0xFF	; 255
    2824:	ea 01       	movw	r28, r20
    2826:	01 c0       	rjmp	.+2      	; 0x282a <twi_write_bytes+0xd0>
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	21 17       	cp	r18, r17
    282c:	30 f2       	brcs	.-116    	; 0x27ba <twi_write_bytes+0x60>
    282e:	84 e9       	ldi	r24, 0x94	; 148
    2830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 c0       	rjmp	.+4      	; 0x283e <twi_write_bytes+0xe4>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <twi_read_bytes>:
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	f8 2e       	mov	r15, r24
    2854:	8b 01       	movw	r16, r22
    2856:	ea 01       	movw	r28, r20
    2858:	4e df       	rcall	.-356    	; 0x26f6 <twi_start>
    285a:	81 11       	cpse	r24, r1
    285c:	79 c0       	rjmp	.+242    	; 0x2950 <twi_read_bytes+0x108>
    285e:	8f 2d       	mov	r24, r15
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	81 60       	ori	r24, 0x01	; 1
    2868:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    286c:	84 e8       	ldi	r24, 0x84	; 132
    286e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2872:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    2876:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    287a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    287e:	88 23       	and	r24, r24
    2880:	34 f0       	brlt	.+12     	; 0x288e <twi_read_bytes+0x46>
    2882:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2886:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    288a:	4e 97       	sbiw	r24, 0x1e	; 30
    288c:	b0 f3       	brcs	.-20     	; 0x287a <twi_read_bytes+0x32>
    288e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2892:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2896:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    289a:	88 7f       	andi	r24, 0xF8	; 248
    289c:	80 34       	cpi	r24, 0x40	; 64
    289e:	09 f4       	brne	.+2      	; 0x28a2 <twi_read_bytes+0x5a>
    28a0:	4d c0       	rjmp	.+154    	; 0x293c <twi_read_bytes+0xf4>
    28a2:	88 e4       	ldi	r24, 0x48	; 72
    28a4:	d6 de       	rcall	.-596    	; 0x2652 <showERRORcode>
    28a6:	84 e9       	ldi	r24, 0x94	; 148
    28a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    28ac:	84 e4       	ldi	r24, 0x44	; 68
    28ae:	98 e0       	ldi	r25, 0x08	; 8
    28b0:	c3 de       	rcall	.-634    	; 0x2638 <setStatus>
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	4e c0       	rjmp	.+156    	; 0x2954 <twi_read_bytes+0x10c>
    28b8:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    28bc:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    28c0:	c1 30       	cpi	r28, 0x01	; 1
    28c2:	d1 05       	cpc	r29, r1
    28c4:	11 f4       	brne	.+4      	; 0x28ca <twi_read_bytes+0x82>
    28c6:	84 e8       	ldi	r24, 0x84	; 132
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <twi_read_bytes+0x84>
    28ca:	84 ec       	ldi	r24, 0xC4	; 196
    28cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    28d0:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    28d4:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    28d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    28dc:	88 23       	and	r24, r24
    28de:	34 f0       	brlt	.+12     	; 0x28ec <twi_read_bytes+0xa4>
    28e0:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    28e4:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    28e8:	4e 97       	sbiw	r24, 0x1e	; 30
    28ea:	b0 f3       	brcs	.-20     	; 0x28d8 <twi_read_bytes+0x90>
    28ec:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    28f0:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    28f4:	4e 97       	sbiw	r24, 0x1e	; 30
    28f6:	d8 f0       	brcs	.+54     	; 0x292e <twi_read_bytes+0xe6>
    28f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    28fc:	1f 92       	push	r1
    28fe:	8f 93       	push	r24
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	8d e4       	ldi	r24, 0x4D	; 77
    2906:	98 e0       	ldi	r25, 0x08	; 8
    2908:	9f 93       	push	r25
    290a:	8f 93       	push	r24
    290c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <printf>
    2910:	84 e9       	ldi	r24, 0x94	; 148
    2912:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2916:	84 e4       	ldi	r24, 0x44	; 68
    2918:	98 e0       	ldi	r25, 0x08	; 8
    291a:	8e de       	rcall	.-740    	; 0x2638 <setStatus>
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	13 c0       	rjmp	.+38     	; 0x2954 <twi_read_bytes+0x10c>
    292e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2932:	f8 01       	movw	r30, r16
    2934:	80 83       	st	Z, r24
    2936:	21 97       	sbiw	r28, 0x01	; 1
    2938:	0f 5f       	subi	r16, 0xFF	; 255
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	1c 16       	cp	r1, r28
    293e:	1d 06       	cpc	r1, r29
    2940:	0c f4       	brge	.+2      	; 0x2944 <twi_read_bytes+0xfc>
    2942:	ba cf       	rjmp	.-140    	; 0x28b8 <twi_read_bytes+0x70>
    2944:	84 e9       	ldi	r24, 0x94	; 148
    2946:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <twi_read_bytes+0x10c>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	08 95       	ret

00002960 <init_Ports>:
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	81 b9       	out	0x01, r24	; 1
    2964:	97 ef       	ldi	r25, 0xF7	; 247
    2966:	94 b9       	out	0x04, r25	; 4
    2968:	87 b9       	out	0x07, r24	; 7
    296a:	9b eb       	ldi	r25, 0xBB	; 187
    296c:	9a b9       	out	0x0a, r25	; 10
    296e:	9e e3       	ldi	r25, 0x3E	; 62
    2970:	9d b9       	out	0x0d, r25	; 13
    2972:	10 ba       	out	0x10, r1	; 16
    2974:	83 bb       	out	0x13, r24	; 19
    2976:	9f e7       	ldi	r25, 0x7F	; 127
    2978:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    297c:	92 e7       	ldi	r25, 0x72	; 114
    297e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
    2982:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    2986:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    298a:	88 b9       	out	0x08, r24	; 8
    298c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    2990:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <deSelectSDcard>
    2994:	08 95       	ret

00002996 <initialize>:
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	ec e0       	ldi	r30, 0x0C	; 12
    299c:	fa e0       	ldi	r31, 0x0A	; 10
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	92 e0       	ldi	r25, 0x02	; 2
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	93 83       	std	Z+3, r25	; 0x03
    29a8:	82 83       	std	Z+2, r24	; 0x02
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	b8 d0       	rcall	.+368    	; 0x2b1e <init_uart>
    29ae:	d8 df       	rcall	.-80     	; 0x2960 <init_Ports>
    29b0:	b7 db       	rcall	.-2194   	; 0x2120 <init_spi>
    29b2:	0e 94 76 06 	call	0xcec	; 0xcec <init_CountersIimers>
    29b6:	8f e0       	ldi	r24, 0x0F	; 15
    29b8:	9f e8       	ldi	r25, 0x8F	; 143
    29ba:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <hdwConfig+0x1>
    29be:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <hdwConfig>
    29c2:	c0 e0       	ldi	r28, 0x00	; 0
    29c4:	d0 e0       	ldi	r29, 0x00	; 0
    29c6:	05 c0       	rjmp	.+10     	; 0x29d2 <initialize+0x3c>
    29c8:	8e e2       	ldi	r24, 0x2E	; 46
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <putchar>
    29d0:	21 96       	adiw	r28, 0x01	; 1
    29d2:	c0 35       	cpi	r28, 0x50	; 80
    29d4:	d1 05       	cpc	r29, r1
    29d6:	c0 f3       	brcs	.-16     	; 0x29c8 <initialize+0x32>
    29d8:	8a e0       	ldi	r24, 0x0A	; 10
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <putchar>
    29e0:	3d db       	rcall	.-2438   	; 0x205c <RTC_config>
    29e2:	0e 94 af 06 	call	0xd5e	; 0xd5e <initADC2518>
    29e6:	42 de       	rcall	.-892    	; 0x266c <init_twi>
    29e8:	0e 94 3f 09 	call	0x127e	; 0x127e <initPressureSensors>
    29ec:	0e 94 67 08 	call	0x10ce	; 0x10ce <init_adc>
    29f0:	0e 94 3f 09 	call	0x127e	; 0x127e <initPressureSensors>
    29f4:	78 94       	sei
    29f6:	83 e8       	ldi	r24, 0x83	; 131
    29f8:	98 e0       	ldi	r25, 0x08	; 8
    29fa:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <main>:
    2a04:	c8 df       	rcall	.-112    	; 0x2996 <initialize>
    2a06:	84 e9       	ldi	r24, 0x94	; 148
    2a08:	98 e0       	ldi	r25, 0x08	; 8
    2a0a:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <puts>
    2a0e:	19 d2       	rcall	.+1074   	; 0x2e42 <doUart>
    2a10:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2a14:	88 23       	and	r24, r24
    2a16:	21 f0       	breq	.+8      	; 0x2a20 <main+0x1c>
    2a18:	0e 94 32 04 	call	0x864	; 0x864 <processCommand>
    2a1c:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <commandCompleteFlag0>
    2a20:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <halfSecFlag>
    2a24:	88 23       	and	r24, r24
    2a26:	41 f0       	breq	.+16     	; 0x2a38 <main+0x34>
    2a28:	eb e0       	ldi	r30, 0x0B	; 11
    2a2a:	f1 e0       	ldi	r31, 0x01	; 1
    2a2c:	90 81       	ld	r25, Z
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 27       	eor	r24, r25
    2a32:	80 83       	st	Z, r24
    2a34:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <halfSecFlag>
    2a38:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <oneSecFlag>
    2a3c:	88 23       	and	r24, r24
    2a3e:	39 f3       	breq	.-50     	; 0x2a0e <main+0xa>
    2a40:	eb e0       	ldi	r30, 0x0B	; 11
    2a42:	f1 e0       	ldi	r31, 0x01	; 1
    2a44:	90 81       	ld	r25, Z
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	89 27       	eor	r24, r25
    2a4a:	80 83       	st	Z, r24
    2a4c:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <pauseOutputForCmdCnt>
    2a50:	88 23       	and	r24, r24
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <main+0x56>
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <pauseOutputForCmdCnt>
    2a5a:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <oneSecFlag>
    2a5e:	d7 cf       	rjmp	.-82     	; 0x2a0e <main+0xa>

00002a60 <ringbuf_init>:
    2a60:	e3 e6       	ldi	r30, 0x63	; 99
    2a62:	f9 e0       	ldi	r31, 0x09	; 9
    2a64:	60 83       	st	Z, r22
    2a66:	11 82       	std	Z+1, r1	; 0x01
    2a68:	93 83       	std	Z+3, r25	; 0x03
    2a6a:	82 83       	std	Z+2, r24	; 0x02
    2a6c:	95 83       	std	Z+5, r25	; 0x05
    2a6e:	84 83       	std	Z+4, r24	; 0x04
    2a70:	97 83       	std	Z+7, r25	; 0x07
    2a72:	86 83       	std	Z+6, r24	; 0x06
    2a74:	08 95       	ret

00002a76 <ringbuf_get>:
    2a76:	9f b7       	in	r25, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <rb+0x1>
    2a7e:	81 11       	cpse	r24, r1
    2a80:	04 c0       	rjmp	.+8      	; 0x2a8a <ringbuf_get+0x14>
    2a82:	99 23       	and	r25, r25
    2a84:	04 f5       	brge	.+64     	; 0x2ac6 <ringbuf_get+0x50>
    2a86:	78 94       	sei
    2a88:	08 95       	ret
    2a8a:	e3 e6       	ldi	r30, 0x63	; 99
    2a8c:	f9 e0       	ldi	r31, 0x09	; 9
    2a8e:	a4 81       	ldd	r26, Z+4	; 0x04
    2a90:	b5 81       	ldd	r27, Z+5	; 0x05
    2a92:	9d 01       	movw	r18, r26
    2a94:	2f 5f       	subi	r18, 0xFF	; 255
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	35 83       	std	Z+5, r19	; 0x05
    2a9a:	24 83       	std	Z+4, r18	; 0x04
    2a9c:	8c 91       	ld	r24, X
    2a9e:	21 81       	ldd	r18, Z+1	; 0x01
    2aa0:	21 50       	subi	r18, 0x01	; 1
    2aa2:	21 83       	std	Z+1, r18	; 0x01
    2aa4:	44 81       	ldd	r20, Z+4	; 0x04
    2aa6:	55 81       	ldd	r21, Z+5	; 0x05
    2aa8:	26 81       	ldd	r18, Z+6	; 0x06
    2aaa:	37 81       	ldd	r19, Z+7	; 0x07
    2aac:	60 81       	ld	r22, Z
    2aae:	26 0f       	add	r18, r22
    2ab0:	31 1d       	adc	r19, r1
    2ab2:	42 17       	cp	r20, r18
    2ab4:	53 07       	cpc	r21, r19
    2ab6:	20 f0       	brcs	.+8      	; 0x2ac0 <ringbuf_get+0x4a>
    2ab8:	26 81       	ldd	r18, Z+6	; 0x06
    2aba:	37 81       	ldd	r19, Z+7	; 0x07
    2abc:	35 83       	std	Z+5, r19	; 0x05
    2abe:	24 83       	std	Z+4, r18	; 0x04
    2ac0:	99 23       	and	r25, r25
    2ac2:	0c f4       	brge	.+2      	; 0x2ac6 <ringbuf_get+0x50>
    2ac4:	78 94       	sei
    2ac6:	08 95       	ret

00002ac8 <ringbuf_put>:
    2ac8:	9f b7       	in	r25, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	e3 e6       	ldi	r30, 0x63	; 99
    2ace:	f9 e0       	ldi	r31, 0x09	; 9
    2ad0:	31 81       	ldd	r19, Z+1	; 0x01
    2ad2:	20 81       	ld	r18, Z
    2ad4:	32 17       	cp	r19, r18
    2ad6:	20 f0       	brcs	.+8      	; 0x2ae0 <ringbuf_put+0x18>
    2ad8:	99 23       	and	r25, r25
    2ada:	04 f5       	brge	.+64     	; 0x2b1c <ringbuf_put+0x54>
    2adc:	78 94       	sei
    2ade:	08 95       	ret
    2ae0:	e3 e6       	ldi	r30, 0x63	; 99
    2ae2:	f9 e0       	ldi	r31, 0x09	; 9
    2ae4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ae8:	9d 01       	movw	r18, r26
    2aea:	2f 5f       	subi	r18, 0xFF	; 255
    2aec:	3f 4f       	sbci	r19, 0xFF	; 255
    2aee:	33 83       	std	Z+3, r19	; 0x03
    2af0:	22 83       	std	Z+2, r18	; 0x02
    2af2:	8c 93       	st	X, r24
    2af4:	81 81       	ldd	r24, Z+1	; 0x01
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	81 83       	std	Z+1, r24	; 0x01
    2afa:	42 81       	ldd	r20, Z+2	; 0x02
    2afc:	53 81       	ldd	r21, Z+3	; 0x03
    2afe:	26 81       	ldd	r18, Z+6	; 0x06
    2b00:	37 81       	ldd	r19, Z+7	; 0x07
    2b02:	80 81       	ld	r24, Z
    2b04:	28 0f       	add	r18, r24
    2b06:	31 1d       	adc	r19, r1
    2b08:	42 17       	cp	r20, r18
    2b0a:	53 07       	cpc	r21, r19
    2b0c:	20 f0       	brcs	.+8      	; 0x2b16 <ringbuf_put+0x4e>
    2b0e:	26 81       	ldd	r18, Z+6	; 0x06
    2b10:	37 81       	ldd	r19, Z+7	; 0x07
    2b12:	33 83       	std	Z+3, r19	; 0x03
    2b14:	22 83       	std	Z+2, r18	; 0x02
    2b16:	99 23       	and	r25, r25
    2b18:	0c f4       	brge	.+2      	; 0x2b1c <ringbuf_put+0x54>
    2b1a:	78 94       	sei
    2b1c:	08 95       	ret

00002b1e <init_uart>:
    2b1e:	82 30       	cpi	r24, 0x02	; 2
    2b20:	b9 f1       	breq	.+110    	; 0x2b90 <init_uart+0x72>
    2b22:	84 30       	cpi	r24, 0x04	; 4
    2b24:	b8 f5       	brcc	.+110    	; 0x2b94 <init_uart+0x76>
    2b26:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <currentUart>
    2b2a:	90 91 23 09 	lds	r25, 0x0923	; 0x800923 <userSettings>
    2b2e:	91 30       	cpi	r25, 0x01	; 1
    2b30:	19 f0       	breq	.+6      	; 0x2b38 <init_uart+0x1a>
    2b32:	92 30       	cpi	r25, 0x02	; 2
    2b34:	39 f0       	breq	.+14     	; 0x2b44 <init_uart+0x26>
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <init_uart+0x20>
    2b38:	9f e5       	ldi	r25, 0x5F	; 95
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	05 c0       	rjmp	.+10     	; 0x2b48 <init_uart+0x2a>
    2b3e:	97 e0       	ldi	r25, 0x07	; 7
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <init_uart+0x2a>
    2b44:	91 e0       	ldi	r25, 0x01	; 1
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	19 f0       	breq	.+6      	; 0x2b52 <init_uart+0x34>
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	71 f0       	breq	.+28     	; 0x2b6c <init_uart+0x4e>
    2b50:	16 c0       	rjmp	.+44     	; 0x2b7e <init_uart+0x60>
    2b52:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    2b56:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    2b5a:	88 e9       	ldi	r24, 0x98	; 152
    2b5c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    2b60:	60 e8       	ldi	r22, 0x80	; 128
    2b62:	8b e6       	ldi	r24, 0x6B	; 107
    2b64:	99 e0       	ldi	r25, 0x09	; 9
    2b66:	7c df       	rcall	.-264    	; 0x2a60 <ringbuf_init>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	08 95       	ret
    2b6c:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    2b70:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    2b74:	88 e9       	ldi	r24, 0x98	; 152
    2b76:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	08 95       	ret
    2b7e:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    2b82:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    2b86:	88 e9       	ldi	r24, 0x98	; 152
    2b88:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	08 95       	ret
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	08 95       	ret
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	08 95       	ret

00002b98 <uart0_putchar>:
    2b98:	cf 93       	push	r28
    2b9a:	c8 2f       	mov	r28, r24
    2b9c:	8a 30       	cpi	r24, 0x0A	; 10
    2b9e:	31 f4       	brne	.+12     	; 0x2bac <uart0_putchar+0x14>
    2ba0:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    2ba4:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    2ba8:	8d e0       	ldi	r24, 0x0D	; 13
    2baa:	f6 df       	rcall	.-20     	; 0x2b98 <uart0_putchar>
    2bac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    2bb0:	85 ff       	sbrs	r24, 5
    2bb2:	fc cf       	rjmp	.-8      	; 0x2bac <uart0_putchar+0x14>
    2bb4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	cf 91       	pop	r28
    2bbe:	08 95       	ret

00002bc0 <uart1_put>:
    2bc0:	cf 93       	push	r28
    2bc2:	c8 2f       	mov	r28, r24
    2bc4:	8a 30       	cpi	r24, 0x0A	; 10
    2bc6:	11 f4       	brne	.+4      	; 0x2bcc <uart1_put+0xc>
    2bc8:	8d e0       	ldi	r24, 0x0D	; 13
    2bca:	fa df       	rcall	.-12     	; 0x2bc0 <uart1_put>
    2bcc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2bd0:	85 ff       	sbrs	r24, 5
    2bd2:	fc cf       	rjmp	.-8      	; 0x2bcc <uart1_put+0xc>
    2bd4:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	cf 91       	pop	r28
    2bde:	08 95       	ret

00002be0 <uarts_getchar>:
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	08 95       	ret

00002be6 <__vector_25>:
    2be6:	1f 92       	push	r1
    2be8:	0f 92       	push	r0
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	0f 92       	push	r0
    2bee:	11 24       	eor	r1, r1
    2bf0:	0b b6       	in	r0, 0x3b	; 59
    2bf2:	0f 92       	push	r0
    2bf4:	2f 93       	push	r18
    2bf6:	3f 93       	push	r19
    2bf8:	4f 93       	push	r20
    2bfa:	5f 93       	push	r21
    2bfc:	6f 93       	push	r22
    2bfe:	7f 93       	push	r23
    2c00:	8f 93       	push	r24
    2c02:	9f 93       	push	r25
    2c04:	af 93       	push	r26
    2c06:	bf 93       	push	r27
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	ef 93       	push	r30
    2c0e:	ff 93       	push	r31
    2c10:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    2c14:	84 fd       	sbrc	r24, 4
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <__vector_25+0x42>
    2c18:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    2c1c:	83 fd       	sbrc	r24, 3
    2c1e:	04 c0       	rjmp	.+8      	; 0x2c28 <__vector_25+0x42>
    2c20:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2c24:	88 23       	and	r24, r24
    2c26:	41 f0       	breq	.+16     	; 0x2c38 <__vector_25+0x52>
    2c28:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <clrError+0x1>
    2c32:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <clrError>
    2c36:	a1 c0       	rjmp	.+322    	; 0x2d7a <__vector_25+0x194>
    2c38:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    2c3c:	8f 31       	cpi	r24, 0x1F	; 31
    2c3e:	80 f0       	brcs	.+32     	; 0x2c60 <__vector_25+0x7a>
    2c40:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <clrError+0x1>
    2c4a:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <clrError>
    2c4e:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2c52:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <buf+0x1f>
    2c56:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <commandCompleteFlag0>
    2c5a:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    2c5e:	8d c0       	rjmp	.+282    	; 0x2d7a <__vector_25+0x194>
    2c60:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2c6a:	e4 51       	subi	r30, 0x14	; 20
    2c6c:	f6 4f       	sbci	r31, 0xF6	; 246
    2c6e:	80 83       	st	Z, r24
    2c70:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	e4 51       	subi	r30, 0x14	; 20
    2c78:	f6 4f       	sbci	r31, 0xF6	; 246
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8a 30       	cpi	r24, 0x0A	; 10
    2c7e:	41 f0       	breq	.+16     	; 0x2c90 <__vector_25+0xaa>
    2c80:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	e4 51       	subi	r30, 0x14	; 20
    2c88:	f6 4f       	sbci	r31, 0xF6	; 246
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8d 30       	cpi	r24, 0x0D	; 13
    2c8e:	89 f4       	brne	.+34     	; 0x2cb2 <__vector_25+0xcc>
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	80 93 22 09 	sts	0x0922, r24	; 0x800922 <commandCompleteFlag0>
    2c96:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <commandSize>
    2ca0:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	e4 51       	subi	r30, 0x14	; 20
    2ca8:	f6 4f       	sbci	r31, 0xF6	; 246
    2caa:	10 82       	st	Z, r1
    2cac:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2cb0:	64 c0       	rjmp	.+200    	; 0x2d7a <__vector_25+0x194>
    2cb2:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	e4 51       	subi	r30, 0x14	; 20
    2cba:	f6 4f       	sbci	r31, 0xF6	; 246
    2cbc:	80 81       	ld	r24, Z
    2cbe:	88 30       	cpi	r24, 0x08	; 8
    2cc0:	41 f0       	breq	.+16     	; 0x2cd2 <__vector_25+0xec>
    2cc2:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	e4 51       	subi	r30, 0x14	; 20
    2cca:	f6 4f       	sbci	r31, 0xF6	; 246
    2ccc:	80 81       	ld	r24, Z
    2cce:	8f 37       	cpi	r24, 0x7F	; 127
    2cd0:	39 f5       	brne	.+78     	; 0x2d20 <__vector_25+0x13a>
    2cd2:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    2cd6:	88 23       	and	r24, r24
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <__vector_25+0xf6>
    2cda:	4f c0       	rjmp	.+158    	; 0x2d7a <__vector_25+0x194>
    2cdc:	cc e0       	ldi	r28, 0x0C	; 12
    2cde:	da e0       	ldi	r29, 0x0A	; 10
    2ce0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ce2:	7b 81       	ldd	r23, Y+3	; 0x03
    2ce4:	88 e0       	ldi	r24, 0x08	; 8
    2ce6:	58 df       	rcall	.-336    	; 0x2b98 <uart0_putchar>
    2ce8:	6a 81       	ldd	r22, Y+2	; 0x02
    2cea:	7b 81       	ldd	r23, Y+3	; 0x03
    2cec:	80 e2       	ldi	r24, 0x20	; 32
    2cee:	54 df       	rcall	.-344    	; 0x2b98 <uart0_putchar>
    2cf0:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf2:	7b 81       	ldd	r23, Y+3	; 0x03
    2cf4:	88 e0       	ldi	r24, 0x08	; 8
    2cf6:	50 df       	rcall	.-352    	; 0x2b98 <uart0_putchar>
    2cf8:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    2cfc:	81 50       	subi	r24, 0x01	; 1
    2cfe:	80 93 1f 09 	sts	0x091F, r24	; 0x80091f <bufIndex0>
    2d02:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2d06:	81 50       	subi	r24, 0x01	; 1
    2d08:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <commandSize>
    2d0c:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <outputCharacters>
    2d10:	88 23       	and	r24, r24
    2d12:	99 f1       	breq	.+102    	; 0x2d7a <__vector_25+0x194>
    2d14:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <outputCharacters>
    2d18:	81 50       	subi	r24, 0x01	; 1
    2d1a:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <outputCharacters>
    2d1e:	2d c0       	rjmp	.+90     	; 0x2d7a <__vector_25+0x194>
    2d20:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	e4 51       	subi	r30, 0x14	; 20
    2d28:	f6 4f       	sbci	r31, 0xF6	; 246
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8c 32       	cpi	r24, 0x2C	; 44
    2d2e:	98 f0       	brcs	.+38     	; 0x2d56 <__vector_25+0x170>
    2d30:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	e4 51       	subi	r30, 0x14	; 20
    2d38:	f6 4f       	sbci	r31, 0xF6	; 246
    2d3a:	80 81       	ld	r24, Z
    2d3c:	8b 37       	cpi	r24, 0x7B	; 123
    2d3e:	58 f4       	brcc	.+22     	; 0x2d56 <__vector_25+0x170>
    2d40:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	80 93 1f 09 	sts	0x091F, r24	; 0x80091f <bufIndex0>
    2d4a:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <commandSize>
    2d54:	12 c0       	rjmp	.+36     	; 0x2d7a <__vector_25+0x194>
    2d56:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	e4 51       	subi	r30, 0x14	; 20
    2d5e:	f6 4f       	sbci	r31, 0xF6	; 246
    2d60:	80 81       	ld	r24, Z
    2d62:	8b 31       	cpi	r24, 0x1B	; 27
    2d64:	51 f4       	brne	.+20     	; 0x2d7a <__vector_25+0x194>
    2d66:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    2d6a:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    2d6e:	8d e0       	ldi	r24, 0x0D	; 13
    2d70:	13 df       	rcall	.-474    	; 0x2b98 <uart0_putchar>
    2d72:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2d76:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    2d7a:	ff 91       	pop	r31
    2d7c:	ef 91       	pop	r30
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	bf 91       	pop	r27
    2d84:	af 91       	pop	r26
    2d86:	9f 91       	pop	r25
    2d88:	8f 91       	pop	r24
    2d8a:	7f 91       	pop	r23
    2d8c:	6f 91       	pop	r22
    2d8e:	5f 91       	pop	r21
    2d90:	4f 91       	pop	r20
    2d92:	3f 91       	pop	r19
    2d94:	2f 91       	pop	r18
    2d96:	0f 90       	pop	r0
    2d98:	0b be       	out	0x3b, r0	; 59
    2d9a:	0f 90       	pop	r0
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	0f 90       	pop	r0
    2da0:	1f 90       	pop	r1
    2da2:	18 95       	reti

00002da4 <__vector_36>:
    2da4:	1f 92       	push	r1
    2da6:	0f 92       	push	r0
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	0f 92       	push	r0
    2dac:	11 24       	eor	r1, r1
    2dae:	0b b6       	in	r0, 0x3b	; 59
    2db0:	0f 92       	push	r0
    2db2:	2f 93       	push	r18
    2db4:	3f 93       	push	r19
    2db6:	4f 93       	push	r20
    2db8:	5f 93       	push	r21
    2dba:	6f 93       	push	r22
    2dbc:	7f 93       	push	r23
    2dbe:	8f 93       	push	r24
    2dc0:	9f 93       	push	r25
    2dc2:	af 93       	push	r26
    2dc4:	bf 93       	push	r27
    2dc6:	ef 93       	push	r30
    2dc8:	ff 93       	push	r31
    2dca:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2dce:	84 fd       	sbrc	r24, 4
    2dd0:	04 c0       	rjmp	.+8      	; 0x2dda <__vector_36+0x36>
    2dd2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2dd6:	83 ff       	sbrs	r24, 3
    2dd8:	08 c0       	rjmp	.+16     	; 0x2dea <__vector_36+0x46>
    2dda:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <clrError+0x1>
    2de4:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <clrError>
    2de8:	19 c0       	rjmp	.+50     	; 0x2e1c <__vector_36+0x78>
    2dea:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2dee:	8a 30       	cpi	r24, 0x0A	; 10
    2df0:	41 f4       	brne	.+16     	; 0x2e02 <__vector_36+0x5e>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	69 de       	rcall	.-814    	; 0x2ac8 <ringbuf_put>
    2df6:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <commandCompleteFlag1>
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <commandCompleteFlag1>
    2e00:	0d c0       	rjmp	.+26     	; 0x2e1c <__vector_36+0x78>
    2e02:	8d 30       	cpi	r24, 0x0D	; 13
    2e04:	59 f0       	breq	.+22     	; 0x2e1c <__vector_36+0x78>
    2e06:	88 30       	cpi	r24, 0x08	; 8
    2e08:	11 f0       	breq	.+4      	; 0x2e0e <__vector_36+0x6a>
    2e0a:	8f 37       	cpi	r24, 0x7F	; 127
    2e0c:	11 f4       	brne	.+4      	; 0x2e12 <__vector_36+0x6e>
    2e0e:	33 de       	rcall	.-922    	; 0x2a76 <ringbuf_get>
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <__vector_36+0x78>
    2e12:	90 ee       	ldi	r25, 0xE0	; 224
    2e14:	98 0f       	add	r25, r24
    2e16:	9f 35       	cpi	r25, 0x5F	; 95
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <__vector_36+0x78>
    2e1a:	56 de       	rcall	.-852    	; 0x2ac8 <ringbuf_put>
    2e1c:	ff 91       	pop	r31
    2e1e:	ef 91       	pop	r30
    2e20:	bf 91       	pop	r27
    2e22:	af 91       	pop	r26
    2e24:	9f 91       	pop	r25
    2e26:	8f 91       	pop	r24
    2e28:	7f 91       	pop	r23
    2e2a:	6f 91       	pop	r22
    2e2c:	5f 91       	pop	r21
    2e2e:	4f 91       	pop	r20
    2e30:	3f 91       	pop	r19
    2e32:	2f 91       	pop	r18
    2e34:	0f 90       	pop	r0
    2e36:	0b be       	out	0x3b, r0	; 59
    2e38:	0f 90       	pop	r0
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	0f 90       	pop	r0
    2e3e:	1f 90       	pop	r1
    2e40:	18 95       	reti

00002e42 <doUart>:
    2e42:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2e46:	88 23       	and	r24, r24
    2e48:	69 f1       	breq	.+90     	; 0x2ea4 <doUart+0x62>
    2e4a:	90 91 1d 09 	lds	r25, 0x091D	; 0x80091d <outputCharacters>
    2e4e:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2e52:	98 17       	cp	r25, r24
    2e54:	c0 f4       	brcc	.+48     	; 0x2e86 <doUart+0x44>
    2e56:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	0b c0       	rjmp	.+22     	; 0x2e74 <doUart+0x32>
    2e5e:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    2e62:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    2e66:	e0 91 1d 09 	lds	r30, 0x091D	; 0x80091d <outputCharacters>
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	e4 51       	subi	r30, 0x14	; 20
    2e6e:	f6 4f       	sbci	r31, 0xF6	; 246
    2e70:	80 81       	ld	r24, Z
    2e72:	92 de       	rcall	.-732    	; 0x2b98 <uart0_putchar>
    2e74:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <outputCharacters>
    2e78:	8f 5f       	subi	r24, 0xFF	; 255
    2e7a:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <outputCharacters>
    2e7e:	8a e0       	ldi	r24, 0x0A	; 10
    2e80:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <pauseOutputForCmdCnt>
    2e84:	13 c0       	rjmp	.+38     	; 0x2eac <doUart+0x6a>
    2e86:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <pauseOutputForCmdCnt>
    2e8a:	81 11       	cpse	r24, r1
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <doUart+0x6a>
    2e8e:	8f b7       	in	r24, 0x3f	; 63
    2e90:	8f 77       	andi	r24, 0x7F	; 127
    2e92:	8f bf       	out	0x3f, r24	; 63
    2e94:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <outputCharacters>
    2e98:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    2e9c:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2ea0:	78 94       	sei
    2ea2:	04 c0       	rjmp	.+8      	; 0x2eac <doUart+0x6a>
    2ea4:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <outputCharacters>
    2ea8:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <pauseOutputForCmdCnt>
    2eac:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2eb0:	88 23       	and	r24, r24
    2eb2:	a9 f0       	breq	.+42     	; 0x2ede <doUart+0x9c>
    2eb4:	8c ee       	ldi	r24, 0xEC	; 236
    2eb6:	99 e0       	ldi	r25, 0x09	; 9
    2eb8:	9f 93       	push	r25
    2eba:	8f 93       	push	r24
    2ebc:	80 ea       	ldi	r24, 0xA0	; 160
    2ebe:	98 e0       	ldi	r25, 0x08	; 8
    2ec0:	9f 93       	push	r25
    2ec2:	8f 93       	push	r24
    2ec4:	75 d6       	rcall	.+3306   	; 0x3bb0 <printf>
    2ec6:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2eca:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <pauseOutputForCmdCnt>
    2ece:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    2ed2:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <outputCharacters>
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <commandCompleteFlag1>
    2ee2:	88 23       	and	r24, r24
    2ee4:	99 f0       	breq	.+38     	; 0x2f0c <doUart+0xca>
    2ee6:	8b e6       	ldi	r24, 0x6B	; 107
    2ee8:	99 e0       	ldi	r25, 0x09	; 9
    2eea:	9f 93       	push	r25
    2eec:	8f 93       	push	r24
    2eee:	8a ea       	ldi	r24, 0xAA	; 170
    2ef0:	98 e0       	ldi	r25, 0x08	; 8
    2ef2:	9f 93       	push	r25
    2ef4:	8f 93       	push	r24
    2ef6:	5c d6       	rcall	.+3256   	; 0x3bb0 <printf>
    2ef8:	8e e7       	ldi	r24, 0x7E	; 126
    2efa:	62 de       	rcall	.-828    	; 0x2bc0 <uart1_put>
    2efc:	8a e2       	ldi	r24, 0x2A	; 42
    2efe:	60 de       	rcall	.-832    	; 0x2bc0 <uart1_put>
    2f00:	8e e7       	ldi	r24, 0x7E	; 126
    2f02:	5e de       	rcall	.-836    	; 0x2bc0 <uart1_put>
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	08 95       	ret

00002f0e <__fixunssfsi>:
    2f0e:	70 d0       	rcall	.+224    	; 0x2ff0 <__fp_splitA>
    2f10:	88 f0       	brcs	.+34     	; 0x2f34 <__fixunssfsi+0x26>
    2f12:	9f 57       	subi	r25, 0x7F	; 127
    2f14:	90 f0       	brcs	.+36     	; 0x2f3a <__fixunssfsi+0x2c>
    2f16:	b9 2f       	mov	r27, r25
    2f18:	99 27       	eor	r25, r25
    2f1a:	b7 51       	subi	r27, 0x17	; 23
    2f1c:	a0 f0       	brcs	.+40     	; 0x2f46 <__fixunssfsi+0x38>
    2f1e:	d1 f0       	breq	.+52     	; 0x2f54 <__fixunssfsi+0x46>
    2f20:	66 0f       	add	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	88 1f       	adc	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	1a f0       	brmi	.+6      	; 0x2f30 <__fixunssfsi+0x22>
    2f2a:	ba 95       	dec	r27
    2f2c:	c9 f7       	brne	.-14     	; 0x2f20 <__fixunssfsi+0x12>
    2f2e:	12 c0       	rjmp	.+36     	; 0x2f54 <__fixunssfsi+0x46>
    2f30:	b1 30       	cpi	r27, 0x01	; 1
    2f32:	81 f0       	breq	.+32     	; 0x2f54 <__fixunssfsi+0x46>
    2f34:	77 d0       	rcall	.+238    	; 0x3024 <__fp_zero>
    2f36:	b1 e0       	ldi	r27, 0x01	; 1
    2f38:	08 95       	ret
    2f3a:	74 c0       	rjmp	.+232    	; 0x3024 <__fp_zero>
    2f3c:	67 2f       	mov	r22, r23
    2f3e:	78 2f       	mov	r23, r24
    2f40:	88 27       	eor	r24, r24
    2f42:	b8 5f       	subi	r27, 0xF8	; 248
    2f44:	39 f0       	breq	.+14     	; 0x2f54 <__fixunssfsi+0x46>
    2f46:	b9 3f       	cpi	r27, 0xF9	; 249
    2f48:	cc f3       	brlt	.-14     	; 0x2f3c <__fixunssfsi+0x2e>
    2f4a:	86 95       	lsr	r24
    2f4c:	77 95       	ror	r23
    2f4e:	67 95       	ror	r22
    2f50:	b3 95       	inc	r27
    2f52:	d9 f7       	brne	.-10     	; 0x2f4a <__fixunssfsi+0x3c>
    2f54:	3e f4       	brtc	.+14     	; 0x2f64 <__fixunssfsi+0x56>
    2f56:	90 95       	com	r25
    2f58:	80 95       	com	r24
    2f5a:	70 95       	com	r23
    2f5c:	61 95       	neg	r22
    2f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f60:	8f 4f       	sbci	r24, 0xFF	; 255
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	08 95       	ret

00002f66 <__floatunsisf>:
    2f66:	e8 94       	clt
    2f68:	09 c0       	rjmp	.+18     	; 0x2f7c <__floatsisf+0x12>

00002f6a <__floatsisf>:
    2f6a:	97 fb       	bst	r25, 7
    2f6c:	3e f4       	brtc	.+14     	; 0x2f7c <__floatsisf+0x12>
    2f6e:	90 95       	com	r25
    2f70:	80 95       	com	r24
    2f72:	70 95       	com	r23
    2f74:	61 95       	neg	r22
    2f76:	7f 4f       	sbci	r23, 0xFF	; 255
    2f78:	8f 4f       	sbci	r24, 0xFF	; 255
    2f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7c:	99 23       	and	r25, r25
    2f7e:	a9 f0       	breq	.+42     	; 0x2faa <__floatsisf+0x40>
    2f80:	f9 2f       	mov	r31, r25
    2f82:	96 e9       	ldi	r25, 0x96	; 150
    2f84:	bb 27       	eor	r27, r27
    2f86:	93 95       	inc	r25
    2f88:	f6 95       	lsr	r31
    2f8a:	87 95       	ror	r24
    2f8c:	77 95       	ror	r23
    2f8e:	67 95       	ror	r22
    2f90:	b7 95       	ror	r27
    2f92:	f1 11       	cpse	r31, r1
    2f94:	f8 cf       	rjmp	.-16     	; 0x2f86 <__floatsisf+0x1c>
    2f96:	fa f4       	brpl	.+62     	; 0x2fd6 <__floatsisf+0x6c>
    2f98:	bb 0f       	add	r27, r27
    2f9a:	11 f4       	brne	.+4      	; 0x2fa0 <__floatsisf+0x36>
    2f9c:	60 ff       	sbrs	r22, 0
    2f9e:	1b c0       	rjmp	.+54     	; 0x2fd6 <__floatsisf+0x6c>
    2fa0:	6f 5f       	subi	r22, 0xFF	; 255
    2fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa8:	16 c0       	rjmp	.+44     	; 0x2fd6 <__floatsisf+0x6c>
    2faa:	88 23       	and	r24, r24
    2fac:	11 f0       	breq	.+4      	; 0x2fb2 <__floatsisf+0x48>
    2fae:	96 e9       	ldi	r25, 0x96	; 150
    2fb0:	11 c0       	rjmp	.+34     	; 0x2fd4 <__floatsisf+0x6a>
    2fb2:	77 23       	and	r23, r23
    2fb4:	21 f0       	breq	.+8      	; 0x2fbe <__floatsisf+0x54>
    2fb6:	9e e8       	ldi	r25, 0x8E	; 142
    2fb8:	87 2f       	mov	r24, r23
    2fba:	76 2f       	mov	r23, r22
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <__floatsisf+0x5e>
    2fbe:	66 23       	and	r22, r22
    2fc0:	71 f0       	breq	.+28     	; 0x2fde <__floatsisf+0x74>
    2fc2:	96 e8       	ldi	r25, 0x86	; 134
    2fc4:	86 2f       	mov	r24, r22
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	2a f0       	brmi	.+10     	; 0x2fd6 <__floatsisf+0x6c>
    2fcc:	9a 95       	dec	r25
    2fce:	66 0f       	add	r22, r22
    2fd0:	77 1f       	adc	r23, r23
    2fd2:	88 1f       	adc	r24, r24
    2fd4:	da f7       	brpl	.-10     	; 0x2fcc <__floatsisf+0x62>
    2fd6:	88 0f       	add	r24, r24
    2fd8:	96 95       	lsr	r25
    2fda:	87 95       	ror	r24
    2fdc:	97 f9       	bld	r25, 7
    2fde:	08 95       	ret

00002fe0 <__fp_split3>:
    2fe0:	57 fd       	sbrc	r21, 7
    2fe2:	90 58       	subi	r25, 0x80	; 128
    2fe4:	44 0f       	add	r20, r20
    2fe6:	55 1f       	adc	r21, r21
    2fe8:	59 f0       	breq	.+22     	; 0x3000 <__fp_splitA+0x10>
    2fea:	5f 3f       	cpi	r21, 0xFF	; 255
    2fec:	71 f0       	breq	.+28     	; 0x300a <__fp_splitA+0x1a>
    2fee:	47 95       	ror	r20

00002ff0 <__fp_splitA>:
    2ff0:	88 0f       	add	r24, r24
    2ff2:	97 fb       	bst	r25, 7
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	61 f0       	breq	.+24     	; 0x3010 <__fp_splitA+0x20>
    2ff8:	9f 3f       	cpi	r25, 0xFF	; 255
    2ffa:	79 f0       	breq	.+30     	; 0x301a <__fp_splitA+0x2a>
    2ffc:	87 95       	ror	r24
    2ffe:	08 95       	ret
    3000:	12 16       	cp	r1, r18
    3002:	13 06       	cpc	r1, r19
    3004:	14 06       	cpc	r1, r20
    3006:	55 1f       	adc	r21, r21
    3008:	f2 cf       	rjmp	.-28     	; 0x2fee <__fp_split3+0xe>
    300a:	46 95       	lsr	r20
    300c:	f1 df       	rcall	.-30     	; 0x2ff0 <__fp_splitA>
    300e:	08 c0       	rjmp	.+16     	; 0x3020 <__fp_splitA+0x30>
    3010:	16 16       	cp	r1, r22
    3012:	17 06       	cpc	r1, r23
    3014:	18 06       	cpc	r1, r24
    3016:	99 1f       	adc	r25, r25
    3018:	f1 cf       	rjmp	.-30     	; 0x2ffc <__fp_splitA+0xc>
    301a:	86 95       	lsr	r24
    301c:	71 05       	cpc	r23, r1
    301e:	61 05       	cpc	r22, r1
    3020:	08 94       	sec
    3022:	08 95       	ret

00003024 <__fp_zero>:
    3024:	e8 94       	clt

00003026 <__fp_szero>:
    3026:	bb 27       	eor	r27, r27
    3028:	66 27       	eor	r22, r22
    302a:	77 27       	eor	r23, r23
    302c:	cb 01       	movw	r24, r22
    302e:	97 f9       	bld	r25, 7
    3030:	08 95       	ret

00003032 <__mulsf3>:
    3032:	0b d0       	rcall	.+22     	; 0x304a <__mulsf3x>
    3034:	78 c0       	rjmp	.+240    	; 0x3126 <__fp_round>
    3036:	69 d0       	rcall	.+210    	; 0x310a <__fp_pscA>
    3038:	28 f0       	brcs	.+10     	; 0x3044 <__mulsf3+0x12>
    303a:	6e d0       	rcall	.+220    	; 0x3118 <__fp_pscB>
    303c:	18 f0       	brcs	.+6      	; 0x3044 <__mulsf3+0x12>
    303e:	95 23       	and	r25, r21
    3040:	09 f0       	breq	.+2      	; 0x3044 <__mulsf3+0x12>
    3042:	5a c0       	rjmp	.+180    	; 0x30f8 <__fp_inf>
    3044:	5f c0       	rjmp	.+190    	; 0x3104 <__fp_nan>
    3046:	11 24       	eor	r1, r1
    3048:	ee cf       	rjmp	.-36     	; 0x3026 <__fp_szero>

0000304a <__mulsf3x>:
    304a:	ca df       	rcall	.-108    	; 0x2fe0 <__fp_split3>
    304c:	a0 f3       	brcs	.-24     	; 0x3036 <__mulsf3+0x4>

0000304e <__mulsf3_pse>:
    304e:	95 9f       	mul	r25, r21
    3050:	d1 f3       	breq	.-12     	; 0x3046 <__mulsf3+0x14>
    3052:	95 0f       	add	r25, r21
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	55 1f       	adc	r21, r21
    3058:	62 9f       	mul	r22, r18
    305a:	f0 01       	movw	r30, r0
    305c:	72 9f       	mul	r23, r18
    305e:	bb 27       	eor	r27, r27
    3060:	f0 0d       	add	r31, r0
    3062:	b1 1d       	adc	r27, r1
    3064:	63 9f       	mul	r22, r19
    3066:	aa 27       	eor	r26, r26
    3068:	f0 0d       	add	r31, r0
    306a:	b1 1d       	adc	r27, r1
    306c:	aa 1f       	adc	r26, r26
    306e:	64 9f       	mul	r22, r20
    3070:	66 27       	eor	r22, r22
    3072:	b0 0d       	add	r27, r0
    3074:	a1 1d       	adc	r26, r1
    3076:	66 1f       	adc	r22, r22
    3078:	82 9f       	mul	r24, r18
    307a:	22 27       	eor	r18, r18
    307c:	b0 0d       	add	r27, r0
    307e:	a1 1d       	adc	r26, r1
    3080:	62 1f       	adc	r22, r18
    3082:	73 9f       	mul	r23, r19
    3084:	b0 0d       	add	r27, r0
    3086:	a1 1d       	adc	r26, r1
    3088:	62 1f       	adc	r22, r18
    308a:	83 9f       	mul	r24, r19
    308c:	a0 0d       	add	r26, r0
    308e:	61 1d       	adc	r22, r1
    3090:	22 1f       	adc	r18, r18
    3092:	74 9f       	mul	r23, r20
    3094:	33 27       	eor	r19, r19
    3096:	a0 0d       	add	r26, r0
    3098:	61 1d       	adc	r22, r1
    309a:	23 1f       	adc	r18, r19
    309c:	84 9f       	mul	r24, r20
    309e:	60 0d       	add	r22, r0
    30a0:	21 1d       	adc	r18, r1
    30a2:	82 2f       	mov	r24, r18
    30a4:	76 2f       	mov	r23, r22
    30a6:	6a 2f       	mov	r22, r26
    30a8:	11 24       	eor	r1, r1
    30aa:	9f 57       	subi	r25, 0x7F	; 127
    30ac:	50 40       	sbci	r21, 0x00	; 0
    30ae:	8a f0       	brmi	.+34     	; 0x30d2 <__mulsf3_pse+0x84>
    30b0:	e1 f0       	breq	.+56     	; 0x30ea <__mulsf3_pse+0x9c>
    30b2:	88 23       	and	r24, r24
    30b4:	4a f0       	brmi	.+18     	; 0x30c8 <__mulsf3_pse+0x7a>
    30b6:	ee 0f       	add	r30, r30
    30b8:	ff 1f       	adc	r31, r31
    30ba:	bb 1f       	adc	r27, r27
    30bc:	66 1f       	adc	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	88 1f       	adc	r24, r24
    30c2:	91 50       	subi	r25, 0x01	; 1
    30c4:	50 40       	sbci	r21, 0x00	; 0
    30c6:	a9 f7       	brne	.-22     	; 0x30b2 <__mulsf3_pse+0x64>
    30c8:	9e 3f       	cpi	r25, 0xFE	; 254
    30ca:	51 05       	cpc	r21, r1
    30cc:	70 f0       	brcs	.+28     	; 0x30ea <__mulsf3_pse+0x9c>
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <__fp_inf>
    30d0:	aa cf       	rjmp	.-172    	; 0x3026 <__fp_szero>
    30d2:	5f 3f       	cpi	r21, 0xFF	; 255
    30d4:	ec f3       	brlt	.-6      	; 0x30d0 <__mulsf3_pse+0x82>
    30d6:	98 3e       	cpi	r25, 0xE8	; 232
    30d8:	dc f3       	brlt	.-10     	; 0x30d0 <__mulsf3_pse+0x82>
    30da:	86 95       	lsr	r24
    30dc:	77 95       	ror	r23
    30de:	67 95       	ror	r22
    30e0:	b7 95       	ror	r27
    30e2:	f7 95       	ror	r31
    30e4:	e7 95       	ror	r30
    30e6:	9f 5f       	subi	r25, 0xFF	; 255
    30e8:	c1 f7       	brne	.-16     	; 0x30da <__mulsf3_pse+0x8c>
    30ea:	fe 2b       	or	r31, r30
    30ec:	88 0f       	add	r24, r24
    30ee:	91 1d       	adc	r25, r1
    30f0:	96 95       	lsr	r25
    30f2:	87 95       	ror	r24
    30f4:	97 f9       	bld	r25, 7
    30f6:	08 95       	ret

000030f8 <__fp_inf>:
    30f8:	97 f9       	bld	r25, 7
    30fa:	9f 67       	ori	r25, 0x7F	; 127
    30fc:	80 e8       	ldi	r24, 0x80	; 128
    30fe:	70 e0       	ldi	r23, 0x00	; 0
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	08 95       	ret

00003104 <__fp_nan>:
    3104:	9f ef       	ldi	r25, 0xFF	; 255
    3106:	80 ec       	ldi	r24, 0xC0	; 192
    3108:	08 95       	ret

0000310a <__fp_pscA>:
    310a:	00 24       	eor	r0, r0
    310c:	0a 94       	dec	r0
    310e:	16 16       	cp	r1, r22
    3110:	17 06       	cpc	r1, r23
    3112:	18 06       	cpc	r1, r24
    3114:	09 06       	cpc	r0, r25
    3116:	08 95       	ret

00003118 <__fp_pscB>:
    3118:	00 24       	eor	r0, r0
    311a:	0a 94       	dec	r0
    311c:	12 16       	cp	r1, r18
    311e:	13 06       	cpc	r1, r19
    3120:	14 06       	cpc	r1, r20
    3122:	05 06       	cpc	r0, r21
    3124:	08 95       	ret

00003126 <__fp_round>:
    3126:	09 2e       	mov	r0, r25
    3128:	03 94       	inc	r0
    312a:	00 0c       	add	r0, r0
    312c:	11 f4       	brne	.+4      	; 0x3132 <__fp_round+0xc>
    312e:	88 23       	and	r24, r24
    3130:	52 f0       	brmi	.+20     	; 0x3146 <__fp_round+0x20>
    3132:	bb 0f       	add	r27, r27
    3134:	40 f4       	brcc	.+16     	; 0x3146 <__fp_round+0x20>
    3136:	bf 2b       	or	r27, r31
    3138:	11 f4       	brne	.+4      	; 0x313e <__fp_round+0x18>
    313a:	60 ff       	sbrs	r22, 0
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <__fp_round+0x20>
    313e:	6f 5f       	subi	r22, 0xFF	; 255
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	8f 4f       	sbci	r24, 0xFF	; 255
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	08 95       	ret

00003148 <vfprintf>:
    3148:	2f 92       	push	r2
    314a:	3f 92       	push	r3
    314c:	4f 92       	push	r4
    314e:	5f 92       	push	r5
    3150:	6f 92       	push	r6
    3152:	7f 92       	push	r7
    3154:	8f 92       	push	r8
    3156:	9f 92       	push	r9
    3158:	af 92       	push	r10
    315a:	bf 92       	push	r11
    315c:	cf 92       	push	r12
    315e:	df 92       	push	r13
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	60 97       	sbiw	r28, 0x10	; 16
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	7c 01       	movw	r14, r24
    317e:	1b 01       	movw	r2, r22
    3180:	6a 01       	movw	r12, r20
    3182:	fc 01       	movw	r30, r24
    3184:	17 82       	std	Z+7, r1	; 0x07
    3186:	16 82       	std	Z+6, r1	; 0x06
    3188:	83 81       	ldd	r24, Z+3	; 0x03
    318a:	81 ff       	sbrs	r24, 1
    318c:	2a c3       	rjmp	.+1620   	; 0x37e2 <vfprintf+0x69a>
    318e:	9e 01       	movw	r18, r28
    3190:	2f 5f       	subi	r18, 0xFF	; 255
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	39 01       	movw	r6, r18
    3196:	f7 01       	movw	r30, r14
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	f1 01       	movw	r30, r2
    319c:	93 fd       	sbrc	r25, 3
    319e:	85 91       	lpm	r24, Z+
    31a0:	93 ff       	sbrs	r25, 3
    31a2:	81 91       	ld	r24, Z+
    31a4:	1f 01       	movw	r2, r30
    31a6:	88 23       	and	r24, r24
    31a8:	09 f4       	brne	.+2      	; 0x31ac <vfprintf+0x64>
    31aa:	17 c3       	rjmp	.+1582   	; 0x37da <vfprintf+0x692>
    31ac:	85 32       	cpi	r24, 0x25	; 37
    31ae:	39 f4       	brne	.+14     	; 0x31be <vfprintf+0x76>
    31b0:	93 fd       	sbrc	r25, 3
    31b2:	85 91       	lpm	r24, Z+
    31b4:	93 ff       	sbrs	r25, 3
    31b6:	81 91       	ld	r24, Z+
    31b8:	1f 01       	movw	r2, r30
    31ba:	85 32       	cpi	r24, 0x25	; 37
    31bc:	31 f4       	brne	.+12     	; 0x31ca <vfprintf+0x82>
    31be:	b7 01       	movw	r22, r14
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	ba d4       	rcall	.+2420   	; 0x3b38 <fputc>
    31c4:	56 01       	movw	r10, r12
    31c6:	65 01       	movw	r12, r10
    31c8:	e6 cf       	rjmp	.-52     	; 0x3196 <vfprintf+0x4e>
    31ca:	10 e0       	ldi	r17, 0x00	; 0
    31cc:	51 2c       	mov	r5, r1
    31ce:	91 2c       	mov	r9, r1
    31d0:	ff e1       	ldi	r31, 0x1F	; 31
    31d2:	f9 15       	cp	r31, r9
    31d4:	d8 f0       	brcs	.+54     	; 0x320c <vfprintf+0xc4>
    31d6:	8b 32       	cpi	r24, 0x2B	; 43
    31d8:	79 f0       	breq	.+30     	; 0x31f8 <vfprintf+0xb0>
    31da:	38 f4       	brcc	.+14     	; 0x31ea <vfprintf+0xa2>
    31dc:	80 32       	cpi	r24, 0x20	; 32
    31de:	79 f0       	breq	.+30     	; 0x31fe <vfprintf+0xb6>
    31e0:	83 32       	cpi	r24, 0x23	; 35
    31e2:	a1 f4       	brne	.+40     	; 0x320c <vfprintf+0xc4>
    31e4:	f9 2d       	mov	r31, r9
    31e6:	f0 61       	ori	r31, 0x10	; 16
    31e8:	2e c0       	rjmp	.+92     	; 0x3246 <vfprintf+0xfe>
    31ea:	8d 32       	cpi	r24, 0x2D	; 45
    31ec:	61 f0       	breq	.+24     	; 0x3206 <vfprintf+0xbe>
    31ee:	80 33       	cpi	r24, 0x30	; 48
    31f0:	69 f4       	brne	.+26     	; 0x320c <vfprintf+0xc4>
    31f2:	29 2d       	mov	r18, r9
    31f4:	21 60       	ori	r18, 0x01	; 1
    31f6:	2d c0       	rjmp	.+90     	; 0x3252 <vfprintf+0x10a>
    31f8:	39 2d       	mov	r19, r9
    31fa:	32 60       	ori	r19, 0x02	; 2
    31fc:	93 2e       	mov	r9, r19
    31fe:	89 2d       	mov	r24, r9
    3200:	84 60       	ori	r24, 0x04	; 4
    3202:	98 2e       	mov	r9, r24
    3204:	2a c0       	rjmp	.+84     	; 0x325a <vfprintf+0x112>
    3206:	e9 2d       	mov	r30, r9
    3208:	e8 60       	ori	r30, 0x08	; 8
    320a:	15 c0       	rjmp	.+42     	; 0x3236 <vfprintf+0xee>
    320c:	97 fc       	sbrc	r9, 7
    320e:	2d c0       	rjmp	.+90     	; 0x326a <vfprintf+0x122>
    3210:	20 ed       	ldi	r18, 0xD0	; 208
    3212:	28 0f       	add	r18, r24
    3214:	2a 30       	cpi	r18, 0x0A	; 10
    3216:	88 f4       	brcc	.+34     	; 0x323a <vfprintf+0xf2>
    3218:	96 fe       	sbrs	r9, 6
    321a:	06 c0       	rjmp	.+12     	; 0x3228 <vfprintf+0xe0>
    321c:	3a e0       	ldi	r19, 0x0A	; 10
    321e:	13 9f       	mul	r17, r19
    3220:	20 0d       	add	r18, r0
    3222:	11 24       	eor	r1, r1
    3224:	12 2f       	mov	r17, r18
    3226:	19 c0       	rjmp	.+50     	; 0x325a <vfprintf+0x112>
    3228:	8a e0       	ldi	r24, 0x0A	; 10
    322a:	58 9e       	mul	r5, r24
    322c:	20 0d       	add	r18, r0
    322e:	11 24       	eor	r1, r1
    3230:	52 2e       	mov	r5, r18
    3232:	e9 2d       	mov	r30, r9
    3234:	e0 62       	ori	r30, 0x20	; 32
    3236:	9e 2e       	mov	r9, r30
    3238:	10 c0       	rjmp	.+32     	; 0x325a <vfprintf+0x112>
    323a:	8e 32       	cpi	r24, 0x2E	; 46
    323c:	31 f4       	brne	.+12     	; 0x324a <vfprintf+0x102>
    323e:	96 fc       	sbrc	r9, 6
    3240:	cc c2       	rjmp	.+1432   	; 0x37da <vfprintf+0x692>
    3242:	f9 2d       	mov	r31, r9
    3244:	f0 64       	ori	r31, 0x40	; 64
    3246:	9f 2e       	mov	r9, r31
    3248:	08 c0       	rjmp	.+16     	; 0x325a <vfprintf+0x112>
    324a:	8c 36       	cpi	r24, 0x6C	; 108
    324c:	21 f4       	brne	.+8      	; 0x3256 <vfprintf+0x10e>
    324e:	29 2d       	mov	r18, r9
    3250:	20 68       	ori	r18, 0x80	; 128
    3252:	92 2e       	mov	r9, r18
    3254:	02 c0       	rjmp	.+4      	; 0x325a <vfprintf+0x112>
    3256:	88 36       	cpi	r24, 0x68	; 104
    3258:	41 f4       	brne	.+16     	; 0x326a <vfprintf+0x122>
    325a:	f1 01       	movw	r30, r2
    325c:	93 fd       	sbrc	r25, 3
    325e:	85 91       	lpm	r24, Z+
    3260:	93 ff       	sbrs	r25, 3
    3262:	81 91       	ld	r24, Z+
    3264:	1f 01       	movw	r2, r30
    3266:	81 11       	cpse	r24, r1
    3268:	b3 cf       	rjmp	.-154    	; 0x31d0 <vfprintf+0x88>
    326a:	9b eb       	ldi	r25, 0xBB	; 187
    326c:	98 0f       	add	r25, r24
    326e:	93 30       	cpi	r25, 0x03	; 3
    3270:	20 f4       	brcc	.+8      	; 0x327a <vfprintf+0x132>
    3272:	99 2d       	mov	r25, r9
    3274:	90 61       	ori	r25, 0x10	; 16
    3276:	80 5e       	subi	r24, 0xE0	; 224
    3278:	07 c0       	rjmp	.+14     	; 0x3288 <vfprintf+0x140>
    327a:	9b e9       	ldi	r25, 0x9B	; 155
    327c:	98 0f       	add	r25, r24
    327e:	93 30       	cpi	r25, 0x03	; 3
    3280:	08 f0       	brcs	.+2      	; 0x3284 <vfprintf+0x13c>
    3282:	59 c1       	rjmp	.+690    	; 0x3536 <vfprintf+0x3ee>
    3284:	99 2d       	mov	r25, r9
    3286:	9f 7e       	andi	r25, 0xEF	; 239
    3288:	96 ff       	sbrs	r25, 6
    328a:	16 e0       	ldi	r17, 0x06	; 6
    328c:	9f 73       	andi	r25, 0x3F	; 63
    328e:	99 2e       	mov	r9, r25
    3290:	85 36       	cpi	r24, 0x65	; 101
    3292:	19 f4       	brne	.+6      	; 0x329a <vfprintf+0x152>
    3294:	90 64       	ori	r25, 0x40	; 64
    3296:	99 2e       	mov	r9, r25
    3298:	08 c0       	rjmp	.+16     	; 0x32aa <vfprintf+0x162>
    329a:	86 36       	cpi	r24, 0x66	; 102
    329c:	21 f4       	brne	.+8      	; 0x32a6 <vfprintf+0x15e>
    329e:	39 2f       	mov	r19, r25
    32a0:	30 68       	ori	r19, 0x80	; 128
    32a2:	93 2e       	mov	r9, r19
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <vfprintf+0x162>
    32a6:	11 11       	cpse	r17, r1
    32a8:	11 50       	subi	r17, 0x01	; 1
    32aa:	97 fe       	sbrs	r9, 7
    32ac:	07 c0       	rjmp	.+14     	; 0x32bc <vfprintf+0x174>
    32ae:	1c 33       	cpi	r17, 0x3C	; 60
    32b0:	50 f4       	brcc	.+20     	; 0x32c6 <vfprintf+0x17e>
    32b2:	44 24       	eor	r4, r4
    32b4:	43 94       	inc	r4
    32b6:	41 0e       	add	r4, r17
    32b8:	27 e0       	ldi	r18, 0x07	; 7
    32ba:	0b c0       	rjmp	.+22     	; 0x32d2 <vfprintf+0x18a>
    32bc:	18 30       	cpi	r17, 0x08	; 8
    32be:	38 f0       	brcs	.+14     	; 0x32ce <vfprintf+0x186>
    32c0:	27 e0       	ldi	r18, 0x07	; 7
    32c2:	17 e0       	ldi	r17, 0x07	; 7
    32c4:	05 c0       	rjmp	.+10     	; 0x32d0 <vfprintf+0x188>
    32c6:	27 e0       	ldi	r18, 0x07	; 7
    32c8:	9c e3       	ldi	r25, 0x3C	; 60
    32ca:	49 2e       	mov	r4, r25
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <vfprintf+0x18a>
    32ce:	21 2f       	mov	r18, r17
    32d0:	41 2c       	mov	r4, r1
    32d2:	56 01       	movw	r10, r12
    32d4:	84 e0       	ldi	r24, 0x04	; 4
    32d6:	a8 0e       	add	r10, r24
    32d8:	b1 1c       	adc	r11, r1
    32da:	f6 01       	movw	r30, r12
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	04 2d       	mov	r16, r4
    32e6:	a3 01       	movw	r20, r6
    32e8:	28 d3       	rcall	.+1616   	; 0x393a <__ftoa_engine>
    32ea:	6c 01       	movw	r12, r24
    32ec:	f9 81       	ldd	r31, Y+1	; 0x01
    32ee:	fc 87       	std	Y+12, r31	; 0x0c
    32f0:	f0 ff       	sbrs	r31, 0
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <vfprintf+0x1b0>
    32f4:	f3 ff       	sbrs	r31, 3
    32f6:	06 c0       	rjmp	.+12     	; 0x3304 <vfprintf+0x1bc>
    32f8:	91 fc       	sbrc	r9, 1
    32fa:	06 c0       	rjmp	.+12     	; 0x3308 <vfprintf+0x1c0>
    32fc:	92 fe       	sbrs	r9, 2
    32fe:	06 c0       	rjmp	.+12     	; 0x330c <vfprintf+0x1c4>
    3300:	00 e2       	ldi	r16, 0x20	; 32
    3302:	05 c0       	rjmp	.+10     	; 0x330e <vfprintf+0x1c6>
    3304:	0d e2       	ldi	r16, 0x2D	; 45
    3306:	03 c0       	rjmp	.+6      	; 0x330e <vfprintf+0x1c6>
    3308:	0b e2       	ldi	r16, 0x2B	; 43
    330a:	01 c0       	rjmp	.+2      	; 0x330e <vfprintf+0x1c6>
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3310:	8c 70       	andi	r24, 0x0C	; 12
    3312:	19 f0       	breq	.+6      	; 0x331a <vfprintf+0x1d2>
    3314:	01 11       	cpse	r16, r1
    3316:	43 c2       	rjmp	.+1158   	; 0x379e <vfprintf+0x656>
    3318:	80 c2       	rjmp	.+1280   	; 0x381a <vfprintf+0x6d2>
    331a:	97 fe       	sbrs	r9, 7
    331c:	10 c0       	rjmp	.+32     	; 0x333e <vfprintf+0x1f6>
    331e:	4c 0c       	add	r4, r12
    3320:	fc 85       	ldd	r31, Y+12	; 0x0c
    3322:	f4 ff       	sbrs	r31, 4
    3324:	04 c0       	rjmp	.+8      	; 0x332e <vfprintf+0x1e6>
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	81 33       	cpi	r24, 0x31	; 49
    332a:	09 f4       	brne	.+2      	; 0x332e <vfprintf+0x1e6>
    332c:	4a 94       	dec	r4
    332e:	14 14       	cp	r1, r4
    3330:	74 f5       	brge	.+92     	; 0x338e <vfprintf+0x246>
    3332:	28 e0       	ldi	r18, 0x08	; 8
    3334:	24 15       	cp	r18, r4
    3336:	78 f5       	brcc	.+94     	; 0x3396 <vfprintf+0x24e>
    3338:	88 e0       	ldi	r24, 0x08	; 8
    333a:	48 2e       	mov	r4, r24
    333c:	2c c0       	rjmp	.+88     	; 0x3396 <vfprintf+0x24e>
    333e:	96 fc       	sbrc	r9, 6
    3340:	2a c0       	rjmp	.+84     	; 0x3396 <vfprintf+0x24e>
    3342:	81 2f       	mov	r24, r17
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	8c 15       	cp	r24, r12
    3348:	9d 05       	cpc	r25, r13
    334a:	9c f0       	brlt	.+38     	; 0x3372 <vfprintf+0x22a>
    334c:	3c ef       	ldi	r19, 0xFC	; 252
    334e:	c3 16       	cp	r12, r19
    3350:	3f ef       	ldi	r19, 0xFF	; 255
    3352:	d3 06       	cpc	r13, r19
    3354:	74 f0       	brlt	.+28     	; 0x3372 <vfprintf+0x22a>
    3356:	89 2d       	mov	r24, r9
    3358:	80 68       	ori	r24, 0x80	; 128
    335a:	98 2e       	mov	r9, r24
    335c:	0a c0       	rjmp	.+20     	; 0x3372 <vfprintf+0x22a>
    335e:	e2 e0       	ldi	r30, 0x02	; 2
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	ec 0f       	add	r30, r28
    3364:	fd 1f       	adc	r31, r29
    3366:	e1 0f       	add	r30, r17
    3368:	f1 1d       	adc	r31, r1
    336a:	80 81       	ld	r24, Z
    336c:	80 33       	cpi	r24, 0x30	; 48
    336e:	19 f4       	brne	.+6      	; 0x3376 <vfprintf+0x22e>
    3370:	11 50       	subi	r17, 0x01	; 1
    3372:	11 11       	cpse	r17, r1
    3374:	f4 cf       	rjmp	.-24     	; 0x335e <vfprintf+0x216>
    3376:	97 fe       	sbrs	r9, 7
    3378:	0e c0       	rjmp	.+28     	; 0x3396 <vfprintf+0x24e>
    337a:	44 24       	eor	r4, r4
    337c:	43 94       	inc	r4
    337e:	41 0e       	add	r4, r17
    3380:	81 2f       	mov	r24, r17
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	c8 16       	cp	r12, r24
    3386:	d9 06       	cpc	r13, r25
    3388:	2c f4       	brge	.+10     	; 0x3394 <vfprintf+0x24c>
    338a:	1c 19       	sub	r17, r12
    338c:	04 c0       	rjmp	.+8      	; 0x3396 <vfprintf+0x24e>
    338e:	44 24       	eor	r4, r4
    3390:	43 94       	inc	r4
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <vfprintf+0x24e>
    3394:	10 e0       	ldi	r17, 0x00	; 0
    3396:	97 fe       	sbrs	r9, 7
    3398:	06 c0       	rjmp	.+12     	; 0x33a6 <vfprintf+0x25e>
    339a:	1c 14       	cp	r1, r12
    339c:	1d 04       	cpc	r1, r13
    339e:	34 f4       	brge	.+12     	; 0x33ac <vfprintf+0x264>
    33a0:	c6 01       	movw	r24, r12
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	05 c0       	rjmp	.+10     	; 0x33b0 <vfprintf+0x268>
    33a6:	85 e0       	ldi	r24, 0x05	; 5
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <vfprintf+0x268>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	01 11       	cpse	r16, r1
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	11 23       	and	r17, r17
    33b6:	31 f0       	breq	.+12     	; 0x33c4 <vfprintf+0x27c>
    33b8:	21 2f       	mov	r18, r17
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	2f 5f       	subi	r18, 0xFF	; 255
    33be:	3f 4f       	sbci	r19, 0xFF	; 255
    33c0:	82 0f       	add	r24, r18
    33c2:	93 1f       	adc	r25, r19
    33c4:	25 2d       	mov	r18, r5
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	82 17       	cp	r24, r18
    33ca:	93 07       	cpc	r25, r19
    33cc:	14 f4       	brge	.+4      	; 0x33d2 <vfprintf+0x28a>
    33ce:	58 1a       	sub	r5, r24
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <vfprintf+0x28c>
    33d2:	51 2c       	mov	r5, r1
    33d4:	89 2d       	mov	r24, r9
    33d6:	89 70       	andi	r24, 0x09	; 9
    33d8:	41 f4       	brne	.+16     	; 0x33ea <vfprintf+0x2a2>
    33da:	55 20       	and	r5, r5
    33dc:	31 f0       	breq	.+12     	; 0x33ea <vfprintf+0x2a2>
    33de:	b7 01       	movw	r22, r14
    33e0:	80 e2       	ldi	r24, 0x20	; 32
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a9 d3       	rcall	.+1874   	; 0x3b38 <fputc>
    33e6:	5a 94       	dec	r5
    33e8:	f8 cf       	rjmp	.-16     	; 0x33da <vfprintf+0x292>
    33ea:	00 23       	and	r16, r16
    33ec:	21 f0       	breq	.+8      	; 0x33f6 <vfprintf+0x2ae>
    33ee:	b7 01       	movw	r22, r14
    33f0:	80 2f       	mov	r24, r16
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a1 d3       	rcall	.+1858   	; 0x3b38 <fputc>
    33f6:	93 fc       	sbrc	r9, 3
    33f8:	08 c0       	rjmp	.+16     	; 0x340a <vfprintf+0x2c2>
    33fa:	55 20       	and	r5, r5
    33fc:	31 f0       	breq	.+12     	; 0x340a <vfprintf+0x2c2>
    33fe:	b7 01       	movw	r22, r14
    3400:	80 e3       	ldi	r24, 0x30	; 48
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	99 d3       	rcall	.+1842   	; 0x3b38 <fputc>
    3406:	5a 94       	dec	r5
    3408:	f8 cf       	rjmp	.-16     	; 0x33fa <vfprintf+0x2b2>
    340a:	97 fe       	sbrs	r9, 7
    340c:	4a c0       	rjmp	.+148    	; 0x34a2 <vfprintf+0x35a>
    340e:	46 01       	movw	r8, r12
    3410:	d7 fe       	sbrs	r13, 7
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <vfprintf+0x2d0>
    3414:	81 2c       	mov	r8, r1
    3416:	91 2c       	mov	r9, r1
    3418:	c6 01       	movw	r24, r12
    341a:	88 19       	sub	r24, r8
    341c:	99 09       	sbc	r25, r9
    341e:	f3 01       	movw	r30, r6
    3420:	e8 0f       	add	r30, r24
    3422:	f9 1f       	adc	r31, r25
    3424:	fe 87       	std	Y+14, r31	; 0x0e
    3426:	ed 87       	std	Y+13, r30	; 0x0d
    3428:	96 01       	movw	r18, r12
    342a:	24 19       	sub	r18, r4
    342c:	31 09       	sbc	r19, r1
    342e:	38 8b       	std	Y+16, r19	; 0x10
    3430:	2f 87       	std	Y+15, r18	; 0x0f
    3432:	01 2f       	mov	r16, r17
    3434:	10 e0       	ldi	r17, 0x00	; 0
    3436:	11 95       	neg	r17
    3438:	01 95       	neg	r16
    343a:	11 09       	sbc	r17, r1
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	83 16       	cp	r8, r19
    3440:	93 06       	cpc	r9, r19
    3442:	21 f4       	brne	.+8      	; 0x344c <vfprintf+0x304>
    3444:	b7 01       	movw	r22, r14
    3446:	8e e2       	ldi	r24, 0x2E	; 46
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	76 d3       	rcall	.+1772   	; 0x3b38 <fputc>
    344c:	c8 14       	cp	r12, r8
    344e:	d9 04       	cpc	r13, r9
    3450:	4c f0       	brlt	.+18     	; 0x3464 <vfprintf+0x31c>
    3452:	8f 85       	ldd	r24, Y+15	; 0x0f
    3454:	98 89       	ldd	r25, Y+16	; 0x10
    3456:	88 15       	cp	r24, r8
    3458:	99 05       	cpc	r25, r9
    345a:	24 f4       	brge	.+8      	; 0x3464 <vfprintf+0x31c>
    345c:	ed 85       	ldd	r30, Y+13	; 0x0d
    345e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3460:	81 81       	ldd	r24, Z+1	; 0x01
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <vfprintf+0x31e>
    3464:	80 e3       	ldi	r24, 0x30	; 48
    3466:	f1 e0       	ldi	r31, 0x01	; 1
    3468:	8f 1a       	sub	r8, r31
    346a:	91 08       	sbc	r9, r1
    346c:	2d 85       	ldd	r18, Y+13	; 0x0d
    346e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3470:	2f 5f       	subi	r18, 0xFF	; 255
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	3e 87       	std	Y+14, r19	; 0x0e
    3476:	2d 87       	std	Y+13, r18	; 0x0d
    3478:	80 16       	cp	r8, r16
    347a:	91 06       	cpc	r9, r17
    347c:	24 f0       	brlt	.+8      	; 0x3486 <vfprintf+0x33e>
    347e:	b7 01       	movw	r22, r14
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	5a d3       	rcall	.+1716   	; 0x3b38 <fputc>
    3484:	db cf       	rjmp	.-74     	; 0x343c <vfprintf+0x2f4>
    3486:	c8 14       	cp	r12, r8
    3488:	d9 04       	cpc	r13, r9
    348a:	41 f4       	brne	.+16     	; 0x349c <vfprintf+0x354>
    348c:	9a 81       	ldd	r25, Y+2	; 0x02
    348e:	96 33       	cpi	r25, 0x36	; 54
    3490:	20 f4       	brcc	.+8      	; 0x349a <vfprintf+0x352>
    3492:	95 33       	cpi	r25, 0x35	; 53
    3494:	19 f4       	brne	.+6      	; 0x349c <vfprintf+0x354>
    3496:	3c 85       	ldd	r19, Y+12	; 0x0c
    3498:	34 ff       	sbrs	r19, 4
    349a:	81 e3       	ldi	r24, 0x31	; 49
    349c:	b7 01       	movw	r22, r14
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	48 c0       	rjmp	.+144    	; 0x3532 <vfprintf+0x3ea>
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	81 33       	cpi	r24, 0x31	; 49
    34a6:	19 f0       	breq	.+6      	; 0x34ae <vfprintf+0x366>
    34a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    34aa:	9f 7e       	andi	r25, 0xEF	; 239
    34ac:	9c 87       	std	Y+12, r25	; 0x0c
    34ae:	b7 01       	movw	r22, r14
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	42 d3       	rcall	.+1668   	; 0x3b38 <fputc>
    34b4:	11 11       	cpse	r17, r1
    34b6:	05 c0       	rjmp	.+10     	; 0x34c2 <vfprintf+0x37a>
    34b8:	94 fc       	sbrc	r9, 4
    34ba:	16 c0       	rjmp	.+44     	; 0x34e8 <vfprintf+0x3a0>
    34bc:	85 e6       	ldi	r24, 0x65	; 101
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	15 c0       	rjmp	.+42     	; 0x34ec <vfprintf+0x3a4>
    34c2:	b7 01       	movw	r22, r14
    34c4:	8e e2       	ldi	r24, 0x2E	; 46
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	37 d3       	rcall	.+1646   	; 0x3b38 <fputc>
    34ca:	1e 5f       	subi	r17, 0xFE	; 254
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	01 e0       	ldi	r16, 0x01	; 1
    34d0:	08 0f       	add	r16, r24
    34d2:	f3 01       	movw	r30, r6
    34d4:	e8 0f       	add	r30, r24
    34d6:	f1 1d       	adc	r31, r1
    34d8:	80 81       	ld	r24, Z
    34da:	b7 01       	movw	r22, r14
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	2c d3       	rcall	.+1624   	; 0x3b38 <fputc>
    34e0:	80 2f       	mov	r24, r16
    34e2:	01 13       	cpse	r16, r17
    34e4:	f4 cf       	rjmp	.-24     	; 0x34ce <vfprintf+0x386>
    34e6:	e8 cf       	rjmp	.-48     	; 0x34b8 <vfprintf+0x370>
    34e8:	85 e4       	ldi	r24, 0x45	; 69
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	b7 01       	movw	r22, r14
    34ee:	24 d3       	rcall	.+1608   	; 0x3b38 <fputc>
    34f0:	d7 fc       	sbrc	r13, 7
    34f2:	06 c0       	rjmp	.+12     	; 0x3500 <vfprintf+0x3b8>
    34f4:	c1 14       	cp	r12, r1
    34f6:	d1 04       	cpc	r13, r1
    34f8:	41 f4       	brne	.+16     	; 0x350a <vfprintf+0x3c2>
    34fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    34fc:	e4 ff       	sbrs	r30, 4
    34fe:	05 c0       	rjmp	.+10     	; 0x350a <vfprintf+0x3c2>
    3500:	d1 94       	neg	r13
    3502:	c1 94       	neg	r12
    3504:	d1 08       	sbc	r13, r1
    3506:	8d e2       	ldi	r24, 0x2D	; 45
    3508:	01 c0       	rjmp	.+2      	; 0x350c <vfprintf+0x3c4>
    350a:	8b e2       	ldi	r24, 0x2B	; 43
    350c:	b7 01       	movw	r22, r14
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	13 d3       	rcall	.+1574   	; 0x3b38 <fputc>
    3512:	80 e3       	ldi	r24, 0x30	; 48
    3514:	2a e0       	ldi	r18, 0x0A	; 10
    3516:	c2 16       	cp	r12, r18
    3518:	d1 04       	cpc	r13, r1
    351a:	2c f0       	brlt	.+10     	; 0x3526 <vfprintf+0x3de>
    351c:	8f 5f       	subi	r24, 0xFF	; 255
    351e:	fa e0       	ldi	r31, 0x0A	; 10
    3520:	cf 1a       	sub	r12, r31
    3522:	d1 08       	sbc	r13, r1
    3524:	f7 cf       	rjmp	.-18     	; 0x3514 <vfprintf+0x3cc>
    3526:	b7 01       	movw	r22, r14
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	06 d3       	rcall	.+1548   	; 0x3b38 <fputc>
    352c:	b7 01       	movw	r22, r14
    352e:	c6 01       	movw	r24, r12
    3530:	c0 96       	adiw	r24, 0x30	; 48
    3532:	02 d3       	rcall	.+1540   	; 0x3b38 <fputc>
    3534:	49 c1       	rjmp	.+658    	; 0x37c8 <vfprintf+0x680>
    3536:	83 36       	cpi	r24, 0x63	; 99
    3538:	31 f0       	breq	.+12     	; 0x3546 <vfprintf+0x3fe>
    353a:	83 37       	cpi	r24, 0x73	; 115
    353c:	79 f0       	breq	.+30     	; 0x355c <vfprintf+0x414>
    353e:	83 35       	cpi	r24, 0x53	; 83
    3540:	09 f0       	breq	.+2      	; 0x3544 <vfprintf+0x3fc>
    3542:	52 c0       	rjmp	.+164    	; 0x35e8 <vfprintf+0x4a0>
    3544:	1f c0       	rjmp	.+62     	; 0x3584 <vfprintf+0x43c>
    3546:	56 01       	movw	r10, r12
    3548:	32 e0       	ldi	r19, 0x02	; 2
    354a:	a3 0e       	add	r10, r19
    354c:	b1 1c       	adc	r11, r1
    354e:	f6 01       	movw	r30, r12
    3550:	80 81       	ld	r24, Z
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	01 e0       	ldi	r16, 0x01	; 1
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	63 01       	movw	r12, r6
    355a:	11 c0       	rjmp	.+34     	; 0x357e <vfprintf+0x436>
    355c:	56 01       	movw	r10, r12
    355e:	f2 e0       	ldi	r31, 0x02	; 2
    3560:	af 0e       	add	r10, r31
    3562:	b1 1c       	adc	r11, r1
    3564:	f6 01       	movw	r30, r12
    3566:	c0 80       	ld	r12, Z
    3568:	d1 80       	ldd	r13, Z+1	; 0x01
    356a:	96 fe       	sbrs	r9, 6
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <vfprintf+0x42c>
    356e:	61 2f       	mov	r22, r17
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <vfprintf+0x430>
    3574:	6f ef       	ldi	r22, 0xFF	; 255
    3576:	7f ef       	ldi	r23, 0xFF	; 255
    3578:	c6 01       	movw	r24, r12
    357a:	cb d2       	rcall	.+1430   	; 0x3b12 <strnlen>
    357c:	8c 01       	movw	r16, r24
    357e:	f9 2d       	mov	r31, r9
    3580:	ff 77       	andi	r31, 0x7F	; 127
    3582:	13 c0       	rjmp	.+38     	; 0x35aa <vfprintf+0x462>
    3584:	56 01       	movw	r10, r12
    3586:	22 e0       	ldi	r18, 0x02	; 2
    3588:	a2 0e       	add	r10, r18
    358a:	b1 1c       	adc	r11, r1
    358c:	f6 01       	movw	r30, r12
    358e:	c0 80       	ld	r12, Z
    3590:	d1 80       	ldd	r13, Z+1	; 0x01
    3592:	96 fe       	sbrs	r9, 6
    3594:	03 c0       	rjmp	.+6      	; 0x359c <vfprintf+0x454>
    3596:	61 2f       	mov	r22, r17
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <vfprintf+0x458>
    359c:	6f ef       	ldi	r22, 0xFF	; 255
    359e:	7f ef       	ldi	r23, 0xFF	; 255
    35a0:	c6 01       	movw	r24, r12
    35a2:	a3 d2       	rcall	.+1350   	; 0x3aea <strnlen_P>
    35a4:	8c 01       	movw	r16, r24
    35a6:	f9 2d       	mov	r31, r9
    35a8:	f0 68       	ori	r31, 0x80	; 128
    35aa:	9f 2e       	mov	r9, r31
    35ac:	f3 fd       	sbrc	r31, 3
    35ae:	18 c0       	rjmp	.+48     	; 0x35e0 <vfprintf+0x498>
    35b0:	85 2d       	mov	r24, r5
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	08 17       	cp	r16, r24
    35b6:	19 07       	cpc	r17, r25
    35b8:	98 f4       	brcc	.+38     	; 0x35e0 <vfprintf+0x498>
    35ba:	b7 01       	movw	r22, r14
    35bc:	80 e2       	ldi	r24, 0x20	; 32
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	bb d2       	rcall	.+1398   	; 0x3b38 <fputc>
    35c2:	5a 94       	dec	r5
    35c4:	f5 cf       	rjmp	.-22     	; 0x35b0 <vfprintf+0x468>
    35c6:	f6 01       	movw	r30, r12
    35c8:	97 fc       	sbrc	r9, 7
    35ca:	85 91       	lpm	r24, Z+
    35cc:	97 fe       	sbrs	r9, 7
    35ce:	81 91       	ld	r24, Z+
    35d0:	6f 01       	movw	r12, r30
    35d2:	b7 01       	movw	r22, r14
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	b0 d2       	rcall	.+1376   	; 0x3b38 <fputc>
    35d8:	51 10       	cpse	r5, r1
    35da:	5a 94       	dec	r5
    35dc:	01 50       	subi	r16, 0x01	; 1
    35de:	11 09       	sbc	r17, r1
    35e0:	01 15       	cp	r16, r1
    35e2:	11 05       	cpc	r17, r1
    35e4:	81 f7       	brne	.-32     	; 0x35c6 <vfprintf+0x47e>
    35e6:	f0 c0       	rjmp	.+480    	; 0x37c8 <vfprintf+0x680>
    35e8:	84 36       	cpi	r24, 0x64	; 100
    35ea:	11 f0       	breq	.+4      	; 0x35f0 <vfprintf+0x4a8>
    35ec:	89 36       	cpi	r24, 0x69	; 105
    35ee:	59 f5       	brne	.+86     	; 0x3646 <vfprintf+0x4fe>
    35f0:	56 01       	movw	r10, r12
    35f2:	97 fe       	sbrs	r9, 7
    35f4:	09 c0       	rjmp	.+18     	; 0x3608 <vfprintf+0x4c0>
    35f6:	24 e0       	ldi	r18, 0x04	; 4
    35f8:	a2 0e       	add	r10, r18
    35fa:	b1 1c       	adc	r11, r1
    35fc:	f6 01       	movw	r30, r12
    35fe:	60 81       	ld	r22, Z
    3600:	71 81       	ldd	r23, Z+1	; 0x01
    3602:	82 81       	ldd	r24, Z+2	; 0x02
    3604:	93 81       	ldd	r25, Z+3	; 0x03
    3606:	0a c0       	rjmp	.+20     	; 0x361c <vfprintf+0x4d4>
    3608:	f2 e0       	ldi	r31, 0x02	; 2
    360a:	af 0e       	add	r10, r31
    360c:	b1 1c       	adc	r11, r1
    360e:	f6 01       	movw	r30, r12
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	07 2e       	mov	r0, r23
    3616:	00 0c       	add	r0, r0
    3618:	88 0b       	sbc	r24, r24
    361a:	99 0b       	sbc	r25, r25
    361c:	f9 2d       	mov	r31, r9
    361e:	ff 76       	andi	r31, 0x6F	; 111
    3620:	9f 2e       	mov	r9, r31
    3622:	97 ff       	sbrs	r25, 7
    3624:	09 c0       	rjmp	.+18     	; 0x3638 <vfprintf+0x4f0>
    3626:	90 95       	com	r25
    3628:	80 95       	com	r24
    362a:	70 95       	com	r23
    362c:	61 95       	neg	r22
    362e:	7f 4f       	sbci	r23, 0xFF	; 255
    3630:	8f 4f       	sbci	r24, 0xFF	; 255
    3632:	9f 4f       	sbci	r25, 0xFF	; 255
    3634:	f0 68       	ori	r31, 0x80	; 128
    3636:	9f 2e       	mov	r9, r31
    3638:	2a e0       	ldi	r18, 0x0A	; 10
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	a3 01       	movw	r20, r6
    363e:	27 d3       	rcall	.+1614   	; 0x3c8e <__ultoa_invert>
    3640:	c8 2e       	mov	r12, r24
    3642:	c6 18       	sub	r12, r6
    3644:	3e c0       	rjmp	.+124    	; 0x36c2 <vfprintf+0x57a>
    3646:	09 2d       	mov	r16, r9
    3648:	85 37       	cpi	r24, 0x75	; 117
    364a:	21 f4       	brne	.+8      	; 0x3654 <vfprintf+0x50c>
    364c:	0f 7e       	andi	r16, 0xEF	; 239
    364e:	2a e0       	ldi	r18, 0x0A	; 10
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	1d c0       	rjmp	.+58     	; 0x368e <vfprintf+0x546>
    3654:	09 7f       	andi	r16, 0xF9	; 249
    3656:	8f 36       	cpi	r24, 0x6F	; 111
    3658:	91 f0       	breq	.+36     	; 0x367e <vfprintf+0x536>
    365a:	18 f4       	brcc	.+6      	; 0x3662 <vfprintf+0x51a>
    365c:	88 35       	cpi	r24, 0x58	; 88
    365e:	59 f0       	breq	.+22     	; 0x3676 <vfprintf+0x52e>
    3660:	bc c0       	rjmp	.+376    	; 0x37da <vfprintf+0x692>
    3662:	80 37       	cpi	r24, 0x70	; 112
    3664:	19 f0       	breq	.+6      	; 0x366c <vfprintf+0x524>
    3666:	88 37       	cpi	r24, 0x78	; 120
    3668:	11 f0       	breq	.+4      	; 0x366e <vfprintf+0x526>
    366a:	b7 c0       	rjmp	.+366    	; 0x37da <vfprintf+0x692>
    366c:	00 61       	ori	r16, 0x10	; 16
    366e:	04 ff       	sbrs	r16, 4
    3670:	09 c0       	rjmp	.+18     	; 0x3684 <vfprintf+0x53c>
    3672:	04 60       	ori	r16, 0x04	; 4
    3674:	07 c0       	rjmp	.+14     	; 0x3684 <vfprintf+0x53c>
    3676:	94 fe       	sbrs	r9, 4
    3678:	08 c0       	rjmp	.+16     	; 0x368a <vfprintf+0x542>
    367a:	06 60       	ori	r16, 0x06	; 6
    367c:	06 c0       	rjmp	.+12     	; 0x368a <vfprintf+0x542>
    367e:	28 e0       	ldi	r18, 0x08	; 8
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	05 c0       	rjmp	.+10     	; 0x368e <vfprintf+0x546>
    3684:	20 e1       	ldi	r18, 0x10	; 16
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	02 c0       	rjmp	.+4      	; 0x368e <vfprintf+0x546>
    368a:	20 e1       	ldi	r18, 0x10	; 16
    368c:	32 e0       	ldi	r19, 0x02	; 2
    368e:	56 01       	movw	r10, r12
    3690:	07 ff       	sbrs	r16, 7
    3692:	09 c0       	rjmp	.+18     	; 0x36a6 <vfprintf+0x55e>
    3694:	84 e0       	ldi	r24, 0x04	; 4
    3696:	a8 0e       	add	r10, r24
    3698:	b1 1c       	adc	r11, r1
    369a:	f6 01       	movw	r30, r12
    369c:	60 81       	ld	r22, Z
    369e:	71 81       	ldd	r23, Z+1	; 0x01
    36a0:	82 81       	ldd	r24, Z+2	; 0x02
    36a2:	93 81       	ldd	r25, Z+3	; 0x03
    36a4:	08 c0       	rjmp	.+16     	; 0x36b6 <vfprintf+0x56e>
    36a6:	f2 e0       	ldi	r31, 0x02	; 2
    36a8:	af 0e       	add	r10, r31
    36aa:	b1 1c       	adc	r11, r1
    36ac:	f6 01       	movw	r30, r12
    36ae:	60 81       	ld	r22, Z
    36b0:	71 81       	ldd	r23, Z+1	; 0x01
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	a3 01       	movw	r20, r6
    36b8:	ea d2       	rcall	.+1492   	; 0x3c8e <__ultoa_invert>
    36ba:	c8 2e       	mov	r12, r24
    36bc:	c6 18       	sub	r12, r6
    36be:	0f 77       	andi	r16, 0x7F	; 127
    36c0:	90 2e       	mov	r9, r16
    36c2:	96 fe       	sbrs	r9, 6
    36c4:	0b c0       	rjmp	.+22     	; 0x36dc <vfprintf+0x594>
    36c6:	09 2d       	mov	r16, r9
    36c8:	0e 7f       	andi	r16, 0xFE	; 254
    36ca:	c1 16       	cp	r12, r17
    36cc:	50 f4       	brcc	.+20     	; 0x36e2 <vfprintf+0x59a>
    36ce:	94 fe       	sbrs	r9, 4
    36d0:	0a c0       	rjmp	.+20     	; 0x36e6 <vfprintf+0x59e>
    36d2:	92 fc       	sbrc	r9, 2
    36d4:	08 c0       	rjmp	.+16     	; 0x36e6 <vfprintf+0x59e>
    36d6:	09 2d       	mov	r16, r9
    36d8:	0e 7e       	andi	r16, 0xEE	; 238
    36da:	05 c0       	rjmp	.+10     	; 0x36e6 <vfprintf+0x59e>
    36dc:	dc 2c       	mov	r13, r12
    36de:	09 2d       	mov	r16, r9
    36e0:	03 c0       	rjmp	.+6      	; 0x36e8 <vfprintf+0x5a0>
    36e2:	dc 2c       	mov	r13, r12
    36e4:	01 c0       	rjmp	.+2      	; 0x36e8 <vfprintf+0x5a0>
    36e6:	d1 2e       	mov	r13, r17
    36e8:	04 ff       	sbrs	r16, 4
    36ea:	0d c0       	rjmp	.+26     	; 0x3706 <vfprintf+0x5be>
    36ec:	fe 01       	movw	r30, r28
    36ee:	ec 0d       	add	r30, r12
    36f0:	f1 1d       	adc	r31, r1
    36f2:	80 81       	ld	r24, Z
    36f4:	80 33       	cpi	r24, 0x30	; 48
    36f6:	11 f4       	brne	.+4      	; 0x36fc <vfprintf+0x5b4>
    36f8:	09 7e       	andi	r16, 0xE9	; 233
    36fa:	09 c0       	rjmp	.+18     	; 0x370e <vfprintf+0x5c6>
    36fc:	02 ff       	sbrs	r16, 2
    36fe:	06 c0       	rjmp	.+12     	; 0x370c <vfprintf+0x5c4>
    3700:	d3 94       	inc	r13
    3702:	d3 94       	inc	r13
    3704:	04 c0       	rjmp	.+8      	; 0x370e <vfprintf+0x5c6>
    3706:	80 2f       	mov	r24, r16
    3708:	86 78       	andi	r24, 0x86	; 134
    370a:	09 f0       	breq	.+2      	; 0x370e <vfprintf+0x5c6>
    370c:	d3 94       	inc	r13
    370e:	03 fd       	sbrc	r16, 3
    3710:	10 c0       	rjmp	.+32     	; 0x3732 <vfprintf+0x5ea>
    3712:	00 ff       	sbrs	r16, 0
    3714:	06 c0       	rjmp	.+12     	; 0x3722 <vfprintf+0x5da>
    3716:	1c 2d       	mov	r17, r12
    3718:	d5 14       	cp	r13, r5
    371a:	78 f4       	brcc	.+30     	; 0x373a <vfprintf+0x5f2>
    371c:	15 0d       	add	r17, r5
    371e:	1d 19       	sub	r17, r13
    3720:	0c c0       	rjmp	.+24     	; 0x373a <vfprintf+0x5f2>
    3722:	d5 14       	cp	r13, r5
    3724:	50 f4       	brcc	.+20     	; 0x373a <vfprintf+0x5f2>
    3726:	b7 01       	movw	r22, r14
    3728:	80 e2       	ldi	r24, 0x20	; 32
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	05 d2       	rcall	.+1034   	; 0x3b38 <fputc>
    372e:	d3 94       	inc	r13
    3730:	f8 cf       	rjmp	.-16     	; 0x3722 <vfprintf+0x5da>
    3732:	d5 14       	cp	r13, r5
    3734:	10 f4       	brcc	.+4      	; 0x373a <vfprintf+0x5f2>
    3736:	5d 18       	sub	r5, r13
    3738:	01 c0       	rjmp	.+2      	; 0x373c <vfprintf+0x5f4>
    373a:	51 2c       	mov	r5, r1
    373c:	04 ff       	sbrs	r16, 4
    373e:	0f c0       	rjmp	.+30     	; 0x375e <vfprintf+0x616>
    3740:	b7 01       	movw	r22, r14
    3742:	80 e3       	ldi	r24, 0x30	; 48
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	f8 d1       	rcall	.+1008   	; 0x3b38 <fputc>
    3748:	02 ff       	sbrs	r16, 2
    374a:	16 c0       	rjmp	.+44     	; 0x3778 <vfprintf+0x630>
    374c:	01 fd       	sbrc	r16, 1
    374e:	03 c0       	rjmp	.+6      	; 0x3756 <vfprintf+0x60e>
    3750:	88 e7       	ldi	r24, 0x78	; 120
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	02 c0       	rjmp	.+4      	; 0x375a <vfprintf+0x612>
    3756:	88 e5       	ldi	r24, 0x58	; 88
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	b7 01       	movw	r22, r14
    375c:	0c c0       	rjmp	.+24     	; 0x3776 <vfprintf+0x62e>
    375e:	80 2f       	mov	r24, r16
    3760:	86 78       	andi	r24, 0x86	; 134
    3762:	51 f0       	breq	.+20     	; 0x3778 <vfprintf+0x630>
    3764:	01 ff       	sbrs	r16, 1
    3766:	02 c0       	rjmp	.+4      	; 0x376c <vfprintf+0x624>
    3768:	8b e2       	ldi	r24, 0x2B	; 43
    376a:	01 c0       	rjmp	.+2      	; 0x376e <vfprintf+0x626>
    376c:	80 e2       	ldi	r24, 0x20	; 32
    376e:	07 fd       	sbrc	r16, 7
    3770:	8d e2       	ldi	r24, 0x2D	; 45
    3772:	b7 01       	movw	r22, r14
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	e0 d1       	rcall	.+960    	; 0x3b38 <fputc>
    3778:	c1 16       	cp	r12, r17
    377a:	30 f4       	brcc	.+12     	; 0x3788 <vfprintf+0x640>
    377c:	b7 01       	movw	r22, r14
    377e:	80 e3       	ldi	r24, 0x30	; 48
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	da d1       	rcall	.+948    	; 0x3b38 <fputc>
    3784:	11 50       	subi	r17, 0x01	; 1
    3786:	f8 cf       	rjmp	.-16     	; 0x3778 <vfprintf+0x630>
    3788:	ca 94       	dec	r12
    378a:	f3 01       	movw	r30, r6
    378c:	ec 0d       	add	r30, r12
    378e:	f1 1d       	adc	r31, r1
    3790:	80 81       	ld	r24, Z
    3792:	b7 01       	movw	r22, r14
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	d0 d1       	rcall	.+928    	; 0x3b38 <fputc>
    3798:	c1 10       	cpse	r12, r1
    379a:	f6 cf       	rjmp	.-20     	; 0x3788 <vfprintf+0x640>
    379c:	15 c0       	rjmp	.+42     	; 0x37c8 <vfprintf+0x680>
    379e:	f4 e0       	ldi	r31, 0x04	; 4
    37a0:	f5 15       	cp	r31, r5
    37a2:	50 f5       	brcc	.+84     	; 0x37f8 <vfprintf+0x6b0>
    37a4:	84 e0       	ldi	r24, 0x04	; 4
    37a6:	58 1a       	sub	r5, r24
    37a8:	93 fe       	sbrs	r9, 3
    37aa:	1e c0       	rjmp	.+60     	; 0x37e8 <vfprintf+0x6a0>
    37ac:	01 11       	cpse	r16, r1
    37ae:	25 c0       	rjmp	.+74     	; 0x37fa <vfprintf+0x6b2>
    37b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    37b2:	23 ff       	sbrs	r18, 3
    37b4:	27 c0       	rjmp	.+78     	; 0x3804 <vfprintf+0x6bc>
    37b6:	04 ee       	ldi	r16, 0xE4	; 228
    37b8:	10 e0       	ldi	r17, 0x00	; 0
    37ba:	39 2d       	mov	r19, r9
    37bc:	30 71       	andi	r19, 0x10	; 16
    37be:	93 2e       	mov	r9, r19
    37c0:	f8 01       	movw	r30, r16
    37c2:	84 91       	lpm	r24, Z
    37c4:	81 11       	cpse	r24, r1
    37c6:	21 c0       	rjmp	.+66     	; 0x380a <vfprintf+0x6c2>
    37c8:	55 20       	and	r5, r5
    37ca:	09 f4       	brne	.+2      	; 0x37ce <vfprintf+0x686>
    37cc:	fc cc       	rjmp	.-1544   	; 0x31c6 <vfprintf+0x7e>
    37ce:	b7 01       	movw	r22, r14
    37d0:	80 e2       	ldi	r24, 0x20	; 32
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	b1 d1       	rcall	.+866    	; 0x3b38 <fputc>
    37d6:	5a 94       	dec	r5
    37d8:	f7 cf       	rjmp	.-18     	; 0x37c8 <vfprintf+0x680>
    37da:	f7 01       	movw	r30, r14
    37dc:	86 81       	ldd	r24, Z+6	; 0x06
    37de:	97 81       	ldd	r25, Z+7	; 0x07
    37e0:	23 c0       	rjmp	.+70     	; 0x3828 <vfprintf+0x6e0>
    37e2:	8f ef       	ldi	r24, 0xFF	; 255
    37e4:	9f ef       	ldi	r25, 0xFF	; 255
    37e6:	20 c0       	rjmp	.+64     	; 0x3828 <vfprintf+0x6e0>
    37e8:	b7 01       	movw	r22, r14
    37ea:	80 e2       	ldi	r24, 0x20	; 32
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	a4 d1       	rcall	.+840    	; 0x3b38 <fputc>
    37f0:	5a 94       	dec	r5
    37f2:	51 10       	cpse	r5, r1
    37f4:	f9 cf       	rjmp	.-14     	; 0x37e8 <vfprintf+0x6a0>
    37f6:	da cf       	rjmp	.-76     	; 0x37ac <vfprintf+0x664>
    37f8:	51 2c       	mov	r5, r1
    37fa:	b7 01       	movw	r22, r14
    37fc:	80 2f       	mov	r24, r16
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9b d1       	rcall	.+822    	; 0x3b38 <fputc>
    3802:	d6 cf       	rjmp	.-84     	; 0x37b0 <vfprintf+0x668>
    3804:	08 ee       	ldi	r16, 0xE8	; 232
    3806:	10 e0       	ldi	r17, 0x00	; 0
    3808:	d8 cf       	rjmp	.-80     	; 0x37ba <vfprintf+0x672>
    380a:	91 10       	cpse	r9, r1
    380c:	80 52       	subi	r24, 0x20	; 32
    380e:	b7 01       	movw	r22, r14
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	92 d1       	rcall	.+804    	; 0x3b38 <fputc>
    3814:	0f 5f       	subi	r16, 0xFF	; 255
    3816:	1f 4f       	sbci	r17, 0xFF	; 255
    3818:	d3 cf       	rjmp	.-90     	; 0x37c0 <vfprintf+0x678>
    381a:	23 e0       	ldi	r18, 0x03	; 3
    381c:	25 15       	cp	r18, r5
    381e:	10 f4       	brcc	.+4      	; 0x3824 <vfprintf+0x6dc>
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	c1 cf       	rjmp	.-126    	; 0x37a6 <vfprintf+0x65e>
    3824:	51 2c       	mov	r5, r1
    3826:	c4 cf       	rjmp	.-120    	; 0x37b0 <vfprintf+0x668>
    3828:	60 96       	adiw	r28, 0x10	; 16
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	ff 90       	pop	r15
    383e:	ef 90       	pop	r14
    3840:	df 90       	pop	r13
    3842:	cf 90       	pop	r12
    3844:	bf 90       	pop	r11
    3846:	af 90       	pop	r10
    3848:	9f 90       	pop	r9
    384a:	8f 90       	pop	r8
    384c:	7f 90       	pop	r7
    384e:	6f 90       	pop	r6
    3850:	5f 90       	pop	r5
    3852:	4f 90       	pop	r4
    3854:	3f 90       	pop	r3
    3856:	2f 90       	pop	r2
    3858:	08 95       	ret

0000385a <__udivmodsi4>:
    385a:	a1 e2       	ldi	r26, 0x21	; 33
    385c:	1a 2e       	mov	r1, r26
    385e:	aa 1b       	sub	r26, r26
    3860:	bb 1b       	sub	r27, r27
    3862:	fd 01       	movw	r30, r26
    3864:	0d c0       	rjmp	.+26     	; 0x3880 <__udivmodsi4_ep>

00003866 <__udivmodsi4_loop>:
    3866:	aa 1f       	adc	r26, r26
    3868:	bb 1f       	adc	r27, r27
    386a:	ee 1f       	adc	r30, r30
    386c:	ff 1f       	adc	r31, r31
    386e:	a2 17       	cp	r26, r18
    3870:	b3 07       	cpc	r27, r19
    3872:	e4 07       	cpc	r30, r20
    3874:	f5 07       	cpc	r31, r21
    3876:	20 f0       	brcs	.+8      	; 0x3880 <__udivmodsi4_ep>
    3878:	a2 1b       	sub	r26, r18
    387a:	b3 0b       	sbc	r27, r19
    387c:	e4 0b       	sbc	r30, r20
    387e:	f5 0b       	sbc	r31, r21

00003880 <__udivmodsi4_ep>:
    3880:	66 1f       	adc	r22, r22
    3882:	77 1f       	adc	r23, r23
    3884:	88 1f       	adc	r24, r24
    3886:	99 1f       	adc	r25, r25
    3888:	1a 94       	dec	r1
    388a:	69 f7       	brne	.-38     	; 0x3866 <__udivmodsi4_loop>
    388c:	60 95       	com	r22
    388e:	70 95       	com	r23
    3890:	80 95       	com	r24
    3892:	90 95       	com	r25
    3894:	9b 01       	movw	r18, r22
    3896:	ac 01       	movw	r20, r24
    3898:	bd 01       	movw	r22, r26
    389a:	cf 01       	movw	r24, r30
    389c:	08 95       	ret

0000389e <__divmodsi4>:
    389e:	05 2e       	mov	r0, r21
    38a0:	97 fb       	bst	r25, 7
    38a2:	16 f4       	brtc	.+4      	; 0x38a8 <__divmodsi4+0xa>
    38a4:	00 94       	com	r0
    38a6:	0f d0       	rcall	.+30     	; 0x38c6 <__negsi2>
    38a8:	57 fd       	sbrc	r21, 7
    38aa:	05 d0       	rcall	.+10     	; 0x38b6 <__divmodsi4_neg2>
    38ac:	d6 df       	rcall	.-84     	; 0x385a <__udivmodsi4>
    38ae:	07 fc       	sbrc	r0, 7
    38b0:	02 d0       	rcall	.+4      	; 0x38b6 <__divmodsi4_neg2>
    38b2:	46 f4       	brtc	.+16     	; 0x38c4 <__divmodsi4_exit>
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <__negsi2>

000038b6 <__divmodsi4_neg2>:
    38b6:	50 95       	com	r21
    38b8:	40 95       	com	r20
    38ba:	30 95       	com	r19
    38bc:	21 95       	neg	r18
    38be:	3f 4f       	sbci	r19, 0xFF	; 255
    38c0:	4f 4f       	sbci	r20, 0xFF	; 255
    38c2:	5f 4f       	sbci	r21, 0xFF	; 255

000038c4 <__divmodsi4_exit>:
    38c4:	08 95       	ret

000038c6 <__negsi2>:
    38c6:	90 95       	com	r25
    38c8:	80 95       	com	r24
    38ca:	70 95       	com	r23
    38cc:	61 95       	neg	r22
    38ce:	7f 4f       	sbci	r23, 0xFF	; 255
    38d0:	8f 4f       	sbci	r24, 0xFF	; 255
    38d2:	9f 4f       	sbci	r25, 0xFF	; 255
    38d4:	08 95       	ret

000038d6 <__umulhisi3>:
    38d6:	a2 9f       	mul	r26, r18
    38d8:	b0 01       	movw	r22, r0
    38da:	b3 9f       	mul	r27, r19
    38dc:	c0 01       	movw	r24, r0
    38de:	a3 9f       	mul	r26, r19
    38e0:	70 0d       	add	r23, r0
    38e2:	81 1d       	adc	r24, r1
    38e4:	11 24       	eor	r1, r1
    38e6:	91 1d       	adc	r25, r1
    38e8:	b2 9f       	mul	r27, r18
    38ea:	70 0d       	add	r23, r0
    38ec:	81 1d       	adc	r24, r1
    38ee:	11 24       	eor	r1, r1
    38f0:	91 1d       	adc	r25, r1
    38f2:	08 95       	ret

000038f4 <__usmulhisi3>:
    38f4:	f0 df       	rcall	.-32     	; 0x38d6 <__umulhisi3>

000038f6 <__usmulhisi3_tail>:
    38f6:	b7 ff       	sbrs	r27, 7
    38f8:	08 95       	ret
    38fa:	82 1b       	sub	r24, r18
    38fc:	93 0b       	sbc	r25, r19
    38fe:	08 95       	ret

00003900 <atoi>:
    3900:	fc 01       	movw	r30, r24
    3902:	88 27       	eor	r24, r24
    3904:	99 27       	eor	r25, r25
    3906:	e8 94       	clt
    3908:	21 91       	ld	r18, Z+
    390a:	20 32       	cpi	r18, 0x20	; 32
    390c:	e9 f3       	breq	.-6      	; 0x3908 <atoi+0x8>
    390e:	29 30       	cpi	r18, 0x09	; 9
    3910:	10 f0       	brcs	.+4      	; 0x3916 <atoi+0x16>
    3912:	2e 30       	cpi	r18, 0x0E	; 14
    3914:	c8 f3       	brcs	.-14     	; 0x3908 <atoi+0x8>
    3916:	2b 32       	cpi	r18, 0x2B	; 43
    3918:	39 f0       	breq	.+14     	; 0x3928 <atoi+0x28>
    391a:	2d 32       	cpi	r18, 0x2D	; 45
    391c:	31 f4       	brne	.+12     	; 0x392a <atoi+0x2a>
    391e:	68 94       	set
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <atoi+0x28>
    3922:	02 d1       	rcall	.+516    	; 0x3b28 <__mulhi_const_10>
    3924:	82 0f       	add	r24, r18
    3926:	91 1d       	adc	r25, r1
    3928:	21 91       	ld	r18, Z+
    392a:	20 53       	subi	r18, 0x30	; 48
    392c:	2a 30       	cpi	r18, 0x0A	; 10
    392e:	c8 f3       	brcs	.-14     	; 0x3922 <atoi+0x22>
    3930:	1e f4       	brtc	.+6      	; 0x3938 <atoi+0x38>
    3932:	90 95       	com	r25
    3934:	81 95       	neg	r24
    3936:	9f 4f       	sbci	r25, 0xFF	; 255
    3938:	08 95       	ret

0000393a <__ftoa_engine>:
    393a:	28 30       	cpi	r18, 0x08	; 8
    393c:	08 f0       	brcs	.+2      	; 0x3940 <__ftoa_engine+0x6>
    393e:	27 e0       	ldi	r18, 0x07	; 7
    3940:	33 27       	eor	r19, r19
    3942:	da 01       	movw	r26, r20
    3944:	99 0f       	add	r25, r25
    3946:	31 1d       	adc	r19, r1
    3948:	87 fd       	sbrc	r24, 7
    394a:	91 60       	ori	r25, 0x01	; 1
    394c:	00 96       	adiw	r24, 0x00	; 0
    394e:	61 05       	cpc	r22, r1
    3950:	71 05       	cpc	r23, r1
    3952:	39 f4       	brne	.+14     	; 0x3962 <__ftoa_engine+0x28>
    3954:	32 60       	ori	r19, 0x02	; 2
    3956:	2e 5f       	subi	r18, 0xFE	; 254
    3958:	3d 93       	st	X+, r19
    395a:	30 e3       	ldi	r19, 0x30	; 48
    395c:	2a 95       	dec	r18
    395e:	e1 f7       	brne	.-8      	; 0x3958 <__ftoa_engine+0x1e>
    3960:	08 95       	ret
    3962:	9f 3f       	cpi	r25, 0xFF	; 255
    3964:	30 f0       	brcs	.+12     	; 0x3972 <__ftoa_engine+0x38>
    3966:	80 38       	cpi	r24, 0x80	; 128
    3968:	71 05       	cpc	r23, r1
    396a:	61 05       	cpc	r22, r1
    396c:	09 f0       	breq	.+2      	; 0x3970 <__ftoa_engine+0x36>
    396e:	3c 5f       	subi	r19, 0xFC	; 252
    3970:	3c 5f       	subi	r19, 0xFC	; 252
    3972:	3d 93       	st	X+, r19
    3974:	91 30       	cpi	r25, 0x01	; 1
    3976:	08 f0       	brcs	.+2      	; 0x397a <__ftoa_engine+0x40>
    3978:	80 68       	ori	r24, 0x80	; 128
    397a:	91 1d       	adc	r25, r1
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	1f 93       	push	r17
    3982:	0f 93       	push	r16
    3984:	ff 92       	push	r15
    3986:	ef 92       	push	r14
    3988:	19 2f       	mov	r17, r25
    398a:	98 7f       	andi	r25, 0xF8	; 248
    398c:	96 95       	lsr	r25
    398e:	e9 2f       	mov	r30, r25
    3990:	96 95       	lsr	r25
    3992:	96 95       	lsr	r25
    3994:	e9 0f       	add	r30, r25
    3996:	ff 27       	eor	r31, r31
    3998:	ea 5b       	subi	r30, 0xBA	; 186
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	99 27       	eor	r25, r25
    399e:	33 27       	eor	r19, r19
    39a0:	ee 24       	eor	r14, r14
    39a2:	ff 24       	eor	r15, r15
    39a4:	a7 01       	movw	r20, r14
    39a6:	e7 01       	movw	r28, r14
    39a8:	05 90       	lpm	r0, Z+
    39aa:	08 94       	sec
    39ac:	07 94       	ror	r0
    39ae:	28 f4       	brcc	.+10     	; 0x39ba <__ftoa_engine+0x80>
    39b0:	36 0f       	add	r19, r22
    39b2:	e7 1e       	adc	r14, r23
    39b4:	f8 1e       	adc	r15, r24
    39b6:	49 1f       	adc	r20, r25
    39b8:	51 1d       	adc	r21, r1
    39ba:	66 0f       	add	r22, r22
    39bc:	77 1f       	adc	r23, r23
    39be:	88 1f       	adc	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	06 94       	lsr	r0
    39c4:	a1 f7       	brne	.-24     	; 0x39ae <__ftoa_engine+0x74>
    39c6:	05 90       	lpm	r0, Z+
    39c8:	07 94       	ror	r0
    39ca:	28 f4       	brcc	.+10     	; 0x39d6 <__ftoa_engine+0x9c>
    39cc:	e7 0e       	add	r14, r23
    39ce:	f8 1e       	adc	r15, r24
    39d0:	49 1f       	adc	r20, r25
    39d2:	56 1f       	adc	r21, r22
    39d4:	c1 1d       	adc	r28, r1
    39d6:	77 0f       	add	r23, r23
    39d8:	88 1f       	adc	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	66 1f       	adc	r22, r22
    39de:	06 94       	lsr	r0
    39e0:	a1 f7       	brne	.-24     	; 0x39ca <__ftoa_engine+0x90>
    39e2:	05 90       	lpm	r0, Z+
    39e4:	07 94       	ror	r0
    39e6:	28 f4       	brcc	.+10     	; 0x39f2 <__ftoa_engine+0xb8>
    39e8:	f8 0e       	add	r15, r24
    39ea:	49 1f       	adc	r20, r25
    39ec:	56 1f       	adc	r21, r22
    39ee:	c7 1f       	adc	r28, r23
    39f0:	d1 1d       	adc	r29, r1
    39f2:	88 0f       	add	r24, r24
    39f4:	99 1f       	adc	r25, r25
    39f6:	66 1f       	adc	r22, r22
    39f8:	77 1f       	adc	r23, r23
    39fa:	06 94       	lsr	r0
    39fc:	a1 f7       	brne	.-24     	; 0x39e6 <__ftoa_engine+0xac>
    39fe:	05 90       	lpm	r0, Z+
    3a00:	07 94       	ror	r0
    3a02:	20 f4       	brcc	.+8      	; 0x3a0c <__ftoa_engine+0xd2>
    3a04:	49 0f       	add	r20, r25
    3a06:	56 1f       	adc	r21, r22
    3a08:	c7 1f       	adc	r28, r23
    3a0a:	d8 1f       	adc	r29, r24
    3a0c:	99 0f       	add	r25, r25
    3a0e:	66 1f       	adc	r22, r22
    3a10:	77 1f       	adc	r23, r23
    3a12:	88 1f       	adc	r24, r24
    3a14:	06 94       	lsr	r0
    3a16:	a9 f7       	brne	.-22     	; 0x3a02 <__ftoa_engine+0xc8>
    3a18:	84 91       	lpm	r24, Z
    3a1a:	10 95       	com	r17
    3a1c:	17 70       	andi	r17, 0x07	; 7
    3a1e:	41 f0       	breq	.+16     	; 0x3a30 <__ftoa_engine+0xf6>
    3a20:	d6 95       	lsr	r29
    3a22:	c7 95       	ror	r28
    3a24:	57 95       	ror	r21
    3a26:	47 95       	ror	r20
    3a28:	f7 94       	ror	r15
    3a2a:	e7 94       	ror	r14
    3a2c:	1a 95       	dec	r17
    3a2e:	c1 f7       	brne	.-16     	; 0x3a20 <__ftoa_engine+0xe6>
    3a30:	ec ee       	ldi	r30, 0xEC	; 236
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	68 94       	set
    3a36:	15 90       	lpm	r1, Z+
    3a38:	15 91       	lpm	r17, Z+
    3a3a:	35 91       	lpm	r19, Z+
    3a3c:	65 91       	lpm	r22, Z+
    3a3e:	95 91       	lpm	r25, Z+
    3a40:	05 90       	lpm	r0, Z+
    3a42:	7f e2       	ldi	r23, 0x2F	; 47
    3a44:	73 95       	inc	r23
    3a46:	e1 18       	sub	r14, r1
    3a48:	f1 0a       	sbc	r15, r17
    3a4a:	43 0b       	sbc	r20, r19
    3a4c:	56 0b       	sbc	r21, r22
    3a4e:	c9 0b       	sbc	r28, r25
    3a50:	d0 09       	sbc	r29, r0
    3a52:	c0 f7       	brcc	.-16     	; 0x3a44 <__ftoa_engine+0x10a>
    3a54:	e1 0c       	add	r14, r1
    3a56:	f1 1e       	adc	r15, r17
    3a58:	43 1f       	adc	r20, r19
    3a5a:	56 1f       	adc	r21, r22
    3a5c:	c9 1f       	adc	r28, r25
    3a5e:	d0 1d       	adc	r29, r0
    3a60:	7e f4       	brtc	.+30     	; 0x3a80 <__ftoa_engine+0x146>
    3a62:	70 33       	cpi	r23, 0x30	; 48
    3a64:	11 f4       	brne	.+4      	; 0x3a6a <__ftoa_engine+0x130>
    3a66:	8a 95       	dec	r24
    3a68:	e6 cf       	rjmp	.-52     	; 0x3a36 <__ftoa_engine+0xfc>
    3a6a:	e8 94       	clt
    3a6c:	01 50       	subi	r16, 0x01	; 1
    3a6e:	30 f0       	brcs	.+12     	; 0x3a7c <__ftoa_engine+0x142>
    3a70:	08 0f       	add	r16, r24
    3a72:	0a f4       	brpl	.+2      	; 0x3a76 <__ftoa_engine+0x13c>
    3a74:	00 27       	eor	r16, r16
    3a76:	02 17       	cp	r16, r18
    3a78:	08 f4       	brcc	.+2      	; 0x3a7c <__ftoa_engine+0x142>
    3a7a:	20 2f       	mov	r18, r16
    3a7c:	23 95       	inc	r18
    3a7e:	02 2f       	mov	r16, r18
    3a80:	7a 33       	cpi	r23, 0x3A	; 58
    3a82:	28 f0       	brcs	.+10     	; 0x3a8e <__ftoa_engine+0x154>
    3a84:	79 e3       	ldi	r23, 0x39	; 57
    3a86:	7d 93       	st	X+, r23
    3a88:	2a 95       	dec	r18
    3a8a:	e9 f7       	brne	.-6      	; 0x3a86 <__ftoa_engine+0x14c>
    3a8c:	10 c0       	rjmp	.+32     	; 0x3aae <__ftoa_engine+0x174>
    3a8e:	7d 93       	st	X+, r23
    3a90:	2a 95       	dec	r18
    3a92:	89 f6       	brne	.-94     	; 0x3a36 <__ftoa_engine+0xfc>
    3a94:	06 94       	lsr	r0
    3a96:	97 95       	ror	r25
    3a98:	67 95       	ror	r22
    3a9a:	37 95       	ror	r19
    3a9c:	17 95       	ror	r17
    3a9e:	17 94       	ror	r1
    3aa0:	e1 18       	sub	r14, r1
    3aa2:	f1 0a       	sbc	r15, r17
    3aa4:	43 0b       	sbc	r20, r19
    3aa6:	56 0b       	sbc	r21, r22
    3aa8:	c9 0b       	sbc	r28, r25
    3aaa:	d0 09       	sbc	r29, r0
    3aac:	98 f0       	brcs	.+38     	; 0x3ad4 <__ftoa_engine+0x19a>
    3aae:	23 95       	inc	r18
    3ab0:	7e 91       	ld	r23, -X
    3ab2:	73 95       	inc	r23
    3ab4:	7a 33       	cpi	r23, 0x3A	; 58
    3ab6:	08 f0       	brcs	.+2      	; 0x3aba <__ftoa_engine+0x180>
    3ab8:	70 e3       	ldi	r23, 0x30	; 48
    3aba:	7c 93       	st	X, r23
    3abc:	20 13       	cpse	r18, r16
    3abe:	b8 f7       	brcc	.-18     	; 0x3aae <__ftoa_engine+0x174>
    3ac0:	7e 91       	ld	r23, -X
    3ac2:	70 61       	ori	r23, 0x10	; 16
    3ac4:	7d 93       	st	X+, r23
    3ac6:	30 f0       	brcs	.+12     	; 0x3ad4 <__ftoa_engine+0x19a>
    3ac8:	83 95       	inc	r24
    3aca:	71 e3       	ldi	r23, 0x31	; 49
    3acc:	7d 93       	st	X+, r23
    3ace:	70 e3       	ldi	r23, 0x30	; 48
    3ad0:	2a 95       	dec	r18
    3ad2:	e1 f7       	brne	.-8      	; 0x3acc <__ftoa_engine+0x192>
    3ad4:	11 24       	eor	r1, r1
    3ad6:	ef 90       	pop	r14
    3ad8:	ff 90       	pop	r15
    3ada:	0f 91       	pop	r16
    3adc:	1f 91       	pop	r17
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	99 27       	eor	r25, r25
    3ae4:	87 fd       	sbrc	r24, 7
    3ae6:	90 95       	com	r25
    3ae8:	08 95       	ret

00003aea <strnlen_P>:
    3aea:	fc 01       	movw	r30, r24
    3aec:	05 90       	lpm	r0, Z+
    3aee:	61 50       	subi	r22, 0x01	; 1
    3af0:	70 40       	sbci	r23, 0x00	; 0
    3af2:	01 10       	cpse	r0, r1
    3af4:	d8 f7       	brcc	.-10     	; 0x3aec <strnlen_P+0x2>
    3af6:	80 95       	com	r24
    3af8:	90 95       	com	r25
    3afa:	8e 0f       	add	r24, r30
    3afc:	9f 1f       	adc	r25, r31
    3afe:	08 95       	ret

00003b00 <strcmp>:
    3b00:	fb 01       	movw	r30, r22
    3b02:	dc 01       	movw	r26, r24
    3b04:	8d 91       	ld	r24, X+
    3b06:	01 90       	ld	r0, Z+
    3b08:	80 19       	sub	r24, r0
    3b0a:	01 10       	cpse	r0, r1
    3b0c:	d9 f3       	breq	.-10     	; 0x3b04 <strcmp+0x4>
    3b0e:	99 0b       	sbc	r25, r25
    3b10:	08 95       	ret

00003b12 <strnlen>:
    3b12:	fc 01       	movw	r30, r24
    3b14:	61 50       	subi	r22, 0x01	; 1
    3b16:	70 40       	sbci	r23, 0x00	; 0
    3b18:	01 90       	ld	r0, Z+
    3b1a:	01 10       	cpse	r0, r1
    3b1c:	d8 f7       	brcc	.-10     	; 0x3b14 <strnlen+0x2>
    3b1e:	80 95       	com	r24
    3b20:	90 95       	com	r25
    3b22:	8e 0f       	add	r24, r30
    3b24:	9f 1f       	adc	r25, r31
    3b26:	08 95       	ret

00003b28 <__mulhi_const_10>:
    3b28:	7a e0       	ldi	r23, 0x0A	; 10
    3b2a:	97 9f       	mul	r25, r23
    3b2c:	90 2d       	mov	r25, r0
    3b2e:	87 9f       	mul	r24, r23
    3b30:	80 2d       	mov	r24, r0
    3b32:	91 0d       	add	r25, r1
    3b34:	11 24       	eor	r1, r1
    3b36:	08 95       	ret

00003b38 <fputc>:
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	fb 01       	movw	r30, r22
    3b42:	23 81       	ldd	r18, Z+3	; 0x03
    3b44:	21 fd       	sbrc	r18, 1
    3b46:	03 c0       	rjmp	.+6      	; 0x3b4e <fputc+0x16>
    3b48:	8f ef       	ldi	r24, 0xFF	; 255
    3b4a:	9f ef       	ldi	r25, 0xFF	; 255
    3b4c:	2c c0       	rjmp	.+88     	; 0x3ba6 <fputc+0x6e>
    3b4e:	22 ff       	sbrs	r18, 2
    3b50:	16 c0       	rjmp	.+44     	; 0x3b7e <fputc+0x46>
    3b52:	46 81       	ldd	r20, Z+6	; 0x06
    3b54:	57 81       	ldd	r21, Z+7	; 0x07
    3b56:	24 81       	ldd	r18, Z+4	; 0x04
    3b58:	35 81       	ldd	r19, Z+5	; 0x05
    3b5a:	42 17       	cp	r20, r18
    3b5c:	53 07       	cpc	r21, r19
    3b5e:	44 f4       	brge	.+16     	; 0x3b70 <fputc+0x38>
    3b60:	a0 81       	ld	r26, Z
    3b62:	b1 81       	ldd	r27, Z+1	; 0x01
    3b64:	9d 01       	movw	r18, r26
    3b66:	2f 5f       	subi	r18, 0xFF	; 255
    3b68:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6a:	31 83       	std	Z+1, r19	; 0x01
    3b6c:	20 83       	st	Z, r18
    3b6e:	8c 93       	st	X, r24
    3b70:	26 81       	ldd	r18, Z+6	; 0x06
    3b72:	37 81       	ldd	r19, Z+7	; 0x07
    3b74:	2f 5f       	subi	r18, 0xFF	; 255
    3b76:	3f 4f       	sbci	r19, 0xFF	; 255
    3b78:	37 83       	std	Z+7, r19	; 0x07
    3b7a:	26 83       	std	Z+6, r18	; 0x06
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <fputc+0x6e>
    3b7e:	8b 01       	movw	r16, r22
    3b80:	ec 01       	movw	r28, r24
    3b82:	fb 01       	movw	r30, r22
    3b84:	00 84       	ldd	r0, Z+8	; 0x08
    3b86:	f1 85       	ldd	r31, Z+9	; 0x09
    3b88:	e0 2d       	mov	r30, r0
    3b8a:	19 95       	eicall
    3b8c:	89 2b       	or	r24, r25
    3b8e:	e1 f6       	brne	.-72     	; 0x3b48 <fputc+0x10>
    3b90:	d8 01       	movw	r26, r16
    3b92:	16 96       	adiw	r26, 0x06	; 6
    3b94:	8d 91       	ld	r24, X+
    3b96:	9c 91       	ld	r25, X
    3b98:	17 97       	sbiw	r26, 0x07	; 7
    3b9a:	01 96       	adiw	r24, 0x01	; 1
    3b9c:	17 96       	adiw	r26, 0x07	; 7
    3b9e:	9c 93       	st	X, r25
    3ba0:	8e 93       	st	-X, r24
    3ba2:	16 97       	sbiw	r26, 0x06	; 6
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	df 91       	pop	r29
    3ba8:	cf 91       	pop	r28
    3baa:	1f 91       	pop	r17
    3bac:	0f 91       	pop	r16
    3bae:	08 95       	ret

00003bb0 <printf>:
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	ae 01       	movw	r20, r28
    3bba:	4a 5f       	subi	r20, 0xFA	; 250
    3bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bbe:	fa 01       	movw	r30, r20
    3bc0:	61 91       	ld	r22, Z+
    3bc2:	71 91       	ld	r23, Z+
    3bc4:	af 01       	movw	r20, r30
    3bc6:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <__iob+0x2>
    3bca:	90 91 0f 0a 	lds	r25, 0x0A0F	; 0x800a0f <__iob+0x3>
    3bce:	bc da       	rcall	.-2696   	; 0x3148 <vfprintf>
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	08 95       	ret

00003bd6 <printf_P>:
    3bd6:	0f 93       	push	r16
    3bd8:	1f 93       	push	r17
    3bda:	cf 93       	push	r28
    3bdc:	df 93       	push	r29
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	ae 01       	movw	r20, r28
    3be4:	48 5f       	subi	r20, 0xF8	; 248
    3be6:	5f 4f       	sbci	r21, 0xFF	; 255
    3be8:	da 01       	movw	r26, r20
    3bea:	6d 91       	ld	r22, X+
    3bec:	7d 91       	ld	r23, X+
    3bee:	ad 01       	movw	r20, r26
    3bf0:	0c e0       	ldi	r16, 0x0C	; 12
    3bf2:	1a e0       	ldi	r17, 0x0A	; 10
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	13 96       	adiw	r26, 0x03	; 3
    3bfe:	2c 91       	ld	r18, X
    3c00:	13 97       	sbiw	r26, 0x03	; 3
    3c02:	28 60       	ori	r18, 0x08	; 8
    3c04:	13 96       	adiw	r26, 0x03	; 3
    3c06:	2c 93       	st	X, r18
    3c08:	9f da       	rcall	.-2754   	; 0x3148 <vfprintf>
    3c0a:	d8 01       	movw	r26, r16
    3c0c:	12 96       	adiw	r26, 0x02	; 2
    3c0e:	ed 91       	ld	r30, X+
    3c10:	fc 91       	ld	r31, X
    3c12:	13 97       	sbiw	r26, 0x03	; 3
    3c14:	23 81       	ldd	r18, Z+3	; 0x03
    3c16:	27 7f       	andi	r18, 0xF7	; 247
    3c18:	23 83       	std	Z+3, r18	; 0x03
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	08 95       	ret

00003c24 <putchar>:
    3c24:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    3c28:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    3c2c:	85 cf       	rjmp	.-246    	; 0x3b38 <fputc>

00003c2e <puts>:
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <__iob+0x2>
    3c3a:	f0 91 0f 0a 	lds	r31, 0x0A0F	; 0x800a0f <__iob+0x3>
    3c3e:	23 81       	ldd	r18, Z+3	; 0x03
    3c40:	21 ff       	sbrs	r18, 1
    3c42:	1b c0       	rjmp	.+54     	; 0x3c7a <puts+0x4c>
    3c44:	8c 01       	movw	r16, r24
    3c46:	d0 e0       	ldi	r29, 0x00	; 0
    3c48:	c0 e0       	ldi	r28, 0x00	; 0
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	81 91       	ld	r24, Z+
    3c4e:	8f 01       	movw	r16, r30
    3c50:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    3c54:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    3c58:	db 01       	movw	r26, r22
    3c5a:	18 96       	adiw	r26, 0x08	; 8
    3c5c:	ed 91       	ld	r30, X+
    3c5e:	fc 91       	ld	r31, X
    3c60:	19 97       	sbiw	r26, 0x09	; 9
    3c62:	88 23       	and	r24, r24
    3c64:	31 f0       	breq	.+12     	; 0x3c72 <puts+0x44>
    3c66:	19 95       	eicall
    3c68:	89 2b       	or	r24, r25
    3c6a:	79 f3       	breq	.-34     	; 0x3c4a <puts+0x1c>
    3c6c:	df ef       	ldi	r29, 0xFF	; 255
    3c6e:	cf ef       	ldi	r28, 0xFF	; 255
    3c70:	ec cf       	rjmp	.-40     	; 0x3c4a <puts+0x1c>
    3c72:	8a e0       	ldi	r24, 0x0A	; 10
    3c74:	19 95       	eicall
    3c76:	89 2b       	or	r24, r25
    3c78:	19 f0       	breq	.+6      	; 0x3c80 <puts+0x52>
    3c7a:	8f ef       	ldi	r24, 0xFF	; 255
    3c7c:	9f ef       	ldi	r25, 0xFF	; 255
    3c7e:	02 c0       	rjmp	.+4      	; 0x3c84 <puts+0x56>
    3c80:	8d 2f       	mov	r24, r29
    3c82:	9c 2f       	mov	r25, r28
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	08 95       	ret

00003c8e <__ultoa_invert>:
    3c8e:	fa 01       	movw	r30, r20
    3c90:	aa 27       	eor	r26, r26
    3c92:	28 30       	cpi	r18, 0x08	; 8
    3c94:	51 f1       	breq	.+84     	; 0x3cea <__ultoa_invert+0x5c>
    3c96:	20 31       	cpi	r18, 0x10	; 16
    3c98:	81 f1       	breq	.+96     	; 0x3cfa <__ultoa_invert+0x6c>
    3c9a:	e8 94       	clt
    3c9c:	6f 93       	push	r22
    3c9e:	6e 7f       	andi	r22, 0xFE	; 254
    3ca0:	6e 5f       	subi	r22, 0xFE	; 254
    3ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca8:	af 4f       	sbci	r26, 0xFF	; 255
    3caa:	b1 e0       	ldi	r27, 0x01	; 1
    3cac:	3e d0       	rcall	.+124    	; 0x3d2a <__ultoa_invert+0x9c>
    3cae:	b4 e0       	ldi	r27, 0x04	; 4
    3cb0:	3c d0       	rcall	.+120    	; 0x3d2a <__ultoa_invert+0x9c>
    3cb2:	67 0f       	add	r22, r23
    3cb4:	78 1f       	adc	r23, r24
    3cb6:	89 1f       	adc	r24, r25
    3cb8:	9a 1f       	adc	r25, r26
    3cba:	a1 1d       	adc	r26, r1
    3cbc:	68 0f       	add	r22, r24
    3cbe:	79 1f       	adc	r23, r25
    3cc0:	8a 1f       	adc	r24, r26
    3cc2:	91 1d       	adc	r25, r1
    3cc4:	a1 1d       	adc	r26, r1
    3cc6:	6a 0f       	add	r22, r26
    3cc8:	71 1d       	adc	r23, r1
    3cca:	81 1d       	adc	r24, r1
    3ccc:	91 1d       	adc	r25, r1
    3cce:	a1 1d       	adc	r26, r1
    3cd0:	20 d0       	rcall	.+64     	; 0x3d12 <__ultoa_invert+0x84>
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <__ultoa_invert+0x48>
    3cd4:	68 94       	set
    3cd6:	3f 91       	pop	r19
    3cd8:	2a e0       	ldi	r18, 0x0A	; 10
    3cda:	26 9f       	mul	r18, r22
    3cdc:	11 24       	eor	r1, r1
    3cde:	30 19       	sub	r19, r0
    3ce0:	30 5d       	subi	r19, 0xD0	; 208
    3ce2:	31 93       	st	Z+, r19
    3ce4:	de f6       	brtc	.-74     	; 0x3c9c <__ultoa_invert+0xe>
    3ce6:	cf 01       	movw	r24, r30
    3ce8:	08 95       	ret
    3cea:	46 2f       	mov	r20, r22
    3cec:	47 70       	andi	r20, 0x07	; 7
    3cee:	40 5d       	subi	r20, 0xD0	; 208
    3cf0:	41 93       	st	Z+, r20
    3cf2:	b3 e0       	ldi	r27, 0x03	; 3
    3cf4:	0f d0       	rcall	.+30     	; 0x3d14 <__ultoa_invert+0x86>
    3cf6:	c9 f7       	brne	.-14     	; 0x3cea <__ultoa_invert+0x5c>
    3cf8:	f6 cf       	rjmp	.-20     	; 0x3ce6 <__ultoa_invert+0x58>
    3cfa:	46 2f       	mov	r20, r22
    3cfc:	4f 70       	andi	r20, 0x0F	; 15
    3cfe:	40 5d       	subi	r20, 0xD0	; 208
    3d00:	4a 33       	cpi	r20, 0x3A	; 58
    3d02:	18 f0       	brcs	.+6      	; 0x3d0a <__ultoa_invert+0x7c>
    3d04:	49 5d       	subi	r20, 0xD9	; 217
    3d06:	31 fd       	sbrc	r19, 1
    3d08:	40 52       	subi	r20, 0x20	; 32
    3d0a:	41 93       	st	Z+, r20
    3d0c:	02 d0       	rcall	.+4      	; 0x3d12 <__ultoa_invert+0x84>
    3d0e:	a9 f7       	brne	.-22     	; 0x3cfa <__ultoa_invert+0x6c>
    3d10:	ea cf       	rjmp	.-44     	; 0x3ce6 <__ultoa_invert+0x58>
    3d12:	b4 e0       	ldi	r27, 0x04	; 4
    3d14:	a6 95       	lsr	r26
    3d16:	97 95       	ror	r25
    3d18:	87 95       	ror	r24
    3d1a:	77 95       	ror	r23
    3d1c:	67 95       	ror	r22
    3d1e:	ba 95       	dec	r27
    3d20:	c9 f7       	brne	.-14     	; 0x3d14 <__ultoa_invert+0x86>
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	61 05       	cpc	r22, r1
    3d26:	71 05       	cpc	r23, r1
    3d28:	08 95       	ret
    3d2a:	9b 01       	movw	r18, r22
    3d2c:	ac 01       	movw	r20, r24
    3d2e:	0a 2e       	mov	r0, r26
    3d30:	06 94       	lsr	r0
    3d32:	57 95       	ror	r21
    3d34:	47 95       	ror	r20
    3d36:	37 95       	ror	r19
    3d38:	27 95       	ror	r18
    3d3a:	ba 95       	dec	r27
    3d3c:	c9 f7       	brne	.-14     	; 0x3d30 <__ultoa_invert+0xa2>
    3d3e:	62 0f       	add	r22, r18
    3d40:	73 1f       	adc	r23, r19
    3d42:	84 1f       	adc	r24, r20
    3d44:	95 1f       	adc	r25, r21
    3d46:	a0 1d       	adc	r26, r0
    3d48:	08 95       	ret

00003d4a <_exit>:
    3d4a:	f8 94       	cli

00003d4c <__stop_program>:
    3d4c:	ff cf       	rjmp	.-2      	; 0x3d4c <__stop_program>

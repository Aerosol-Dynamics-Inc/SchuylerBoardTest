
SchuylerBoardTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006da  00800200  000039c0  00003a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  008008da  008008da  0000412e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000412e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000418c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006412  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025f2  00000000  00000000  0000abde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039fc  00000000  00000000  0000d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001320  00000000  00000000  00010bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015ab  00000000  00000000  00011eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040dc  00000000  00000000  00013497  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  00017573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c3       	rjmp	.+1688   	; 0x69a <__ctors_end>
       2:	00 00       	nop
       4:	6b c3       	rjmp	.+1750   	; 0x6dc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c3       	rjmp	.+1746   	; 0x6dc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c3       	rjmp	.+1742   	; 0x6dc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c3       	rjmp	.+1738   	; 0x6dc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c3       	rjmp	.+1734   	; 0x6dc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c3       	rjmp	.+1730   	; 0x6dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c3       	rjmp	.+1726   	; 0x6dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	f0 c5       	rjmp	.+3040   	; 0xc02 <__vector_8>
      22:	00 00       	nop
      24:	5b c3       	rjmp	.+1718   	; 0x6dc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c3       	rjmp	.+1714   	; 0x6dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c3       	rjmp	.+1710   	; 0x6dc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c3       	rjmp	.+1706   	; 0x6dc <__bad_interrupt>
      32:	00 00       	nop
      34:	f0 c5       	rjmp	.+3040   	; 0xc16 <__vector_13>
      36:	00 00       	nop
      38:	51 c3       	rjmp	.+1698   	; 0x6dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c3       	rjmp	.+1694   	; 0x6dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c3       	rjmp	.+1690   	; 0x6dc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c3       	rjmp	.+1686   	; 0x6dc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c3       	rjmp	.+1682   	; 0x6dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c3       	rjmp	.+1678   	; 0x6dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c3       	rjmp	.+1674   	; 0x6dc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c3       	rjmp	.+1670   	; 0x6dc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c3       	rjmp	.+1666   	; 0x6dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c3       	rjmp	.+1662   	; 0x6dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c3       	rjmp	.+1658   	; 0x6dc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_25>
      68:	39 c3       	rjmp	.+1650   	; 0x6dc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c3       	rjmp	.+1646   	; 0x6dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c3       	rjmp	.+1642   	; 0x6dc <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c7       	rjmp	.+3766   	; 0xf2c <__vector_29>
      76:	00 00       	nop
      78:	31 c3       	rjmp	.+1634   	; 0x6dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c3       	rjmp	.+1630   	; 0x6dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c3       	rjmp	.+1626   	; 0x6dc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c3       	rjmp	.+1622   	; 0x6dc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c3       	rjmp	.+1618   	; 0x6dc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 c3       	rjmp	.+1614   	; 0x6dc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_36>
      94:	23 c3       	rjmp	.+1606   	; 0x6dc <__bad_interrupt>
      96:	00 00       	nop
      98:	21 c3       	rjmp	.+1602   	; 0x6dc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1f c3       	rjmp	.+1598   	; 0x6dc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1d c3       	rjmp	.+1594   	; 0x6dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1b c3       	rjmp	.+1590   	; 0x6dc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	19 c3       	rjmp	.+1586   	; 0x6dc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	17 c3       	rjmp	.+1582   	; 0x6dc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	15 c3       	rjmp	.+1578   	; 0x6dc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	13 c3       	rjmp	.+1574   	; 0x6dc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	11 c3       	rjmp	.+1570   	; 0x6dc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0f c3       	rjmp	.+1566   	; 0x6dc <__bad_interrupt>
      be:	00 00       	nop
      c0:	0d c3       	rjmp	.+1562   	; 0x6dc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0b c3       	rjmp	.+1558   	; 0x6dc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	09 c3       	rjmp	.+1554   	; 0x6dc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	07 c3       	rjmp	.+1550   	; 0x6dc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	05 c3       	rjmp	.+1546   	; 0x6dc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	03 c3       	rjmp	.+1542   	; 0x6dc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	01 c3       	rjmp	.+1538   	; 0x6dc <__bad_interrupt>
      da:	00 00       	nop
      dc:	ff c2       	rjmp	.+1534   	; 0x6dc <__bad_interrupt>
      de:	00 00       	nop
      e0:	fd c2       	rjmp	.+1530   	; 0x6dc <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__c.2497>:
     1e6:	46 4c 41 53 48 20 72 65 61 64 20 66 61 69 6c 65     FLASH read faile
     1f6:	64 0a 00                                            d..

000001f9 <__c.2481>:
     1f9:	46 4c 41 53 48 20 77 72 69 74 65 20 66 61 69 6c     FLASH write fail
     209:	65 64 0a 00                                         ed..

0000020d <__c.2046>:
     20d:	75 6e 6b 6e 6f 77 6e 20 41 44 43 32 35 31 38 20     unknown ADC2518 
     21d:	6f 73 63 69 6c 61 74 6f 72 53 70 65 65 64 0a 00     oscilatorSpeed..

0000022d <__c.2037>:
     22d:	4f 53 52 3a 20 6c 6f 67 32 73 61 6d 70 6c 65 73     OSR: log2samples
     23d:	20 3e 20 37 00                                       > 7.

00000242 <__c.2082>:
     242:	0a 00                                               ..

00000244 <__c.2077>:
     244:	25 64 20 00                                         %d .

00000248 <__c.2071>:
     248:	45 52 52 4f 52 3a 20 4e 6f 20 41 44 43 20 43 68     ERROR: No ADC Ch
     258:	61 6e 6e 65 6c 73 20 61 63 74 69 76 65 0a 00        annels active..

00000267 <__c.2042>:
     267:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     277:	49 6e 74 65 72 6e 61 6c 20 46 61 75 6c 74 20 25     Internal Fault %
     287:	64 0a 00                                            d..

0000028a <__c.2040>:
     28a:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     29a:	52 65 61 64 69 6e 67 20 25 64 0a 00                 Reading %d..

000002a6 <__c.2038>:
     2a6:	0a 53 65 6e 73 6f 72 20 25 64 20 69 6e 20 50 72     .Sensor %d in Pr
     2b6:	6f 67 72 61 6d 6d 69 6e 67 20 4d 6f 64 65 0a 00     ogramming Mode..

000002c6 <__c.2198>:
     2c6:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 41 6c     spi_FlashEraseAl
     2d6:	6c 42 6c 6f 63 6b 73 3a 20 45 72 61 73 65 20 66     lBlocks: Erase f
     2e6:	61 69 6c 75 72 65 20 61 74 20 62 6c 6f 63 6b 20     ailure at block 
     2f6:	25 64 0a 00                                         %d..

000002fa <__c.2196>:
     2fa:	45 72 61 73 69 6e 67 20 62 6c 6f 63 6b 20 25 64     Erasing block %d
     30a:	0a 00                                               ..

0000030c <__c.2188>:
     30c:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     31c:	6f 63 6b 3a 20 41 64 64 72 65 73 73 20 65 78 63     ock: Address exc
     32c:	65 65 64 73 20 61 76 61 69 6c 61 62 6c 65 20 62     eeds available b
     33c:	6c 6f 63 6b 73 0a 00                                locks..

00000343 <__c.2186>:
     343:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     353:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     363:	20 72 65 61 64 79 0a 00                              ready..

0000036b <__c.2184>:
     36b:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     37b:	6f 63 6b 3a 20 46 6c 61 73 68 20 77 6f 6e 27 74     ock: Flash won't
     38b:	20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00         enable write..

0000039a <__c.2182>:
     39a:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     3aa:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     3ba:	20 72 65 61 64 79 20 61 66 74 65 72 20 62 6c 6f      ready after blo
     3ca:	63 6b 20 65 72 61 73 65 0a 00                       ck erase..

000003d4 <__c.2180>:
     3d4:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     3e4:	6f 63 6b 3a 20 57 72 69 74 65 20 64 69 61 73 62     ock: Write diasb
     3f4:	6c 65 20 66 61 69 6c 65 64 0a 00                    le failed..

000003ff <__c.2173>:
     3ff:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 31     spi_FlashRead: 1
     40f:	73 74 20 70 61 67 65 20 72 65 61 64 20 66 61 69     st page read fai
     41f:	6c 65 64 0a 00                                      led..

00000424 <__c.2171>:
     424:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 32     spi_FlashRead: 2
     434:	6e 64 20 70 61 67 65 20 72 65 61 64 20 66 61 69     nd page read fai
     444:	6c 65 64 0a 00                                      led..

00000449 <__c.2159>:
     449:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     459:	6d 50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72     mPage: buffer cr
     469:	6f 73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64     osses page bound
     479:	61 72 79 0a 00                                      ary..

0000047e <__c.2157>:
     47e:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     48e:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     49e:	65 72 20 72 65 61 64 79 0a 00                       er ready..

000004a8 <__c.2155>:
     4a8:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     4b8:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     4c8:	65 72 20 72 65 61 64 79 20 61 66 74 65 72 20 70     er ready after p
     4d8:	61 67 65 20 72 65 61 64 0a 00                       age read..

000004e2 <__c.2140>:
     4e2:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     4f2:	31 73 74 20 70 61 67 65 20 77 72 69 74 65 20 66     1st page write f
     502:	61 69 6c 65 64 0a 00                                ailed..

00000509 <__c.2138>:
     509:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     519:	32 6e 64 20 70 61 67 65 20 77 72 69 74 65 20 66     2nd page write f
     529:	61 69 6c 65 64 0a 00                                ailed..

00000530 <__c.2126>:
     530:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     540:	50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72 6f     Page: buffer cro
     550:	73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64 61     sses page bounda
     560:	72 79 0a 00                                         ry..

00000564 <__c.2124>:
     564:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     574:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     584:	72 20 72 65 61 64 79 0a 00                          r ready..

0000058d <__c.2122>:
     58d:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     59d:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     5ad:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 70 61     r ready after pa
     5bd:	67 65 20 72 65 61 64 0a 00                          ge read..

000005c6 <__c.2120>:
     5c6:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     5d6:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     5e6:	74 20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00     t enable write..

000005f6 <__c.2118>:
     5f6:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     606:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     616:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     626:	74 61 20 6c 6f 61 64 0a 00                          ta load..

0000062f <__c.2116>:
     62f:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     63f:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     64f:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     65f:	74 61 20 6c 6f 61 64 0a 00                          ta load..

00000668 <__c.2114>:
     668:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     678:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     688:	74 20 64 69 73 61 62 6c 65 20 77 72 69 74 65 0a     t disable write.
	...

0000069a <__ctors_end>:
     69a:	11 24       	eor	r1, r1
     69c:	1f be       	out	0x3f, r1	; 63
     69e:	cf ef       	ldi	r28, 0xFF	; 255
     6a0:	d1 e2       	ldi	r29, 0x21	; 33
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	00 e0       	ldi	r16, 0x00	; 0
     6a8:	0c bf       	out	0x3c, r16	; 60

000006aa <__do_copy_data>:
     6aa:	18 e0       	ldi	r17, 0x08	; 8
     6ac:	a0 e0       	ldi	r26, 0x00	; 0
     6ae:	b2 e0       	ldi	r27, 0x02	; 2
     6b0:	e0 ec       	ldi	r30, 0xC0	; 192
     6b2:	f9 e3       	ldi	r31, 0x39	; 57
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	0b bf       	out	0x3b, r16	; 59
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <__do_copy_data+0x14>
     6ba:	07 90       	elpm	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	aa 3d       	cpi	r26, 0xDA	; 218
     6c0:	b1 07       	cpc	r27, r17
     6c2:	d9 f7       	brne	.-10     	; 0x6ba <__do_copy_data+0x10>

000006c4 <__do_clear_bss>:
     6c4:	2a e0       	ldi	r18, 0x0A	; 10
     6c6:	aa ed       	ldi	r26, 0xDA	; 218
     6c8:	b8 e0       	ldi	r27, 0x08	; 8
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <.do_clear_bss_start>

000006cc <.do_clear_bss_loop>:
     6cc:	1d 92       	st	X+, r1

000006ce <.do_clear_bss_start>:
     6ce:	a2 31       	cpi	r26, 0x12	; 18
     6d0:	b2 07       	cpc	r27, r18
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <.do_clear_bss_loop>
     6d4:	0e 94 3b 13 	call	0x2676	; 0x2676 <main>
     6d8:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <_exit>

000006dc <__bad_interrupt>:
     6dc:	91 cc       	rjmp	.-1758   	; 0x0 <__vectors>

000006de <doFlashWriteTest>:

#define WRITE_TEST_SIZE 200
#define NUM_WRITES 10

void doFlashWriteTest(void)
{
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	c8 5c       	subi	r28, 0xC8	; 200
     6f2:	d1 09       	sbc	r29, r1
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     6fe:	10 e0       	ldi	r17, 0x00	; 0
void doFlashWriteTest(void)
{
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     706:	29 c0       	rjmp	.+82     	; 0x75a <doFlashWriteTest+0x7c>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
			buffer[j] = testChars[i];
     708:	e1 2f       	mov	r30, r17
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e1 5f       	subi	r30, 0xF1	; 241
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	90 81       	ld	r25, Z
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ec 0f       	add	r30, r28
     718:	fd 1f       	adc	r31, r29
     71a:	e8 0f       	add	r30, r24
     71c:	f1 1d       	adc	r31, r1
     71e:	90 83       	st	Z, r25
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	01 c0       	rjmp	.+2      	; 0x726 <doFlashWriteTest+0x48>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	88 3c       	cpi	r24, 0xC8	; 200
     728:	78 f3       	brcs	.-34     	; 0x708 <doFlashWriteTest+0x2a>
			buffer[j] = testChars[i];
		if (spi_FlashWrite(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
     72a:	28 ec       	ldi	r18, 0xC8	; 200
     72c:	ae 01       	movw	r20, r28
     72e:	4f 5f       	subi	r20, 0xFF	; 255
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	0e 94 89 0c 	call	0x1912	; 0x1912 <spi_FlashWrite>
     73a:	88 3c       	cpi	r24, 0xC8	; 200
     73c:	41 f0       	breq	.+16     	; 0x74e <doFlashWriteTest+0x70>
		{
			printf_P(PSTR("FLASH write failed\n"));
     73e:	89 ef       	ldi	r24, 0xF9	; 249
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
		}
		address += WRITE_TEST_SIZE;
     74e:	88 ec       	ldi	r24, 0xC8	; 200
     750:	c8 0e       	add	r12, r24
     752:	d1 1c       	adc	r13, r1
     754:	e1 1c       	adc	r14, r1
     756:	f1 1c       	adc	r15, r1
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	1a 30       	cpi	r17, 0x0A	; 10
     75c:	18 f3       	brcs	.-58     	; 0x724 <doFlashWriteTest+0x46>
			printf_P(PSTR("FLASH write failed\n"));
		}
		address += WRITE_TEST_SIZE;
	}
	
}
     75e:	c8 53       	subi	r28, 0x38	; 56
     760:	df 4f       	sbci	r29, 0xFF	; 255
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	08 95       	ret

0000077c <doFlashReadTest>:

void doFlashReadTest(void)
{
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	c9 5c       	subi	r28, 0xC9	; 201
     790:	d1 09       	sbc	r29, r1
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
     79c:	8a e1       	ldi	r24, 0x1A	; 26
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     7a4:	10 e0       	ldi	r17, 0x00	; 0

void doFlashReadTest(void)
{
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
     7a6:	c1 2c       	mov	r12, r1
     7a8:	d1 2c       	mov	r13, r1
     7aa:	76 01       	movw	r14, r12

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     7ac:	3a c0       	rjmp	.+116    	; 0x822 <doFlashReadTest+0xa6>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++) buffer[j] = (char) 0;
     7ae:	e1 e0       	ldi	r30, 0x01	; 1
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ec 0f       	add	r30, r28
     7b4:	fd 1f       	adc	r31, r29
     7b6:	e8 0f       	add	r30, r24
     7b8:	f1 1d       	adc	r31, r1
     7ba:	10 82       	st	Z, r1
     7bc:	8f 5f       	subi	r24, 0xFF	; 255
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <doFlashReadTest+0x46>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	88 3c       	cpi	r24, 0xC8	; 200
     7c4:	a0 f3       	brcs	.-24     	; 0x7ae <doFlashReadTest+0x32>
		printf("record %d:\n", i);
     7c6:	1f 92       	push	r1
     7c8:	1f 93       	push	r17
     7ca:	8e e2       	ldi	r24, 0x2E	; 46
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
		if (spi_FlashRead(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
     7d6:	28 ec       	ldi	r18, 0xC8	; 200
     7d8:	ae 01       	movw	r20, r28
     7da:	4f 5f       	subi	r20, 0xFF	; 255
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <spi_FlashRead>
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	88 3c       	cpi	r24, 0xC8	; 200
     7f0:	49 f0       	breq	.+18     	; 0x804 <doFlashReadTest+0x88>
		{
			printf_P(PSTR("FLASH read failed\n"));
     7f2:	86 ee       	ldi	r24, 0xE6	; 230
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	09 c0       	rjmp	.+18     	; 0x816 <doFlashReadTest+0x9a>
		}
		else
		{
			buffer[WRITE_TEST_SIZE] = '\0';
     804:	c7 53       	subi	r28, 0x37	; 55
     806:	df 4f       	sbci	r29, 0xFF	; 255
     808:	18 82       	st	Y, r1
     80a:	c9 5c       	subi	r28, 0xC9	; 201
     80c:	d0 40       	sbci	r29, 0x00	; 0
			printf("%s\n",buffer);
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
		}
		address += WRITE_TEST_SIZE;
     816:	88 ec       	ldi	r24, 0xC8	; 200
     818:	c8 0e       	add	r12, r24
     81a:	d1 1c       	adc	r13, r1
     81c:	e1 1c       	adc	r14, r1
     81e:	f1 1c       	adc	r15, r1
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     820:	1f 5f       	subi	r17, 0xFF	; 255
     822:	1a 30       	cpi	r17, 0x0A	; 10
     824:	68 f2       	brcs	.-102    	; 0x7c0 <doFlashReadTest+0x44>
			printf("%s\n",buffer);
		}
		address += WRITE_TEST_SIZE;
	}
	
}
     826:	c7 53       	subi	r28, 0x37	; 55
     828:	df 4f       	sbci	r29, 0xFF	; 255
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	08 95       	ret

00000844 <doFlashEraseTest>:

void doFlashEraseTest(void)
{
	spi_FlashEraseAllBlocks();
     844:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <spi_FlashEraseAllBlocks>
     848:	08 95       	ret

0000084a <processCommand>:
void doFlashWriteTest(void);
void doFlashReadTest(void);
void doFlashEraseTest(void);

void processCommand(void)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
		// else
		if (buf[0] == 'A')	{
     84e:	c0 91 ec 09 	lds	r28, 0x09EC	; 0x8009ec <buf>
     852:	c1 34       	cpi	r28, 0x41	; 65
     854:	81 f5       	brne	.+96     	; 0x8b6 <processCommand+0x6c>
			if (buf[1] == 's')		ADC_rdSystemStatus();		
     856:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     85a:	83 37       	cpi	r24, 0x73	; 115
     85c:	11 f4       	brne	.+4      	; 0x862 <processCommand+0x18>
     85e:	44 d2       	rcall	.+1160   	; 0xce8 <ADC_rdSystemStatus>
     860:	1b c0       	rjmp	.+54     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'm')	ADC_manualMode();
     862:	8d 36       	cpi	r24, 0x6D	; 109
     864:	11 f4       	brne	.+4      	; 0x86a <processCommand+0x20>
     866:	a8 d2       	rcall	.+1360   	; 0xdb8 <ADC_manualMode>
     868:	17 c0       	rjmp	.+46     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'c')	ADC_ReadManualModeAnalogCh(buf[2] - '0');
     86a:	83 36       	cpi	r24, 0x63	; 99
     86c:	29 f4       	brne	.+10     	; 0x878 <processCommand+0x2e>
     86e:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <buf+0x2>
     872:	80 53       	subi	r24, 0x30	; 48
     874:	a5 d2       	rcall	.+1354   	; 0xdc0 <ADC_ReadManualModeAnalogCh>
     876:	10 c0       	rjmp	.+32     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'o')	ADC_OverSample(buf[2] - '0');   // oversample 2^N   N<7
     878:	8f 36       	cpi	r24, 0x6F	; 111
     87a:	29 f4       	brne	.+10     	; 0x886 <processCommand+0x3c>
     87c:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <buf+0x2>
     880:	80 53       	subi	r24, 0x30	; 48
     882:	6d d2       	rcall	.+1242   	; 0xd5e <ADC_OverSample>
     884:	09 c0       	rjmp	.+18     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'l')	ADC_OscSpeed(ADC2518_LowSpeedOSC);
     886:	8c 36       	cpi	r24, 0x6C	; 108
     888:	19 f4       	brne	.+6      	; 0x890 <processCommand+0x46>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	79 d2       	rcall	.+1266   	; 0xd80 <ADC_OscSpeed>
     88e:	04 c0       	rjmp	.+8      	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'h')	ADC_OscSpeed(ADC2518_HiSpeedOSC);
     890:	88 36       	cpi	r24, 0x68	; 104
     892:	11 f4       	brne	.+4      	; 0x898 <processCommand+0x4e>
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	74 d2       	rcall	.+1256   	; 0xd80 <ADC_OscSpeed>
     898:	8c ee       	ldi	r24, 0xEC	; 236
			printf("cmd %s--", buf);
     89a:	99 e0       	ldi	r25, 0x09	; 9
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	8a e3       	ldi	r24, 0x3A	; 58
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	a3 c1       	rjmp	.+838    	; 0xbfc <processCommand+0x3b2>
		}
//		else if (buf[0] == 'F')	{
//			FETstate(buf[1] -'0', buf[2]-'0');
//		}	
		else if (buf[0] == 'p')		readABSPress(); 
     8b6:	c0 37       	cpi	r28, 0x70	; 112
     8b8:	11 f4       	brne	.+4      	; 0x8be <processCommand+0x74>
     8ba:	25 d5       	rcall	.+2634   	; 0x1306 <readABSPress>
     8bc:	9f c1       	rjmp	.+830    	; 0xbfc <processCommand+0x3b2>
		else if (buf[0] == 'P')		readDiffPress(); 
     8be:	c0 35       	cpi	r28, 0x50	; 80
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <processCommand+0x7c>
     8c2:	13 d5       	rcall	.+2598   	; 0x12ea <readDiffPress>
     8c4:	9b c1       	rjmp	.+822    	; 0xbfc <processCommand+0x3b2>
     8c6:	63 e4       	ldi	r22, 0x43	; 67
		else if (strcmp(buf,"u47")==0)  readU47();
     8c8:	72 e0       	ldi	r23, 0x02	; 2
     8ca:	8c ee       	ldi	r24, 0xEC	; 236
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	0e 94 b9 1b 	call	0x3772	; 0x3772 <strcmp>
     8d2:	89 2b       	or	r24, r25
     8d4:	11 f4       	brne	.+4      	; 0x8da <processCommand+0x90>
     8d6:	25 d5       	rcall	.+2634   	; 0x1322 <readU47>
     8d8:	91 c1       	rjmp	.+802    	; 0xbfc <processCommand+0x3b2>
     8da:	cd 34       	cpi	r28, 0x4D	; 77

		else if (buf[0] == 'M')		getMuxConfiguration(); 
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <processCommand+0x9a>
     8de:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <getMuxConfiguration>
     8e2:	8c c1       	rjmp	.+792    	; 0xbfc <processCommand+0x3b2>
     8e4:	c2 33       	cpi	r28, 0x32	; 50
		else if (buf[0] == '2')		setI2Cmux(atoi(buf+1));
     8e6:	39 f4       	brne	.+14     	; 0x8f6 <processCommand+0xac>
     8e8:	8d ee       	ldi	r24, 0xED	; 237
     8ea:	99 e0       	ldi	r25, 0x09	; 9
     8ec:	0e 94 b9 1a 	call	0x3572	; 0x3572 <atoi>
     8f0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <setI2Cmux>
     8f4:	83 c1       	rjmp	.+774    	; 0xbfc <processCommand+0x3b2>
		
		else if (buf[0] == 'R')	{
     8f6:	c2 35       	cpi	r28, 0x52	; 82
     8f8:	61 f4       	brne	.+24     	; 0x912 <processCommand+0xc8>
			if (buf[1] == 'S') startRH_T_conversion();
     8fa:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     8fe:	83 35       	cpi	r24, 0x53	; 83
     900:	09 f4       	brne	.+2      	; 0x904 <processCommand+0xba>
     902:	1d d5       	rcall	.+2618   	; 0x133e <startRH_T_conversion>
			if (buf[1] == 'R') readRH_T();
     904:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     908:	82 35       	cpi	r24, 0x52	; 82
     90a:	09 f0       	breq	.+2      	; 0x90e <processCommand+0xc4>
     90c:	77 c1       	rjmp	.+750    	; 0xbfc <processCommand+0x3b2>
     90e:	2c d5       	rcall	.+2648   	; 0x1368 <readRH_T>
     910:	75 c1       	rjmp	.+746    	; 0xbfc <processCommand+0x3b2>
     912:	c2 37       	cpi	r28, 0x72	; 114
		}
		else if (buf[0] == 'r')		{ 
     914:	19 f4       	brne	.+6      	; 0x91c <processCommand+0xd2>
			RTC_config();
     916:	0e 94 67 0e 	call	0x1cce	; 0x1cce <RTC_config>
		}
		else if (buf[0] == 'a') {
     91a:	70 c1       	rjmp	.+736    	; 0xbfc <processCommand+0x3b2>
     91c:	c1 36       	cpi	r28, 0x61	; 97
			if (  buf[1] == 'a' ) showActiveADCs();
     91e:	79 f4       	brne	.+30     	; 0x93e <processCommand+0xf4>
     920:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     924:	81 36       	cpi	r24, 0x61	; 97
     926:	11 f4       	brne	.+4      	; 0x92c <processCommand+0xe2>
			else if (  buf[1] == 's' ) startADCcycle();			
     928:	ac d2       	rcall	.+1368   	; 0xe82 <showActiveADCs>
     92a:	68 c1       	rjmp	.+720    	; 0xbfc <processCommand+0x3b2>
     92c:	83 37       	cpi	r24, 0x73	; 115
     92e:	11 f4       	brne	.+4      	; 0x934 <processCommand+0xea>
			else if (  buf[1] == 'd' ) doAdc();			
     930:	ab d3       	rcall	.+1878   	; 0x1088 <startADCcycle>
     932:	64 c1       	rjmp	.+712    	; 0xbfc <processCommand+0x3b2>
     934:	84 36       	cpi	r24, 0x64	; 100
     936:	09 f0       	breq	.+2      	; 0x93a <processCommand+0xf0>
     938:	61 c1       	rjmp	.+706    	; 0xbfc <processCommand+0x3b2>
		}
		else if (buf[0] == 'F') {		
     93a:	7b d3       	rcall	.+1782   	; 0x1032 <doAdc>
			spi_FlashReadID();
     93c:	5f c1       	rjmp	.+702    	; 0xbfc <processCommand+0x3b2>
     93e:	c6 34       	cpi	r28, 0x46	; 70
			if (  buf[1] == 'w' ) doFlashWriteTest();
     940:	e9 f4       	brne	.+58     	; 0x97c <processCommand+0x132>
     942:	64 d6       	rcall	.+3272   	; 0x160c <spi_FlashReadID>
     944:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     948:	87 37       	cpi	r24, 0x77	; 119
			else if (  buf[1] == 'r' ) doFlashReadTest();
     94a:	11 f4       	brne	.+4      	; 0x950 <processCommand+0x106>
     94c:	c8 de       	rcall	.-624    	; 0x6de <doFlashWriteTest>
     94e:	56 c1       	rjmp	.+684    	; 0xbfc <processCommand+0x3b2>
     950:	82 37       	cpi	r24, 0x72	; 114
     952:	11 f4       	brne	.+4      	; 0x958 <processCommand+0x10e>
			else if (  buf[1] == 'e' ) doFlashEraseTest();
     954:	13 df       	rcall	.-474    	; 0x77c <doFlashReadTest>
     956:	52 c1       	rjmp	.+676    	; 0xbfc <processCommand+0x3b2>
     958:	85 36       	cpi	r24, 0x65	; 101
     95a:	11 f4       	brne	.+4      	; 0x960 <processCommand+0x116>
     95c:	73 df       	rcall	.-282    	; 0x844 <doFlashEraseTest>
			else if (  buf[1] == 'u' ) spi_FlashUnlockAllBlocks();
     95e:	4e c1       	rjmp	.+668    	; 0xbfc <processCommand+0x3b2>
     960:	85 37       	cpi	r24, 0x75	; 117
     962:	11 f4       	brne	.+4      	; 0x968 <processCommand+0x11e>
     964:	e8 d6       	rcall	.+3536   	; 0x1736 <spi_FlashUnlockAllBlocks>
     966:	4a c1       	rjmp	.+660    	; 0xbfc <processCommand+0x3b2>
			else if (  buf[1] == 's' ) spi_FlashDisplayFeatureRegisters();			
     968:	83 37       	cpi	r24, 0x73	; 115
     96a:	11 f4       	brne	.+4      	; 0x970 <processCommand+0x126>
     96c:	a2 d6       	rcall	.+3396   	; 0x16b2 <spi_FlashDisplayFeatureRegisters>
     96e:	46 c1       	rjmp	.+652    	; 0xbfc <processCommand+0x3b2>
     970:	88 37       	cpi	r24, 0x78	; 120
			else if (  buf[1] == 'x' ) spi_FlashReset();			
     972:	09 f0       	breq	.+2      	; 0x976 <processCommand+0x12c>
     974:	43 c1       	rjmp	.+646    	; 0xbfc <processCommand+0x3b2>
     976:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <spi_FlashReset>
     97a:	40 c1       	rjmp	.+640    	; 0xbfc <processCommand+0x3b2>
     97c:	c6 36       	cpi	r28, 0x66	; 102
/*			if (  buf[1] == 'w' )       getFlashStatusReister();
			else if (  buf[1] == 'e' )  spi_FlashEnableWrite();
			else if (  buf[1] == 'd' ) spi_FlashDisableWrite();
*/			
		}
		else if (buf[0] == 'f') {
     97e:	b9 f4       	brne	.+46     	; 0x9ae <processCommand+0x164>
     980:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
				if (  buf[1] == 's' ) FRAM_ReadStatusRegister();
     984:	83 37       	cpi	r24, 0x73	; 115
     986:	19 f4       	brne	.+6      	; 0x98e <processCommand+0x144>
     988:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <FRAM_ReadStatusRegister>
     98c:	37 c1       	rjmp	.+622    	; 0xbfc <processCommand+0x3b2>
     98e:	89 36       	cpi	r24, 0x69	; 105
				else if (buf[1] == 'i') read_FRAM_DeviceID();
     990:	19 f4       	brne	.+6      	; 0x998 <processCommand+0x14e>
     992:	0e 94 11 10 	call	0x2022	; 0x2022 <read_FRAM_DeviceID>
     996:	32 c1       	rjmp	.+612    	; 0xbfc <processCommand+0x3b2>
     998:	8a 36       	cpi	r24, 0x6A	; 106
				else if (buf[1] == 'j') wrFRAM();
     99a:	19 f4       	brne	.+6      	; 0x9a2 <processCommand+0x158>
     99c:	0e 94 3e 10 	call	0x207c	; 0x207c <wrFRAM>
     9a0:	2d c1       	rjmp	.+602    	; 0xbfc <processCommand+0x3b2>
     9a2:	85 36       	cpi	r24, 0x65	; 101
				else if (buf[1] == 'e') spi_FRAM_writeEnable();
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <processCommand+0x15e>
     9a6:	2a c1       	rjmp	.+596    	; 0xbfc <processCommand+0x3b2>
     9a8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <spi_FRAM_writeEnable>
     9ac:	27 c1       	rjmp	.+590    	; 0xbfc <processCommand+0x3b2>
     9ae:	c3 37       	cpi	r28, 0x73	; 115
		}
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
     9b0:	c1 f4       	brne	.+48     	; 0x9e2 <processCommand+0x198>
     9b2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 81 10 	call	0x2102	; 0x2102 <framSaveSerialNumber>
     9bc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	98 0f       	add	r25, r24
     9c4:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     9c8:	1f 92       	push	r1
     9ca:	8f 93       	push	r24
     9cc:	87 e4       	ldi	r24, 0x47	; 71
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0d c1       	rjmp	.+538    	; 0xbfc <processCommand+0x3b2>
     9e2:	ce 36       	cpi	r28, 0x6E	; 110
		else if (buf[0] == 'n') framReadSerialNumber();
     9e4:	19 f4       	brne	.+6      	; 0x9ec <processCommand+0x1a2>
     9e6:	0e 94 8d 10 	call	0x211a	; 0x211a <framReadSerialNumber>
     9ea:	08 c1       	rjmp	.+528    	; 0xbfc <processCommand+0x3b2>
		else if (buf[0] == 'c') RTC_readCLKF();			
     9ec:	c3 36       	cpi	r28, 0x63	; 99
     9ee:	19 f4       	brne	.+6      	; 0x9f6 <processCommand+0x1ac>
     9f0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <RTC_readCLKF>
		else if (buf[0] == 'e') {
     9f4:	03 c1       	rjmp	.+518    	; 0xbfc <processCommand+0x3b2>
     9f6:	c5 36       	cpi	r28, 0x65	; 101
			if (  buf[1] == '0'
     9f8:	51 f5       	brne	.+84     	; 0xa4e <processCommand+0x204>
     9fa:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			   || buf[1] == '1' 
     9fe:	90 ed       	ldi	r25, 0xD0	; 208
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
		else if (buf[0] == 'n') framReadSerialNumber();
		else if (buf[0] == 'c') RTC_readCLKF();			
		else if (buf[0] == 'e') {
			if (  buf[1] == '0'
     a00:	98 0f       	add	r25, r24
     a02:	92 30       	cpi	r25, 0x02	; 2
			   || buf[1] == '1' 
			   || buf[1] == '4' )  {enableBuck014(); printf("bucks 0,1,4 (c,i,s1) enabled\n");}
     a04:	10 f0       	brcs	.+4      	; 0xa0a <processCommand+0x1c0>
     a06:	84 33       	cpi	r24, 0x34	; 52
     a08:	29 f4       	brne	.+10     	; 0xa14 <processCommand+0x1ca>
     a0a:	80 d5       	rcall	.+2816   	; 0x150c <enableBuck014>
     a0c:	8e e4       	ldi	r24, 0x4E	; 78
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
			if (buf[1] == '2')  {enableBuck2(); printf("buck2 (Mod) enabled\n");}
     a14:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a18:	82 33       	cpi	r24, 0x32	; 50
     a1a:	29 f4       	brne	.+10     	; 0xa26 <processCommand+0x1dc>
     a1c:	83 d5       	rcall	.+2822   	; 0x1524 <enableBuck2>
     a1e:	8b e6       	ldi	r24, 0x6B	; 107
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
			if (buf[1] == '3')	{enableBuck3();  printf("buck4 (OptHtr) enabled\n");}
     a26:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a2a:	83 33       	cpi	r24, 0x33	; 51
     a2c:	29 f4       	brne	.+10     	; 0xa38 <processCommand+0x1ee>
     a2e:	82 d5       	rcall	.+2820   	; 0x1534 <enableBuck3>
     a30:	8f e7       	ldi	r24, 0x7F	; 127
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
			if (buf[1] == '5')	{enableBuck5(); printf("buck5 (spare2) enabled\n");}
     a38:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a3c:	85 33       	cpi	r24, 0x35	; 53
     a3e:	09 f0       	breq	.+2      	; 0xa42 <processCommand+0x1f8>
     a40:	dd c0       	rjmp	.+442    	; 0xbfc <processCommand+0x3b2>
     a42:	80 d5       	rcall	.+2816   	; 0x1544 <enableBuck5>
     a44:	86 e9       	ldi	r24, 0x96	; 150
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
		}
		else if (buf[0] == 'd') {
     a4c:	d7 c0       	rjmp	.+430    	; 0xbfc <processCommand+0x3b2>
			if (buf[1] == '0')  {disableBuck014();printf("bucks 0,1,4 (c,i,s1) disabled\n");}
     a4e:	c4 36       	cpi	r28, 0x64	; 100
     a50:	31 f5       	brne	.+76     	; 0xa9e <processCommand+0x254>
     a52:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a56:	80 33       	cpi	r24, 0x30	; 48
     a58:	29 f4       	brne	.+10     	; 0xa64 <processCommand+0x21a>
     a5a:	5e d5       	rcall	.+2748   	; 0x1518 <disableBuck014>
     a5c:	8d ea       	ldi	r24, 0xAD	; 173
     a5e:	92 e0       	ldi	r25, 0x02	; 2
			if (buf[1] == '2')  {disableBuck2();printf("buck2 (Mod) disabled\n");}
     a60:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
     a64:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a68:	82 33       	cpi	r24, 0x32	; 50
     a6a:	29 f4       	brne	.+10     	; 0xa76 <processCommand+0x22c>
     a6c:	5f d5       	rcall	.+2750   	; 0x152c <disableBuck2>
     a6e:	8b ec       	ldi	r24, 0xCB	; 203
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
			if (buf[1] == '3')	{disableBuck3();printf("buck3 (OptHtr) disabled\n");}
     a76:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a7a:	83 33       	cpi	r24, 0x33	; 51
     a7c:	29 f4       	brne	.+10     	; 0xa88 <processCommand+0x23e>
     a7e:	5e d5       	rcall	.+2748   	; 0x153c <disableBuck3>
     a80:	80 ee       	ldi	r24, 0xE0	; 224
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
			if (buf[1] == '5')	{disableBuck5();printf("buck5 (Spare2) disabled\n");}
     a88:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     a8c:	85 33       	cpi	r24, 0x35	; 53
     a8e:	09 f0       	breq	.+2      	; 0xa92 <processCommand+0x248>
     a90:	b5 c0       	rjmp	.+362    	; 0xbfc <processCommand+0x3b2>
     a92:	5e d5       	rcall	.+2748   	; 0x1550 <disableBuck5>
     a94:	88 ef       	ldi	r24, 0xF8	; 248
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
     a9c:	af c0       	rjmp	.+350    	; 0xbfc <processCommand+0x3b2>
     a9e:	cf 36       	cpi	r28, 0x6F	; 111
		}

		else if (buf[0] == 'o') {
     aa0:	f1 f4       	brne	.+60     	; 0xade <processCommand+0x294>
     aa2:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint16_t v = (buf[1]-'0') *511;
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	c0 97       	sbiw	r24, 0x30	; 48
     aaa:	2f ef       	ldi	r18, 0xFF	; 255
     aac:	31 e0       	ldi	r19, 0x01	; 1
     aae:	82 9f       	mul	r24, r18
     ab0:	e0 01       	movw	r28, r0
     ab2:	83 9f       	mul	r24, r19
     ab4:	d0 0d       	add	r29, r0
     ab6:	92 9f       	mul	r25, r18
     ab8:	d0 0d       	add	r29, r0
     aba:	11 24       	eor	r1, r1
     abc:	8c 2f       	mov	r24, r28
			if (v>=0 || v< 4096) spi_OpticsDAC_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
     abe:	9d 2f       	mov	r25, r29
     ac0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <spi_OpticsDAC_BroadCast>
     ac4:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
     ac6:	cf 93       	push	r28
     ac8:	80 e1       	ldi	r24, 0x10	; 16
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	8f c0       	rjmp	.+286    	; 0xbfc <processCommand+0x3b2>
     ade:	cf 34       	cpi	r28, 0x4F	; 79
		}
		else if (buf[0] == 'O') {
     ae0:	e1 f4       	brne	.+56     	; 0xb1a <processCommand+0x2d0>
     ae2:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint8_t ch = (buf[1]-'0');
     ae6:	80 53       	subi	r24, 0x30	; 48
     ae8:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
     aea:	08 f0       	brcs	.+2      	; 0xaee <processCommand+0x2a4>
     aec:	87 c0       	rjmp	.+270    	; 0xbfc <processCommand+0x3b2>
     aee:	c0 91 ee 09 	lds	r28, 0x09EE	; 0x8009ee <buf+0x2>
				uint16_t v = buf[2]-'0' * 511;
     af2:	d0 e0       	ldi	r29, 0x00	; 0
     af4:	c0 5d       	subi	r28, 0xD0	; 208
     af6:	df 45       	sbci	r29, 0x5F	; 95
     af8:	6c 2f       	mov	r22, r28
				if (v>=0 || v< 4096) spi_OpticsDAC(ch,v);   
     afa:	7d 2f       	mov	r23, r29
     afc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <spi_OpticsDAC>
     b00:	df 93       	push	r29
				else printf("incorrect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= 0x%X\n", v);
     b02:	cf 93       	push	r28
     b04:	87 e1       	ldi	r24, 0x17	; 23
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	71 c0       	rjmp	.+226    	; 0xbfc <processCommand+0x3b2>
     b1a:	c2 36       	cpi	r28, 0x62	; 98

			}
		}
		else if (buf[0] == 'b') {
     b1c:	09 f5       	brne	.+66     	; 0xb60 <processCommand+0x316>
     b1e:	80 e2       	ldi	r24, 0x20	; 32
			printf("WTF\n");
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
     b26:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint16_t v = ((uint16_t)(buf[1]-'0')) * 511;
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	c0 97       	sbiw	r24, 0x30	; 48
     b2e:	2f ef       	ldi	r18, 0xFF	; 255
     b30:	31 e0       	ldi	r19, 0x01	; 1
     b32:	82 9f       	mul	r24, r18
     b34:	e0 01       	movw	r28, r0
     b36:	83 9f       	mul	r24, r19
     b38:	d0 0d       	add	r29, r0
     b3a:	92 9f       	mul	r25, r18
     b3c:	d0 0d       	add	r29, r0
     b3e:	11 24       	eor	r1, r1
     b40:	ce 01       	movw	r24, r28
			if (v>=0 || v< 4096) spi_OpticsBuckCtl_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
     b42:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <spi_OpticsBuckCtl_BroadCast>
     b46:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
     b48:	cf 93       	push	r28
     b4a:	80 e1       	ldi	r24, 0x10	; 16
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	4e c0       	rjmp	.+156    	; 0xbfc <processCommand+0x3b2>
     b60:	c2 34       	cpi	r28, 0x42	; 66
		}
		else if (buf[0] == 'B') {
     b62:	21 f5       	brne	.+72     	; 0xbac <processCommand+0x362>
     b64:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
			uint8_t ch = buf[1]-'0';
     b68:	80 53       	subi	r24, 0x30	; 48
     b6a:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <processCommand+0x326>
     b6e:	46 c0       	rjmp	.+140    	; 0xbfc <processCommand+0x3b2>
     b70:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <buf+0x2>
				uint16_t v = ((uint16_t)(buf[2]-'0')) * 511;  
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	20 53       	subi	r18, 0x30	; 48
     b78:	31 09       	sbc	r19, r1
     b7a:	4f ef       	ldi	r20, 0xFF	; 255
     b7c:	51 e0       	ldi	r21, 0x01	; 1
     b7e:	24 9f       	mul	r18, r20
     b80:	e0 01       	movw	r28, r0
     b82:	25 9f       	mul	r18, r21
     b84:	d0 0d       	add	r29, r0
     b86:	34 9f       	mul	r19, r20
     b88:	d0 0d       	add	r29, r0
     b8a:	11 24       	eor	r1, r1
				if (v>=0 || v< 4096) spi_buckCtrlDac(ch,v);
     b8c:	be 01       	movw	r22, r28
     b8e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <spi_buckCtrlDac>
				else printf("incorect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= %d\n", v);
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	80 e1       	ldi	r24, 0x10	; 16
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
			}
		}
		else if (buf[0]=='w') {
     ba8:	0f 90       	pop	r0
     baa:	28 c0       	rjmp	.+80     	; 0xbfc <processCommand+0x3b2>
			if (buf[1] == '1')  powerUpWickSensor();
     bac:	c7 37       	cpi	r28, 0x77	; 119
     bae:	59 f4       	brne	.+22     	; 0xbc6 <processCommand+0x37c>
     bb0:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     bb4:	81 33       	cpi	r24, 0x31	; 49
     bb6:	09 f4       	brne	.+2      	; 0xbba <processCommand+0x370>
			if (buf[1] == '0') 	powerDownWickSensor();
     bb8:	d1 d4       	rcall	.+2466   	; 0x155c <powerUpWickSensor>
     bba:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     bbe:	80 33       	cpi	r24, 0x30	; 48
     bc0:	e9 f4       	brne	.+58     	; 0xbfc <processCommand+0x3b2>
     bc2:	d0 d4       	rcall	.+2464   	; 0x1564 <powerDownWickSensor>
     bc4:	1b c0       	rjmp	.+54     	; 0xbfc <processCommand+0x3b2>
		}
		
		else if (buf[0]=='m') {
     bc6:	cd 36       	cpi	r28, 0x6D	; 109
     bc8:	59 f4       	brne	.+22     	; 0xbe0 <processCommand+0x396>
				if (buf[1] == '1')  selectSDcard();
     bca:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
     bce:	81 33       	cpi	r24, 0x31	; 49
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <processCommand+0x38a>
     bd2:	10 d5       	rcall	.+2592   	; 0x15f4 <selectSDcard>
     bd4:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buf+0x1>
				if (buf[1] == '0') 	deSelectSDcard();	
     bd8:	80 33       	cpi	r24, 0x30	; 48
     bda:	81 f4       	brne	.+32     	; 0xbfc <processCommand+0x3b2>
     bdc:	11 d5       	rcall	.+2594   	; 0x1600 <deSelectSDcard>
     bde:	0e c0       	rjmp	.+28     	; 0xbfc <processCommand+0x3b2>
     be0:	8c ee       	ldi	r24, 0xEC	; 236
     be2:	99 e0       	ldi	r25, 0x09	; 9
		}
		else printf("\nno cmd:%s \n", buf);
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	84 e2       	ldi	r24, 0x24	; 36
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
		
				
}
     c00:	08 95       	ret

00000c02 <__vector_8>:
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <__vector_13>:
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	2f 93       	push	r18
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	8f b7       	in	r24, 0x3f	; 63
     c28:	8f 77       	andi	r24, 0x7F	; 127
     c2a:	8f bf       	out	0x3f, r24	; 63
     c2c:	88 b1       	in	r24, 0x08	; 8
     c2e:	80 58       	subi	r24, 0x80	; 128
     c30:	88 b9       	out	0x08, r24	; 8
     c32:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c36:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <counter1024Hz+0x1>
     c40:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <counter1024Hz>
     c44:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c48:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c4c:	81 15       	cp	r24, r1
     c4e:	92 40       	sbci	r25, 0x02	; 2
     c50:	19 f4       	brne	.+6      	; 0xc58 <__vector_13+0x42>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <halfSecFlag>
     c58:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c5c:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c60:	81 15       	cp	r24, r1
     c62:	94 40       	sbci	r25, 0x04	; 4
     c64:	a8 f0       	brcs	.+42     	; 0xc90 <__vector_13+0x7a>
     c66:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <counter1024Hz>
     c6a:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <counter1024Hz+0x1>
     c6e:	94 50       	subi	r25, 0x04	; 4
     c70:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <counter1024Hz+0x1>
     c74:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <counter1024Hz>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <oneSecFlag>
     c7e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
     c82:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <__data_end+0x1>
     c8c:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <__data_end>
     c90:	78 94       	sei
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <init_timer2>:
     ca2:	81 e3       	ldi	r24, 0x31	; 49
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
     caa:	80 e8       	ldi	r24, 0x80	; 128
     cac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
     cbc:	80 ee       	ldi	r24, 0xE0	; 224
     cbe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
     cc2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
     cc6:	e0 e7       	ldi	r30, 0x70	; 112
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	80 83       	st	Z, r24
     cd0:	08 95       	ret

00000cd2 <init_CountersIimers>:
     cd2:	e7 df       	rcall	.-50     	; 0xca2 <init_timer2>
     cd4:	80 ec       	ldi	r24, 0xC0	; 192
     cd6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	8d bb       	out	0x1d, r24	; 29
     cde:	85 e4       	ldi	r24, 0x45	; 69
     ce0:	93 e0       	ldi	r25, 0x03	; 3
     ce2:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <puts>
     ce6:	08 95       	ret

00000ce8 <ADC_rdSystemStatus>:
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	cd d3       	rcall	.+1946   	; 0x1488 <ADC_RegisterRead>
     cee:	1f 92       	push	r1
     cf0:	8f 93       	push	r24
     cf2:	81 e6       	ldi	r24, 0x61	; 97
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	08 95       	ret

00000d08 <ADC_wrGPO>:
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	d8 2f       	mov	r29, r24
     d0e:	c6 2f       	mov	r28, r22
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	10 f4       	brcc	.+4      	; 0xd18 <ADC_wrGPO+0x10>
     d14:	62 30       	cpi	r22, 0x02	; 2
     d16:	40 f0       	brcs	.+16     	; 0xd28 <ADC_wrGPO+0x20>
     d18:	83 e7       	ldi	r24, 0x73	; 115
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cc 23       	and	r28, r28
     d2a:	31 f0       	breq	.+12     	; 0xd38 <ADC_wrGPO+0x30>
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <ADC_wrGPO+0x2a>
     d30:	66 0f       	add	r22, r22
     d32:	da 95       	dec	r29
     d34:	ea f7       	brpl	.-6      	; 0xd30 <ADC_wrGPO+0x28>
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <ADC_wrGPO+0x32>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	8b e0       	ldi	r24, 0x0B	; 11
     d3c:	96 d3       	rcall	.+1836   	; 0x146a <ADC_RegisterWrite>
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <initADC2518>:
     d44:	60 e4       	ldi	r22, 0x40	; 64
     d46:	85 e0       	ldi	r24, 0x05	; 5
     d48:	90 d3       	rcall	.+1824   	; 0x146a <ADC_RegisterWrite>
     d4a:	60 e4       	ldi	r22, 0x40	; 64
     d4c:	87 e0       	ldi	r24, 0x07	; 7
     d4e:	8d d3       	rcall	.+1818   	; 0x146a <ADC_RegisterWrite>
     d50:	60 e4       	ldi	r22, 0x40	; 64
     d52:	89 e0       	ldi	r24, 0x09	; 9
     d54:	8a d3       	rcall	.+1812   	; 0x146a <ADC_RegisterWrite>
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	d6 cf       	rjmp	.-84     	; 0xd08 <ADC_wrGPO>
     d5c:	08 95       	ret

00000d5e <ADC_OverSample>:
     d5e:	cf 93       	push	r28
     d60:	c8 2f       	mov	r28, r24
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	40 f0       	brcs	.+16     	; 0xd76 <ADC_OverSample+0x18>
     d66:	8d e2       	ldi	r24, 0x2D	; 45
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	6c 2f       	mov	r22, r28
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	77 d3       	rcall	.+1774   	; 0x146a <ADC_RegisterWrite>
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <ADC_OscSpeed>:
     d80:	cf 93       	push	r28
     d82:	c8 2f       	mov	r28, r24
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	7f d3       	rcall	.+1790   	; 0x1488 <ADC_RegisterRead>
     d8a:	c1 11       	cpse	r28, r1
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <ADC_OscSpeed+0x14>
     d8e:	68 2f       	mov	r22, r24
     d90:	6f 7e       	andi	r22, 0xEF	; 239
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <ADC_OscSpeed+0x30>
     d94:	c1 30       	cpi	r28, 0x01	; 1
     d96:	19 f4       	brne	.+6      	; 0xd9e <ADC_OscSpeed+0x1e>
     d98:	68 2f       	mov	r22, r24
     d9a:	60 61       	ori	r22, 0x10	; 16
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <ADC_OscSpeed+0x30>
     d9e:	8d e0       	ldi	r24, 0x0D	; 13
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <ADC_OscSpeed+0x34>
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	5b d3       	rcall	.+1718   	; 0x146a <ADC_RegisterWrite>
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <ADC_manualMode>:
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	80 e1       	ldi	r24, 0x10	; 16
     dbc:	56 c3       	rjmp	.+1708   	; 0x146a <ADC_RegisterWrite>
     dbe:	08 95       	ret

00000dc0 <ADC_ReadManualModeAnalogCh>:
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	18 2f       	mov	r17, r24
     dc8:	68 2f       	mov	r22, r24
     dca:	81 e1       	ldi	r24, 0x11	; 17
     dcc:	75 d3       	rcall	.+1770   	; 0x14b8 <ADC_RegisterReadWrite>
     dce:	d8 2f       	mov	r29, r24
     dd0:	c9 2f       	mov	r28, r25
     dd2:	28 2f       	mov	r18, r24
     dd4:	39 2f       	mov	r19, r25
     dd6:	a0 e5       	ldi	r26, 0x50	; 80
     dd8:	b3 ec       	ldi	r27, 0xC3	; 195
     dda:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__umulhisi3>
     dde:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__floatsisf>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	59 e3       	ldi	r21, 0x39	; 57
     dea:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__mulsf3>
     dee:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__fixunssfsi>
     df2:	7f 93       	push	r23
     df4:	6f 93       	push	r22
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	1f 92       	push	r1
     dfc:	1f 93       	push	r17
     dfe:	8a e8       	ldi	r24, 0x8A	; 138
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	9f 93       	push	r25
     e04:	8f 93       	push	r24
     e06:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     e0a:	8d b7       	in	r24, 0x3d	; 61
     e0c:	9e b7       	in	r25, 0x3e	; 62
     e0e:	08 96       	adiw	r24, 0x08	; 8
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	9e bf       	out	0x3e, r25	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	8d bf       	out	0x3d, r24	; 61
     e1a:	8d 2f       	mov	r24, r29
     e1c:	9c 2f       	mov	r25, r28
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	08 95       	ret

00000e26 <nextADC>:
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	c8 2f       	mov	r28, r24
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <nextADC+0x30>
     e30:	cf 5f       	subi	r28, 0xFF	; 255
     e32:	cf 70       	andi	r28, 0x0F	; 15
     e34:	20 91 5a 09 	lds	r18, 0x095A	; 0x80095a <hdwConfig>
     e38:	30 91 5b 09 	lds	r19, 0x095B	; 0x80095b <hdwConfig+0x1>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0c 2e       	mov	r0, r28
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <nextADC+0x22>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <nextADC+0x1e>
     e4c:	82 23       	and	r24, r18
     e4e:	93 23       	and	r25, r19
     e50:	2d 2f       	mov	r18, r29
     e52:	89 2b       	or	r24, r25
     e54:	21 f4       	brne	.+8      	; 0xe5e <nextADC+0x38>
     e56:	d1 e0       	ldi	r29, 0x01	; 1
     e58:	d2 0f       	add	r29, r18
     e5a:	21 31       	cpi	r18, 0x11	; 17
     e5c:	48 f3       	brcs	.-46     	; 0xe30 <nextADC+0xa>
     e5e:	d1 31       	cpi	r29, 0x11	; 17
     e60:	41 f4       	brne	.+16     	; 0xe72 <nextADC+0x4c>
     e62:	88 e4       	ldi	r24, 0x48	; 72
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	9f 93       	push	r25
     e68:	8f 93       	push	r24
     e6a:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	d1 31       	cpi	r29, 0x11	; 17
     e74:	11 f0       	breq	.+4      	; 0xe7a <nextADC+0x54>
     e76:	8c 2f       	mov	r24, r28
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <nextADC+0x56>
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <showActiveADCs>:
     e82:	cf 93       	push	r28
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	1d c0       	rjmp	.+58     	; 0xec2 <showActiveADCs+0x40>
     e88:	20 91 5a 09 	lds	r18, 0x095A	; 0x80095a <hdwConfig>
     e8c:	30 91 5b 09 	lds	r19, 0x095B	; 0x80095b <hdwConfig+0x1>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0c 2e       	mov	r0, r28
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <showActiveADCs+0x1a>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <showActiveADCs+0x16>
     ea0:	82 23       	and	r24, r18
     ea2:	93 23       	and	r25, r19
     ea4:	89 2b       	or	r24, r25
     ea6:	61 f0       	breq	.+24     	; 0xec0 <showActiveADCs+0x3e>
     ea8:	1f 92       	push	r1
     eaa:	cf 93       	push	r28
     eac:	84 e4       	ldi	r24, 0x44	; 68
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 5f       	subi	r28, 0xFF	; 255
     ec2:	c0 31       	cpi	r28, 0x10	; 16
     ec4:	08 f3       	brcs	.-62     	; 0xe88 <showActiveADCs+0x6>
     ec6:	82 e4       	ldi	r24, 0x42	; 66
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
     ed2:	ea e5       	ldi	r30, 0x5A	; 90
     ed4:	f9 e0       	ldi	r31, 0x09	; 9
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	8f 93       	push	r24
     eda:	80 81       	ld	r24, Z
     edc:	8f 93       	push	r24
     ede:	8b ea       	ldi	r24, 0xAB	; 171
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <incADC_MUX>:
     efa:	95 df       	rcall	.-214    	; 0xe26 <nextADC>
     efc:	ec e7       	ldi	r30, 0x7C	; 124
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	90 81       	ld	r25, Z
     f02:	90 7e       	andi	r25, 0xE0	; 224
     f04:	90 83       	st	Z, r25
     f06:	90 81       	ld	r25, Z
     f08:	28 2f       	mov	r18, r24
     f0a:	27 70       	andi	r18, 0x07	; 7
     f0c:	92 2b       	or	r25, r18
     f0e:	90 83       	st	Z, r25
     f10:	83 ff       	sbrs	r24, 3
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <incADC_MUX+0x26>
     f14:	eb e7       	ldi	r30, 0x7B	; 123
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	90 81       	ld	r25, Z
     f1a:	98 60       	ori	r25, 0x08	; 8
     f1c:	90 83       	st	Z, r25
     f1e:	08 95       	ret
     f20:	eb e7       	ldi	r30, 0x7B	; 123
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	90 81       	ld	r25, Z
     f26:	97 7f       	andi	r25, 0xF7	; 247
     f28:	90 83       	st	Z, r25
     f2a:	08 95       	ret

00000f2c <__vector_29>:
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	0b b6       	in	r0, 0x3b	; 59
     f38:	0f 92       	push	r0
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     f56:	40 91 e2 08 	lds	r20, 0x08E2	; 0x8008e2 <currentADCchannel>
     f5a:	64 2f       	mov	r22, r20
     f5c:	04 2e       	mov	r0, r20
     f5e:	00 0c       	add	r0, r0
     f60:	77 0b       	sbc	r23, r23
     f62:	fb 01       	movw	r30, r22
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	eb 51       	subi	r30, 0x1B	; 27
     f6a:	f7 4f       	sbci	r31, 0xF7	; 247
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	dc 01       	movw	r26, r24
     f72:	a2 0f       	add	r26, r18
     f74:	b1 1d       	adc	r27, r1
     f76:	9d 01       	movw	r18, r26
     f78:	b1 83       	std	Z+1, r27	; 0x01
     f7a:	a0 83       	st	Z, r26
     f7c:	a9 e7       	ldi	r26, 0x79	; 121
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	9c 91       	ld	r25, X
     f82:	89 2f       	mov	r24, r25
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	98 2f       	mov	r25, r24
     f88:	88 27       	eor	r24, r24
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
     f92:	3c 91       	ld	r19, X
     f94:	2c 91       	ld	r18, X
     f96:	9f 93       	push	r25
     f98:	8f 93       	push	r24
     f9a:	1f 92       	push	r1
     f9c:	3f 93       	push	r19
     f9e:	1f 92       	push	r1
     fa0:	2f 93       	push	r18
     fa2:	7f 93       	push	r23
     fa4:	4f 93       	push	r20
     fa6:	80 ec       	ldi	r24, 0xC0	; 192
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
     fb2:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <currentADCchannel>
     fb6:	a1 df       	rcall	.-190    	; 0xefa <incADC_MUX>
     fb8:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <currentADCchannel>
     fbc:	90 91 e3 08 	lds	r25, 0x08E3	; 0x8008e3 <firstADCchannel>
     fc0:	2d b7       	in	r18, 0x3d	; 61
     fc2:	3e b7       	in	r19, 0x3e	; 62
     fc4:	26 5f       	subi	r18, 0xF6	; 246
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	3e bf       	out	0x3e, r19	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	2d bf       	out	0x3d, r18	; 61
     fd2:	89 13       	cpse	r24, r25
     fd4:	12 c0       	rjmp	.+36     	; 0xffa <__vector_29+0xce>
     fd6:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <numReadings.2095>
     fda:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <numReadings.2095+0x1>
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <numReadings.2095+0x1>
     fe4:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <numReadings.2095>
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	39 f4       	brne	.+14     	; 0xffa <__vector_29+0xce>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <adcCompleteFlag>
     ff2:	10 92 e1 08 	sts	0x08E1, r1	; 0x8008e1 <numReadings.2095+0x1>
     ff6:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <numReadings.2095>
     ffa:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <adcCompleteFlag>
     ffe:	81 11       	cpse	r24, r1
    1000:	05 c0       	rjmp	.+10     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    1002:	ea e7       	ldi	r30, 0x7A	; 122
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	80 64       	ori	r24, 0x40	; 64
    100a:	80 83       	st	Z, r24
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0b be       	out	0x3b, r0	; 59
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <doAdc>:
    1032:	cf 93       	push	r28
    1034:	c0 91 e3 08 	lds	r28, 0x08E3	; 0x8008e3 <firstADCchannel>
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 4b 1c 	call	0x3896	; 0x3896 <putchar>
    1040:	8c 2f       	mov	r24, r28
    1042:	0c 2e       	mov	r0, r28
    1044:	00 0c       	add	r0, r0
    1046:	99 0b       	sbc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	eb 51       	subi	r30, 0x1B	; 27
    1050:	f7 4f       	sbci	r31, 0xF7	; 247
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	8f 93       	push	r24
    1056:	80 81       	ld	r24, Z
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	cf 93       	push	r28
    105e:	84 ed       	ldi	r24, 0xD4	; 212
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	9f 93       	push	r25
    1064:	8f 93       	push	r24
    1066:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    106a:	8c 2f       	mov	r24, r28
    106c:	dc de       	rcall	.-584    	; 0xe26 <nextADC>
    106e:	c8 2f       	mov	r28, r24
    1070:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <firstADCchannel>
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	c8 13       	cpse	r28, r24
    1082:	da cf       	rjmp	.-76     	; 0x1038 <doAdc+0x6>
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <startADCcycle>:
    1088:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <adcCompleteFlag>
    108c:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <firstADCchannel>
    1090:	e8 2f       	mov	r30, r24
    1092:	ee 0f       	add	r30, r30
    1094:	ff 0b       	sbc	r31, r31
    1096:	eb 51       	subi	r30, 0x1B	; 27
    1098:	f7 4f       	sbci	r31, 0xF7	; 247
    109a:	11 82       	std	Z+1, r1	; 0x01
    109c:	10 82       	st	Z, r1
    109e:	c3 de       	rcall	.-634    	; 0xe26 <nextADC>
    10a0:	90 91 e3 08 	lds	r25, 0x08E3	; 0x8008e3 <firstADCchannel>
    10a4:	89 13       	cpse	r24, r25
    10a6:	f4 cf       	rjmp	.-24     	; 0x1090 <startADCcycle+0x8>
    10a8:	ea e7       	ldi	r30, 0x7A	; 122
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 64       	ori	r24, 0x40	; 64
    10b0:	80 83       	st	Z, r24
    10b2:	08 95       	ret

000010b4 <init_adc>:
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	21 df       	rcall	.-446    	; 0xefa <incADC_MUX>
    10b8:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <currentADCchannel>
    10bc:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <firstADCchannel>
    10c0:	8f 3f       	cpi	r24, 0xFF	; 255
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <init_adc+0x2c>
    10c4:	ea e7       	ldi	r30, 0x7A	; 122
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	80 83       	st	Z, r24
    10ce:	8f e8       	ldi	r24, 0x8F	; 143
    10d0:	80 83       	st	Z, r24
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
    10d8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
    10dc:	d5 cf       	rjmp	.-86     	; 0x1088 <startADCcycle>
    10de:	08 95       	ret
    10e0:	8f ed       	ldi	r24, 0xDF	; 223
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	08 95       	ret

000010f2 <readDiff_CH>:
    10f2:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <npaFlow+0x5>
    10f6:	1f 92       	push	r1
    10f8:	8f 93       	push	r24
    10fa:	86 ef       	ldi	r24, 0xF6	; 246
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	08 95       	ret

00001110 <readNPA700>:
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	2a 97       	sbiw	r28, 0x0a	; 10
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	19 82       	std	Y+1, r1	; 0x01
    1130:	1a 82       	std	Y+2, r1	; 0x02
    1132:	1b 82       	std	Y+3, r1	; 0x03
    1134:	1c 82       	std	Y+4, r1	; 0x04
    1136:	f9 2e       	mov	r15, r25
    1138:	c9 2e       	mov	r12, r25
    113a:	d1 2c       	mov	r13, r1
    113c:	1f 92       	push	r1
    113e:	9f 93       	push	r25
    1140:	0d e0       	ldi	r16, 0x0D	; 13
    1142:	14 e0       	ldi	r17, 0x04	; 4
    1144:	1f 93       	push	r17
    1146:	0f 93       	push	r16
    1148:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    114c:	8f 2d       	mov	r24, r15
    114e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <setI2Cmux>
    1152:	1f 92       	push	r1
    1154:	ff 92       	push	r15
    1156:	1f 93       	push	r17
    1158:	0f 93       	push	r16
    115a:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    115e:	44 e0       	ldi	r20, 0x04	; 4
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	be 01       	movw	r22, r28
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	88 e2       	ldi	r24, 0x28	; 40
    116a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <twi_read_bytes>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	98 2f       	mov	r25, r24
    1172:	92 95       	swap	r25
    1174:	96 95       	lsr	r25
    1176:	96 95       	lsr	r25
    1178:	93 70       	andi	r25, 0x03	; 3
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	c9 f1       	breq	.+114    	; 0x11f8 <readNPA700+0xe8>
    1186:	91 30       	cpi	r25, 0x01	; 1
    1188:	89 f4       	brne	.+34     	; 0x11ac <readNPA700+0x9c>
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	c3 1a       	sub	r12, r19
    118e:	d1 08       	sbc	r13, r1
    1190:	df 92       	push	r13
    1192:	cf 92       	push	r12
    1194:	86 ea       	ldi	r24, 0xA6	; 166
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	4e c0       	rjmp	.+156    	; 0x1248 <readNPA700+0x138>
    11ac:	92 30       	cpi	r25, 0x02	; 2
    11ae:	89 f4       	brne	.+34     	; 0x11d2 <readNPA700+0xc2>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	c8 1a       	sub	r12, r24
    11b4:	d1 08       	sbc	r13, r1
    11b6:	df 92       	push	r13
    11b8:	cf 92       	push	r12
    11ba:	8a e8       	ldi	r24, 0x8A	; 138
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <readNPA700+0x138>
    11d2:	93 30       	cpi	r25, 0x03	; 3
    11d4:	c1 f5       	brne	.+112    	; 0x1246 <readNPA700+0x136>
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	c2 1a       	sub	r12, r18
    11da:	d1 08       	sbc	r13, r1
    11dc:	df 92       	push	r13
    11de:	cf 92       	push	r12
    11e0:	87 e6       	ldi	r24, 0x67	; 103
    11e2:	92 e0       	ldi	r25, 0x02	; 2
    11e4:	9f 93       	push	r25
    11e6:	8f 93       	push	r24
    11e8:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	28 c0       	rjmp	.+80     	; 0x1248 <readNPA700+0x138>
    11f8:	8f 73       	andi	r24, 0x3F	; 63
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	98 2f       	mov	r25, r24
    11fe:	88 27       	eor	r24, r24
    1200:	2a 81       	ldd	r18, Y+2	; 0x02
    1202:	82 0f       	add	r24, r18
    1204:	91 1d       	adc	r25, r1
    1206:	2b 81       	ldd	r18, Y+3	; 0x03
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	4c 81       	ldd	r20, Y+4	; 0x04
    1218:	42 95       	swap	r20
    121a:	46 95       	lsr	r20
    121c:	47 70       	andi	r20, 0x07	; 7
    121e:	24 0f       	add	r18, r20
    1220:	31 1d       	adc	r19, r1
    1222:	3f 93       	push	r19
    1224:	2f 93       	push	r18
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	8f e1       	ldi	r24, 0x1F	; 31
    122c:	94 e0       	ldi	r25, 0x04	; 4
    122e:	9f 93       	push	r25
    1230:	8f 93       	push	r24
    1232:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <readNPA700+0x138>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	2a 96       	adiw	r28, 0x0a	; 10
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	08 95       	ret

00001264 <initPressureSensors>:
    1264:	cf 93       	push	r28
    1266:	e1 e1       	ldi	r30, 0x11	; 17
    1268:	f9 e0       	ldi	r31, 0x09	; 9
    126a:	c1 e0       	ldi	r28, 0x01	; 1
    126c:	c4 83       	std	Z+4, r28	; 0x04
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	85 83       	std	Z+5, r24	; 0x05
    1272:	3f df       	rcall	.-386    	; 0x10f2 <readDiff_CH>
    1274:	eb e0       	ldi	r30, 0x0B	; 11
    1276:	f9 e0       	ldi	r31, 0x09	; 9
    1278:	c5 83       	std	Z+5, r28	; 0x05
    127a:	14 82       	std	Z+4, r1	; 0x04
    127c:	e5 e0       	ldi	r30, 0x05	; 5
    127e:	f9 e0       	ldi	r31, 0x09	; 9
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	85 83       	std	Z+5, r24	; 0x05
    1284:	c4 83       	std	Z+4, r28	; 0x04
    1286:	40 91 11 09 	lds	r20, 0x0911	; 0x800911 <npaFlow>
    128a:	50 91 12 09 	lds	r21, 0x0912	; 0x800912 <npaFlow+0x1>
    128e:	60 91 13 09 	lds	r22, 0x0913	; 0x800913 <npaFlow+0x2>
    1292:	70 91 14 09 	lds	r23, 0x0914	; 0x800914 <npaFlow+0x3>
    1296:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <npaFlow+0x4>
    129a:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <npaFlow+0x5>
    129e:	38 df       	rcall	.-400    	; 0x1110 <readNPA700>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	98 e4       	ldi	r25, 0x48	; 72
    12a4:	fc 01       	movw	r30, r24
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <initPressureSensors+0x42>
    12aa:	fc 01       	movw	r30, r24
    12ac:	31 97       	sbiw	r30, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <initPressureSensors+0x48>
    12b0:	fc 01       	movw	r30, r24
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <initPressureSensors+0x4e>
    12b6:	fc 01       	movw	r30, r24
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <initPressureSensors+0x54>
    12bc:	fc 01       	movw	r30, r24
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <initPressureSensors+0x5a>
    12c2:	fc 01       	movw	r30, r24
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <initPressureSensors+0x60>
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <initPressureSensors+0x64>
    12cc:	40 91 0b 09 	lds	r20, 0x090B	; 0x80090b <npaAbsP>
    12d0:	50 91 0c 09 	lds	r21, 0x090C	; 0x80090c <npaAbsP+0x1>
    12d4:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <npaAbsP+0x2>
    12d8:	70 91 0e 09 	lds	r23, 0x090E	; 0x80090e <npaAbsP+0x3>
    12dc:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <npaAbsP+0x4>
    12e0:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <npaAbsP+0x5>
    12e4:	15 df       	rcall	.-470    	; 0x1110 <readNPA700>
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <readDiffPress>:
    12ea:	40 91 11 09 	lds	r20, 0x0911	; 0x800911 <npaFlow>
    12ee:	50 91 12 09 	lds	r21, 0x0912	; 0x800912 <npaFlow+0x1>
    12f2:	60 91 13 09 	lds	r22, 0x0913	; 0x800913 <npaFlow+0x2>
    12f6:	70 91 14 09 	lds	r23, 0x0914	; 0x800914 <npaFlow+0x3>
    12fa:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <npaFlow+0x4>
    12fe:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <npaFlow+0x5>
    1302:	06 cf       	rjmp	.-500    	; 0x1110 <readNPA700>
    1304:	08 95       	ret

00001306 <readABSPress>:
    1306:	40 91 0b 09 	lds	r20, 0x090B	; 0x80090b <npaAbsP>
    130a:	50 91 0c 09 	lds	r21, 0x090C	; 0x80090c <npaAbsP+0x1>
    130e:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <npaAbsP+0x2>
    1312:	70 91 0e 09 	lds	r23, 0x090E	; 0x80090e <npaAbsP+0x3>
    1316:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <npaAbsP+0x4>
    131a:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <npaAbsP+0x5>
    131e:	f8 ce       	rjmp	.-528    	; 0x1110 <readNPA700>
    1320:	08 95       	ret

00001322 <readU47>:
    1322:	40 91 05 09 	lds	r20, 0x0905	; 0x800905 <npaU47>
    1326:	50 91 06 09 	lds	r21, 0x0906	; 0x800906 <npaU47+0x1>
    132a:	60 91 07 09 	lds	r22, 0x0907	; 0x800907 <npaU47+0x2>
    132e:	70 91 08 09 	lds	r23, 0x0908	; 0x800908 <npaU47+0x3>
    1332:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <npaU47+0x4>
    1336:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <npaU47+0x5>
    133a:	ea ce       	rjmp	.-556    	; 0x1110 <readNPA700>
    133c:	08 95       	ret

0000133e <startRH_T_conversion>:
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	87 e2       	ldi	r24, 0x27	; 39
    1346:	0e 94 e6 11 	call	0x23cc	; 0x23cc <twi_write_bytes>
    134a:	89 2b       	or	r24, r25
    134c:	41 f4       	brne	.+16     	; 0x135e <startRH_T_conversion+0x20>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 17 09 	sts	0x0917, r24	; 0x800917 <rhStarted>
    1354:	86 e2       	ldi	r24, 0x26	; 38
    1356:	94 e0       	ldi	r25, 0x04	; 4
    1358:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <puts>
    135c:	08 95       	ret
    135e:	8e e3       	ldi	r24, 0x3E	; 62
    1360:	94 e0       	ldi	r25, 0x04	; 4
    1362:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <puts>
    1366:	08 95       	ret

00001368 <readRH_T>:
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 d0       	rcall	.+0      	; 0x1376 <readRH_T+0xe>
    1376:	1f 92       	push	r1
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	1a 82       	std	Y+2, r1	; 0x02
    1380:	1b 82       	std	Y+3, r1	; 0x03
    1382:	1c 82       	std	Y+4, r1	; 0x04
    1384:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <rhStarted>
    1388:	88 23       	and	r24, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <readRH_T+0x26>
    138c:	63 c0       	rjmp	.+198    	; 0x1454 <readRH_T+0xec>
    138e:	10 92 17 09 	sts	0x0917, r1	; 0x800917 <rhStarted>
    1392:	44 e0       	ldi	r20, 0x04	; 4
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	be 01       	movw	r22, r28
    1398:	6f 5f       	subi	r22, 0xFF	; 255
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	87 e2       	ldi	r24, 0x27	; 39
    139e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <twi_read_bytes>
    13a2:	89 2b       	or	r24, r25
    13a4:	29 f0       	breq	.+10     	; 0x13b0 <readRH_T+0x48>
    13a6:	8e e3       	ldi	r24, 0x3E	; 62
    13a8:	94 e0       	ldi	r25, 0x04	; 4
    13aa:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    13ae:	52 c0       	rjmp	.+164    	; 0x1454 <readRH_T+0xec>
    13b0:	a9 81       	ldd	r26, Y+1	; 0x01
    13b2:	8a 2f       	mov	r24, r26
    13b4:	82 95       	swap	r24
    13b6:	86 95       	lsr	r24
    13b8:	86 95       	lsr	r24
    13ba:	83 70       	andi	r24, 0x03	; 3
    13bc:	29 f0       	breq	.+10     	; 0x13c8 <readRH_T+0x60>
    13be:	80 e5       	ldi	r24, 0x50	; 80
    13c0:	94 e0       	ldi	r25, 0x04	; 4
    13c2:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    13c6:	46 c0       	rjmp	.+140    	; 0x1454 <readRH_T+0xec>
    13c8:	af 73       	andi	r26, 0x3F	; 63
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ba 2f       	mov	r27, r26
    13ce:	aa 27       	eor	r26, r26
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	a8 2b       	or	r26, r24
    13d4:	28 ee       	ldi	r18, 0xE8	; 232
    13d6:	33 e0       	ldi	r19, 0x03	; 3
    13d8:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__usmulhisi3>
    13dc:	0f 2e       	mov	r0, r31
    13de:	fe ef       	ldi	r31, 0xFE	; 254
    13e0:	cf 2e       	mov	r12, r31
    13e2:	ff e3       	ldi	r31, 0x3F	; 63
    13e4:	df 2e       	mov	r13, r31
    13e6:	e1 2c       	mov	r14, r1
    13e8:	f1 2c       	mov	r15, r1
    13ea:	f0 2d       	mov	r31, r0
    13ec:	a7 01       	movw	r20, r14
    13ee:	96 01       	movw	r18, r12
    13f0:	0e 94 88 1a 	call	0x3510	; 0x3510 <__divmodsi4>
    13f4:	5f 93       	push	r21
    13f6:	4f 93       	push	r20
    13f8:	3f 93       	push	r19
    13fa:	2f 93       	push	r18
    13fc:	80 e6       	ldi	r24, 0x60	; 96
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	9f 93       	push	r25
    1402:	8f 93       	push	r24
    1404:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1408:	ab 81       	ldd	r26, Y+3	; 0x03
    140a:	80 e4       	ldi	r24, 0x40	; 64
    140c:	a8 9f       	mul	r26, r24
    140e:	d0 01       	movw	r26, r0
    1410:	11 24       	eor	r1, r1
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	86 95       	lsr	r24
    1416:	86 95       	lsr	r24
    1418:	a8 2b       	or	r26, r24
    141a:	24 e7       	ldi	r18, 0x74	; 116
    141c:	30 e4       	ldi	r19, 0x40	; 64
    141e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__usmulhisi3>
    1422:	a7 01       	movw	r20, r14
    1424:	96 01       	movw	r18, r12
    1426:	0e 94 88 1a 	call	0x3510	; 0x3510 <__divmodsi4>
    142a:	da 01       	movw	r26, r20
    142c:	c9 01       	movw	r24, r18
    142e:	80 5a       	subi	r24, 0xA0	; 160
    1430:	9f 40       	sbci	r25, 0x0F	; 15
    1432:	a1 09       	sbc	r26, r1
    1434:	b1 09       	sbc	r27, r1
    1436:	bf 93       	push	r27
    1438:	af 93       	push	r26
    143a:	9f 93       	push	r25
    143c:	8f 93       	push	r24
    143e:	80 e8       	ldi	r24, 0x80	; 128
    1440:	94 e0       	ldi	r25, 0x04	; 4
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	08 95       	ret

0000146a <ADC_RegisterWrite>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	d8 2f       	mov	r29, r24
    1470:	c6 2f       	mov	r28, r22
    1472:	90 d0       	rcall	.+288    	; 0x1594 <selectADC2518>
    1474:	88 e0       	ldi	r24, 0x08	; 8
    1476:	97 d4       	rcall	.+2350   	; 0x1da6 <spiTransferByte>
    1478:	8d 2f       	mov	r24, r29
    147a:	95 d4       	rcall	.+2346   	; 0x1da6 <spiTransferByte>
    147c:	8c 2f       	mov	r24, r28
    147e:	93 d4       	rcall	.+2342   	; 0x1da6 <spiTransferByte>
    1480:	8f d0       	rcall	.+286    	; 0x15a0 <deSelectADC2518>
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <ADC_RegisterRead>:
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	d8 2f       	mov	r29, r24
    148e:	c6 2f       	mov	r28, r22
    1490:	81 d0       	rcall	.+258    	; 0x1594 <selectADC2518>
    1492:	80 e1       	ldi	r24, 0x10	; 16
    1494:	88 d4       	rcall	.+2320   	; 0x1da6 <spiTransferByte>
    1496:	8d 2f       	mov	r24, r29
    1498:	86 d4       	rcall	.+2316   	; 0x1da6 <spiTransferByte>
    149a:	8c 2f       	mov	r24, r28
    149c:	84 d4       	rcall	.+2312   	; 0x1da6 <spiTransferByte>
    149e:	80 d0       	rcall	.+256    	; 0x15a0 <deSelectADC2518>
    14a0:	79 d0       	rcall	.+242    	; 0x1594 <selectADC2518>
    14a2:	80 e1       	ldi	r24, 0x10	; 16
    14a4:	80 d4       	rcall	.+2304   	; 0x1da6 <spiTransferByte>
    14a6:	c8 2f       	mov	r28, r24
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	7d d4       	rcall	.+2298   	; 0x1da6 <spiTransferByte>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	7b d4       	rcall	.+2294   	; 0x1da6 <spiTransferByte>
    14b0:	8c 2f       	mov	r24, r28
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <ADC_RegisterReadWrite>:
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	08 2f       	mov	r16, r24
    14c2:	16 2f       	mov	r17, r22
    14c4:	67 d0       	rcall	.+206    	; 0x1594 <selectADC2518>
    14c6:	88 e0       	ldi	r24, 0x08	; 8
    14c8:	6e d4       	rcall	.+2268   	; 0x1da6 <spiTransferByte>
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	c9 2f       	mov	r28, r25
    14ce:	d8 2f       	mov	r29, r24
    14d0:	80 2f       	mov	r24, r16
    14d2:	69 d4       	rcall	.+2258   	; 0x1da6 <spiTransferByte>
    14d4:	c8 0f       	add	r28, r24
    14d6:	d1 1d       	adc	r29, r1
    14d8:	81 2f       	mov	r24, r17
    14da:	65 d4       	rcall	.+2250   	; 0x1da6 <spiTransferByte>
    14dc:	18 2f       	mov	r17, r24
    14de:	60 d0       	rcall	.+192    	; 0x15a0 <deSelectADC2518>
    14e0:	1f 92       	push	r1
    14e2:	1f 93       	push	r17
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	81 ea       	ldi	r24, 0xA1	; 161
    14ea:	94 e0       	ldi	r25, 0x04	; 4
    14ec:	9f 93       	push	r25
    14ee:	8f 93       	push	r24
    14f0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	ce 01       	movw	r24, r28
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	08 95       	ret

0000150c <enableBuck014>:
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	86 e0       	ldi	r24, 0x06	; 6
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	f9 cb       	rjmp	.-2062   	; 0xd08 <ADC_wrGPO>
    1516:	08 95       	ret

00001518 <disableBuck014>:
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	86 e0       	ldi	r24, 0x06	; 6
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	f3 cb       	rjmp	.-2074   	; 0xd08 <ADC_wrGPO>
    1522:	08 95       	ret

00001524 <enableBuck2>:
    1524:	84 b3       	in	r24, 0x14	; 20
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	84 bb       	out	0x14, r24	; 20
    152a:	08 95       	ret

0000152c <disableBuck2>:
    152c:	84 b3       	in	r24, 0x14	; 20
    152e:	8e 7f       	andi	r24, 0xFE	; 254
    1530:	84 bb       	out	0x14, r24	; 20
    1532:	08 95       	ret

00001534 <enableBuck3>:
    1534:	84 b3       	in	r24, 0x14	; 20
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	84 bb       	out	0x14, r24	; 20
    153a:	08 95       	ret

0000153c <disableBuck3>:
    153c:	84 b3       	in	r24, 0x14	; 20
    153e:	8d 7f       	andi	r24, 0xFD	; 253
    1540:	84 bb       	out	0x14, r24	; 20
    1542:	08 95       	ret

00001544 <enableBuck5>:
    1544:	eb e0       	ldi	r30, 0x0B	; 11
    1546:	f1 e0       	ldi	r31, 0x01	; 1
    1548:	80 81       	ld	r24, Z
    154a:	80 68       	ori	r24, 0x80	; 128
    154c:	80 83       	st	Z, r24
    154e:	08 95       	ret

00001550 <disableBuck5>:
    1550:	eb e0       	ldi	r30, 0x0B	; 11
    1552:	f1 e0       	ldi	r31, 0x01	; 1
    1554:	80 81       	ld	r24, Z
    1556:	8f 77       	andi	r24, 0x7F	; 127
    1558:	80 83       	st	Z, r24
    155a:	08 95       	ret

0000155c <powerUpWickSensor>:
    155c:	8e b1       	in	r24, 0x0e	; 14
    155e:	8b 7f       	andi	r24, 0xFB	; 251
    1560:	8e b9       	out	0x0e, r24	; 14
    1562:	08 95       	ret

00001564 <powerDownWickSensor>:
    1564:	8e b1       	in	r24, 0x0e	; 14
    1566:	84 60       	ori	r24, 0x04	; 4
    1568:	8e b9       	out	0x0e, r24	; 14
    156a:	08 95       	ret

0000156c <selectFRAM>:
    156c:	85 b1       	in	r24, 0x05	; 5
    156e:	8e 7f       	andi	r24, 0xFE	; 254
    1570:	85 b9       	out	0x05, r24	; 5
    1572:	08 95       	ret

00001574 <deSelectFRAM>:
    1574:	85 b1       	in	r24, 0x05	; 5
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	85 b9       	out	0x05, r24	; 5
    157a:	08 95       	ret

0000157c <selectOpticsDAC>:
    157c:	e2 e0       	ldi	r30, 0x02	; 2
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	80 81       	ld	r24, Z
    1582:	8e 7f       	andi	r24, 0xFE	; 254
    1584:	80 83       	st	Z, r24
    1586:	08 95       	ret

00001588 <deSelectOpticsDAC>:
    1588:	e2 e0       	ldi	r30, 0x02	; 2
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	80 81       	ld	r24, Z
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	80 83       	st	Z, r24
    1592:	08 95       	ret

00001594 <selectADC2518>:
    1594:	e2 e0       	ldi	r30, 0x02	; 2
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	80 81       	ld	r24, Z
    159a:	8d 7f       	andi	r24, 0xFD	; 253
    159c:	80 83       	st	Z, r24
    159e:	08 95       	ret

000015a0 <deSelectADC2518>:
    15a0:	e2 e0       	ldi	r30, 0x02	; 2
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	80 81       	ld	r24, Z
    15a6:	82 60       	ori	r24, 0x02	; 2
    15a8:	80 83       	st	Z, r24
    15aa:	08 95       	ret

000015ac <selectBuckCtrlDAC>:
    15ac:	e2 e0       	ldi	r30, 0x02	; 2
    15ae:	f1 e0       	ldi	r31, 0x01	; 1
    15b0:	80 81       	ld	r24, Z
    15b2:	8b 7f       	andi	r24, 0xFB	; 251
    15b4:	80 83       	st	Z, r24
    15b6:	08 95       	ret

000015b8 <deSelectBuckCtrlDAC>:
    15b8:	e2 e0       	ldi	r30, 0x02	; 2
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	80 81       	ld	r24, Z
    15be:	84 60       	ori	r24, 0x04	; 4
    15c0:	80 83       	st	Z, r24
    15c2:	08 95       	ret

000015c4 <selectFlash>:
    15c4:	e2 e0       	ldi	r30, 0x02	; 2
    15c6:	f1 e0       	ldi	r31, 0x01	; 1
    15c8:	80 81       	ld	r24, Z
    15ca:	87 7f       	andi	r24, 0xF7	; 247
    15cc:	80 83       	st	Z, r24
    15ce:	08 95       	ret

000015d0 <deSelectFlash>:
    15d0:	e2 e0       	ldi	r30, 0x02	; 2
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	80 81       	ld	r24, Z
    15d6:	88 60       	ori	r24, 0x08	; 8
    15d8:	80 83       	st	Z, r24
    15da:	08 95       	ret

000015dc <deSelectRTC>:
    15dc:	e2 e0       	ldi	r30, 0x02	; 2
    15de:	f1 e0       	ldi	r31, 0x01	; 1
    15e0:	80 81       	ld	r24, Z
    15e2:	80 61       	ori	r24, 0x10	; 16
    15e4:	80 83       	st	Z, r24
    15e6:	08 95       	ret

000015e8 <selectRTC>:
    15e8:	e2 e0       	ldi	r30, 0x02	; 2
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7e       	andi	r24, 0xEF	; 239
    15f0:	80 83       	st	Z, r24
    15f2:	08 95       	ret

000015f4 <selectSDcard>:
    15f4:	e2 e0       	ldi	r30, 0x02	; 2
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	80 81       	ld	r24, Z
    15fa:	80 62       	ori	r24, 0x20	; 32
    15fc:	80 83       	st	Z, r24
    15fe:	08 95       	ret

00001600 <deSelectSDcard>:
    1600:	e2 e0       	ldi	r30, 0x02	; 2
    1602:	f1 e0       	ldi	r31, 0x01	; 1
    1604:	80 81       	ld	r24, Z
    1606:	8f 7d       	andi	r24, 0xDF	; 223
    1608:	80 83       	st	Z, r24
    160a:	08 95       	ret

0000160c <spi_FlashReadID>:
	while (loopcnt--);
}

//Read Flash ID:  0 address, 1 dummy, 2 Data
void spi_FlashReadID(void)     
{
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
	uint8_t miso[2];
	
	selectFlash();
    1610:	d9 df       	rcall	.-78     	; 0x15c4 <selectFlash>
	spiTransferByte(FLASH_READ_ID);
    1612:	8f e9       	ldi	r24, 0x9F	; 159
    1614:	c8 d3       	rcall	.+1936   	; 0x1da6 <spiTransferByte>
	spiTransferByte(0);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	c6 d3       	rcall	.+1932   	; 0x1da6 <spiTransferByte>
	miso[1] = spiTransferByte(0);
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	c4 d3       	rcall	.+1928   	; 0x1da6 <spiTransferByte>
    161e:	c8 2f       	mov	r28, r24
	miso[2] = spiTransferByte(0);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	c1 d3       	rcall	.+1922   	; 0x1da6 <spiTransferByte>
    1624:	d8 2f       	mov	r29, r24
    1626:	d4 df       	rcall	.-88     	; 0x15d0 <deSelectFlash>
	deSelectFlash();
    1628:	1f 92       	push	r1
    162a:	df 93       	push	r29
	printf("\n0x%02x, 0x%02x\n", miso[1],miso[2]);
    162c:	1f 92       	push	r1
    162e:	cf 93       	push	r28
    1630:	86 eb       	ldi	r24, 0xB6	; 182
    1632:	94 e0       	ldi	r25, 0x04	; 4
    1634:	9f 93       	push	r25
    1636:	8f 93       	push	r24
    1638:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
	
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <spi_FlashGetFeatures>:
    164e:	cf 93       	push	r28
    1650:	c8 2f       	mov	r28, r24
**********************************************************************/
uint8_t spi_FlashGetFeatures(uint8_t fregister)
{
	uint8_t features;
		
	selectFlash();
    1652:	b8 df       	rcall	.-144    	; 0x15c4 <selectFlash>
	spiTransferByte(FLASH_GET_FEATURES);
    1654:	8f e0       	ldi	r24, 0x0F	; 15
    1656:	a7 d3       	rcall	.+1870   	; 0x1da6 <spiTransferByte>
	spiTransferByte(fregister);
    1658:	8c 2f       	mov	r24, r28
    165a:	a5 d3       	rcall	.+1866   	; 0x1da6 <spiTransferByte>
	features = spiTransferByte(0);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	a3 d3       	rcall	.+1862   	; 0x1da6 <spiTransferByte>
    1660:	c8 2f       	mov	r28, r24
	deSelectFlash();
    1662:	b6 df       	rcall	.-148    	; 0x15d0 <deSelectFlash>
    1664:	8c 2f       	mov	r24, r28
	return features;
}
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <spi_FlashGetStatusRegister>:
    166a:	80 ec       	ldi	r24, 0xC0	; 192
	return (ret & FLASH_STATUS_BIT_OIP) ? 1 : 0;
}

uint8_t spi_FlashGetStatusRegister(void)
{
	return 	spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS);
    166c:	f0 cf       	rjmp	.-32     	; 0x164e <spi_FlashGetFeatures>
}
    166e:	08 95       	ret

00001670 <spi_FlashIsBusy>:
/*********************************************************************
 *  check operation in progress bit (OIP) in feature status register to see if chip is busy.
 *  returns zero if ready, and 1 if busy with previous command.
**********************************************************************/
uint8_t spi_FlashIsBusy(void)   
{
    1670:	cf 93       	push	r28
	uint8_t ret;	
	ret = spi_FlashGetStatusRegister();  // check response
    1672:	fb df       	rcall	.-10     	; 0x166a <spi_FlashGetStatusRegister>
    1674:	c8 2f       	mov	r28, r24
	printf("spi_FlashIsBusy: 0x%02x\n", ret);
    1676:	1f 92       	push	r1
    1678:	8f 93       	push	r24
    167a:	87 ec       	ldi	r24, 0xC7	; 199
    167c:	94 e0       	ldi	r25, 0x04	; 4
    167e:	9f 93       	push	r25
    1680:	8f 93       	push	r24
    1682:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
	return (ret & FLASH_STATUS_BIT_OIP) ? 1 : 0;
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
}
    168e:	8c 2f       	mov	r24, r28
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <spi_FlashWaitUntilReady>:
	
}


uint8_t spi_FlashWaitUntilReady()
{
    1696:	cf 93       	push	r28
	uint8_t retry = FLASH_RETRY_MAX;
    1698:	ca e0       	ldi	r28, 0x0A	; 10
	do 
	{
		retry--;
    169a:	c1 50       	subi	r28, 0x01	; 1
	} while (spi_FlashIsBusy() && retry);
    169c:	e9 df       	rcall	.-46     	; 0x1670 <spi_FlashIsBusy>
    169e:	88 23       	and	r24, r24
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <spi_FlashWaitUntilReady+0x10>
    16a2:	c1 11       	cpse	r28, r1
    16a4:	fa cf       	rjmp	.-12     	; 0x169a <spi_FlashWaitUntilReady+0x4>
	return (retry > 0); 
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	c1 11       	cpse	r28, r1
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <spi_FlashWaitUntilReady+0x18>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
	
}
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret

000016b2 <spi_FlashDisplayFeatureRegisters>:
	return 	spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS);
}

void spi_FlashDisplayFeatureRegisters(void)
{
	printf("Flash Block Lock    0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK));
    16b2:	80 ea       	ldi	r24, 0xA0	; 160
    16b4:	cc df       	rcall	.-104    	; 0x164e <spi_FlashGetFeatures>
    16b6:	1f 92       	push	r1
    16b8:	8f 93       	push	r24
    16ba:	80 ee       	ldi	r24, 0xE0	; 224
    16bc:	94 e0       	ldi	r25, 0x04	; 4
    16be:	9f 93       	push	r25
    16c0:	8f 93       	push	r24
    16c2:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
	printf("Flash Config        0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_CONFIG));
    16c6:	80 eb       	ldi	r24, 0xB0	; 176
    16c8:	c2 df       	rcall	.-124    	; 0x164e <spi_FlashGetFeatures>
    16ca:	1f 92       	push	r1
    16cc:	8f 93       	push	r24
    16ce:	8c ef       	ldi	r24, 0xFC	; 252
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
	printf("Flash Status        0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS));
    16da:	80 ec       	ldi	r24, 0xC0	; 192
    16dc:	b8 df       	rcall	.-144    	; 0x164e <spi_FlashGetFeatures>
    16de:	1f 92       	push	r1
    16e0:	8f 93       	push	r24
    16e2:	88 e1       	ldi	r24, 0x18	; 24
    16e4:	95 e0       	ldi	r25, 0x05	; 5
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
	printf("Flash Die Select    0x%02x\n", spi_FlashGetFeatures(FLASH_FEATURE_REG_DIE_SELECT));
    16ee:	80 ed       	ldi	r24, 0xD0	; 208
    16f0:	ae df       	rcall	.-164    	; 0x164e <spi_FlashGetFeatures>
    16f2:	1f 92       	push	r1
    16f4:	8f 93       	push	r24
    16f6:	84 e3       	ldi	r24, 0x34	; 52
    16f8:	95 e0       	ldi	r25, 0x05	; 5
    16fa:	9f 93       	push	r25
    16fc:	8f 93       	push	r24
    16fe:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1702:	8d b7       	in	r24, 0x3d	; 61
	
}
    1704:	9e b7       	in	r25, 0x3e	; 62
    1706:	40 96       	adiw	r24, 0x10	; 16
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	9e bf       	out	0x3e, r25	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	8d bf       	out	0x3d, r24	; 61
    1712:	08 95       	ret

00001714 <spi_FlashSetFeatures>:
    1714:	cf 93       	push	r28
 *      Returns feature register content
 *      
 *
**********************************************************************/
uint8_t spi_FlashSetFeatures(uint8_t fregister, uint8_t features)
{
    1716:	df 93       	push	r29
    1718:	c8 2f       	mov	r28, r24
    171a:	d6 2f       	mov	r29, r22
	selectFlash();
    171c:	53 df       	rcall	.-346    	; 0x15c4 <selectFlash>
	spiTransferByte(FLASH_SET_FEATURES);
    171e:	8f e1       	ldi	r24, 0x1F	; 31
    1720:	42 d3       	rcall	.+1668   	; 0x1da6 <spiTransferByte>
	spiTransferByte(fregister);
    1722:	8c 2f       	mov	r24, r28
    1724:	40 d3       	rcall	.+1664   	; 0x1da6 <spiTransferByte>
	spiTransferByte(features);
    1726:	8d 2f       	mov	r24, r29
    1728:	3e d3       	rcall	.+1660   	; 0x1da6 <spiTransferByte>
	deSelectFlash();
    172a:	52 df       	rcall	.-348    	; 0x15d0 <deSelectFlash>
    172c:	8c 2f       	mov	r24, r28
	return spi_FlashGetFeatures(fregister);
    172e:	8f df       	rcall	.-226    	; 0x164e <spi_FlashGetFeatures>
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
}
    1734:	08 95       	ret

00001736 <spi_FlashUnlockAllBlocks>:
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	80 ea       	ldi	r24, 0xA0	; 160
	uint8_t features;
	
	//features = spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK);
	//printf("spi_FlashUnlockAllBlocks: lock reg starts at 0x%02x\n", features);
	
	spi_FlashSetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK, 0x00);
    173a:	ec df       	rcall	.-40     	; 0x1714 <spi_FlashSetFeatures>

	features = spi_FlashGetFeatures(FLASH_FEATURE_REG_BLOCK_LOCK);
    173c:	80 ea       	ldi	r24, 0xA0	; 160
    173e:	87 df       	rcall	.-242    	; 0x164e <spi_FlashGetFeatures>
	printf("spi_FlashUnlockAllBlocks: lock reg now  0x%02x\n", features);
    1740:	1f 92       	push	r1
    1742:	8f 93       	push	r24
    1744:	80 e5       	ldi	r24, 0x50	; 80
    1746:	95 e0       	ldi	r25, 0x05	; 5
    1748:	9f 93       	push	r25
    174a:	8f 93       	push	r24
    174c:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	08 95       	ret

0000175a <spi_FlashEnableWrite>:
 *      Return zero if WIP = 1 or WEL = 0;
 *
**********************************************************************/

uint8_t spi_FlashEnableWrite(void)   
{
    175a:	cf 93       	push	r28

	selectFlash();
    175c:	33 df       	rcall	.-410    	; 0x15c4 <selectFlash>
	spiTransferByte(FLASH_WRITE_ENABLE);         
    175e:	86 e0       	ldi	r24, 0x06	; 6
	deSelectFlash();
    1760:	22 d3       	rcall	.+1604   	; 0x1da6 <spiTransferByte>
    1762:	36 df       	rcall	.-404    	; 0x15d0 <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    1764:	82 df       	rcall	.-252    	; 0x166a <spi_FlashGetStatusRegister>
    1766:	c8 2f       	mov	r28, r24
    1768:	1f 92       	push	r1
	printf("spi_FlashEnableWrite: 0x%02x\n", statReg);
    176a:	8f 93       	push	r24
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	95 e0       	ldi	r25, 0x05	; 5
    1770:	9f 93       	push	r25
    1772:	8f 93       	push	r24
    1774:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1778:	0f 90       	pop	r0
		
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 1 : 0  ;  
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	c1 fb       	bst	r28, 1
}
    1782:	88 27       	eor	r24, r24
    1784:	80 f9       	bld	r24, 0
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <spi_FlashDisableWrite>:
    178a:	cf 93       	push	r28

uint8_t spi_FlashDisableWrite(void)
{

	selectFlash();
    178c:	1b df       	rcall	.-458    	; 0x15c4 <selectFlash>
	spiTransferByte(FLASH_WRITE_DISABLE);
    178e:	84 e0       	ldi	r24, 0x04	; 4
	deSelectFlash();
    1790:	0a d3       	rcall	.+1556   	; 0x1da6 <spiTransferByte>
    1792:	1e df       	rcall	.-452    	; 0x15d0 <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    1794:	6a df       	rcall	.-300    	; 0x166a <spi_FlashGetStatusRegister>
    1796:	c8 2f       	mov	r28, r24
    1798:	1f 92       	push	r1
	printf("spi_FlashDisableWrite: 0x%02x\n", statReg);
    179a:	8f 93       	push	r24
    179c:	8e e9       	ldi	r24, 0x9E	; 158
    179e:	95 e0       	ldi	r25, 0x05	; 5
    17a0:	9f 93       	push	r25
    17a2:	8f 93       	push	r24
    17a4:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    17a8:	c6 95       	lsr	r28
	
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 0 : 1  ;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	8c 27       	eor	r24, r28
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	81 70       	andi	r24, 0x01	; 1
}
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <spi_FlashWriteToPage>:
    17bc:	af 92       	push	r10
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	16 2f       	mov	r17, r22
    17d2:	b7 2e       	mov	r11, r23
    17d4:	a8 2e       	mov	r10, r24
    17d6:	ea 01       	movw	r28, r20
    17d8:	69 01       	movw	r12, r18
	uint16_t ret = 0;
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    17da:	e0 2e       	mov	r14, r16
    17dc:	f1 2c       	mov	r15, r1
    17de:	c7 01       	movw	r24, r14
    17e0:	84 0f       	add	r24, r20
    17e2:	95 1f       	adc	r25, r21
    17e4:	81 38       	cpi	r24, 0x81	; 129
    17e6:	98 40       	sbci	r25, 0x08	; 8
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <spi_FlashWriteToPage+0x30>
    17ea:	7d c0       	rjmp	.+250    	; 0x18e6 <spi_FlashWriteToPage+0x12a>
	{
		if (spi_FlashWaitUntilReady())
    17ec:	54 df       	rcall	.-344    	; 0x1696 <spi_FlashWaitUntilReady>
    17ee:	88 23       	and	r24, r24
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <spi_FlashWriteToPage+0x38>
    17f2:	6e c0       	rjmp	.+220    	; 0x18d0 <spi_FlashWriteToPage+0x114>
		{
			selectFlash();
    17f4:	e7 de       	rcall	.-562    	; 0x15c4 <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    17f6:	83 e1       	ldi	r24, 0x13	; 19
    17f8:	d6 d2       	rcall	.+1452   	; 0x1da6 <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    17fa:	8a 2d       	mov	r24, r10
    17fc:	d4 d2       	rcall	.+1448   	; 0x1da6 <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    17fe:	8b 2d       	mov	r24, r11
			spiTransferByte(pageAddress.byte[0]);
    1800:	d2 d2       	rcall	.+1444   	; 0x1da6 <spiTransferByte>
    1802:	81 2f       	mov	r24, r17
			deSelectFlash();
    1804:	d0 d2       	rcall	.+1440   	; 0x1da6 <spiTransferByte>
    1806:	e4 de       	rcall	.-568    	; 0x15d0 <deSelectFlash>
			if (spi_FlashWaitUntilReady())
    1808:	46 df       	rcall	.-372    	; 0x1696 <spi_FlashWaitUntilReady>
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <spi_FlashWriteToPage+0x54>
			{
				if (spi_FlashEnableWrite())
    180e:	55 c0       	rjmp	.+170    	; 0x18ba <spi_FlashWriteToPage+0xfe>
    1810:	a4 df       	rcall	.-184    	; 0x175a <spi_FlashEnableWrite>
    1812:	88 23       	and	r24, r24
				{
					union twoBytes addrInPage;
					addrInPage.word = address;
					selectFlash();
    1814:	09 f4       	brne	.+2      	; 0x1818 <spi_FlashWriteToPage+0x5c>
    1816:	46 c0       	rjmp	.+140    	; 0x18a4 <spi_FlashWriteToPage+0xe8>
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
    1818:	d5 de       	rcall	.-598    	; 0x15c4 <selectFlash>
    181a:	84 e8       	ldi	r24, 0x84	; 132
					spiTransferByte(addrInPage.byte[1]);
    181c:	c4 d2       	rcall	.+1416   	; 0x1da6 <spiTransferByte>
    181e:	8d 2f       	mov	r24, r29
    1820:	c2 d2       	rcall	.+1412   	; 0x1da6 <spiTransferByte>
					spiTransferByte(addrInPage.byte[0]);
    1822:	8c 2f       	mov	r24, r28
					for (uint8_t i = 0; i < nbytes; i++)
    1824:	c0 d2       	rcall	.+1408   	; 0x1da6 <spiTransferByte>
					{
						spiTransferByte(buffer[i]);
    1826:	c0 e0       	ldi	r28, 0x00	; 0
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <spi_FlashWriteToPage+0x7a>
    182a:	f6 01       	movw	r30, r12
    182c:	ec 0f       	add	r30, r28
					addrInPage.word = address;
					selectFlash();
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
					spiTransferByte(addrInPage.byte[1]);
					spiTransferByte(addrInPage.byte[0]);
					for (uint8_t i = 0; i < nbytes; i++)
    182e:	f1 1d       	adc	r31, r1
    1830:	80 81       	ld	r24, Z
					{
						spiTransferByte(buffer[i]);
					}
					deSelectFlash();
    1832:	b9 d2       	rcall	.+1394   	; 0x1da6 <spiTransferByte>
					if (spi_FlashWaitUntilReady())
    1834:	cf 5f       	subi	r28, 0xFF	; 255
    1836:	c0 17       	cp	r28, r16
    1838:	c0 f3       	brcs	.-16     	; 0x182a <spi_FlashWriteToPage+0x6e>
					{
						selectFlash();
    183a:	ca de       	rcall	.-620    	; 0x15d0 <deSelectFlash>
    183c:	2c df       	rcall	.-424    	; 0x1696 <spi_FlashWaitUntilReady>
						spiTransferByte(FLASH_PROGRAM_EXECUTE);
    183e:	88 23       	and	r24, r24
    1840:	31 f1       	breq	.+76     	; 0x188e <spi_FlashWriteToPage+0xd2>
    1842:	c0 de       	rcall	.-640    	; 0x15c4 <selectFlash>
						spiTransferByte(pageAddress.byte[2]);
    1844:	80 e1       	ldi	r24, 0x10	; 16
    1846:	af d2       	rcall	.+1374   	; 0x1da6 <spiTransferByte>
    1848:	8a 2d       	mov	r24, r10
						spiTransferByte(pageAddress.byte[1]);
    184a:	ad d2       	rcall	.+1370   	; 0x1da6 <spiTransferByte>
    184c:	8b 2d       	mov	r24, r11
    184e:	ab d2       	rcall	.+1366   	; 0x1da6 <spiTransferByte>
						spiTransferByte(pageAddress.byte[0]);
    1850:	81 2f       	mov	r24, r17
    1852:	a9 d2       	rcall	.+1362   	; 0x1da6 <spiTransferByte>
    1854:	bd de       	rcall	.-646    	; 0x15d0 <deSelectFlash>
						deSelectFlash();
    1856:	1f df       	rcall	.-450    	; 0x1696 <spi_FlashWaitUntilReady>
    1858:	88 23       	and	r24, r24
						if (spi_FlashWaitUntilReady())
    185a:	71 f0       	breq	.+28     	; 0x1878 <spi_FlashWriteToPage+0xbc>
    185c:	96 df       	rcall	.-212    	; 0x178a <spi_FlashDisableWrite>
    185e:	81 11       	cpse	r24, r1
    1860:	4c c0       	rjmp	.+152    	; 0x18fa <spi_FlashWriteToPage+0x13e>
						{
							if (spi_FlashDisableWrite())
    1862:	88 e6       	ldi	r24, 0x68	; 104
    1864:	96 e0       	ldi	r25, 0x06	; 6
    1866:	9f 93       	push	r25
    1868:	8f 93       	push	r24
								ret = nbytes;
							else
								printf_P(PSTR("spi_FlashWriteToPage: Flash won't disable write\n"));
    186a:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	e1 2c       	mov	r14, r1
    1874:	f1 2c       	mov	r15, r1
    1876:	41 c0       	rjmp	.+130    	; 0x18fa <spi_FlashWriteToPage+0x13e>
    1878:	8f e2       	ldi	r24, 0x2F	; 47
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    187a:	96 e0       	ldi	r25, 0x06	; 6
    187c:	9f 93       	push	r25
    187e:	8f 93       	push	r24
								ret = nbytes;
							else
								printf_P(PSTR("spi_FlashWriteToPage: Flash won't disable write\n"));
						}
						else
							printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    1880:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	e1 2c       	mov	r14, r1
    188a:	f1 2c       	mov	r15, r1
    188c:	36 c0       	rjmp	.+108    	; 0x18fa <spi_FlashWriteToPage+0x13e>
    188e:	86 ef       	ldi	r24, 0xF6	; 246
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    1890:	95 e0       	ldi	r25, 0x05	; 5
    1892:	9f 93       	push	r25
    1894:	8f 93       	push	r24
						}
						else
							printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
					}
					else
						printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    1896:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	e1 2c       	mov	r14, r1
    18a0:	f1 2c       	mov	r15, r1
    18a2:	2b c0       	rjmp	.+86     	; 0x18fa <spi_FlashWriteToPage+0x13e>
    18a4:	86 ec       	ldi	r24, 0xC6	; 198
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    18a6:	95 e0       	ldi	r25, 0x05	; 5
    18a8:	9f 93       	push	r25
    18aa:	8f 93       	push	r24
					}
					else
						printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
				}
				else
					printf_P(PSTR("spi_FlashWriteToPage: Flash won't enable write\n"));
    18ac:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	e1 2c       	mov	r14, r1
    18b6:	f1 2c       	mov	r15, r1
    18b8:	20 c0       	rjmp	.+64     	; 0x18fa <spi_FlashWriteToPage+0x13e>
    18ba:	8d e8       	ldi	r24, 0x8D	; 141
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    18bc:	95 e0       	ldi	r25, 0x05	; 5
    18be:	9f 93       	push	r25
    18c0:	8f 93       	push	r24
				}
				else
					printf_P(PSTR("spi_FlashWriteToPage: Flash won't enable write\n"));
			}
			else
				printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after page read\n"));
    18c2:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	e1 2c       	mov	r14, r1
    18cc:	f1 2c       	mov	r15, r1
    18ce:	15 c0       	rjmp	.+42     	; 0x18fa <spi_FlashWriteToPage+0x13e>
    18d0:	84 e6       	ldi	r24, 0x64	; 100
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    18d2:	95 e0       	ldi	r25, 0x05	; 5
    18d4:	9f 93       	push	r25
    18d6:	8f 93       	push	r24
			}
			else
				printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after page read\n"));
		}
		else
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
    18d8:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	e1 2c       	mov	r14, r1
    18e2:	f1 2c       	mov	r15, r1
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <spi_FlashWriteToPage+0x13e>
    18e6:	80 e3       	ldi	r24, 0x30	; 48
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    18e8:	95 e0       	ldi	r25, 0x05	; 5
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
		}
		else
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashWriteToPage: buffer crosses page boundary\n"));
    18ee:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	e1 2c       	mov	r14, r1
    18f8:	f1 2c       	mov	r15, r1
    18fa:	8e 2d       	mov	r24, r14
    18fc:	df 91       	pop	r29
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashWriteToPage: buffer crosses page boundary\n"));
	return ret;
}
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	08 95       	ret

00001912 <spi_FlashWrite>:
    1912:	8f 92       	push	r8
    1914:	9f 92       	push	r9
    1916:	af 92       	push	r10
    1918:	bf 92       	push	r11
*  Crosses page if necessary
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	7a 01       	movw	r14, r20
    1928:	12 2f       	mov	r17, r18
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    192a:	20 e8       	ldi	r18, 0x80	; 128
    192c:	38 e0       	ldi	r19, 0x08	; 8
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__udivmodsi4>
    1936:	49 01       	movw	r8, r18
    1938:	5a 01       	movw	r10, r20
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    193a:	86 2f       	mov	r24, r22
    193c:	97 2f       	mov	r25, r23
    193e:	46 2f       	mov	r20, r22
    1940:	57 2f       	mov	r21, r23
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    1942:	81 0f       	add	r24, r17
    1944:	91 1d       	adc	r25, r1
    1946:	81 38       	cpi	r24, 0x81	; 129
    1948:	98 40       	sbci	r25, 0x08	; 8
    194a:	28 f0       	brcs	.+10     	; 0x1956 <spi_FlashWrite+0x44>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    194c:	c1 2f       	mov	r28, r17
    194e:	c6 0f       	add	r28, r22
    1950:	c0 58       	subi	r28, 0x80	; 128
		crossesPage = true;
    1952:	d1 e0       	ldi	r29, 0x01	; 1
    1954:	02 c0       	rjmp	.+4      	; 0x195a <spi_FlashWrite+0x48>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    1956:	c1 2f       	mov	r28, r17
{
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    1958:	d0 e0       	ldi	r29, 0x00	; 0
	} 
	else
	{
		firstPageNumBytes = numBytes;
	}
    if (spi_FlashWriteToPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    195a:	0c 2f       	mov	r16, r28
    195c:	97 01       	movw	r18, r14
    195e:	c5 01       	movw	r24, r10
    1960:	b4 01       	movw	r22, r8
    1962:	2c df       	rcall	.-424    	; 0x17bc <spi_FlashWriteToPage>
    1964:	c8 13       	cpse	r28, r24
    1966:	23 c0       	rjmp	.+70     	; 0x19ae <spi_FlashWrite+0x9c>
	{
		if (crossesPage)
    1968:	dd 23       	and	r29, r29
    196a:	51 f1       	breq	.+84     	; 0x19c0 <spi_FlashWrite+0xae>
		{
			if (spi_FlashWriteToPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    196c:	01 2f       	mov	r16, r17
    196e:	0c 1b       	sub	r16, r28
    1970:	d0 e0       	ldi	r29, 0x00	; 0
    1972:	97 01       	movw	r18, r14
    1974:	2c 0f       	add	r18, r28
    1976:	3d 1f       	adc	r19, r29
    1978:	c5 01       	movw	r24, r10
    197a:	b4 01       	movw	r22, r8
    197c:	6f 5f       	subi	r22, 0xFF	; 255
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	19 df       	rcall	.-462    	; 0x17bc <spi_FlashWriteToPage>
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	21 2f       	mov	r18, r17
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	2c 1b       	sub	r18, r28
    1992:	3d 0b       	sbc	r19, r29
    1994:	82 17       	cp	r24, r18
    1996:	93 07       	cpc	r25, r19
    1998:	99 f0       	breq	.+38     	; 0x19c0 <spi_FlashWrite+0xae>
			{
				// success
				ret = numBytes;
			}
			else
				printf_P(PSTR("spi_FlashWrite: 2nd page write failed\n"));
    199a:	89 e0       	ldi	r24, 0x09	; 9
    199c:	95 e0       	ldi	r25, 0x05	; 5
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <spi_FlashWrite+0xae>
			// success
			ret = numBytes;
		}
	}
	else
		printf_P(PSTR("spi_FlashWrite: 1st page write failed\n"));
    19ae:	82 ee       	ldi	r24, 0xE2	; 226
    19b0:	94 e0       	ldi	r25, 0x04	; 4
    19b2:	9f 93       	push	r25
    19b4:	8f 93       	push	r24
    19b6:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    19be:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
		printf_P(PSTR("spi_FlashWrite: 1st page write failed\n"));

	return ret;
}
    19c0:	81 2f       	mov	r24, r17
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	08 95       	ret

000019d8 <spi_FlashReadFromPage>:
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	c6 2f       	mov	r28, r22
    19ee:	d7 2f       	mov	r29, r23
    19f0:	18 2f       	mov	r17, r24
    19f2:	6a 01       	movw	r12, r20
    19f4:	59 01       	movw	r10, r18
	uint16_t ret = 0;
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    19f6:	e0 2e       	mov	r14, r16
    19f8:	f1 2c       	mov	r15, r1
    19fa:	c7 01       	movw	r24, r14
    19fc:	84 0f       	add	r24, r20
    19fe:	95 1f       	adc	r25, r21
    1a00:	81 38       	cpi	r24, 0x81	; 129
    1a02:	98 40       	sbci	r25, 0x08	; 8
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <spi_FlashReadFromPage+0x30>
    1a06:	3d c0       	rjmp	.+122    	; 0x1a82 <spi_FlashReadFromPage+0xaa>
	{
		if (spi_FlashWaitUntilReady())
    1a08:	46 de       	rcall	.-884    	; 0x1696 <spi_FlashWaitUntilReady>
    1a0a:	88 23       	and	r24, r24
    1a0c:	79 f1       	breq	.+94     	; 0x1a6c <spi_FlashReadFromPage+0x94>
		{
			selectFlash();
    1a0e:	da dd       	rcall	.-1100   	; 0x15c4 <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    1a10:	83 e1       	ldi	r24, 0x13	; 19
    1a12:	c9 d1       	rcall	.+914    	; 0x1da6 <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    1a14:	81 2f       	mov	r24, r17
    1a16:	c7 d1       	rcall	.+910    	; 0x1da6 <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    1a18:	8d 2f       	mov	r24, r29
			spiTransferByte(pageAddress.byte[0]);
    1a1a:	c5 d1       	rcall	.+906    	; 0x1da6 <spiTransferByte>
    1a1c:	8c 2f       	mov	r24, r28
			deSelectFlash();
    1a1e:	c3 d1       	rcall	.+902    	; 0x1da6 <spiTransferByte>
			if (spi_FlashWaitUntilReady())
    1a20:	d7 dd       	rcall	.-1106   	; 0x15d0 <deSelectFlash>
    1a22:	39 de       	rcall	.-910    	; 0x1696 <spi_FlashWaitUntilReady>
			{
				union twoBytes addrInPage;
				addrInPage.word = address;
				selectFlash();
    1a24:	88 23       	and	r24, r24
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
    1a26:	b9 f0       	breq	.+46     	; 0x1a56 <spi_FlashReadFromPage+0x7e>
    1a28:	cd dd       	rcall	.-1126   	; 0x15c4 <selectFlash>
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
				spiTransferByte(addrInPage.byte[1]);
    1a2c:	bc d1       	rcall	.+888    	; 0x1da6 <spiTransferByte>
    1a2e:	8d 2d       	mov	r24, r13
				spiTransferByte(addrInPage.byte[0]);
    1a30:	ba d1       	rcall	.+884    	; 0x1da6 <spiTransferByte>
    1a32:	8c 2d       	mov	r24, r12
    1a34:	b8 d1       	rcall	.+880    	; 0x1da6 <spiTransferByte>
				spiTransferByte(0);  // dummy byte required
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	b6 d1       	rcall	.+876    	; 0x1da6 <spiTransferByte>
				for (uint8_t i = 0; i < nbytes; i++)
    1a3a:	c0 e0       	ldi	r28, 0x00	; 0
    1a3c:	08 c0       	rjmp	.+16     	; 0x1a4e <spi_FlashReadFromPage+0x76>
				{
					buffer[i] = spiTransferByte(0);
    1a3e:	65 01       	movw	r12, r10
    1a40:	cc 0e       	add	r12, r28
    1a42:	d1 1c       	adc	r13, r1
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	af d1       	rcall	.+862    	; 0x1da6 <spiTransferByte>
    1a48:	f6 01       	movw	r30, r12
    1a4a:	80 83       	st	Z, r24
    1a4c:	cf 5f       	subi	r28, 0xFF	; 255
				selectFlash();
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
				spiTransferByte(addrInPage.byte[1]);
				spiTransferByte(addrInPage.byte[0]);
				spiTransferByte(0);  // dummy byte required
				for (uint8_t i = 0; i < nbytes; i++)
    1a4e:	c0 17       	cp	r28, r16
    1a50:	b0 f3       	brcs	.-20     	; 0x1a3e <spi_FlashReadFromPage+0x66>
    1a52:	be dd       	rcall	.-1156   	; 0x15d0 <deSelectFlash>
				{
					buffer[i] = spiTransferByte(0);
				}
				deSelectFlash();
    1a54:	20 c0       	rjmp	.+64     	; 0x1a96 <spi_FlashReadFromPage+0xbe>
    1a56:	88 ea       	ldi	r24, 0xA8	; 168
    1a58:	94 e0       	ldi	r25, 0x04	; 4
				ret = nbytes;
			}
			else
				printf_P(PSTR("spi_FlashReadFromPage: Flash never ready after page read\n"));
    1a5a:	9f 93       	push	r25
    1a5c:	8f 93       	push	r24
    1a5e:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	e1 2c       	mov	r14, r1
    1a68:	f1 2c       	mov	r15, r1
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    1a6a:	15 c0       	rjmp	.+42     	; 0x1a96 <spi_FlashReadFromPage+0xbe>
    1a6c:	8e e7       	ldi	r24, 0x7E	; 126
    1a6e:	94 e0       	ldi	r25, 0x04	; 4
			}
			else
				printf_P(PSTR("spi_FlashReadFromPage: Flash never ready after page read\n"));
		}
		else
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	e1 2c       	mov	r14, r1
    1a7e:	f1 2c       	mov	r15, r1
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    1a80:	0a c0       	rjmp	.+20     	; 0x1a96 <spi_FlashReadFromPage+0xbe>
    1a82:	89 e4       	ldi	r24, 0x49	; 73
    1a84:	94 e0       	ldi	r25, 0x04	; 4
		}
		else
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashReadFromPage: buffer crosses page boundary\n"));
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	e1 2c       	mov	r14, r1
    1a94:	f1 2c       	mov	r15, r1
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    1a96:	8e 2d       	mov	r24, r14
    1a98:	df 91       	pop	r29
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashReadFromPage: buffer crosses page boundary\n"));
	return ret;
}
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	df 90       	pop	r13
    1aa6:	cf 90       	pop	r12
    1aa8:	bf 90       	pop	r11
    1aaa:	af 90       	pop	r10
    1aac:	08 95       	ret

00001aae <spi_FlashRead>:
    1aae:	8f 92       	push	r8
    1ab0:	9f 92       	push	r9
*  Crosses page boundary if necessary
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    1ab2:	af 92       	push	r10
    1ab4:	bf 92       	push	r11
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	7a 01       	movw	r14, r20
    1ac4:	12 2f       	mov	r17, r18
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    1ac6:	20 e8       	ldi	r18, 0x80	; 128
    1ac8:	38 e0       	ldi	r19, 0x08	; 8
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__udivmodsi4>
    1ad2:	49 01       	movw	r8, r18
    1ad4:	5a 01       	movw	r10, r20
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    1ad6:	86 2f       	mov	r24, r22
    1ad8:	97 2f       	mov	r25, r23
    1ada:	46 2f       	mov	r20, r22
    1adc:	57 2f       	mov	r21, r23
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    1ade:	81 0f       	add	r24, r17
    1ae0:	91 1d       	adc	r25, r1
    1ae2:	81 38       	cpi	r24, 0x81	; 129
    1ae4:	98 40       	sbci	r25, 0x08	; 8
    1ae6:	28 f0       	brcs	.+10     	; 0x1af2 <spi_FlashRead+0x44>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    1ae8:	c1 2f       	mov	r28, r17
    1aea:	c6 0f       	add	r28, r22
    1aec:	c0 58       	subi	r28, 0x80	; 128
		crossesPage = true;
    1aee:	d1 e0       	ldi	r29, 0x01	; 1
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <spi_FlashRead+0x48>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    1af2:	c1 2f       	mov	r28, r17
{
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    1af4:	d0 e0       	ldi	r29, 0x00	; 0
	} 
	else
	{
		firstPageNumBytes = numBytes;
	}
    if (spi_FlashReadFromPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    1af6:	0c 2f       	mov	r16, r28
    1af8:	97 01       	movw	r18, r14
    1afa:	c5 01       	movw	r24, r10
    1afc:	b4 01       	movw	r22, r8
    1afe:	6c df       	rcall	.-296    	; 0x19d8 <spi_FlashReadFromPage>
    1b00:	c8 13       	cpse	r28, r24
    1b02:	23 c0       	rjmp	.+70     	; 0x1b4a <spi_FlashRead+0x9c>
	{
		if (crossesPage)
    1b04:	dd 23       	and	r29, r29
    1b06:	51 f1       	breq	.+84     	; 0x1b5c <spi_FlashRead+0xae>
		{
			if (spi_FlashReadFromPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    1b08:	01 2f       	mov	r16, r17
    1b0a:	0c 1b       	sub	r16, r28
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
    1b0e:	97 01       	movw	r18, r14
    1b10:	2c 0f       	add	r18, r28
    1b12:	3d 1f       	adc	r19, r29
    1b14:	c5 01       	movw	r24, r10
    1b16:	b4 01       	movw	r22, r8
    1b18:	6f 5f       	subi	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	59 df       	rcall	.-334    	; 0x19d8 <spi_FlashReadFromPage>
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	21 2f       	mov	r18, r17
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	2c 1b       	sub	r18, r28
    1b2e:	3d 0b       	sbc	r19, r29
    1b30:	82 17       	cp	r24, r18
    1b32:	93 07       	cpc	r25, r19
    1b34:	99 f0       	breq	.+38     	; 0x1b5c <spi_FlashRead+0xae>
			{
				// success
				ret = numBytes;
			}
			else
				printf_P(PSTR("spi_FlashRead: 2nd page read failed\n"));
    1b36:	84 e2       	ldi	r24, 0x24	; 36
    1b38:	94 e0       	ldi	r25, 0x04	; 4
    1b3a:	9f 93       	push	r25
    1b3c:	8f 93       	push	r24
    1b3e:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    1b46:	10 e0       	ldi	r17, 0x00	; 0
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <spi_FlashRead+0xae>
			// success
			ret = numBytes;
		}
	}
	else
		printf_P(PSTR("spi_FlashRead: 1st page read failed\n"));
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
		printf_P(PSTR("spi_FlashRead: 1st page read failed\n"));

	return ret;
}
    1b5c:	81 2f       	mov	r24, r17
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	9f 90       	pop	r9
    1b70:	8f 90       	pop	r8
    1b72:	08 95       	ret

00001b74 <spi_FlashEraseBlock>:
/***********************************
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	6b 01       	movw	r12, r22
    1b7e:	7c 01       	movw	r14, r24
	uint16_t ret = 0;
	union fourBytes blockAddress;
	
	blockAddress.word = baddress;
	
	if (baddress <  FLASH_NUM_BLOCKS)
    1b80:	c1 14       	cp	r12, r1
    1b82:	88 e0       	ldi	r24, 0x08	; 8
    1b84:	d8 06       	cpc	r13, r24
    1b86:	e1 04       	cpc	r14, r1
    1b88:	f1 04       	cpc	r15, r1
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <spi_FlashEraseBlock+0x1a>
    1b8c:	3e c0       	rjmp	.+124    	; 0x1c0a <spi_FlashEraseBlock+0x96>
	{
		if (spi_FlashWaitUntilReady())
    1b8e:	83 dd       	rcall	.-1274   	; 0x1696 <spi_FlashWaitUntilReady>
    1b90:	88 23       	and	r24, r24
    1b92:	89 f1       	breq	.+98     	; 0x1bf6 <spi_FlashEraseBlock+0x82>
		{
			if (spi_FlashEnableWrite())
    1b94:	e2 dd       	rcall	.-1084   	; 0x175a <spi_FlashEnableWrite>
    1b96:	88 23       	and	r24, r24
    1b98:	21 f1       	breq	.+72     	; 0x1be2 <spi_FlashEraseBlock+0x6e>
			{
				selectFlash();
    1b9a:	14 dd       	rcall	.-1496   	; 0x15c4 <selectFlash>
				spiTransferByte(FLASH_BLOCK_ERASE);
    1b9c:	88 ed       	ldi	r24, 0xD8	; 216
    1b9e:	03 d1       	rcall	.+518    	; 0x1da6 <spiTransferByte>
				spiTransferByte(blockAddress.byte[2]);
    1ba0:	8e 2d       	mov	r24, r14
    1ba2:	01 d1       	rcall	.+514    	; 0x1da6 <spiTransferByte>
				spiTransferByte(blockAddress.byte[1]);
    1ba4:	8d 2d       	mov	r24, r13
    1ba6:	ff d0       	rcall	.+510    	; 0x1da6 <spiTransferByte>
				spiTransferByte(blockAddress.byte[0]);
    1ba8:	8c 2d       	mov	r24, r12
    1baa:	fd d0       	rcall	.+506    	; 0x1da6 <spiTransferByte>
				deSelectFlash();
    1bac:	11 dd       	rcall	.-1502   	; 0x15d0 <deSelectFlash>
    1bae:	73 dd       	rcall	.-1306   	; 0x1696 <spi_FlashWaitUntilReady>
				if (spi_FlashWaitUntilReady())
    1bb0:	88 23       	and	r24, r24
    1bb2:	69 f0       	breq	.+26     	; 0x1bce <spi_FlashEraseBlock+0x5a>
    1bb4:	ea dd       	rcall	.-1068   	; 0x178a <spi_FlashDisableWrite>
    1bb6:	81 11       	cpse	r24, r1
				{
					if (spi_FlashDisableWrite())
    1bb8:	32 c0       	rjmp	.+100    	; 0x1c1e <spi_FlashEraseBlock+0xaa>
    1bba:	84 ed       	ldi	r24, 0xD4	; 212
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	9f 93       	push	r25
						ret = 1;
					else
						printf_P(PSTR("spi_FlashEraseBlock: Write diasble failed\n"));
    1bc0:	8f 93       	push	r24
    1bc2:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	29 c0       	rjmp	.+82     	; 0x1c20 <spi_FlashEraseBlock+0xac>
    1bce:	8a e9       	ldi	r24, 0x9A	; 154
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	9f 93       	push	r25
						ret = 1;
					else
						printf_P(PSTR("spi_FlashEraseBlock: Write diasble failed\n"));
				}
				else
					printf_P(PSTR("spi_FlashEraseBlock: Flash never ready after block erase\n"));
    1bd4:	8f 93       	push	r24
    1bd6:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	1f c0       	rjmp	.+62     	; 0x1c20 <spi_FlashEraseBlock+0xac>
    1be2:	8b e6       	ldi	r24, 0x6B	; 107
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	9f 93       	push	r25
				}
				else
					printf_P(PSTR("spi_FlashEraseBlock: Flash never ready after block erase\n"));
			}
			else
				printf_P(PSTR("spi_FlashEraseBlock: Flash won't enable write\n"));
    1be8:	8f 93       	push	r24
    1bea:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	15 c0       	rjmp	.+42     	; 0x1c20 <spi_FlashEraseBlock+0xac>
    1bf6:	83 e4       	ldi	r24, 0x43	; 67
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1bf8:	93 e0       	ldi	r25, 0x03	; 3
    1bfa:	9f 93       	push	r25
			else
				printf_P(PSTR("spi_FlashEraseBlock: Flash won't enable write\n"));

		}
		else
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
    1bfc:	8f 93       	push	r24
    1bfe:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	0b c0       	rjmp	.+22     	; 0x1c20 <spi_FlashEraseBlock+0xac>
    1c0a:	8c e0       	ldi	r24, 0x0C	; 12
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	9f 93       	push	r25
		}
		else
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
    1c10:	8f 93       	push	r24
    1c12:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <spi_FlashEraseBlock+0xac>
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
				spiTransferByte(blockAddress.byte[0]);
				deSelectFlash();
				if (spi_FlashWaitUntilReady())
				{
					if (spi_FlashDisableWrite())
						ret = 1;
    1c24:	df 90       	pop	r13
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
	return ret;
}
    1c26:	cf 90       	pop	r12
    1c28:	08 95       	ret

00001c2a <spi_FlashReset>:
    1c2a:	cf 93       	push	r28
    1c2c:	cb dc       	rcall	.-1642   	; 0x15c4 <selectFlash>
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
{
	uint8_t status;
		
	selectFlash();
	spiTransferByte(FLASH_RESET);
	deSelectFlash();
    1c30:	ba d0       	rcall	.+372    	; 0x1da6 <spiTransferByte>
    1c32:	ce dc       	rcall	.-1636   	; 0x15d0 <deSelectFlash>
	status = spi_FlashGetStatusRegister();
    1c34:	1a dd       	rcall	.-1484   	; 0x166a <spi_FlashGetStatusRegister>
    1c36:	c8 2f       	mov	r28, r24
    1c38:	1f 92       	push	r1
	printf("spi_Reset: status is 0x%02x\n", status);
    1c3a:	8f 93       	push	r24
    1c3c:	8d eb       	ldi	r24, 0xBD	; 189
    1c3e:	95 e0       	ldi	r25, 0x05	; 5
    1c40:	9f 93       	push	r25
    1c42:	8f 93       	push	r24
    1c44:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1c48:	0f 90       	pop	r0
	
	return status; 
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	8c 2f       	mov	r24, r28
}
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <spi_FlashEraseAllBlocks>:
    1c56:	cf 92       	push	r12
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
	return ret;
}

uint8_t spi_FlashEraseAllBlocks()
{
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
	uint8_t ret = true;
	uint16_t blockNum = 0;
	uint32_t blockAddr;
	uint16_t numBlocks = FLASH_NUM_BLOCKS;
	
	spi_FlashReset();
    1c64:	e2 df       	rcall	.-60     	; 0x1c2a <spi_FlashReset>
	spi_FlashUnlockAllBlocks();
    1c66:	67 dd       	rcall	.-1330   	; 0x1736 <spi_FlashUnlockAllBlocks>
    1c68:	c0 e0       	ldi	r28, 0x00	; 0
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1c6a:	d0 e0       	ldi	r29, 0x00	; 0
    1c6c:	11 e0       	ldi	r17, 0x01	; 1
	return ret;
}

uint8_t spi_FlashEraseAllBlocks()
{
	uint8_t ret = true;
    1c6e:	22 c0       	rjmp	.+68     	; 0x1cb4 <spi_FlashEraseAllBlocks+0x5e>
	uint16_t numBlocks = FLASH_NUM_BLOCKS;
	
	spi_FlashReset();
	spi_FlashUnlockAllBlocks();
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1c70:	6e 01       	movw	r12, r28
	{
		blockAddr = blockNum;
    1c72:	e1 2c       	mov	r14, r1
    1c74:	f1 2c       	mov	r15, r1
    1c76:	df 93       	push	r29
		printf_P(PSTR("Erasing block %d\n"),blockNum);
    1c78:	cf 93       	push	r28
    1c7a:	8a ef       	ldi	r24, 0xFA	; 250
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	9f 93       	push	r25
    1c80:	8f 93       	push	r24
    1c82:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1c86:	c7 01       	movw	r24, r14
		if (!spi_FlashEraseBlock(blockAddr))
    1c88:	b6 01       	movw	r22, r12
    1c8a:	74 df       	rcall	.-280    	; 0x1b74 <spi_FlashEraseBlock>
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	81 11       	cpse	r24, r1
    1c96:	0d c0       	rjmp	.+26     	; 0x1cb2 <spi_FlashEraseAllBlocks+0x5c>
    1c98:	df 93       	push	r29
		{
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
    1c9a:	cf 93       	push	r28
    1c9c:	86 ec       	ldi	r24, 0xC6	; 198
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    1ca0:	9f 93       	push	r25
    1ca2:	8f 93       	push	r24
    1ca4:	0e 94 24 1c 	call	0x3848	; 0x3848 <printf_P>
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
			ret = false;
    1cb2:	21 96       	adiw	r28, 0x01	; 1
	uint16_t numBlocks = FLASH_NUM_BLOCKS;
	
	spi_FlashReset();
	spi_FlashUnlockAllBlocks();
		
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1cb4:	c1 15       	cp	r28, r1
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	d8 07       	cpc	r29, r24
    1cba:	d0 f2       	brcs	.-76     	; 0x1c70 <spi_FlashEraseAllBlocks+0x1a>
    1cbc:	81 2f       	mov	r24, r17
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
			ret = false;
		}
	}
	return ret;
}
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	ff 90       	pop	r15
    1cc6:	ef 90       	pop	r14
    1cc8:	df 90       	pop	r13
    1cca:	cf 90       	pop	r12
    1ccc:	08 95       	ret

00001cce <RTC_config>:
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	1f 92       	push	r1
    1cd6:	1f 92       	push	r1
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	85 e0       	ldi	r24, 0x05	; 5
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	8a ed       	ldi	r24, 0xDA	; 218
    1ce2:	95 e0       	ldi	r25, 0x05	; 5
    1ce4:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    1cea:	29 c0       	rjmp	.+82     	; 0x1d3e <RTC_config+0x70>
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	be 01       	movw	r22, r28
    1cf0:	6e 5f       	subi	r22, 0xFE	; 254
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	8f e0       	ldi	r24, 0x0F	; 15
    1cf6:	3f d2       	rcall	.+1150   	; 0x2176 <spi_RTC_Read>
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	85 30       	cpi	r24, 0x05	; 5
    1cfc:	11 f1       	breq	.+68     	; 0x1d42 <RTC_config+0x74>
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	be 01       	movw	r22, r28
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	8f e0       	ldi	r24, 0x0F	; 15
    1d08:	20 d2       	rcall	.+1088   	; 0x214a <spi_RTC_Write>
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	1f 92       	push	r1
    1d0e:	8f 93       	push	r24
    1d10:	1f 92       	push	r1
    1d12:	1f 93       	push	r17
    1d14:	8b ee       	ldi	r24, 0xEB	; 235
    1d16:	95 e0       	ldi	r25, 0x05	; 5
    1d18:	9f 93       	push	r25
    1d1a:	8f 93       	push	r24
    1d1c:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	1f 92       	push	r1
    1d24:	8f 93       	push	r24
    1d26:	8c ef       	ldi	r24, 0xFC	; 252
    1d28:	95 e0       	ldi	r25, 0x05	; 5
    1d2a:	9f 93       	push	r25
    1d2c:	8f 93       	push	r24
    1d2e:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1d32:	1f 5f       	subi	r17, 0xFF	; 255
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	14 31       	cpi	r17, 0x14	; 20
    1d40:	a8 f2       	brcs	.-86     	; 0x1cec <RTC_config+0x1e>
    1d42:	14 31       	cpi	r17, 0x14	; 20
    1d44:	20 f0       	brcs	.+8      	; 0x1d4e <RTC_config+0x80>
    1d46:	8b e0       	ldi	r24, 0x0B	; 11
    1d48:	96 e0       	ldi	r25, 0x06	; 6
    1d4a:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	08 95       	ret

00001d5a <RTC_readCLKF>:
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	1f 92       	push	r1
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	be 01       	movw	r22, r28
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f e0       	ldi	r24, 0x0F	; 15
    1d6e:	03 d2       	rcall	.+1030   	; 0x2176 <spi_RTC_Read>
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	1f 92       	push	r1
    1d74:	8f 93       	push	r24
    1d76:	82 e3       	ldi	r24, 0x32	; 50
    1d78:	96 e0       	ldi	r25, 0x06	; 6
    1d7a:	9f 93       	push	r25
    1d7c:	8f 93       	push	r24
    1d7e:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <init_spi>:
    1d92:	1d bc       	out	0x2d, r1	; 45
    1d94:	81 e5       	ldi	r24, 0x51	; 81
    1d96:	8c bd       	out	0x2c, r24	; 44
    1d98:	1b dc       	rcall	.-1994   	; 0x15d0 <deSelectFlash>
    1d9a:	ec db       	rcall	.-2088   	; 0x1574 <deSelectFRAM>
    1d9c:	f5 db       	rcall	.-2070   	; 0x1588 <deSelectOpticsDAC>
    1d9e:	1e dc       	rcall	.-1988   	; 0x15dc <deSelectRTC>
    1da0:	0b dc       	rcall	.-2026   	; 0x15b8 <deSelectBuckCtrlDAC>
    1da2:	fe cb       	rjmp	.-2052   	; 0x15a0 <deSelectADC2518>
    1da4:	08 95       	ret

00001da6 <spiTransferByte>:
    1da6:	8e bd       	out	0x2e, r24	; 46
    1da8:	0d b4       	in	r0, 0x2d	; 45
    1daa:	07 fe       	sbrs	r0, 7
    1dac:	fd cf       	rjmp	.-6      	; 0x1da8 <spiTransferByte+0x2>
    1dae:	8e b5       	in	r24, 0x2e	; 46
    1db0:	08 95       	ret

00001db2 <spiSendBytes>:
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <spiSendBytes+0x1c>
    1dba:	cf 01       	movw	r24, r30
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	40 81       	ld	r20, Z
    1dc0:	4e bd       	out	0x2e, r20	; 46
    1dc2:	0d b4       	in	r0, 0x2d	; 45
    1dc4:	07 fe       	sbrs	r0, 7
    1dc6:	fd cf       	rjmp	.-6      	; 0x1dc2 <spiSendBytes+0x10>
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	fc 01       	movw	r30, r24
    1dce:	26 17       	cp	r18, r22
    1dd0:	37 07       	cpc	r19, r23
    1dd2:	98 f3       	brcs	.-26     	; 0x1dba <spiSendBytes+0x8>
    1dd4:	08 95       	ret

00001dd6 <spiGetBytes>:
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	09 c0       	rjmp	.+18     	; 0x1df0 <spiGetBytes+0x1a>
    1dde:	1e bc       	out	0x2e, r1	; 46
    1de0:	0d b4       	in	r0, 0x2d	; 45
    1de2:	07 fe       	sbrs	r0, 7
    1de4:	fd cf       	rjmp	.-6      	; 0x1de0 <spiGetBytes+0xa>
    1de6:	8e b5       	in	r24, 0x2e	; 46
    1de8:	80 83       	st	Z, r24
    1dea:	2f 5f       	subi	r18, 0xFF	; 255
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	31 96       	adiw	r30, 0x01	; 1
    1df0:	26 17       	cp	r18, r22
    1df2:	37 07       	cpc	r19, r23
    1df4:	a0 f3       	brcs	.-24     	; 0x1dde <spiGetBytes+0x8>
    1df6:	08 95       	ret

00001df8 <spiSend2ByteBigEndian>:
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	1f 92       	push	r1
    1dfe:	1f 92       	push	r1
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	8e bd       	out	0x2e, r24	; 46
    1e0c:	0d b4       	in	r0, 0x2d	; 45
    1e0e:	07 fe       	sbrs	r0, 7
    1e10:	fd cf       	rjmp	.-6      	; 0x1e0c <spiSend2ByteBigEndian+0x14>
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	8e bd       	out	0x2e, r24	; 46
    1e16:	0d b4       	in	r0, 0x2d	; 45
    1e18:	07 fe       	sbrs	r0, 7
    1e1a:	fd cf       	rjmp	.-6      	; 0x1e16 <spiSend2ByteBigEndian+0x1e>
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <spi_buckCtrlDac>:
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	eb 01       	movw	r28, r22
    1e32:	18 2f       	mov	r17, r24
    1e34:	17 70       	andi	r17, 0x07	; 7
    1e36:	90 e1       	ldi	r25, 0x10	; 16
    1e38:	19 9f       	mul	r17, r25
    1e3a:	90 01       	movw	r18, r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	e7 2e       	mov	r14, r23
    1e40:	ff 24       	eor	r15, r15
    1e42:	ab 01       	movw	r20, r22
    1e44:	55 27       	eor	r21, r21
    1e46:	5f 93       	push	r21
    1e48:	4f 93       	push	r20
    1e4a:	2e 29       	or	r18, r14
    1e4c:	3f 29       	or	r19, r15
    1e4e:	3f 93       	push	r19
    1e50:	2f 93       	push	r18
    1e52:	df 93       	push	r29
    1e54:	6f 93       	push	r22
    1e56:	1f 92       	push	r1
    1e58:	8f 93       	push	r24
    1e5a:	8a e4       	ldi	r24, 0x4A	; 74
    1e5c:	96 e0       	ldi	r25, 0x06	; 6
    1e5e:	9f 93       	push	r25
    1e60:	8f 93       	push	r24
    1e62:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1e66:	a2 db       	rcall	.-2236   	; 0x15ac <selectBuckCtrlDAC>
    1e68:	81 2f       	mov	r24, r17
    1e6a:	82 95       	swap	r24
    1e6c:	80 7f       	andi	r24, 0xF0	; 240
    1e6e:	8e 29       	or	r24, r14
    1e70:	9a df       	rcall	.-204    	; 0x1da6 <spiTransferByte>
    1e72:	8c 2f       	mov	r24, r28
    1e74:	98 df       	rcall	.-208    	; 0x1da6 <spiTransferByte>
    1e76:	a0 db       	rcall	.-2240   	; 0x15b8 <deSelectBuckCtrlDAC>
    1e78:	8d b7       	in	r24, 0x3d	; 61
    1e7a:	9e b7       	in	r25, 0x3e	; 62
    1e7c:	0a 96       	adiw	r24, 0x0a	; 10
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	9e bf       	out	0x3e, r25	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	8d bf       	out	0x3d, r24	; 61
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	08 95       	ret

00001e94 <spi_OpticsDAC>:
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	eb 01       	movw	r28, r22
    1ea0:	18 2f       	mov	r17, r24
    1ea2:	17 70       	andi	r17, 0x07	; 7
    1ea4:	90 e1       	ldi	r25, 0x10	; 16
    1ea6:	19 9f       	mul	r17, r25
    1ea8:	90 01       	movw	r18, r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	e7 2e       	mov	r14, r23
    1eae:	ff 24       	eor	r15, r15
    1eb0:	ab 01       	movw	r20, r22
    1eb2:	55 27       	eor	r21, r21
    1eb4:	5f 93       	push	r21
    1eb6:	4f 93       	push	r20
    1eb8:	2e 29       	or	r18, r14
    1eba:	3f 29       	or	r19, r15
    1ebc:	3f 93       	push	r19
    1ebe:	2f 93       	push	r18
    1ec0:	df 93       	push	r29
    1ec2:	6f 93       	push	r22
    1ec4:	1f 92       	push	r1
    1ec6:	8f 93       	push	r24
    1ec8:	8b e7       	ldi	r24, 0x7B	; 123
    1eca:	96 e0       	ldi	r25, 0x06	; 6
    1ecc:	9f 93       	push	r25
    1ece:	8f 93       	push	r24
    1ed0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1ed4:	53 db       	rcall	.-2394   	; 0x157c <selectOpticsDAC>
    1ed6:	81 2f       	mov	r24, r17
    1ed8:	82 95       	swap	r24
    1eda:	80 7f       	andi	r24, 0xF0	; 240
    1edc:	8e 29       	or	r24, r14
    1ede:	63 df       	rcall	.-314    	; 0x1da6 <spiTransferByte>
    1ee0:	8c 2f       	mov	r24, r28
    1ee2:	61 df       	rcall	.-318    	; 0x1da6 <spiTransferByte>
    1ee4:	51 db       	rcall	.-2398   	; 0x1588 <deSelectOpticsDAC>
    1ee6:	8d b7       	in	r24, 0x3d	; 61
    1ee8:	9e b7       	in	r25, 0x3e	; 62
    1eea:	0a 96       	adiw	r24, 0x0a	; 10
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	9e bf       	out	0x3e, r25	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	8d bf       	out	0x3d, r24	; 61
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret

00001f02 <spi_OpticsDAC_BroadCast>:
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	c8 2f       	mov	r28, r24
    1f08:	d9 2f       	mov	r29, r25
    1f0a:	8c ea       	ldi	r24, 0xAC	; 172
    1f0c:	96 e0       	ldi	r25, 0x06	; 6
    1f0e:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    1f12:	34 db       	rcall	.-2456   	; 0x157c <selectOpticsDAC>
    1f14:	8d 2f       	mov	r24, r29
    1f16:	80 6c       	ori	r24, 0xC0	; 192
    1f18:	46 df       	rcall	.-372    	; 0x1da6 <spiTransferByte>
    1f1a:	8c 2f       	mov	r24, r28
    1f1c:	44 df       	rcall	.-376    	; 0x1da6 <spiTransferByte>
    1f1e:	34 db       	rcall	.-2456   	; 0x1588 <deSelectOpticsDAC>
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <spi_OpticsBuckCtl_BroadCast>:
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	c8 2f       	mov	r28, r24
    1f2c:	d9 2f       	mov	r29, r25
    1f2e:	83 ec       	ldi	r24, 0xC3	; 195
    1f30:	96 e0       	ldi	r25, 0x06	; 6
    1f32:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    1f36:	3a db       	rcall	.-2444   	; 0x15ac <selectBuckCtrlDAC>
    1f38:	8d 2f       	mov	r24, r29
    1f3a:	80 6c       	ori	r24, 0xC0	; 192
    1f3c:	34 df       	rcall	.-408    	; 0x1da6 <spiTransferByte>
    1f3e:	8c 2f       	mov	r24, r28
    1f40:	32 df       	rcall	.-412    	; 0x1da6 <spiTransferByte>
    1f42:	3a db       	rcall	.-2444   	; 0x15b8 <deSelectBuckCtrlDAC>
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <spi_FRAM_writeEnable>:
    1f4a:	10 db       	rcall	.-2528   	; 0x156c <selectFRAM>
    1f4c:	86 e0       	ldi	r24, 0x06	; 6
    1f4e:	2b df       	rcall	.-426    	; 0x1da6 <spiTransferByte>
    1f50:	11 cb       	rjmp	.-2526   	; 0x1574 <deSelectFRAM>
    1f52:	08 95       	ret

00001f54 <FRAM_ReadStatusRegister>:
    1f54:	cf 93       	push	r28
    1f56:	0a db       	rcall	.-2540   	; 0x156c <selectFRAM>
    1f58:	85 e0       	ldi	r24, 0x05	; 5
    1f5a:	25 df       	rcall	.-438    	; 0x1da6 <spiTransferByte>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	23 df       	rcall	.-442    	; 0x1da6 <spiTransferByte>
    1f60:	c8 2f       	mov	r28, r24
    1f62:	08 db       	rcall	.-2544   	; 0x1574 <deSelectFRAM>
    1f64:	1f 92       	push	r1
    1f66:	cf 93       	push	r28
    1f68:	8c e3       	ldi	r24, 0x3C	; 60
    1f6a:	98 e0       	ldi	r25, 0x08	; 8
    1f6c:	9f 93       	push	r25
    1f6e:	8f 93       	push	r24
    1f70:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	8c 2f       	mov	r24, r28
    1f7e:	cf 91       	pop	r28
    1f80:	08 95       	ret

00001f82 <spi_FRAM_write>:
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	8c 01       	movw	r16, r24
    1f90:	7b 01       	movw	r14, r22
    1f92:	ea 01       	movw	r28, r20
    1f94:	84 0f       	add	r24, r20
    1f96:	95 1f       	adc	r25, r21
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	90 42       	sbci	r25, 0x20	; 32
    1f9c:	20 f0       	brcs	.+8      	; 0x1fa6 <spi_FRAM_write+0x24>
    1f9e:	89 ed       	ldi	r24, 0xD9	; 217
    1fa0:	96 e0       	ldi	r25, 0x06	; 6
    1fa2:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    1fa6:	d1 df       	rcall	.-94     	; 0x1f4a <spi_FRAM_writeEnable>
    1fa8:	e1 da       	rcall	.-2622   	; 0x156c <selectFRAM>
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	fc de       	rcall	.-520    	; 0x1da6 <spiTransferByte>
    1fae:	c8 01       	movw	r24, r16
    1fb0:	23 df       	rcall	.-442    	; 0x1df8 <spiSend2ByteBigEndian>
    1fb2:	be 01       	movw	r22, r28
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	fd de       	rcall	.-518    	; 0x1db2 <spiSendBytes>
    1fb8:	dd da       	rcall	.-2630   	; 0x1574 <deSelectFRAM>
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	08 95       	ret

00001fc8 <spi_FRAM_read>:
    1fc8:	cf 92       	push	r12
    1fca:	df 92       	push	r13
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	c8 2f       	mov	r28, r24
    1fda:	d9 2f       	mov	r29, r25
    1fdc:	8b 01       	movw	r16, r22
    1fde:	6a 01       	movw	r12, r20
    1fe0:	c5 da       	rcall	.-2678   	; 0x156c <selectFRAM>
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	e0 de       	rcall	.-576    	; 0x1da6 <spiTransferByte>
    1fe6:	8d 2f       	mov	r24, r29
    1fe8:	de de       	rcall	.-580    	; 0x1da6 <spiTransferByte>
    1fea:	8c 2f       	mov	r24, r28
    1fec:	dc de       	rcall	.-584    	; 0x1da6 <spiTransferByte>
    1fee:	c0 e0       	ldi	r28, 0x00	; 0
    1ff0:	d0 e0       	ldi	r29, 0x00	; 0
    1ff2:	0a c0       	rjmp	.+20     	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    1ff4:	78 01       	movw	r14, r16
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	e8 1a       	sub	r14, r24
    1ffa:	f8 0a       	sbc	r15, r24
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	d3 de       	rcall	.-602    	; 0x1da6 <spiTransferByte>
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	21 96       	adiw	r28, 0x01	; 1
    2006:	87 01       	movw	r16, r14
    2008:	cc 15       	cp	r28, r12
    200a:	dd 05       	cpc	r29, r13
    200c:	98 f3       	brcs	.-26     	; 0x1ff4 <spi_FRAM_read+0x2c>
    200e:	b2 da       	rcall	.-2716   	; 0x1574 <deSelectFRAM>
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	08 95       	ret

00002022 <read_FRAM_DeviceID>:
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <read_FRAM_DeviceID+0x6>
    2028:	1f 92       	push	r1
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	9e da       	rcall	.-2756   	; 0x156c <selectFRAM>
    2030:	8f ea       	ldi	r24, 0xAF	; 175
    2032:	b9 de       	rcall	.-654    	; 0x1da6 <spiTransferByte>
    2034:	64 e0       	ldi	r22, 0x04	; 4
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	ce 01       	movw	r24, r28
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	cc de       	rcall	.-616    	; 0x1dd6 <spiGetBytes>
    203e:	9a da       	rcall	.-2764   	; 0x1574 <deSelectFRAM>
    2040:	3c 81       	ldd	r19, Y+4	; 0x04
    2042:	2b 81       	ldd	r18, Y+3	; 0x03
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	1f 92       	push	r1
    204a:	3f 93       	push	r19
    204c:	1f 92       	push	r1
    204e:	2f 93       	push	r18
    2050:	1f 92       	push	r1
    2052:	9f 93       	push	r25
    2054:	1f 92       	push	r1
    2056:	8f 93       	push	r24
    2058:	8c ef       	ldi	r24, 0xFC	; 252
    205a:	96 e0       	ldi	r25, 0x06	; 6
    205c:	9f 93       	push	r25
    205e:	8f 93       	push	r24
    2060:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	08 95       	ret

0000207c <wrFRAM>:
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	28 97       	sbiw	r28, 0x08	; 8
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	5c df       	rcall	.-328    	; 0x1f4a <spi_FRAM_writeEnable>
    2092:	8f e1       	ldi	r24, 0x1F	; 31
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	81 e4       	ldi	r24, 0x41	; 65
    2098:	8e 83       	std	Y+6, r24	; 0x06
    209a:	81 e8       	ldi	r24, 0x81	; 129
    209c:	8f 83       	std	Y+7, r24	; 0x07
    209e:	8a ef       	ldi	r24, 0xFA	; 250
    20a0:	88 87       	std	Y+8, r24	; 0x08
    20a2:	44 e0       	ldi	r20, 0x04	; 4
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	be 01       	movw	r22, r28
    20a8:	6b 5f       	subi	r22, 0xFB	; 251
    20aa:	7f 4f       	sbci	r23, 0xFF	; 255
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	94 e0       	ldi	r25, 0x04	; 4
    20b0:	68 df       	rcall	.-304    	; 0x1f82 <spi_FRAM_write>
    20b2:	44 e0       	ldi	r20, 0x04	; 4
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	be 01       	movw	r22, r28
    20b8:	6f 5f       	subi	r22, 0xFF	; 255
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	94 e0       	ldi	r25, 0x04	; 4
    20c0:	83 df       	rcall	.-250    	; 0x1fc8 <spi_FRAM_read>
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	1f 92       	push	r1
    20cc:	3f 93       	push	r19
    20ce:	1f 92       	push	r1
    20d0:	2f 93       	push	r18
    20d2:	1f 92       	push	r1
    20d4:	9f 93       	push	r25
    20d6:	1f 92       	push	r1
    20d8:	8f 93       	push	r24
    20da:	8f e0       	ldi	r24, 0x0F	; 15
    20dc:	97 e0       	ldi	r25, 0x07	; 7
    20de:	9f 93       	push	r25
    20e0:	8f 93       	push	r24
    20e2:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	28 96       	adiw	r28, 0x08	; 8
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <framSaveSerialNumber>:
    2102:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <serialNumber+0x1>
    2106:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <serialNumber>
    210a:	42 e0       	ldi	r20, 0x02	; 2
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	68 e1       	ldi	r22, 0x18	; 24
    2110:	79 e0       	ldi	r23, 0x09	; 9
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	35 cf       	rjmp	.-406    	; 0x1f82 <spi_FRAM_write>
    2118:	08 95       	ret

0000211a <framReadSerialNumber>:
    211a:	42 e0       	ldi	r20, 0x02	; 2
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	68 e1       	ldi	r22, 0x18	; 24
    2120:	79 e0       	ldi	r23, 0x09	; 9
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	50 df       	rcall	.-352    	; 0x1fc8 <spi_FRAM_read>
    2128:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <serialNumber+0x1>
    212c:	8f 93       	push	r24
    212e:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <serialNumber>
    2132:	8f 93       	push	r24
    2134:	8c e1       	ldi	r24, 0x1C	; 28
    2136:	97 e0       	ldi	r25, 0x07	; 7
    2138:	9f 93       	push	r25
    213a:	8f 93       	push	r24
    213c:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	08 95       	ret

0000214a <spi_RTC_Write>:
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	d8 2f       	mov	r29, r24
    2154:	8b 01       	movw	r16, r22
    2156:	c4 2f       	mov	r28, r20
    2158:	47 da       	rcall	.-2930   	; 0x15e8 <selectRTC>
    215a:	8d 2f       	mov	r24, r29
    215c:	80 62       	ori	r24, 0x20	; 32
    215e:	23 de       	rcall	.-954    	; 0x1da6 <spiTransferByte>
    2160:	6c 2f       	mov	r22, r28
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	c8 01       	movw	r24, r16
    2166:	25 de       	rcall	.-950    	; 0x1db2 <spiSendBytes>
    2168:	39 da       	rcall	.-2958   	; 0x15dc <deSelectRTC>
    216a:	8c 2f       	mov	r24, r28
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <spi_RTC_Read>:
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	d8 2f       	mov	r29, r24
    2180:	8b 01       	movw	r16, r22
    2182:	c4 2f       	mov	r28, r20
    2184:	31 da       	rcall	.-2974   	; 0x15e8 <selectRTC>
    2186:	8d 2f       	mov	r24, r29
    2188:	80 6a       	ori	r24, 0xA0	; 160
    218a:	0d de       	rcall	.-998    	; 0x1da6 <spiTransferByte>
    218c:	6c 2f       	mov	r22, r28
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	c8 01       	movw	r24, r16
    2192:	21 de       	rcall	.-958    	; 0x1dd6 <spiGetBytes>
    2194:	23 da       	rcall	.-3002   	; 0x15dc <deSelectRTC>
    2196:	8c 2f       	mov	r24, r28
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <getMuxConfiguration>:
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	1f 92       	push	r1
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	be 01       	movw	r22, r28
    21b2:	6f 5f       	subi	r22, 0xFF	; 255
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	80 e7       	ldi	r24, 0x70	; 112
    21b8:	80 d1       	rcall	.+768    	; 0x24ba <twi_read_bytes>
    21ba:	89 2b       	or	r24, r25
    21bc:	21 f0       	breq	.+8      	; 0x21c6 <getMuxConfiguration+0x24>
    21be:	83 e2       	ldi	r24, 0x23	; 35
    21c0:	97 e0       	ldi	r25, 0x07	; 7
    21c2:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	0f 90       	pop	r0
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <setI2Cmux>:
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	1f 92       	push	r1
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <setI2Cmux+0x12>
    21e0:	4f c0       	rjmp	.+158    	; 0x2280 <__stack+0x81>
    21e2:	1f 92       	push	r1
    21e4:	8f 93       	push	r24
    21e6:	8d e3       	ldi	r24, 0x3D	; 61
    21e8:	97 e0       	ldi	r25, 0x07	; 7
    21ea:	9f 93       	push	r25
    21ec:	8f 93       	push	r24
    21ee:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	be 01       	movw	r22, r28
    21f6:	6f 5f       	subi	r22, 0xFF	; 255
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	80 e7       	ldi	r24, 0x70	; 112
    21fc:	e7 d0       	rcall	.+462    	; 0x23cc <twi_write_bytes>
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	89 2b       	or	r24, r25
    2208:	09 f1       	breq	.+66     	; 0x224c <__stack+0x4d>
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	e8 2f       	mov	r30, r24
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	ea 53       	subi	r30, 0x3A	; 58
    2212:	f8 4f       	sbci	r31, 0xF8	; 248
    2214:	90 81       	ld	r25, Z
    2216:	97 30       	cpi	r25, 0x07	; 7
    2218:	58 f0       	brcs	.+22     	; 0x2230 <__stack+0x31>
    221a:	61 d0       	rcall	.+194    	; 0x22de <init_twi>
    221c:	8f e4       	ldi	r24, 0x4F	; 79
    221e:	97 e0       	ldi	r25, 0x07	; 7
    2220:	9f 93       	push	r25
    2222:	8f 93       	push	r24
    2224:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	39 c0       	rjmp	.+114    	; 0x22a2 <__stack+0xa3>
    2230:	1f 92       	push	r1
    2232:	8f 93       	push	r24
    2234:	84 e5       	ldi	r24, 0x54	; 84
    2236:	97 e0       	ldi	r25, 0x07	; 7
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	2b c0       	rjmp	.+86     	; 0x22a2 <__stack+0xa3>
    224c:	aa df       	rcall	.-172    	; 0x21a2 <getMuxConfiguration>
    224e:	99 81       	ldd	r25, Y+1	; 0x01
    2250:	89 17       	cp	r24, r25
    2252:	21 f1       	breq	.+72     	; 0x229c <__stack+0x9d>
    2254:	86 e7       	ldi	r24, 0x76	; 118
    2256:	97 e0       	ldi	r25, 0x07	; 7
    2258:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    225c:	e9 81       	ldd	r30, Y+1	; 0x01
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	ea 53       	subi	r30, 0x3A	; 58
    2262:	f8 4f       	sbci	r31, 0xF8	; 248
    2264:	80 81       	ld	r24, Z
    2266:	87 30       	cpi	r24, 0x07	; 7
    2268:	d8 f0       	brcs	.+54     	; 0x22a0 <__stack+0xa1>
    226a:	39 d0       	rcall	.+114    	; 0x22de <init_twi>
    226c:	8e e9       	ldi	r24, 0x9E	; 158
    226e:	97 e0       	ldi	r25, 0x07	; 7
    2270:	9f 93       	push	r25
    2272:	8f 93       	push	r24
    2274:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	11 c0       	rjmp	.+34     	; 0x22a2 <__stack+0xa3>
    2280:	1f 92       	push	r1
    2282:	8f 93       	push	r24
    2284:	83 ea       	ldi	r24, 0xA3	; 163
    2286:	97 e0       	ldi	r25, 0x07	; 7
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <__stack+0xa3>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	0f 90       	pop	r0
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <setStatus>:
    22aa:	9f 93       	push	r25
    22ac:	8f 93       	push	r24
    22ae:	8a ec       	ldi	r24, 0xCA	; 202
    22b0:	97 e0       	ldi	r25, 0x07	; 7
    22b2:	9f 93       	push	r25
    22b4:	8f 93       	push	r24
    22b6:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	08 95       	ret

000022c4 <showERRORcode>:
    22c4:	1f 92       	push	r1
    22c6:	8f 93       	push	r24
    22c8:	8e ed       	ldi	r24, 0xDE	; 222
    22ca:	97 e0       	ldi	r25, 0x07	; 7
    22cc:	9f 93       	push	r25
    22ce:	8f 93       	push	r24
    22d0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	08 95       	ret

000022de <init_twi>:
    22de:	84 e9       	ldi	r24, 0x94	; 148
    22e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    22e4:	eb e0       	ldi	r30, 0x0B	; 11
    22e6:	f1 e0       	ldi	r31, 0x01	; 1
    22e8:	80 81       	ld	r24, Z
    22ea:	8f 7b       	andi	r24, 0xBF	; 191
    22ec:	80 83       	st	Z, r24
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <init_twi+0x1e>
    22f2:	e3 e0       	ldi	r30, 0x03	; 3
    22f4:	f8 e4       	ldi	r31, 0x48	; 72
    22f6:	31 97       	sbiw	r30, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <init_twi+0x18>
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	84 31       	cpi	r24, 0x14	; 20
    22fe:	c8 f3       	brcs	.-14     	; 0x22f2 <init_twi+0x14>
    2300:	eb e0       	ldi	r30, 0x0B	; 11
    2302:	f1 e0       	ldi	r31, 0x01	; 1
    2304:	80 81       	ld	r24, Z
    2306:	80 64       	ori	r24, 0x40	; 64
    2308:	80 83       	st	Z, r24
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <init_twi+0x3a>
    230e:	e3 e0       	ldi	r30, 0x03	; 3
    2310:	f8 e4       	ldi	r31, 0x48	; 72
    2312:	31 97       	sbiw	r30, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <init_twi+0x34>
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	84 31       	cpi	r24, 0x14	; 20
    231a:	c8 f3       	brcs	.-14     	; 0x230e <init_twi+0x30>
    231c:	eb e0       	ldi	r30, 0x0B	; 11
    231e:	f1 e0       	ldi	r31, 0x01	; 1
    2320:	80 81       	ld	r24, Z
    2322:	8f 7b       	andi	r24, 0xBF	; 191
    2324:	80 83       	st	Z, r24
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	05 c0       	rjmp	.+10     	; 0x2334 <init_twi+0x56>
    232a:	e3 e0       	ldi	r30, 0x03	; 3
    232c:	f8 e4       	ldi	r31, 0x48	; 72
    232e:	31 97       	sbiw	r30, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <init_twi+0x50>
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	84 31       	cpi	r24, 0x14	; 20
    2336:	c8 f3       	brcs	.-14     	; 0x232a <init_twi+0x4c>
    2338:	eb e0       	ldi	r30, 0x0B	; 11
    233a:	f1 e0       	ldi	r31, 0x01	; 1
    233c:	80 81       	ld	r24, Z
    233e:	80 64       	ori	r24, 0x40	; 64
    2340:	80 83       	st	Z, r24
    2342:	e9 eb       	ldi	r30, 0xB9	; 185
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	8c 7f       	andi	r24, 0xFC	; 252
    234a:	80 83       	st	Z, r24
    234c:	80 81       	ld	r24, Z
    234e:	80 83       	st	Z, r24
    2350:	80 e1       	ldi	r24, 0x10	; 16
    2352:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2356:	ec eb       	ldi	r30, 0xBC	; 188
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	84 60       	ori	r24, 0x04	; 4
    235e:	80 83       	st	Z, r24
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <verbose>
    2366:	08 95       	ret

00002368 <twi_start>:
    2368:	84 ea       	ldi	r24, 0xA4	; 164
    236a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    236e:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    2372:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    2376:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    237a:	88 23       	and	r24, r24
    237c:	34 f0       	brlt	.+12     	; 0x238a <twi_start+0x22>
    237e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2382:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2386:	4e 97       	sbiw	r24, 0x1e	; 30
    2388:	b0 f3       	brcs	.-20     	; 0x2376 <twi_start+0xe>
    238a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    238e:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2392:	4e 97       	sbiw	r24, 0x1e	; 30
    2394:	30 f0       	brcs	.+12     	; 0x23a2 <twi_start+0x3a>
    2396:	81 ef       	ldi	r24, 0xF1	; 241
    2398:	97 e0       	ldi	r25, 0x07	; 7
    239a:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	08 95       	ret
    23a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    23a6:	88 7f       	andi	r24, 0xF8	; 248
    23a8:	88 30       	cpi	r24, 0x08	; 8
    23aa:	71 f0       	breq	.+28     	; 0x23c8 <twi_start+0x60>
    23ac:	1f 92       	push	r1
    23ae:	8f 93       	push	r24
    23b0:	88 e0       	ldi	r24, 0x08	; 8
    23b2:	98 e0       	ldi	r25, 0x08	; 8
    23b4:	9f 93       	push	r25
    23b6:	8f 93       	push	r24
    23b8:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	08 95       	ret
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	08 95       	ret

000023cc <twi_write_bytes>:
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	08 2f       	mov	r16, r24
    23d6:	eb 01       	movw	r28, r22
    23d8:	14 2f       	mov	r17, r20
    23da:	c6 df       	rcall	.-116    	; 0x2368 <twi_start>
    23dc:	81 11       	cpse	r24, r1
    23de:	66 c0       	rjmp	.+204    	; 0x24ac <twi_write_bytes+0xe0>
    23e0:	00 0f       	add	r16, r16
    23e2:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    23e6:	84 e8       	ldi	r24, 0x84	; 132
    23e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    23ec:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    23f0:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    23f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    23f8:	88 23       	and	r24, r24
    23fa:	34 f0       	brlt	.+12     	; 0x2408 <twi_write_bytes+0x3c>
    23fc:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2400:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2404:	4e 97       	sbiw	r24, 0x1e	; 30
    2406:	b0 f3       	brcs	.-20     	; 0x23f4 <twi_write_bytes+0x28>
    2408:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    240c:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2410:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2414:	88 7f       	andi	r24, 0xF8	; 248
    2416:	88 31       	cpi	r24, 0x18	; 24
    2418:	09 f4       	brne	.+2      	; 0x241c <twi_write_bytes+0x50>
    241a:	3f c0       	rjmp	.+126    	; 0x249a <twi_write_bytes+0xce>
    241c:	84 e9       	ldi	r24, 0x94	; 148
    241e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2422:	80 e2       	ldi	r24, 0x20	; 32
    2424:	4f df       	rcall	.-354    	; 0x22c4 <showERRORcode>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	42 c0       	rjmp	.+132    	; 0x24b0 <twi_write_bytes+0xe4>
    242c:	ae 01       	movw	r20, r28
    242e:	4f 5f       	subi	r20, 0xFF	; 255
    2430:	5f 4f       	sbci	r21, 0xFF	; 255
    2432:	88 81       	ld	r24, Y
    2434:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2438:	84 e8       	ldi	r24, 0x84	; 132
    243a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    243e:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    2442:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    2446:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    244a:	88 23       	and	r24, r24
    244c:	34 f0       	brlt	.+12     	; 0x245a <twi_write_bytes+0x8e>
    244e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2452:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2456:	4e 97       	sbiw	r24, 0x1e	; 30
    2458:	b0 f3       	brcs	.-20     	; 0x2446 <twi_write_bytes+0x7a>
    245a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    245e:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2462:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2466:	88 7f       	andi	r24, 0xF8	; 248
    2468:	88 32       	cpi	r24, 0x28	; 40
    246a:	a1 f0       	breq	.+40     	; 0x2494 <twi_write_bytes+0xc8>
    246c:	1f 92       	push	r1
    246e:	8f 93       	push	r24
    2470:	88 e2       	ldi	r24, 0x28	; 40
    2472:	98 e0       	ldi	r25, 0x08	; 8
    2474:	9f 93       	push	r25
    2476:	8f 93       	push	r24
    2478:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    247c:	84 e9       	ldi	r24, 0x94	; 148
    247e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2482:	80 e3       	ldi	r24, 0x30	; 48
    2484:	1f df       	rcall	.-450    	; 0x22c4 <showERRORcode>
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <twi_write_bytes+0xe4>
    2494:	2f 5f       	subi	r18, 0xFF	; 255
    2496:	ea 01       	movw	r28, r20
    2498:	01 c0       	rjmp	.+2      	; 0x249c <twi_write_bytes+0xd0>
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	21 17       	cp	r18, r17
    249e:	30 f2       	brcs	.-116    	; 0x242c <twi_write_bytes+0x60>
    24a0:	84 e9       	ldi	r24, 0x94	; 148
    24a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <twi_write_bytes+0xe4>
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <twi_read_bytes>:
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	f8 2e       	mov	r15, r24
    24c6:	8b 01       	movw	r16, r22
    24c8:	ea 01       	movw	r28, r20
    24ca:	4e df       	rcall	.-356    	; 0x2368 <twi_start>
    24cc:	81 11       	cpse	r24, r1
    24ce:	79 c0       	rjmp	.+242    	; 0x25c2 <twi_read_bytes+0x108>
    24d0:	8f 2d       	mov	r24, r15
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	81 60       	ori	r24, 0x01	; 1
    24da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    24de:	84 e8       	ldi	r24, 0x84	; 132
    24e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    24e4:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    24e8:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    24ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    24f0:	88 23       	and	r24, r24
    24f2:	34 f0       	brlt	.+12     	; 0x2500 <twi_read_bytes+0x46>
    24f4:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    24f8:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    24fc:	4e 97       	sbiw	r24, 0x1e	; 30
    24fe:	b0 f3       	brcs	.-20     	; 0x24ec <twi_read_bytes+0x32>
    2500:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2504:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2508:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    250c:	88 7f       	andi	r24, 0xF8	; 248
    250e:	80 34       	cpi	r24, 0x40	; 64
    2510:	09 f4       	brne	.+2      	; 0x2514 <twi_read_bytes+0x5a>
    2512:	4d c0       	rjmp	.+154    	; 0x25ae <twi_read_bytes+0xf4>
    2514:	88 e4       	ldi	r24, 0x48	; 72
    2516:	d6 de       	rcall	.-596    	; 0x22c4 <showERRORcode>
    2518:	84 e9       	ldi	r24, 0x94	; 148
    251a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    251e:	84 e4       	ldi	r24, 0x44	; 68
    2520:	98 e0       	ldi	r25, 0x08	; 8
    2522:	c3 de       	rcall	.-634    	; 0x22aa <setStatus>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	4e c0       	rjmp	.+156    	; 0x25c6 <twi_read_bytes+0x10c>
    252a:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    252e:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    2532:	c1 30       	cpi	r28, 0x01	; 1
    2534:	d1 05       	cpc	r29, r1
    2536:	11 f4       	brne	.+4      	; 0x253c <twi_read_bytes+0x82>
    2538:	84 e8       	ldi	r24, 0x84	; 132
    253a:	01 c0       	rjmp	.+2      	; 0x253e <twi_read_bytes+0x84>
    253c:	84 ec       	ldi	r24, 0xC4	; 196
    253e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2542:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <__data_end+0x1>
    2546:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <__data_end>
    254a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    254e:	88 23       	and	r24, r24
    2550:	34 f0       	brlt	.+12     	; 0x255e <twi_read_bytes+0xa4>
    2552:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2556:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    255a:	4e 97       	sbiw	r24, 0x1e	; 30
    255c:	b0 f3       	brcs	.-20     	; 0x254a <twi_read_bytes+0x90>
    255e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <__data_end>
    2562:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <__data_end+0x1>
    2566:	4e 97       	sbiw	r24, 0x1e	; 30
    2568:	d8 f0       	brcs	.+54     	; 0x25a0 <twi_read_bytes+0xe6>
    256a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    256e:	1f 92       	push	r1
    2570:	8f 93       	push	r24
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	8d e4       	ldi	r24, 0x4D	; 77
    2578:	98 e0       	ldi	r25, 0x08	; 8
    257a:	9f 93       	push	r25
    257c:	8f 93       	push	r24
    257e:	0e 94 11 1c 	call	0x3822	; 0x3822 <printf>
    2582:	84 e9       	ldi	r24, 0x94	; 148
    2584:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2588:	84 e4       	ldi	r24, 0x44	; 68
    258a:	98 e0       	ldi	r25, 0x08	; 8
    258c:	8e de       	rcall	.-740    	; 0x22aa <setStatus>
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	13 c0       	rjmp	.+38     	; 0x25c6 <twi_read_bytes+0x10c>
    25a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    25a4:	f8 01       	movw	r30, r16
    25a6:	80 83       	st	Z, r24
    25a8:	21 97       	sbiw	r28, 0x01	; 1
    25aa:	0f 5f       	subi	r16, 0xFF	; 255
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	1c 16       	cp	r1, r28
    25b0:	1d 06       	cpc	r1, r29
    25b2:	0c f4       	brge	.+2      	; 0x25b6 <twi_read_bytes+0xfc>
    25b4:	ba cf       	rjmp	.-140    	; 0x252a <twi_read_bytes+0x70>
    25b6:	84 e9       	ldi	r24, 0x94	; 148
    25b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <twi_read_bytes+0x10c>
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	08 95       	ret

000025d2 <init_Ports>:
    25d2:	8f ef       	ldi	r24, 0xFF	; 255
    25d4:	81 b9       	out	0x01, r24	; 1
    25d6:	97 ef       	ldi	r25, 0xF7	; 247
    25d8:	94 b9       	out	0x04, r25	; 4
    25da:	87 b9       	out	0x07, r24	; 7
    25dc:	9b eb       	ldi	r25, 0xBB	; 187
    25de:	9a b9       	out	0x0a, r25	; 10
    25e0:	9e e3       	ldi	r25, 0x3E	; 62
    25e2:	9d b9       	out	0x0d, r25	; 13
    25e4:	10 ba       	out	0x10, r1	; 16
    25e6:	83 bb       	out	0x13, r24	; 19
    25e8:	9f e7       	ldi	r25, 0x7F	; 127
    25ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    25ee:	92 e7       	ldi	r25, 0x72	; 114
    25f0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
    25f4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    25f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    25fc:	88 b9       	out	0x08, r24	; 8
    25fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    2602:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <deSelectSDcard>
    2606:	08 95       	ret

00002608 <initialize>:
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	ec e0       	ldi	r30, 0x0C	; 12
    260e:	fa e0       	ldi	r31, 0x0A	; 10
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	92 e0       	ldi	r25, 0x02	; 2
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	93 83       	std	Z+3, r25	; 0x03
    261a:	82 83       	std	Z+2, r24	; 0x02
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	b8 d0       	rcall	.+368    	; 0x2790 <init_uart>
    2620:	d8 df       	rcall	.-80     	; 0x25d2 <init_Ports>
    2622:	b7 db       	rcall	.-2194   	; 0x1d92 <init_spi>
    2624:	0e 94 69 06 	call	0xcd2	; 0xcd2 <init_CountersIimers>
    2628:	8f e0       	ldi	r24, 0x0F	; 15
    262a:	9f e8       	ldi	r25, 0x8F	; 143
    262c:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <hdwConfig+0x1>
    2630:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <hdwConfig>
    2634:	c0 e0       	ldi	r28, 0x00	; 0
    2636:	d0 e0       	ldi	r29, 0x00	; 0
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <initialize+0x3c>
    263a:	8e e2       	ldi	r24, 0x2E	; 46
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 94 4b 1c 	call	0x3896	; 0x3896 <putchar>
    2642:	21 96       	adiw	r28, 0x01	; 1
    2644:	c0 35       	cpi	r28, 0x50	; 80
    2646:	d1 05       	cpc	r29, r1
    2648:	c0 f3       	brcs	.-16     	; 0x263a <initialize+0x32>
    264a:	8a e0       	ldi	r24, 0x0A	; 10
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 4b 1c 	call	0x3896	; 0x3896 <putchar>
    2652:	3d db       	rcall	.-2438   	; 0x1cce <RTC_config>
    2654:	0e 94 a2 06 	call	0xd44	; 0xd44 <initADC2518>
    2658:	42 de       	rcall	.-892    	; 0x22de <init_twi>
    265a:	0e 94 32 09 	call	0x1264	; 0x1264 <initPressureSensors>
    265e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <init_adc>
    2662:	0e 94 32 09 	call	0x1264	; 0x1264 <initPressureSensors>
    2666:	78 94       	sei
    2668:	83 e8       	ldi	r24, 0x83	; 131
    266a:	98 e0       	ldi	r25, 0x08	; 8
    266c:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <main>:
    2676:	c8 df       	rcall	.-112    	; 0x2608 <initialize>
    2678:	84 e9       	ldi	r24, 0x94	; 148
    267a:	98 e0       	ldi	r25, 0x08	; 8
    267c:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <puts>
    2680:	19 d2       	rcall	.+1074   	; 0x2ab4 <doUart>
    2682:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2686:	88 23       	and	r24, r24
    2688:	21 f0       	breq	.+8      	; 0x2692 <main+0x1c>
    268a:	0e 94 25 04 	call	0x84a	; 0x84a <processCommand>
    268e:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <commandCompleteFlag0>
    2692:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <halfSecFlag>
    2696:	88 23       	and	r24, r24
    2698:	41 f0       	breq	.+16     	; 0x26aa <main+0x34>
    269a:	eb e0       	ldi	r30, 0x0B	; 11
    269c:	f1 e0       	ldi	r31, 0x01	; 1
    269e:	90 81       	ld	r25, Z
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	89 27       	eor	r24, r25
    26a4:	80 83       	st	Z, r24
    26a6:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <halfSecFlag>
    26aa:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <oneSecFlag>
    26ae:	88 23       	and	r24, r24
    26b0:	39 f3       	breq	.-50     	; 0x2680 <main+0xa>
    26b2:	eb e0       	ldi	r30, 0x0B	; 11
    26b4:	f1 e0       	ldi	r31, 0x01	; 1
    26b6:	90 81       	ld	r25, Z
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	89 27       	eor	r24, r25
    26bc:	80 83       	st	Z, r24
    26be:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <pauseOutputForCmdCnt>
    26c2:	88 23       	and	r24, r24
    26c4:	19 f0       	breq	.+6      	; 0x26cc <main+0x56>
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <pauseOutputForCmdCnt>
    26cc:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <oneSecFlag>
    26d0:	d7 cf       	rjmp	.-82     	; 0x2680 <main+0xa>

000026d2 <ringbuf_init>:
    26d2:	e3 e6       	ldi	r30, 0x63	; 99
    26d4:	f9 e0       	ldi	r31, 0x09	; 9
    26d6:	60 83       	st	Z, r22
    26d8:	11 82       	std	Z+1, r1	; 0x01
    26da:	93 83       	std	Z+3, r25	; 0x03
    26dc:	82 83       	std	Z+2, r24	; 0x02
    26de:	95 83       	std	Z+5, r25	; 0x05
    26e0:	84 83       	std	Z+4, r24	; 0x04
    26e2:	97 83       	std	Z+7, r25	; 0x07
    26e4:	86 83       	std	Z+6, r24	; 0x06
    26e6:	08 95       	ret

000026e8 <ringbuf_get>:
    26e8:	9f b7       	in	r25, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <rb+0x1>
    26f0:	81 11       	cpse	r24, r1
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <ringbuf_get+0x14>
    26f4:	99 23       	and	r25, r25
    26f6:	04 f5       	brge	.+64     	; 0x2738 <ringbuf_get+0x50>
    26f8:	78 94       	sei
    26fa:	08 95       	ret
    26fc:	e3 e6       	ldi	r30, 0x63	; 99
    26fe:	f9 e0       	ldi	r31, 0x09	; 9
    2700:	a4 81       	ldd	r26, Z+4	; 0x04
    2702:	b5 81       	ldd	r27, Z+5	; 0x05
    2704:	9d 01       	movw	r18, r26
    2706:	2f 5f       	subi	r18, 0xFF	; 255
    2708:	3f 4f       	sbci	r19, 0xFF	; 255
    270a:	35 83       	std	Z+5, r19	; 0x05
    270c:	24 83       	std	Z+4, r18	; 0x04
    270e:	8c 91       	ld	r24, X
    2710:	21 81       	ldd	r18, Z+1	; 0x01
    2712:	21 50       	subi	r18, 0x01	; 1
    2714:	21 83       	std	Z+1, r18	; 0x01
    2716:	44 81       	ldd	r20, Z+4	; 0x04
    2718:	55 81       	ldd	r21, Z+5	; 0x05
    271a:	26 81       	ldd	r18, Z+6	; 0x06
    271c:	37 81       	ldd	r19, Z+7	; 0x07
    271e:	60 81       	ld	r22, Z
    2720:	26 0f       	add	r18, r22
    2722:	31 1d       	adc	r19, r1
    2724:	42 17       	cp	r20, r18
    2726:	53 07       	cpc	r21, r19
    2728:	20 f0       	brcs	.+8      	; 0x2732 <ringbuf_get+0x4a>
    272a:	26 81       	ldd	r18, Z+6	; 0x06
    272c:	37 81       	ldd	r19, Z+7	; 0x07
    272e:	35 83       	std	Z+5, r19	; 0x05
    2730:	24 83       	std	Z+4, r18	; 0x04
    2732:	99 23       	and	r25, r25
    2734:	0c f4       	brge	.+2      	; 0x2738 <ringbuf_get+0x50>
    2736:	78 94       	sei
    2738:	08 95       	ret

0000273a <ringbuf_put>:
    273a:	9f b7       	in	r25, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	e3 e6       	ldi	r30, 0x63	; 99
    2740:	f9 e0       	ldi	r31, 0x09	; 9
    2742:	31 81       	ldd	r19, Z+1	; 0x01
    2744:	20 81       	ld	r18, Z
    2746:	32 17       	cp	r19, r18
    2748:	20 f0       	brcs	.+8      	; 0x2752 <ringbuf_put+0x18>
    274a:	99 23       	and	r25, r25
    274c:	04 f5       	brge	.+64     	; 0x278e <ringbuf_put+0x54>
    274e:	78 94       	sei
    2750:	08 95       	ret
    2752:	e3 e6       	ldi	r30, 0x63	; 99
    2754:	f9 e0       	ldi	r31, 0x09	; 9
    2756:	a2 81       	ldd	r26, Z+2	; 0x02
    2758:	b3 81       	ldd	r27, Z+3	; 0x03
    275a:	9d 01       	movw	r18, r26
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	33 83       	std	Z+3, r19	; 0x03
    2762:	22 83       	std	Z+2, r18	; 0x02
    2764:	8c 93       	st	X, r24
    2766:	81 81       	ldd	r24, Z+1	; 0x01
    2768:	8f 5f       	subi	r24, 0xFF	; 255
    276a:	81 83       	std	Z+1, r24	; 0x01
    276c:	42 81       	ldd	r20, Z+2	; 0x02
    276e:	53 81       	ldd	r21, Z+3	; 0x03
    2770:	26 81       	ldd	r18, Z+6	; 0x06
    2772:	37 81       	ldd	r19, Z+7	; 0x07
    2774:	80 81       	ld	r24, Z
    2776:	28 0f       	add	r18, r24
    2778:	31 1d       	adc	r19, r1
    277a:	42 17       	cp	r20, r18
    277c:	53 07       	cpc	r21, r19
    277e:	20 f0       	brcs	.+8      	; 0x2788 <ringbuf_put+0x4e>
    2780:	26 81       	ldd	r18, Z+6	; 0x06
    2782:	37 81       	ldd	r19, Z+7	; 0x07
    2784:	33 83       	std	Z+3, r19	; 0x03
    2786:	22 83       	std	Z+2, r18	; 0x02
    2788:	99 23       	and	r25, r25
    278a:	0c f4       	brge	.+2      	; 0x278e <ringbuf_put+0x54>
    278c:	78 94       	sei
    278e:	08 95       	ret

00002790 <init_uart>:
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	b9 f1       	breq	.+110    	; 0x2802 <init_uart+0x72>
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	b8 f5       	brcc	.+110    	; 0x2806 <init_uart+0x76>
    2798:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <currentUart>
    279c:	90 91 23 09 	lds	r25, 0x0923	; 0x800923 <userSettings>
    27a0:	91 30       	cpi	r25, 0x01	; 1
    27a2:	19 f0       	breq	.+6      	; 0x27aa <init_uart+0x1a>
    27a4:	92 30       	cpi	r25, 0x02	; 2
    27a6:	39 f0       	breq	.+14     	; 0x27b6 <init_uart+0x26>
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <init_uart+0x20>
    27aa:	9f e5       	ldi	r25, 0x5F	; 95
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	05 c0       	rjmp	.+10     	; 0x27ba <init_uart+0x2a>
    27b0:	97 e0       	ldi	r25, 0x07	; 7
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <init_uart+0x2a>
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	19 f0       	breq	.+6      	; 0x27c4 <init_uart+0x34>
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	71 f0       	breq	.+28     	; 0x27de <init_uart+0x4e>
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <init_uart+0x60>
    27c4:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    27c8:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    27cc:	88 e9       	ldi	r24, 0x98	; 152
    27ce:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    27d2:	60 e8       	ldi	r22, 0x80	; 128
    27d4:	8b e6       	ldi	r24, 0x6B	; 107
    27d6:	99 e0       	ldi	r25, 0x09	; 9
    27d8:	7c df       	rcall	.-264    	; 0x26d2 <ringbuf_init>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	08 95       	ret
    27de:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    27e2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    27e6:	88 e9       	ldi	r24, 0x98	; 152
    27e8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	08 95       	ret
    27f0:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    27f4:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    27f8:	88 e9       	ldi	r24, 0x98	; 152
    27fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	08 95       	ret
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	08 95       	ret
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	08 95       	ret

0000280a <uart0_putchar>:
    280a:	cf 93       	push	r28
    280c:	c8 2f       	mov	r28, r24
    280e:	8a 30       	cpi	r24, 0x0A	; 10
    2810:	31 f4       	brne	.+12     	; 0x281e <uart0_putchar+0x14>
    2812:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    2816:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    281a:	8d e0       	ldi	r24, 0x0D	; 13
    281c:	f6 df       	rcall	.-20     	; 0x280a <uart0_putchar>
    281e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    2822:	85 ff       	sbrs	r24, 5
    2824:	fc cf       	rjmp	.-8      	; 0x281e <uart0_putchar+0x14>
    2826:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	cf 91       	pop	r28
    2830:	08 95       	ret

00002832 <uart1_put>:
    2832:	cf 93       	push	r28
    2834:	c8 2f       	mov	r28, r24
    2836:	8a 30       	cpi	r24, 0x0A	; 10
    2838:	11 f4       	brne	.+4      	; 0x283e <uart1_put+0xc>
    283a:	8d e0       	ldi	r24, 0x0D	; 13
    283c:	fa df       	rcall	.-12     	; 0x2832 <uart1_put>
    283e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2842:	85 ff       	sbrs	r24, 5
    2844:	fc cf       	rjmp	.-8      	; 0x283e <uart1_put+0xc>
    2846:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	cf 91       	pop	r28
    2850:	08 95       	ret

00002852 <uarts_getchar>:
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	08 95       	ret

00002858 <__vector_25>:
    2858:	1f 92       	push	r1
    285a:	0f 92       	push	r0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	0b b6       	in	r0, 0x3b	; 59
    2864:	0f 92       	push	r0
    2866:	2f 93       	push	r18
    2868:	3f 93       	push	r19
    286a:	4f 93       	push	r20
    286c:	5f 93       	push	r21
    286e:	6f 93       	push	r22
    2870:	7f 93       	push	r23
    2872:	8f 93       	push	r24
    2874:	9f 93       	push	r25
    2876:	af 93       	push	r26
    2878:	bf 93       	push	r27
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	ef 93       	push	r30
    2880:	ff 93       	push	r31
    2882:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    2886:	84 fd       	sbrc	r24, 4
    2888:	08 c0       	rjmp	.+16     	; 0x289a <__vector_25+0x42>
    288a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    288e:	83 fd       	sbrc	r24, 3
    2890:	04 c0       	rjmp	.+8      	; 0x289a <__vector_25+0x42>
    2892:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2896:	88 23       	and	r24, r24
    2898:	41 f0       	breq	.+16     	; 0x28aa <__vector_25+0x52>
    289a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <clrError+0x1>
    28a4:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <clrError>
    28a8:	a1 c0       	rjmp	.+322    	; 0x29ec <__vector_25+0x194>
    28aa:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    28ae:	8f 31       	cpi	r24, 0x1F	; 31
    28b0:	80 f0       	brcs	.+32     	; 0x28d2 <__vector_25+0x7a>
    28b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <clrError+0x1>
    28bc:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <clrError>
    28c0:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    28c4:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <buf+0x1f>
    28c8:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <commandCompleteFlag0>
    28cc:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    28d0:	8d c0       	rjmp	.+282    	; 0x29ec <__vector_25+0x194>
    28d2:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    28dc:	e4 51       	subi	r30, 0x14	; 20
    28de:	f6 4f       	sbci	r31, 0xF6	; 246
    28e0:	80 83       	st	Z, r24
    28e2:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	e4 51       	subi	r30, 0x14	; 20
    28ea:	f6 4f       	sbci	r31, 0xF6	; 246
    28ec:	80 81       	ld	r24, Z
    28ee:	8a 30       	cpi	r24, 0x0A	; 10
    28f0:	41 f0       	breq	.+16     	; 0x2902 <__vector_25+0xaa>
    28f2:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	e4 51       	subi	r30, 0x14	; 20
    28fa:	f6 4f       	sbci	r31, 0xF6	; 246
    28fc:	80 81       	ld	r24, Z
    28fe:	8d 30       	cpi	r24, 0x0D	; 13
    2900:	89 f4       	brne	.+34     	; 0x2924 <__vector_25+0xcc>
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	80 93 22 09 	sts	0x0922, r24	; 0x800922 <commandCompleteFlag0>
    2908:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    290c:	8f 5f       	subi	r24, 0xFF	; 255
    290e:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <commandSize>
    2912:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	e4 51       	subi	r30, 0x14	; 20
    291a:	f6 4f       	sbci	r31, 0xF6	; 246
    291c:	10 82       	st	Z, r1
    291e:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2922:	64 c0       	rjmp	.+200    	; 0x29ec <__vector_25+0x194>
    2924:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	e4 51       	subi	r30, 0x14	; 20
    292c:	f6 4f       	sbci	r31, 0xF6	; 246
    292e:	80 81       	ld	r24, Z
    2930:	88 30       	cpi	r24, 0x08	; 8
    2932:	41 f0       	breq	.+16     	; 0x2944 <__vector_25+0xec>
    2934:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	e4 51       	subi	r30, 0x14	; 20
    293c:	f6 4f       	sbci	r31, 0xF6	; 246
    293e:	80 81       	ld	r24, Z
    2940:	8f 37       	cpi	r24, 0x7F	; 127
    2942:	39 f5       	brne	.+78     	; 0x2992 <__vector_25+0x13a>
    2944:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    2948:	88 23       	and	r24, r24
    294a:	09 f4       	brne	.+2      	; 0x294e <__vector_25+0xf6>
    294c:	4f c0       	rjmp	.+158    	; 0x29ec <__vector_25+0x194>
    294e:	cc e0       	ldi	r28, 0x0C	; 12
    2950:	da e0       	ldi	r29, 0x0A	; 10
    2952:	6a 81       	ldd	r22, Y+2	; 0x02
    2954:	7b 81       	ldd	r23, Y+3	; 0x03
    2956:	88 e0       	ldi	r24, 0x08	; 8
    2958:	58 df       	rcall	.-336    	; 0x280a <uart0_putchar>
    295a:	6a 81       	ldd	r22, Y+2	; 0x02
    295c:	7b 81       	ldd	r23, Y+3	; 0x03
    295e:	80 e2       	ldi	r24, 0x20	; 32
    2960:	54 df       	rcall	.-344    	; 0x280a <uart0_putchar>
    2962:	6a 81       	ldd	r22, Y+2	; 0x02
    2964:	7b 81       	ldd	r23, Y+3	; 0x03
    2966:	88 e0       	ldi	r24, 0x08	; 8
    2968:	50 df       	rcall	.-352    	; 0x280a <uart0_putchar>
    296a:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    296e:	81 50       	subi	r24, 0x01	; 1
    2970:	80 93 1f 09 	sts	0x091F, r24	; 0x80091f <bufIndex0>
    2974:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <commandSize>
    297e:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <outputCharacters>
    2982:	88 23       	and	r24, r24
    2984:	99 f1       	breq	.+102    	; 0x29ec <__vector_25+0x194>
    2986:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <outputCharacters>
    298a:	81 50       	subi	r24, 0x01	; 1
    298c:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <outputCharacters>
    2990:	2d c0       	rjmp	.+90     	; 0x29ec <__vector_25+0x194>
    2992:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	e4 51       	subi	r30, 0x14	; 20
    299a:	f6 4f       	sbci	r31, 0xF6	; 246
    299c:	80 81       	ld	r24, Z
    299e:	8c 32       	cpi	r24, 0x2C	; 44
    29a0:	98 f0       	brcs	.+38     	; 0x29c8 <__vector_25+0x170>
    29a2:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	e4 51       	subi	r30, 0x14	; 20
    29aa:	f6 4f       	sbci	r31, 0xF6	; 246
    29ac:	80 81       	ld	r24, Z
    29ae:	8b 37       	cpi	r24, 0x7B	; 123
    29b0:	58 f4       	brcc	.+22     	; 0x29c8 <__vector_25+0x170>
    29b2:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <bufIndex0>
    29b6:	8f 5f       	subi	r24, 0xFF	; 255
    29b8:	80 93 1f 09 	sts	0x091F, r24	; 0x80091f <bufIndex0>
    29bc:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    29c0:	8f 5f       	subi	r24, 0xFF	; 255
    29c2:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <commandSize>
    29c6:	12 c0       	rjmp	.+36     	; 0x29ec <__vector_25+0x194>
    29c8:	e0 91 1f 09 	lds	r30, 0x091F	; 0x80091f <bufIndex0>
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	e4 51       	subi	r30, 0x14	; 20
    29d0:	f6 4f       	sbci	r31, 0xF6	; 246
    29d2:	80 81       	ld	r24, Z
    29d4:	8b 31       	cpi	r24, 0x1B	; 27
    29d6:	51 f4       	brne	.+20     	; 0x29ec <__vector_25+0x194>
    29d8:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    29dc:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    29e0:	8d e0       	ldi	r24, 0x0D	; 13
    29e2:	13 df       	rcall	.-474    	; 0x280a <uart0_putchar>
    29e4:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    29e8:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	0f 90       	pop	r0
    2a0a:	0b be       	out	0x3b, r0	; 59
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	0f 90       	pop	r0
    2a12:	1f 90       	pop	r1
    2a14:	18 95       	reti

00002a16 <__vector_36>:
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	0f 92       	push	r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	0b b6       	in	r0, 0x3b	; 59
    2a22:	0f 92       	push	r0
    2a24:	2f 93       	push	r18
    2a26:	3f 93       	push	r19
    2a28:	4f 93       	push	r20
    2a2a:	5f 93       	push	r21
    2a2c:	6f 93       	push	r22
    2a2e:	7f 93       	push	r23
    2a30:	8f 93       	push	r24
    2a32:	9f 93       	push	r25
    2a34:	af 93       	push	r26
    2a36:	bf 93       	push	r27
    2a38:	ef 93       	push	r30
    2a3a:	ff 93       	push	r31
    2a3c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2a40:	84 fd       	sbrc	r24, 4
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <__vector_36+0x36>
    2a44:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2a48:	83 ff       	sbrs	r24, 3
    2a4a:	08 c0       	rjmp	.+16     	; 0x2a5c <__vector_36+0x46>
    2a4c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <clrError+0x1>
    2a56:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <clrError>
    2a5a:	19 c0       	rjmp	.+50     	; 0x2a8e <__vector_36+0x78>
    2a5c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2a60:	8a 30       	cpi	r24, 0x0A	; 10
    2a62:	41 f4       	brne	.+16     	; 0x2a74 <__vector_36+0x5e>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	69 de       	rcall	.-814    	; 0x273a <ringbuf_put>
    2a68:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <commandCompleteFlag1>
    2a6c:	8f 5f       	subi	r24, 0xFF	; 255
    2a6e:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <commandCompleteFlag1>
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <__vector_36+0x78>
    2a74:	8d 30       	cpi	r24, 0x0D	; 13
    2a76:	59 f0       	breq	.+22     	; 0x2a8e <__vector_36+0x78>
    2a78:	88 30       	cpi	r24, 0x08	; 8
    2a7a:	11 f0       	breq	.+4      	; 0x2a80 <__vector_36+0x6a>
    2a7c:	8f 37       	cpi	r24, 0x7F	; 127
    2a7e:	11 f4       	brne	.+4      	; 0x2a84 <__vector_36+0x6e>
    2a80:	33 de       	rcall	.-922    	; 0x26e8 <ringbuf_get>
    2a82:	05 c0       	rjmp	.+10     	; 0x2a8e <__vector_36+0x78>
    2a84:	90 ee       	ldi	r25, 0xE0	; 224
    2a86:	98 0f       	add	r25, r24
    2a88:	9f 35       	cpi	r25, 0x5F	; 95
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <__vector_36+0x78>
    2a8c:	56 de       	rcall	.-852    	; 0x273a <ringbuf_put>
    2a8e:	ff 91       	pop	r31
    2a90:	ef 91       	pop	r30
    2a92:	bf 91       	pop	r27
    2a94:	af 91       	pop	r26
    2a96:	9f 91       	pop	r25
    2a98:	8f 91       	pop	r24
    2a9a:	7f 91       	pop	r23
    2a9c:	6f 91       	pop	r22
    2a9e:	5f 91       	pop	r21
    2aa0:	4f 91       	pop	r20
    2aa2:	3f 91       	pop	r19
    2aa4:	2f 91       	pop	r18
    2aa6:	0f 90       	pop	r0
    2aa8:	0b be       	out	0x3b, r0	; 59
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <doUart>:
    2ab4:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2ab8:	88 23       	and	r24, r24
    2aba:	69 f1       	breq	.+90     	; 0x2b16 <doUart+0x62>
    2abc:	90 91 1d 09 	lds	r25, 0x091D	; 0x80091d <outputCharacters>
    2ac0:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <commandSize>
    2ac4:	98 17       	cp	r25, r24
    2ac6:	c0 f4       	brcc	.+48     	; 0x2af8 <doUart+0x44>
    2ac8:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2acc:	81 11       	cpse	r24, r1
    2ace:	0b c0       	rjmp	.+22     	; 0x2ae6 <doUart+0x32>
    2ad0:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    2ad4:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    2ad8:	e0 91 1d 09 	lds	r30, 0x091D	; 0x80091d <outputCharacters>
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	e4 51       	subi	r30, 0x14	; 20
    2ae0:	f6 4f       	sbci	r31, 0xF6	; 246
    2ae2:	80 81       	ld	r24, Z
    2ae4:	92 de       	rcall	.-732    	; 0x280a <uart0_putchar>
    2ae6:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <outputCharacters>
    2aea:	8f 5f       	subi	r24, 0xFF	; 255
    2aec:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <outputCharacters>
    2af0:	8a e0       	ldi	r24, 0x0A	; 10
    2af2:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <pauseOutputForCmdCnt>
    2af6:	13 c0       	rjmp	.+38     	; 0x2b1e <doUart+0x6a>
    2af8:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <pauseOutputForCmdCnt>
    2afc:	81 11       	cpse	r24, r1
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <doUart+0x6a>
    2b00:	8f b7       	in	r24, 0x3f	; 63
    2b02:	8f 77       	andi	r24, 0x7F	; 127
    2b04:	8f bf       	out	0x3f, r24	; 63
    2b06:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <outputCharacters>
    2b0a:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    2b0e:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2b12:	78 94       	sei
    2b14:	04 c0       	rjmp	.+8      	; 0x2b1e <doUart+0x6a>
    2b16:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <outputCharacters>
    2b1a:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <pauseOutputForCmdCnt>
    2b1e:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <commandCompleteFlag0>
    2b22:	88 23       	and	r24, r24
    2b24:	a9 f0       	breq	.+42     	; 0x2b50 <doUart+0x9c>
    2b26:	8c ee       	ldi	r24, 0xEC	; 236
    2b28:	99 e0       	ldi	r25, 0x09	; 9
    2b2a:	9f 93       	push	r25
    2b2c:	8f 93       	push	r24
    2b2e:	80 ea       	ldi	r24, 0xA0	; 160
    2b30:	98 e0       	ldi	r25, 0x08	; 8
    2b32:	9f 93       	push	r25
    2b34:	8f 93       	push	r24
    2b36:	75 d6       	rcall	.+3306   	; 0x3822 <printf>
    2b38:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <bufIndex0>
    2b3c:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <pauseOutputForCmdCnt>
    2b40:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <commandSize>
    2b44:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <outputCharacters>
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <commandCompleteFlag1>
    2b54:	88 23       	and	r24, r24
    2b56:	99 f0       	breq	.+38     	; 0x2b7e <doUart+0xca>
    2b58:	8b e6       	ldi	r24, 0x6B	; 107
    2b5a:	99 e0       	ldi	r25, 0x09	; 9
    2b5c:	9f 93       	push	r25
    2b5e:	8f 93       	push	r24
    2b60:	8a ea       	ldi	r24, 0xAA	; 170
    2b62:	98 e0       	ldi	r25, 0x08	; 8
    2b64:	9f 93       	push	r25
    2b66:	8f 93       	push	r24
    2b68:	5c d6       	rcall	.+3256   	; 0x3822 <printf>
    2b6a:	8e e7       	ldi	r24, 0x7E	; 126
    2b6c:	62 de       	rcall	.-828    	; 0x2832 <uart1_put>
    2b6e:	8a e2       	ldi	r24, 0x2A	; 42
    2b70:	60 de       	rcall	.-832    	; 0x2832 <uart1_put>
    2b72:	8e e7       	ldi	r24, 0x7E	; 126
    2b74:	5e de       	rcall	.-836    	; 0x2832 <uart1_put>
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	08 95       	ret

00002b80 <__fixunssfsi>:
    2b80:	70 d0       	rcall	.+224    	; 0x2c62 <__fp_splitA>
    2b82:	88 f0       	brcs	.+34     	; 0x2ba6 <__fixunssfsi+0x26>
    2b84:	9f 57       	subi	r25, 0x7F	; 127
    2b86:	90 f0       	brcs	.+36     	; 0x2bac <__fixunssfsi+0x2c>
    2b88:	b9 2f       	mov	r27, r25
    2b8a:	99 27       	eor	r25, r25
    2b8c:	b7 51       	subi	r27, 0x17	; 23
    2b8e:	a0 f0       	brcs	.+40     	; 0x2bb8 <__fixunssfsi+0x38>
    2b90:	d1 f0       	breq	.+52     	; 0x2bc6 <__fixunssfsi+0x46>
    2b92:	66 0f       	add	r22, r22
    2b94:	77 1f       	adc	r23, r23
    2b96:	88 1f       	adc	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	1a f0       	brmi	.+6      	; 0x2ba2 <__fixunssfsi+0x22>
    2b9c:	ba 95       	dec	r27
    2b9e:	c9 f7       	brne	.-14     	; 0x2b92 <__fixunssfsi+0x12>
    2ba0:	12 c0       	rjmp	.+36     	; 0x2bc6 <__fixunssfsi+0x46>
    2ba2:	b1 30       	cpi	r27, 0x01	; 1
    2ba4:	81 f0       	breq	.+32     	; 0x2bc6 <__fixunssfsi+0x46>
    2ba6:	77 d0       	rcall	.+238    	; 0x2c96 <__fp_zero>
    2ba8:	b1 e0       	ldi	r27, 0x01	; 1
    2baa:	08 95       	ret
    2bac:	74 c0       	rjmp	.+232    	; 0x2c96 <__fp_zero>
    2bae:	67 2f       	mov	r22, r23
    2bb0:	78 2f       	mov	r23, r24
    2bb2:	88 27       	eor	r24, r24
    2bb4:	b8 5f       	subi	r27, 0xF8	; 248
    2bb6:	39 f0       	breq	.+14     	; 0x2bc6 <__fixunssfsi+0x46>
    2bb8:	b9 3f       	cpi	r27, 0xF9	; 249
    2bba:	cc f3       	brlt	.-14     	; 0x2bae <__fixunssfsi+0x2e>
    2bbc:	86 95       	lsr	r24
    2bbe:	77 95       	ror	r23
    2bc0:	67 95       	ror	r22
    2bc2:	b3 95       	inc	r27
    2bc4:	d9 f7       	brne	.-10     	; 0x2bbc <__fixunssfsi+0x3c>
    2bc6:	3e f4       	brtc	.+14     	; 0x2bd6 <__fixunssfsi+0x56>
    2bc8:	90 95       	com	r25
    2bca:	80 95       	com	r24
    2bcc:	70 95       	com	r23
    2bce:	61 95       	neg	r22
    2bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd6:	08 95       	ret

00002bd8 <__floatunsisf>:
    2bd8:	e8 94       	clt
    2bda:	09 c0       	rjmp	.+18     	; 0x2bee <__floatsisf+0x12>

00002bdc <__floatsisf>:
    2bdc:	97 fb       	bst	r25, 7
    2bde:	3e f4       	brtc	.+14     	; 0x2bee <__floatsisf+0x12>
    2be0:	90 95       	com	r25
    2be2:	80 95       	com	r24
    2be4:	70 95       	com	r23
    2be6:	61 95       	neg	r22
    2be8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bea:	8f 4f       	sbci	r24, 0xFF	; 255
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	99 23       	and	r25, r25
    2bf0:	a9 f0       	breq	.+42     	; 0x2c1c <__floatsisf+0x40>
    2bf2:	f9 2f       	mov	r31, r25
    2bf4:	96 e9       	ldi	r25, 0x96	; 150
    2bf6:	bb 27       	eor	r27, r27
    2bf8:	93 95       	inc	r25
    2bfa:	f6 95       	lsr	r31
    2bfc:	87 95       	ror	r24
    2bfe:	77 95       	ror	r23
    2c00:	67 95       	ror	r22
    2c02:	b7 95       	ror	r27
    2c04:	f1 11       	cpse	r31, r1
    2c06:	f8 cf       	rjmp	.-16     	; 0x2bf8 <__floatsisf+0x1c>
    2c08:	fa f4       	brpl	.+62     	; 0x2c48 <__floatsisf+0x6c>
    2c0a:	bb 0f       	add	r27, r27
    2c0c:	11 f4       	brne	.+4      	; 0x2c12 <__floatsisf+0x36>
    2c0e:	60 ff       	sbrs	r22, 0
    2c10:	1b c0       	rjmp	.+54     	; 0x2c48 <__floatsisf+0x6c>
    2c12:	6f 5f       	subi	r22, 0xFF	; 255
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	8f 4f       	sbci	r24, 0xFF	; 255
    2c18:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1a:	16 c0       	rjmp	.+44     	; 0x2c48 <__floatsisf+0x6c>
    2c1c:	88 23       	and	r24, r24
    2c1e:	11 f0       	breq	.+4      	; 0x2c24 <__floatsisf+0x48>
    2c20:	96 e9       	ldi	r25, 0x96	; 150
    2c22:	11 c0       	rjmp	.+34     	; 0x2c46 <__floatsisf+0x6a>
    2c24:	77 23       	and	r23, r23
    2c26:	21 f0       	breq	.+8      	; 0x2c30 <__floatsisf+0x54>
    2c28:	9e e8       	ldi	r25, 0x8E	; 142
    2c2a:	87 2f       	mov	r24, r23
    2c2c:	76 2f       	mov	r23, r22
    2c2e:	05 c0       	rjmp	.+10     	; 0x2c3a <__floatsisf+0x5e>
    2c30:	66 23       	and	r22, r22
    2c32:	71 f0       	breq	.+28     	; 0x2c50 <__floatsisf+0x74>
    2c34:	96 e8       	ldi	r25, 0x86	; 134
    2c36:	86 2f       	mov	r24, r22
    2c38:	70 e0       	ldi	r23, 0x00	; 0
    2c3a:	60 e0       	ldi	r22, 0x00	; 0
    2c3c:	2a f0       	brmi	.+10     	; 0x2c48 <__floatsisf+0x6c>
    2c3e:	9a 95       	dec	r25
    2c40:	66 0f       	add	r22, r22
    2c42:	77 1f       	adc	r23, r23
    2c44:	88 1f       	adc	r24, r24
    2c46:	da f7       	brpl	.-10     	; 0x2c3e <__floatsisf+0x62>
    2c48:	88 0f       	add	r24, r24
    2c4a:	96 95       	lsr	r25
    2c4c:	87 95       	ror	r24
    2c4e:	97 f9       	bld	r25, 7
    2c50:	08 95       	ret

00002c52 <__fp_split3>:
    2c52:	57 fd       	sbrc	r21, 7
    2c54:	90 58       	subi	r25, 0x80	; 128
    2c56:	44 0f       	add	r20, r20
    2c58:	55 1f       	adc	r21, r21
    2c5a:	59 f0       	breq	.+22     	; 0x2c72 <__fp_splitA+0x10>
    2c5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c5e:	71 f0       	breq	.+28     	; 0x2c7c <__fp_splitA+0x1a>
    2c60:	47 95       	ror	r20

00002c62 <__fp_splitA>:
    2c62:	88 0f       	add	r24, r24
    2c64:	97 fb       	bst	r25, 7
    2c66:	99 1f       	adc	r25, r25
    2c68:	61 f0       	breq	.+24     	; 0x2c82 <__fp_splitA+0x20>
    2c6a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c6c:	79 f0       	breq	.+30     	; 0x2c8c <__fp_splitA+0x2a>
    2c6e:	87 95       	ror	r24
    2c70:	08 95       	ret
    2c72:	12 16       	cp	r1, r18
    2c74:	13 06       	cpc	r1, r19
    2c76:	14 06       	cpc	r1, r20
    2c78:	55 1f       	adc	r21, r21
    2c7a:	f2 cf       	rjmp	.-28     	; 0x2c60 <__fp_split3+0xe>
    2c7c:	46 95       	lsr	r20
    2c7e:	f1 df       	rcall	.-30     	; 0x2c62 <__fp_splitA>
    2c80:	08 c0       	rjmp	.+16     	; 0x2c92 <__fp_splitA+0x30>
    2c82:	16 16       	cp	r1, r22
    2c84:	17 06       	cpc	r1, r23
    2c86:	18 06       	cpc	r1, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	f1 cf       	rjmp	.-30     	; 0x2c6e <__fp_splitA+0xc>
    2c8c:	86 95       	lsr	r24
    2c8e:	71 05       	cpc	r23, r1
    2c90:	61 05       	cpc	r22, r1
    2c92:	08 94       	sec
    2c94:	08 95       	ret

00002c96 <__fp_zero>:
    2c96:	e8 94       	clt

00002c98 <__fp_szero>:
    2c98:	bb 27       	eor	r27, r27
    2c9a:	66 27       	eor	r22, r22
    2c9c:	77 27       	eor	r23, r23
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	97 f9       	bld	r25, 7
    2ca2:	08 95       	ret

00002ca4 <__mulsf3>:
    2ca4:	0b d0       	rcall	.+22     	; 0x2cbc <__mulsf3x>
    2ca6:	78 c0       	rjmp	.+240    	; 0x2d98 <__fp_round>
    2ca8:	69 d0       	rcall	.+210    	; 0x2d7c <__fp_pscA>
    2caa:	28 f0       	brcs	.+10     	; 0x2cb6 <__mulsf3+0x12>
    2cac:	6e d0       	rcall	.+220    	; 0x2d8a <__fp_pscB>
    2cae:	18 f0       	brcs	.+6      	; 0x2cb6 <__mulsf3+0x12>
    2cb0:	95 23       	and	r25, r21
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <__mulsf3+0x12>
    2cb4:	5a c0       	rjmp	.+180    	; 0x2d6a <__fp_inf>
    2cb6:	5f c0       	rjmp	.+190    	; 0x2d76 <__fp_nan>
    2cb8:	11 24       	eor	r1, r1
    2cba:	ee cf       	rjmp	.-36     	; 0x2c98 <__fp_szero>

00002cbc <__mulsf3x>:
    2cbc:	ca df       	rcall	.-108    	; 0x2c52 <__fp_split3>
    2cbe:	a0 f3       	brcs	.-24     	; 0x2ca8 <__mulsf3+0x4>

00002cc0 <__mulsf3_pse>:
    2cc0:	95 9f       	mul	r25, r21
    2cc2:	d1 f3       	breq	.-12     	; 0x2cb8 <__mulsf3+0x14>
    2cc4:	95 0f       	add	r25, r21
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	55 1f       	adc	r21, r21
    2cca:	62 9f       	mul	r22, r18
    2ccc:	f0 01       	movw	r30, r0
    2cce:	72 9f       	mul	r23, r18
    2cd0:	bb 27       	eor	r27, r27
    2cd2:	f0 0d       	add	r31, r0
    2cd4:	b1 1d       	adc	r27, r1
    2cd6:	63 9f       	mul	r22, r19
    2cd8:	aa 27       	eor	r26, r26
    2cda:	f0 0d       	add	r31, r0
    2cdc:	b1 1d       	adc	r27, r1
    2cde:	aa 1f       	adc	r26, r26
    2ce0:	64 9f       	mul	r22, r20
    2ce2:	66 27       	eor	r22, r22
    2ce4:	b0 0d       	add	r27, r0
    2ce6:	a1 1d       	adc	r26, r1
    2ce8:	66 1f       	adc	r22, r22
    2cea:	82 9f       	mul	r24, r18
    2cec:	22 27       	eor	r18, r18
    2cee:	b0 0d       	add	r27, r0
    2cf0:	a1 1d       	adc	r26, r1
    2cf2:	62 1f       	adc	r22, r18
    2cf4:	73 9f       	mul	r23, r19
    2cf6:	b0 0d       	add	r27, r0
    2cf8:	a1 1d       	adc	r26, r1
    2cfa:	62 1f       	adc	r22, r18
    2cfc:	83 9f       	mul	r24, r19
    2cfe:	a0 0d       	add	r26, r0
    2d00:	61 1d       	adc	r22, r1
    2d02:	22 1f       	adc	r18, r18
    2d04:	74 9f       	mul	r23, r20
    2d06:	33 27       	eor	r19, r19
    2d08:	a0 0d       	add	r26, r0
    2d0a:	61 1d       	adc	r22, r1
    2d0c:	23 1f       	adc	r18, r19
    2d0e:	84 9f       	mul	r24, r20
    2d10:	60 0d       	add	r22, r0
    2d12:	21 1d       	adc	r18, r1
    2d14:	82 2f       	mov	r24, r18
    2d16:	76 2f       	mov	r23, r22
    2d18:	6a 2f       	mov	r22, r26
    2d1a:	11 24       	eor	r1, r1
    2d1c:	9f 57       	subi	r25, 0x7F	; 127
    2d1e:	50 40       	sbci	r21, 0x00	; 0
    2d20:	8a f0       	brmi	.+34     	; 0x2d44 <__mulsf3_pse+0x84>
    2d22:	e1 f0       	breq	.+56     	; 0x2d5c <__mulsf3_pse+0x9c>
    2d24:	88 23       	and	r24, r24
    2d26:	4a f0       	brmi	.+18     	; 0x2d3a <__mulsf3_pse+0x7a>
    2d28:	ee 0f       	add	r30, r30
    2d2a:	ff 1f       	adc	r31, r31
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	66 1f       	adc	r22, r22
    2d30:	77 1f       	adc	r23, r23
    2d32:	88 1f       	adc	r24, r24
    2d34:	91 50       	subi	r25, 0x01	; 1
    2d36:	50 40       	sbci	r21, 0x00	; 0
    2d38:	a9 f7       	brne	.-22     	; 0x2d24 <__mulsf3_pse+0x64>
    2d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d3c:	51 05       	cpc	r21, r1
    2d3e:	70 f0       	brcs	.+28     	; 0x2d5c <__mulsf3_pse+0x9c>
    2d40:	14 c0       	rjmp	.+40     	; 0x2d6a <__fp_inf>
    2d42:	aa cf       	rjmp	.-172    	; 0x2c98 <__fp_szero>
    2d44:	5f 3f       	cpi	r21, 0xFF	; 255
    2d46:	ec f3       	brlt	.-6      	; 0x2d42 <__mulsf3_pse+0x82>
    2d48:	98 3e       	cpi	r25, 0xE8	; 232
    2d4a:	dc f3       	brlt	.-10     	; 0x2d42 <__mulsf3_pse+0x82>
    2d4c:	86 95       	lsr	r24
    2d4e:	77 95       	ror	r23
    2d50:	67 95       	ror	r22
    2d52:	b7 95       	ror	r27
    2d54:	f7 95       	ror	r31
    2d56:	e7 95       	ror	r30
    2d58:	9f 5f       	subi	r25, 0xFF	; 255
    2d5a:	c1 f7       	brne	.-16     	; 0x2d4c <__mulsf3_pse+0x8c>
    2d5c:	fe 2b       	or	r31, r30
    2d5e:	88 0f       	add	r24, r24
    2d60:	91 1d       	adc	r25, r1
    2d62:	96 95       	lsr	r25
    2d64:	87 95       	ror	r24
    2d66:	97 f9       	bld	r25, 7
    2d68:	08 95       	ret

00002d6a <__fp_inf>:
    2d6a:	97 f9       	bld	r25, 7
    2d6c:	9f 67       	ori	r25, 0x7F	; 127
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	08 95       	ret

00002d76 <__fp_nan>:
    2d76:	9f ef       	ldi	r25, 0xFF	; 255
    2d78:	80 ec       	ldi	r24, 0xC0	; 192
    2d7a:	08 95       	ret

00002d7c <__fp_pscA>:
    2d7c:	00 24       	eor	r0, r0
    2d7e:	0a 94       	dec	r0
    2d80:	16 16       	cp	r1, r22
    2d82:	17 06       	cpc	r1, r23
    2d84:	18 06       	cpc	r1, r24
    2d86:	09 06       	cpc	r0, r25
    2d88:	08 95       	ret

00002d8a <__fp_pscB>:
    2d8a:	00 24       	eor	r0, r0
    2d8c:	0a 94       	dec	r0
    2d8e:	12 16       	cp	r1, r18
    2d90:	13 06       	cpc	r1, r19
    2d92:	14 06       	cpc	r1, r20
    2d94:	05 06       	cpc	r0, r21
    2d96:	08 95       	ret

00002d98 <__fp_round>:
    2d98:	09 2e       	mov	r0, r25
    2d9a:	03 94       	inc	r0
    2d9c:	00 0c       	add	r0, r0
    2d9e:	11 f4       	brne	.+4      	; 0x2da4 <__fp_round+0xc>
    2da0:	88 23       	and	r24, r24
    2da2:	52 f0       	brmi	.+20     	; 0x2db8 <__fp_round+0x20>
    2da4:	bb 0f       	add	r27, r27
    2da6:	40 f4       	brcc	.+16     	; 0x2db8 <__fp_round+0x20>
    2da8:	bf 2b       	or	r27, r31
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <__fp_round+0x18>
    2dac:	60 ff       	sbrs	r22, 0
    2dae:	04 c0       	rjmp	.+8      	; 0x2db8 <__fp_round+0x20>
    2db0:	6f 5f       	subi	r22, 0xFF	; 255
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	8f 4f       	sbci	r24, 0xFF	; 255
    2db6:	9f 4f       	sbci	r25, 0xFF	; 255
    2db8:	08 95       	ret

00002dba <vfprintf>:
    2dba:	2f 92       	push	r2
    2dbc:	3f 92       	push	r3
    2dbe:	4f 92       	push	r4
    2dc0:	5f 92       	push	r5
    2dc2:	6f 92       	push	r6
    2dc4:	7f 92       	push	r7
    2dc6:	8f 92       	push	r8
    2dc8:	9f 92       	push	r9
    2dca:	af 92       	push	r10
    2dcc:	bf 92       	push	r11
    2dce:	cf 92       	push	r12
    2dd0:	df 92       	push	r13
    2dd2:	ef 92       	push	r14
    2dd4:	ff 92       	push	r15
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	60 97       	sbiw	r28, 0x10	; 16
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	7c 01       	movw	r14, r24
    2df0:	1b 01       	movw	r2, r22
    2df2:	6a 01       	movw	r12, r20
    2df4:	fc 01       	movw	r30, r24
    2df6:	17 82       	std	Z+7, r1	; 0x07
    2df8:	16 82       	std	Z+6, r1	; 0x06
    2dfa:	83 81       	ldd	r24, Z+3	; 0x03
    2dfc:	81 ff       	sbrs	r24, 1
    2dfe:	2a c3       	rjmp	.+1620   	; 0x3454 <vfprintf+0x69a>
    2e00:	9e 01       	movw	r18, r28
    2e02:	2f 5f       	subi	r18, 0xFF	; 255
    2e04:	3f 4f       	sbci	r19, 0xFF	; 255
    2e06:	39 01       	movw	r6, r18
    2e08:	f7 01       	movw	r30, r14
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	f1 01       	movw	r30, r2
    2e0e:	93 fd       	sbrc	r25, 3
    2e10:	85 91       	lpm	r24, Z+
    2e12:	93 ff       	sbrs	r25, 3
    2e14:	81 91       	ld	r24, Z+
    2e16:	1f 01       	movw	r2, r30
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <vfprintf+0x64>
    2e1c:	17 c3       	rjmp	.+1582   	; 0x344c <vfprintf+0x692>
    2e1e:	85 32       	cpi	r24, 0x25	; 37
    2e20:	39 f4       	brne	.+14     	; 0x2e30 <vfprintf+0x76>
    2e22:	93 fd       	sbrc	r25, 3
    2e24:	85 91       	lpm	r24, Z+
    2e26:	93 ff       	sbrs	r25, 3
    2e28:	81 91       	ld	r24, Z+
    2e2a:	1f 01       	movw	r2, r30
    2e2c:	85 32       	cpi	r24, 0x25	; 37
    2e2e:	31 f4       	brne	.+12     	; 0x2e3c <vfprintf+0x82>
    2e30:	b7 01       	movw	r22, r14
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	ba d4       	rcall	.+2420   	; 0x37aa <fputc>
    2e36:	56 01       	movw	r10, r12
    2e38:	65 01       	movw	r12, r10
    2e3a:	e6 cf       	rjmp	.-52     	; 0x2e08 <vfprintf+0x4e>
    2e3c:	10 e0       	ldi	r17, 0x00	; 0
    2e3e:	51 2c       	mov	r5, r1
    2e40:	91 2c       	mov	r9, r1
    2e42:	ff e1       	ldi	r31, 0x1F	; 31
    2e44:	f9 15       	cp	r31, r9
    2e46:	d8 f0       	brcs	.+54     	; 0x2e7e <vfprintf+0xc4>
    2e48:	8b 32       	cpi	r24, 0x2B	; 43
    2e4a:	79 f0       	breq	.+30     	; 0x2e6a <vfprintf+0xb0>
    2e4c:	38 f4       	brcc	.+14     	; 0x2e5c <vfprintf+0xa2>
    2e4e:	80 32       	cpi	r24, 0x20	; 32
    2e50:	79 f0       	breq	.+30     	; 0x2e70 <vfprintf+0xb6>
    2e52:	83 32       	cpi	r24, 0x23	; 35
    2e54:	a1 f4       	brne	.+40     	; 0x2e7e <vfprintf+0xc4>
    2e56:	f9 2d       	mov	r31, r9
    2e58:	f0 61       	ori	r31, 0x10	; 16
    2e5a:	2e c0       	rjmp	.+92     	; 0x2eb8 <vfprintf+0xfe>
    2e5c:	8d 32       	cpi	r24, 0x2D	; 45
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <vfprintf+0xbe>
    2e60:	80 33       	cpi	r24, 0x30	; 48
    2e62:	69 f4       	brne	.+26     	; 0x2e7e <vfprintf+0xc4>
    2e64:	29 2d       	mov	r18, r9
    2e66:	21 60       	ori	r18, 0x01	; 1
    2e68:	2d c0       	rjmp	.+90     	; 0x2ec4 <vfprintf+0x10a>
    2e6a:	39 2d       	mov	r19, r9
    2e6c:	32 60       	ori	r19, 0x02	; 2
    2e6e:	93 2e       	mov	r9, r19
    2e70:	89 2d       	mov	r24, r9
    2e72:	84 60       	ori	r24, 0x04	; 4
    2e74:	98 2e       	mov	r9, r24
    2e76:	2a c0       	rjmp	.+84     	; 0x2ecc <vfprintf+0x112>
    2e78:	e9 2d       	mov	r30, r9
    2e7a:	e8 60       	ori	r30, 0x08	; 8
    2e7c:	15 c0       	rjmp	.+42     	; 0x2ea8 <vfprintf+0xee>
    2e7e:	97 fc       	sbrc	r9, 7
    2e80:	2d c0       	rjmp	.+90     	; 0x2edc <vfprintf+0x122>
    2e82:	20 ed       	ldi	r18, 0xD0	; 208
    2e84:	28 0f       	add	r18, r24
    2e86:	2a 30       	cpi	r18, 0x0A	; 10
    2e88:	88 f4       	brcc	.+34     	; 0x2eac <vfprintf+0xf2>
    2e8a:	96 fe       	sbrs	r9, 6
    2e8c:	06 c0       	rjmp	.+12     	; 0x2e9a <vfprintf+0xe0>
    2e8e:	3a e0       	ldi	r19, 0x0A	; 10
    2e90:	13 9f       	mul	r17, r19
    2e92:	20 0d       	add	r18, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	12 2f       	mov	r17, r18
    2e98:	19 c0       	rjmp	.+50     	; 0x2ecc <vfprintf+0x112>
    2e9a:	8a e0       	ldi	r24, 0x0A	; 10
    2e9c:	58 9e       	mul	r5, r24
    2e9e:	20 0d       	add	r18, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	52 2e       	mov	r5, r18
    2ea4:	e9 2d       	mov	r30, r9
    2ea6:	e0 62       	ori	r30, 0x20	; 32
    2ea8:	9e 2e       	mov	r9, r30
    2eaa:	10 c0       	rjmp	.+32     	; 0x2ecc <vfprintf+0x112>
    2eac:	8e 32       	cpi	r24, 0x2E	; 46
    2eae:	31 f4       	brne	.+12     	; 0x2ebc <vfprintf+0x102>
    2eb0:	96 fc       	sbrc	r9, 6
    2eb2:	cc c2       	rjmp	.+1432   	; 0x344c <vfprintf+0x692>
    2eb4:	f9 2d       	mov	r31, r9
    2eb6:	f0 64       	ori	r31, 0x40	; 64
    2eb8:	9f 2e       	mov	r9, r31
    2eba:	08 c0       	rjmp	.+16     	; 0x2ecc <vfprintf+0x112>
    2ebc:	8c 36       	cpi	r24, 0x6C	; 108
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <vfprintf+0x10e>
    2ec0:	29 2d       	mov	r18, r9
    2ec2:	20 68       	ori	r18, 0x80	; 128
    2ec4:	92 2e       	mov	r9, r18
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <vfprintf+0x112>
    2ec8:	88 36       	cpi	r24, 0x68	; 104
    2eca:	41 f4       	brne	.+16     	; 0x2edc <vfprintf+0x122>
    2ecc:	f1 01       	movw	r30, r2
    2ece:	93 fd       	sbrc	r25, 3
    2ed0:	85 91       	lpm	r24, Z+
    2ed2:	93 ff       	sbrs	r25, 3
    2ed4:	81 91       	ld	r24, Z+
    2ed6:	1f 01       	movw	r2, r30
    2ed8:	81 11       	cpse	r24, r1
    2eda:	b3 cf       	rjmp	.-154    	; 0x2e42 <vfprintf+0x88>
    2edc:	9b eb       	ldi	r25, 0xBB	; 187
    2ede:	98 0f       	add	r25, r24
    2ee0:	93 30       	cpi	r25, 0x03	; 3
    2ee2:	20 f4       	brcc	.+8      	; 0x2eec <vfprintf+0x132>
    2ee4:	99 2d       	mov	r25, r9
    2ee6:	90 61       	ori	r25, 0x10	; 16
    2ee8:	80 5e       	subi	r24, 0xE0	; 224
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <vfprintf+0x140>
    2eec:	9b e9       	ldi	r25, 0x9B	; 155
    2eee:	98 0f       	add	r25, r24
    2ef0:	93 30       	cpi	r25, 0x03	; 3
    2ef2:	08 f0       	brcs	.+2      	; 0x2ef6 <vfprintf+0x13c>
    2ef4:	59 c1       	rjmp	.+690    	; 0x31a8 <vfprintf+0x3ee>
    2ef6:	99 2d       	mov	r25, r9
    2ef8:	9f 7e       	andi	r25, 0xEF	; 239
    2efa:	96 ff       	sbrs	r25, 6
    2efc:	16 e0       	ldi	r17, 0x06	; 6
    2efe:	9f 73       	andi	r25, 0x3F	; 63
    2f00:	99 2e       	mov	r9, r25
    2f02:	85 36       	cpi	r24, 0x65	; 101
    2f04:	19 f4       	brne	.+6      	; 0x2f0c <vfprintf+0x152>
    2f06:	90 64       	ori	r25, 0x40	; 64
    2f08:	99 2e       	mov	r9, r25
    2f0a:	08 c0       	rjmp	.+16     	; 0x2f1c <vfprintf+0x162>
    2f0c:	86 36       	cpi	r24, 0x66	; 102
    2f0e:	21 f4       	brne	.+8      	; 0x2f18 <vfprintf+0x15e>
    2f10:	39 2f       	mov	r19, r25
    2f12:	30 68       	ori	r19, 0x80	; 128
    2f14:	93 2e       	mov	r9, r19
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <vfprintf+0x162>
    2f18:	11 11       	cpse	r17, r1
    2f1a:	11 50       	subi	r17, 0x01	; 1
    2f1c:	97 fe       	sbrs	r9, 7
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <vfprintf+0x174>
    2f20:	1c 33       	cpi	r17, 0x3C	; 60
    2f22:	50 f4       	brcc	.+20     	; 0x2f38 <vfprintf+0x17e>
    2f24:	44 24       	eor	r4, r4
    2f26:	43 94       	inc	r4
    2f28:	41 0e       	add	r4, r17
    2f2a:	27 e0       	ldi	r18, 0x07	; 7
    2f2c:	0b c0       	rjmp	.+22     	; 0x2f44 <vfprintf+0x18a>
    2f2e:	18 30       	cpi	r17, 0x08	; 8
    2f30:	38 f0       	brcs	.+14     	; 0x2f40 <vfprintf+0x186>
    2f32:	27 e0       	ldi	r18, 0x07	; 7
    2f34:	17 e0       	ldi	r17, 0x07	; 7
    2f36:	05 c0       	rjmp	.+10     	; 0x2f42 <vfprintf+0x188>
    2f38:	27 e0       	ldi	r18, 0x07	; 7
    2f3a:	9c e3       	ldi	r25, 0x3C	; 60
    2f3c:	49 2e       	mov	r4, r25
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <vfprintf+0x18a>
    2f40:	21 2f       	mov	r18, r17
    2f42:	41 2c       	mov	r4, r1
    2f44:	56 01       	movw	r10, r12
    2f46:	84 e0       	ldi	r24, 0x04	; 4
    2f48:	a8 0e       	add	r10, r24
    2f4a:	b1 1c       	adc	r11, r1
    2f4c:	f6 01       	movw	r30, r12
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	04 2d       	mov	r16, r4
    2f58:	a3 01       	movw	r20, r6
    2f5a:	28 d3       	rcall	.+1616   	; 0x35ac <__ftoa_engine>
    2f5c:	6c 01       	movw	r12, r24
    2f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f60:	fc 87       	std	Y+12, r31	; 0x0c
    2f62:	f0 ff       	sbrs	r31, 0
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <vfprintf+0x1b0>
    2f66:	f3 ff       	sbrs	r31, 3
    2f68:	06 c0       	rjmp	.+12     	; 0x2f76 <vfprintf+0x1bc>
    2f6a:	91 fc       	sbrc	r9, 1
    2f6c:	06 c0       	rjmp	.+12     	; 0x2f7a <vfprintf+0x1c0>
    2f6e:	92 fe       	sbrs	r9, 2
    2f70:	06 c0       	rjmp	.+12     	; 0x2f7e <vfprintf+0x1c4>
    2f72:	00 e2       	ldi	r16, 0x20	; 32
    2f74:	05 c0       	rjmp	.+10     	; 0x2f80 <vfprintf+0x1c6>
    2f76:	0d e2       	ldi	r16, 0x2D	; 45
    2f78:	03 c0       	rjmp	.+6      	; 0x2f80 <vfprintf+0x1c6>
    2f7a:	0b e2       	ldi	r16, 0x2B	; 43
    2f7c:	01 c0       	rjmp	.+2      	; 0x2f80 <vfprintf+0x1c6>
    2f7e:	00 e0       	ldi	r16, 0x00	; 0
    2f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f82:	8c 70       	andi	r24, 0x0C	; 12
    2f84:	19 f0       	breq	.+6      	; 0x2f8c <vfprintf+0x1d2>
    2f86:	01 11       	cpse	r16, r1
    2f88:	43 c2       	rjmp	.+1158   	; 0x3410 <vfprintf+0x656>
    2f8a:	80 c2       	rjmp	.+1280   	; 0x348c <vfprintf+0x6d2>
    2f8c:	97 fe       	sbrs	r9, 7
    2f8e:	10 c0       	rjmp	.+32     	; 0x2fb0 <vfprintf+0x1f6>
    2f90:	4c 0c       	add	r4, r12
    2f92:	fc 85       	ldd	r31, Y+12	; 0x0c
    2f94:	f4 ff       	sbrs	r31, 4
    2f96:	04 c0       	rjmp	.+8      	; 0x2fa0 <vfprintf+0x1e6>
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	81 33       	cpi	r24, 0x31	; 49
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <vfprintf+0x1e6>
    2f9e:	4a 94       	dec	r4
    2fa0:	14 14       	cp	r1, r4
    2fa2:	74 f5       	brge	.+92     	; 0x3000 <vfprintf+0x246>
    2fa4:	28 e0       	ldi	r18, 0x08	; 8
    2fa6:	24 15       	cp	r18, r4
    2fa8:	78 f5       	brcc	.+94     	; 0x3008 <vfprintf+0x24e>
    2faa:	88 e0       	ldi	r24, 0x08	; 8
    2fac:	48 2e       	mov	r4, r24
    2fae:	2c c0       	rjmp	.+88     	; 0x3008 <vfprintf+0x24e>
    2fb0:	96 fc       	sbrc	r9, 6
    2fb2:	2a c0       	rjmp	.+84     	; 0x3008 <vfprintf+0x24e>
    2fb4:	81 2f       	mov	r24, r17
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	8c 15       	cp	r24, r12
    2fba:	9d 05       	cpc	r25, r13
    2fbc:	9c f0       	brlt	.+38     	; 0x2fe4 <vfprintf+0x22a>
    2fbe:	3c ef       	ldi	r19, 0xFC	; 252
    2fc0:	c3 16       	cp	r12, r19
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	d3 06       	cpc	r13, r19
    2fc6:	74 f0       	brlt	.+28     	; 0x2fe4 <vfprintf+0x22a>
    2fc8:	89 2d       	mov	r24, r9
    2fca:	80 68       	ori	r24, 0x80	; 128
    2fcc:	98 2e       	mov	r9, r24
    2fce:	0a c0       	rjmp	.+20     	; 0x2fe4 <vfprintf+0x22a>
    2fd0:	e2 e0       	ldi	r30, 0x02	; 2
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	ec 0f       	add	r30, r28
    2fd6:	fd 1f       	adc	r31, r29
    2fd8:	e1 0f       	add	r30, r17
    2fda:	f1 1d       	adc	r31, r1
    2fdc:	80 81       	ld	r24, Z
    2fde:	80 33       	cpi	r24, 0x30	; 48
    2fe0:	19 f4       	brne	.+6      	; 0x2fe8 <vfprintf+0x22e>
    2fe2:	11 50       	subi	r17, 0x01	; 1
    2fe4:	11 11       	cpse	r17, r1
    2fe6:	f4 cf       	rjmp	.-24     	; 0x2fd0 <vfprintf+0x216>
    2fe8:	97 fe       	sbrs	r9, 7
    2fea:	0e c0       	rjmp	.+28     	; 0x3008 <vfprintf+0x24e>
    2fec:	44 24       	eor	r4, r4
    2fee:	43 94       	inc	r4
    2ff0:	41 0e       	add	r4, r17
    2ff2:	81 2f       	mov	r24, r17
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	c8 16       	cp	r12, r24
    2ff8:	d9 06       	cpc	r13, r25
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <vfprintf+0x24c>
    2ffc:	1c 19       	sub	r17, r12
    2ffe:	04 c0       	rjmp	.+8      	; 0x3008 <vfprintf+0x24e>
    3000:	44 24       	eor	r4, r4
    3002:	43 94       	inc	r4
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <vfprintf+0x24e>
    3006:	10 e0       	ldi	r17, 0x00	; 0
    3008:	97 fe       	sbrs	r9, 7
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <vfprintf+0x25e>
    300c:	1c 14       	cp	r1, r12
    300e:	1d 04       	cpc	r1, r13
    3010:	34 f4       	brge	.+12     	; 0x301e <vfprintf+0x264>
    3012:	c6 01       	movw	r24, r12
    3014:	01 96       	adiw	r24, 0x01	; 1
    3016:	05 c0       	rjmp	.+10     	; 0x3022 <vfprintf+0x268>
    3018:	85 e0       	ldi	r24, 0x05	; 5
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <vfprintf+0x268>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	01 11       	cpse	r16, r1
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	11 23       	and	r17, r17
    3028:	31 f0       	breq	.+12     	; 0x3036 <vfprintf+0x27c>
    302a:	21 2f       	mov	r18, r17
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	2f 5f       	subi	r18, 0xFF	; 255
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	82 0f       	add	r24, r18
    3034:	93 1f       	adc	r25, r19
    3036:	25 2d       	mov	r18, r5
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	82 17       	cp	r24, r18
    303c:	93 07       	cpc	r25, r19
    303e:	14 f4       	brge	.+4      	; 0x3044 <vfprintf+0x28a>
    3040:	58 1a       	sub	r5, r24
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <vfprintf+0x28c>
    3044:	51 2c       	mov	r5, r1
    3046:	89 2d       	mov	r24, r9
    3048:	89 70       	andi	r24, 0x09	; 9
    304a:	41 f4       	brne	.+16     	; 0x305c <vfprintf+0x2a2>
    304c:	55 20       	and	r5, r5
    304e:	31 f0       	breq	.+12     	; 0x305c <vfprintf+0x2a2>
    3050:	b7 01       	movw	r22, r14
    3052:	80 e2       	ldi	r24, 0x20	; 32
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	a9 d3       	rcall	.+1874   	; 0x37aa <fputc>
    3058:	5a 94       	dec	r5
    305a:	f8 cf       	rjmp	.-16     	; 0x304c <vfprintf+0x292>
    305c:	00 23       	and	r16, r16
    305e:	21 f0       	breq	.+8      	; 0x3068 <vfprintf+0x2ae>
    3060:	b7 01       	movw	r22, r14
    3062:	80 2f       	mov	r24, r16
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a1 d3       	rcall	.+1858   	; 0x37aa <fputc>
    3068:	93 fc       	sbrc	r9, 3
    306a:	08 c0       	rjmp	.+16     	; 0x307c <vfprintf+0x2c2>
    306c:	55 20       	and	r5, r5
    306e:	31 f0       	breq	.+12     	; 0x307c <vfprintf+0x2c2>
    3070:	b7 01       	movw	r22, r14
    3072:	80 e3       	ldi	r24, 0x30	; 48
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	99 d3       	rcall	.+1842   	; 0x37aa <fputc>
    3078:	5a 94       	dec	r5
    307a:	f8 cf       	rjmp	.-16     	; 0x306c <vfprintf+0x2b2>
    307c:	97 fe       	sbrs	r9, 7
    307e:	4a c0       	rjmp	.+148    	; 0x3114 <vfprintf+0x35a>
    3080:	46 01       	movw	r8, r12
    3082:	d7 fe       	sbrs	r13, 7
    3084:	02 c0       	rjmp	.+4      	; 0x308a <vfprintf+0x2d0>
    3086:	81 2c       	mov	r8, r1
    3088:	91 2c       	mov	r9, r1
    308a:	c6 01       	movw	r24, r12
    308c:	88 19       	sub	r24, r8
    308e:	99 09       	sbc	r25, r9
    3090:	f3 01       	movw	r30, r6
    3092:	e8 0f       	add	r30, r24
    3094:	f9 1f       	adc	r31, r25
    3096:	fe 87       	std	Y+14, r31	; 0x0e
    3098:	ed 87       	std	Y+13, r30	; 0x0d
    309a:	96 01       	movw	r18, r12
    309c:	24 19       	sub	r18, r4
    309e:	31 09       	sbc	r19, r1
    30a0:	38 8b       	std	Y+16, r19	; 0x10
    30a2:	2f 87       	std	Y+15, r18	; 0x0f
    30a4:	01 2f       	mov	r16, r17
    30a6:	10 e0       	ldi	r17, 0x00	; 0
    30a8:	11 95       	neg	r17
    30aa:	01 95       	neg	r16
    30ac:	11 09       	sbc	r17, r1
    30ae:	3f ef       	ldi	r19, 0xFF	; 255
    30b0:	83 16       	cp	r8, r19
    30b2:	93 06       	cpc	r9, r19
    30b4:	21 f4       	brne	.+8      	; 0x30be <vfprintf+0x304>
    30b6:	b7 01       	movw	r22, r14
    30b8:	8e e2       	ldi	r24, 0x2E	; 46
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	76 d3       	rcall	.+1772   	; 0x37aa <fputc>
    30be:	c8 14       	cp	r12, r8
    30c0:	d9 04       	cpc	r13, r9
    30c2:	4c f0       	brlt	.+18     	; 0x30d6 <vfprintf+0x31c>
    30c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c6:	98 89       	ldd	r25, Y+16	; 0x10
    30c8:	88 15       	cp	r24, r8
    30ca:	99 05       	cpc	r25, r9
    30cc:	24 f4       	brge	.+8      	; 0x30d6 <vfprintf+0x31c>
    30ce:	ed 85       	ldd	r30, Y+13	; 0x0d
    30d0:	fe 85       	ldd	r31, Y+14	; 0x0e
    30d2:	81 81       	ldd	r24, Z+1	; 0x01
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <vfprintf+0x31e>
    30d6:	80 e3       	ldi	r24, 0x30	; 48
    30d8:	f1 e0       	ldi	r31, 0x01	; 1
    30da:	8f 1a       	sub	r8, r31
    30dc:	91 08       	sbc	r9, r1
    30de:	2d 85       	ldd	r18, Y+13	; 0x0d
    30e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    30e2:	2f 5f       	subi	r18, 0xFF	; 255
    30e4:	3f 4f       	sbci	r19, 0xFF	; 255
    30e6:	3e 87       	std	Y+14, r19	; 0x0e
    30e8:	2d 87       	std	Y+13, r18	; 0x0d
    30ea:	80 16       	cp	r8, r16
    30ec:	91 06       	cpc	r9, r17
    30ee:	24 f0       	brlt	.+8      	; 0x30f8 <vfprintf+0x33e>
    30f0:	b7 01       	movw	r22, r14
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	5a d3       	rcall	.+1716   	; 0x37aa <fputc>
    30f6:	db cf       	rjmp	.-74     	; 0x30ae <vfprintf+0x2f4>
    30f8:	c8 14       	cp	r12, r8
    30fa:	d9 04       	cpc	r13, r9
    30fc:	41 f4       	brne	.+16     	; 0x310e <vfprintf+0x354>
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	96 33       	cpi	r25, 0x36	; 54
    3102:	20 f4       	brcc	.+8      	; 0x310c <vfprintf+0x352>
    3104:	95 33       	cpi	r25, 0x35	; 53
    3106:	19 f4       	brne	.+6      	; 0x310e <vfprintf+0x354>
    3108:	3c 85       	ldd	r19, Y+12	; 0x0c
    310a:	34 ff       	sbrs	r19, 4
    310c:	81 e3       	ldi	r24, 0x31	; 49
    310e:	b7 01       	movw	r22, r14
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	48 c0       	rjmp	.+144    	; 0x31a4 <vfprintf+0x3ea>
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	81 33       	cpi	r24, 0x31	; 49
    3118:	19 f0       	breq	.+6      	; 0x3120 <vfprintf+0x366>
    311a:	9c 85       	ldd	r25, Y+12	; 0x0c
    311c:	9f 7e       	andi	r25, 0xEF	; 239
    311e:	9c 87       	std	Y+12, r25	; 0x0c
    3120:	b7 01       	movw	r22, r14
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	42 d3       	rcall	.+1668   	; 0x37aa <fputc>
    3126:	11 11       	cpse	r17, r1
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <vfprintf+0x37a>
    312a:	94 fc       	sbrc	r9, 4
    312c:	16 c0       	rjmp	.+44     	; 0x315a <vfprintf+0x3a0>
    312e:	85 e6       	ldi	r24, 0x65	; 101
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	15 c0       	rjmp	.+42     	; 0x315e <vfprintf+0x3a4>
    3134:	b7 01       	movw	r22, r14
    3136:	8e e2       	ldi	r24, 0x2E	; 46
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	37 d3       	rcall	.+1646   	; 0x37aa <fputc>
    313c:	1e 5f       	subi	r17, 0xFE	; 254
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	01 e0       	ldi	r16, 0x01	; 1
    3142:	08 0f       	add	r16, r24
    3144:	f3 01       	movw	r30, r6
    3146:	e8 0f       	add	r30, r24
    3148:	f1 1d       	adc	r31, r1
    314a:	80 81       	ld	r24, Z
    314c:	b7 01       	movw	r22, r14
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	2c d3       	rcall	.+1624   	; 0x37aa <fputc>
    3152:	80 2f       	mov	r24, r16
    3154:	01 13       	cpse	r16, r17
    3156:	f4 cf       	rjmp	.-24     	; 0x3140 <vfprintf+0x386>
    3158:	e8 cf       	rjmp	.-48     	; 0x312a <vfprintf+0x370>
    315a:	85 e4       	ldi	r24, 0x45	; 69
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	b7 01       	movw	r22, r14
    3160:	24 d3       	rcall	.+1608   	; 0x37aa <fputc>
    3162:	d7 fc       	sbrc	r13, 7
    3164:	06 c0       	rjmp	.+12     	; 0x3172 <vfprintf+0x3b8>
    3166:	c1 14       	cp	r12, r1
    3168:	d1 04       	cpc	r13, r1
    316a:	41 f4       	brne	.+16     	; 0x317c <vfprintf+0x3c2>
    316c:	ec 85       	ldd	r30, Y+12	; 0x0c
    316e:	e4 ff       	sbrs	r30, 4
    3170:	05 c0       	rjmp	.+10     	; 0x317c <vfprintf+0x3c2>
    3172:	d1 94       	neg	r13
    3174:	c1 94       	neg	r12
    3176:	d1 08       	sbc	r13, r1
    3178:	8d e2       	ldi	r24, 0x2D	; 45
    317a:	01 c0       	rjmp	.+2      	; 0x317e <vfprintf+0x3c4>
    317c:	8b e2       	ldi	r24, 0x2B	; 43
    317e:	b7 01       	movw	r22, r14
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	13 d3       	rcall	.+1574   	; 0x37aa <fputc>
    3184:	80 e3       	ldi	r24, 0x30	; 48
    3186:	2a e0       	ldi	r18, 0x0A	; 10
    3188:	c2 16       	cp	r12, r18
    318a:	d1 04       	cpc	r13, r1
    318c:	2c f0       	brlt	.+10     	; 0x3198 <vfprintf+0x3de>
    318e:	8f 5f       	subi	r24, 0xFF	; 255
    3190:	fa e0       	ldi	r31, 0x0A	; 10
    3192:	cf 1a       	sub	r12, r31
    3194:	d1 08       	sbc	r13, r1
    3196:	f7 cf       	rjmp	.-18     	; 0x3186 <vfprintf+0x3cc>
    3198:	b7 01       	movw	r22, r14
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	06 d3       	rcall	.+1548   	; 0x37aa <fputc>
    319e:	b7 01       	movw	r22, r14
    31a0:	c6 01       	movw	r24, r12
    31a2:	c0 96       	adiw	r24, 0x30	; 48
    31a4:	02 d3       	rcall	.+1540   	; 0x37aa <fputc>
    31a6:	49 c1       	rjmp	.+658    	; 0x343a <vfprintf+0x680>
    31a8:	83 36       	cpi	r24, 0x63	; 99
    31aa:	31 f0       	breq	.+12     	; 0x31b8 <vfprintf+0x3fe>
    31ac:	83 37       	cpi	r24, 0x73	; 115
    31ae:	79 f0       	breq	.+30     	; 0x31ce <vfprintf+0x414>
    31b0:	83 35       	cpi	r24, 0x53	; 83
    31b2:	09 f0       	breq	.+2      	; 0x31b6 <vfprintf+0x3fc>
    31b4:	52 c0       	rjmp	.+164    	; 0x325a <vfprintf+0x4a0>
    31b6:	1f c0       	rjmp	.+62     	; 0x31f6 <vfprintf+0x43c>
    31b8:	56 01       	movw	r10, r12
    31ba:	32 e0       	ldi	r19, 0x02	; 2
    31bc:	a3 0e       	add	r10, r19
    31be:	b1 1c       	adc	r11, r1
    31c0:	f6 01       	movw	r30, r12
    31c2:	80 81       	ld	r24, Z
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	01 e0       	ldi	r16, 0x01	; 1
    31c8:	10 e0       	ldi	r17, 0x00	; 0
    31ca:	63 01       	movw	r12, r6
    31cc:	11 c0       	rjmp	.+34     	; 0x31f0 <vfprintf+0x436>
    31ce:	56 01       	movw	r10, r12
    31d0:	f2 e0       	ldi	r31, 0x02	; 2
    31d2:	af 0e       	add	r10, r31
    31d4:	b1 1c       	adc	r11, r1
    31d6:	f6 01       	movw	r30, r12
    31d8:	c0 80       	ld	r12, Z
    31da:	d1 80       	ldd	r13, Z+1	; 0x01
    31dc:	96 fe       	sbrs	r9, 6
    31de:	03 c0       	rjmp	.+6      	; 0x31e6 <vfprintf+0x42c>
    31e0:	61 2f       	mov	r22, r17
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	02 c0       	rjmp	.+4      	; 0x31ea <vfprintf+0x430>
    31e6:	6f ef       	ldi	r22, 0xFF	; 255
    31e8:	7f ef       	ldi	r23, 0xFF	; 255
    31ea:	c6 01       	movw	r24, r12
    31ec:	cb d2       	rcall	.+1430   	; 0x3784 <strnlen>
    31ee:	8c 01       	movw	r16, r24
    31f0:	f9 2d       	mov	r31, r9
    31f2:	ff 77       	andi	r31, 0x7F	; 127
    31f4:	13 c0       	rjmp	.+38     	; 0x321c <vfprintf+0x462>
    31f6:	56 01       	movw	r10, r12
    31f8:	22 e0       	ldi	r18, 0x02	; 2
    31fa:	a2 0e       	add	r10, r18
    31fc:	b1 1c       	adc	r11, r1
    31fe:	f6 01       	movw	r30, r12
    3200:	c0 80       	ld	r12, Z
    3202:	d1 80       	ldd	r13, Z+1	; 0x01
    3204:	96 fe       	sbrs	r9, 6
    3206:	03 c0       	rjmp	.+6      	; 0x320e <vfprintf+0x454>
    3208:	61 2f       	mov	r22, r17
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <vfprintf+0x458>
    320e:	6f ef       	ldi	r22, 0xFF	; 255
    3210:	7f ef       	ldi	r23, 0xFF	; 255
    3212:	c6 01       	movw	r24, r12
    3214:	a3 d2       	rcall	.+1350   	; 0x375c <strnlen_P>
    3216:	8c 01       	movw	r16, r24
    3218:	f9 2d       	mov	r31, r9
    321a:	f0 68       	ori	r31, 0x80	; 128
    321c:	9f 2e       	mov	r9, r31
    321e:	f3 fd       	sbrc	r31, 3
    3220:	18 c0       	rjmp	.+48     	; 0x3252 <vfprintf+0x498>
    3222:	85 2d       	mov	r24, r5
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	08 17       	cp	r16, r24
    3228:	19 07       	cpc	r17, r25
    322a:	98 f4       	brcc	.+38     	; 0x3252 <vfprintf+0x498>
    322c:	b7 01       	movw	r22, r14
    322e:	80 e2       	ldi	r24, 0x20	; 32
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	bb d2       	rcall	.+1398   	; 0x37aa <fputc>
    3234:	5a 94       	dec	r5
    3236:	f5 cf       	rjmp	.-22     	; 0x3222 <vfprintf+0x468>
    3238:	f6 01       	movw	r30, r12
    323a:	97 fc       	sbrc	r9, 7
    323c:	85 91       	lpm	r24, Z+
    323e:	97 fe       	sbrs	r9, 7
    3240:	81 91       	ld	r24, Z+
    3242:	6f 01       	movw	r12, r30
    3244:	b7 01       	movw	r22, r14
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	b0 d2       	rcall	.+1376   	; 0x37aa <fputc>
    324a:	51 10       	cpse	r5, r1
    324c:	5a 94       	dec	r5
    324e:	01 50       	subi	r16, 0x01	; 1
    3250:	11 09       	sbc	r17, r1
    3252:	01 15       	cp	r16, r1
    3254:	11 05       	cpc	r17, r1
    3256:	81 f7       	brne	.-32     	; 0x3238 <vfprintf+0x47e>
    3258:	f0 c0       	rjmp	.+480    	; 0x343a <vfprintf+0x680>
    325a:	84 36       	cpi	r24, 0x64	; 100
    325c:	11 f0       	breq	.+4      	; 0x3262 <vfprintf+0x4a8>
    325e:	89 36       	cpi	r24, 0x69	; 105
    3260:	59 f5       	brne	.+86     	; 0x32b8 <vfprintf+0x4fe>
    3262:	56 01       	movw	r10, r12
    3264:	97 fe       	sbrs	r9, 7
    3266:	09 c0       	rjmp	.+18     	; 0x327a <vfprintf+0x4c0>
    3268:	24 e0       	ldi	r18, 0x04	; 4
    326a:	a2 0e       	add	r10, r18
    326c:	b1 1c       	adc	r11, r1
    326e:	f6 01       	movw	r30, r12
    3270:	60 81       	ld	r22, Z
    3272:	71 81       	ldd	r23, Z+1	; 0x01
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	0a c0       	rjmp	.+20     	; 0x328e <vfprintf+0x4d4>
    327a:	f2 e0       	ldi	r31, 0x02	; 2
    327c:	af 0e       	add	r10, r31
    327e:	b1 1c       	adc	r11, r1
    3280:	f6 01       	movw	r30, r12
    3282:	60 81       	ld	r22, Z
    3284:	71 81       	ldd	r23, Z+1	; 0x01
    3286:	07 2e       	mov	r0, r23
    3288:	00 0c       	add	r0, r0
    328a:	88 0b       	sbc	r24, r24
    328c:	99 0b       	sbc	r25, r25
    328e:	f9 2d       	mov	r31, r9
    3290:	ff 76       	andi	r31, 0x6F	; 111
    3292:	9f 2e       	mov	r9, r31
    3294:	97 ff       	sbrs	r25, 7
    3296:	09 c0       	rjmp	.+18     	; 0x32aa <vfprintf+0x4f0>
    3298:	90 95       	com	r25
    329a:	80 95       	com	r24
    329c:	70 95       	com	r23
    329e:	61 95       	neg	r22
    32a0:	7f 4f       	sbci	r23, 0xFF	; 255
    32a2:	8f 4f       	sbci	r24, 0xFF	; 255
    32a4:	9f 4f       	sbci	r25, 0xFF	; 255
    32a6:	f0 68       	ori	r31, 0x80	; 128
    32a8:	9f 2e       	mov	r9, r31
    32aa:	2a e0       	ldi	r18, 0x0A	; 10
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	a3 01       	movw	r20, r6
    32b0:	27 d3       	rcall	.+1614   	; 0x3900 <__ultoa_invert>
    32b2:	c8 2e       	mov	r12, r24
    32b4:	c6 18       	sub	r12, r6
    32b6:	3e c0       	rjmp	.+124    	; 0x3334 <vfprintf+0x57a>
    32b8:	09 2d       	mov	r16, r9
    32ba:	85 37       	cpi	r24, 0x75	; 117
    32bc:	21 f4       	brne	.+8      	; 0x32c6 <vfprintf+0x50c>
    32be:	0f 7e       	andi	r16, 0xEF	; 239
    32c0:	2a e0       	ldi	r18, 0x0A	; 10
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	1d c0       	rjmp	.+58     	; 0x3300 <vfprintf+0x546>
    32c6:	09 7f       	andi	r16, 0xF9	; 249
    32c8:	8f 36       	cpi	r24, 0x6F	; 111
    32ca:	91 f0       	breq	.+36     	; 0x32f0 <vfprintf+0x536>
    32cc:	18 f4       	brcc	.+6      	; 0x32d4 <vfprintf+0x51a>
    32ce:	88 35       	cpi	r24, 0x58	; 88
    32d0:	59 f0       	breq	.+22     	; 0x32e8 <vfprintf+0x52e>
    32d2:	bc c0       	rjmp	.+376    	; 0x344c <vfprintf+0x692>
    32d4:	80 37       	cpi	r24, 0x70	; 112
    32d6:	19 f0       	breq	.+6      	; 0x32de <vfprintf+0x524>
    32d8:	88 37       	cpi	r24, 0x78	; 120
    32da:	11 f0       	breq	.+4      	; 0x32e0 <vfprintf+0x526>
    32dc:	b7 c0       	rjmp	.+366    	; 0x344c <vfprintf+0x692>
    32de:	00 61       	ori	r16, 0x10	; 16
    32e0:	04 ff       	sbrs	r16, 4
    32e2:	09 c0       	rjmp	.+18     	; 0x32f6 <vfprintf+0x53c>
    32e4:	04 60       	ori	r16, 0x04	; 4
    32e6:	07 c0       	rjmp	.+14     	; 0x32f6 <vfprintf+0x53c>
    32e8:	94 fe       	sbrs	r9, 4
    32ea:	08 c0       	rjmp	.+16     	; 0x32fc <vfprintf+0x542>
    32ec:	06 60       	ori	r16, 0x06	; 6
    32ee:	06 c0       	rjmp	.+12     	; 0x32fc <vfprintf+0x542>
    32f0:	28 e0       	ldi	r18, 0x08	; 8
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	05 c0       	rjmp	.+10     	; 0x3300 <vfprintf+0x546>
    32f6:	20 e1       	ldi	r18, 0x10	; 16
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <vfprintf+0x546>
    32fc:	20 e1       	ldi	r18, 0x10	; 16
    32fe:	32 e0       	ldi	r19, 0x02	; 2
    3300:	56 01       	movw	r10, r12
    3302:	07 ff       	sbrs	r16, 7
    3304:	09 c0       	rjmp	.+18     	; 0x3318 <vfprintf+0x55e>
    3306:	84 e0       	ldi	r24, 0x04	; 4
    3308:	a8 0e       	add	r10, r24
    330a:	b1 1c       	adc	r11, r1
    330c:	f6 01       	movw	r30, r12
    330e:	60 81       	ld	r22, Z
    3310:	71 81       	ldd	r23, Z+1	; 0x01
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	93 81       	ldd	r25, Z+3	; 0x03
    3316:	08 c0       	rjmp	.+16     	; 0x3328 <vfprintf+0x56e>
    3318:	f2 e0       	ldi	r31, 0x02	; 2
    331a:	af 0e       	add	r10, r31
    331c:	b1 1c       	adc	r11, r1
    331e:	f6 01       	movw	r30, r12
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a3 01       	movw	r20, r6
    332a:	ea d2       	rcall	.+1492   	; 0x3900 <__ultoa_invert>
    332c:	c8 2e       	mov	r12, r24
    332e:	c6 18       	sub	r12, r6
    3330:	0f 77       	andi	r16, 0x7F	; 127
    3332:	90 2e       	mov	r9, r16
    3334:	96 fe       	sbrs	r9, 6
    3336:	0b c0       	rjmp	.+22     	; 0x334e <vfprintf+0x594>
    3338:	09 2d       	mov	r16, r9
    333a:	0e 7f       	andi	r16, 0xFE	; 254
    333c:	c1 16       	cp	r12, r17
    333e:	50 f4       	brcc	.+20     	; 0x3354 <vfprintf+0x59a>
    3340:	94 fe       	sbrs	r9, 4
    3342:	0a c0       	rjmp	.+20     	; 0x3358 <vfprintf+0x59e>
    3344:	92 fc       	sbrc	r9, 2
    3346:	08 c0       	rjmp	.+16     	; 0x3358 <vfprintf+0x59e>
    3348:	09 2d       	mov	r16, r9
    334a:	0e 7e       	andi	r16, 0xEE	; 238
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <vfprintf+0x59e>
    334e:	dc 2c       	mov	r13, r12
    3350:	09 2d       	mov	r16, r9
    3352:	03 c0       	rjmp	.+6      	; 0x335a <vfprintf+0x5a0>
    3354:	dc 2c       	mov	r13, r12
    3356:	01 c0       	rjmp	.+2      	; 0x335a <vfprintf+0x5a0>
    3358:	d1 2e       	mov	r13, r17
    335a:	04 ff       	sbrs	r16, 4
    335c:	0d c0       	rjmp	.+26     	; 0x3378 <vfprintf+0x5be>
    335e:	fe 01       	movw	r30, r28
    3360:	ec 0d       	add	r30, r12
    3362:	f1 1d       	adc	r31, r1
    3364:	80 81       	ld	r24, Z
    3366:	80 33       	cpi	r24, 0x30	; 48
    3368:	11 f4       	brne	.+4      	; 0x336e <vfprintf+0x5b4>
    336a:	09 7e       	andi	r16, 0xE9	; 233
    336c:	09 c0       	rjmp	.+18     	; 0x3380 <vfprintf+0x5c6>
    336e:	02 ff       	sbrs	r16, 2
    3370:	06 c0       	rjmp	.+12     	; 0x337e <vfprintf+0x5c4>
    3372:	d3 94       	inc	r13
    3374:	d3 94       	inc	r13
    3376:	04 c0       	rjmp	.+8      	; 0x3380 <vfprintf+0x5c6>
    3378:	80 2f       	mov	r24, r16
    337a:	86 78       	andi	r24, 0x86	; 134
    337c:	09 f0       	breq	.+2      	; 0x3380 <vfprintf+0x5c6>
    337e:	d3 94       	inc	r13
    3380:	03 fd       	sbrc	r16, 3
    3382:	10 c0       	rjmp	.+32     	; 0x33a4 <vfprintf+0x5ea>
    3384:	00 ff       	sbrs	r16, 0
    3386:	06 c0       	rjmp	.+12     	; 0x3394 <vfprintf+0x5da>
    3388:	1c 2d       	mov	r17, r12
    338a:	d5 14       	cp	r13, r5
    338c:	78 f4       	brcc	.+30     	; 0x33ac <vfprintf+0x5f2>
    338e:	15 0d       	add	r17, r5
    3390:	1d 19       	sub	r17, r13
    3392:	0c c0       	rjmp	.+24     	; 0x33ac <vfprintf+0x5f2>
    3394:	d5 14       	cp	r13, r5
    3396:	50 f4       	brcc	.+20     	; 0x33ac <vfprintf+0x5f2>
    3398:	b7 01       	movw	r22, r14
    339a:	80 e2       	ldi	r24, 0x20	; 32
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	05 d2       	rcall	.+1034   	; 0x37aa <fputc>
    33a0:	d3 94       	inc	r13
    33a2:	f8 cf       	rjmp	.-16     	; 0x3394 <vfprintf+0x5da>
    33a4:	d5 14       	cp	r13, r5
    33a6:	10 f4       	brcc	.+4      	; 0x33ac <vfprintf+0x5f2>
    33a8:	5d 18       	sub	r5, r13
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <vfprintf+0x5f4>
    33ac:	51 2c       	mov	r5, r1
    33ae:	04 ff       	sbrs	r16, 4
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <vfprintf+0x616>
    33b2:	b7 01       	movw	r22, r14
    33b4:	80 e3       	ldi	r24, 0x30	; 48
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	f8 d1       	rcall	.+1008   	; 0x37aa <fputc>
    33ba:	02 ff       	sbrs	r16, 2
    33bc:	16 c0       	rjmp	.+44     	; 0x33ea <vfprintf+0x630>
    33be:	01 fd       	sbrc	r16, 1
    33c0:	03 c0       	rjmp	.+6      	; 0x33c8 <vfprintf+0x60e>
    33c2:	88 e7       	ldi	r24, 0x78	; 120
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <vfprintf+0x612>
    33c8:	88 e5       	ldi	r24, 0x58	; 88
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	b7 01       	movw	r22, r14
    33ce:	0c c0       	rjmp	.+24     	; 0x33e8 <vfprintf+0x62e>
    33d0:	80 2f       	mov	r24, r16
    33d2:	86 78       	andi	r24, 0x86	; 134
    33d4:	51 f0       	breq	.+20     	; 0x33ea <vfprintf+0x630>
    33d6:	01 ff       	sbrs	r16, 1
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <vfprintf+0x624>
    33da:	8b e2       	ldi	r24, 0x2B	; 43
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <vfprintf+0x626>
    33de:	80 e2       	ldi	r24, 0x20	; 32
    33e0:	07 fd       	sbrc	r16, 7
    33e2:	8d e2       	ldi	r24, 0x2D	; 45
    33e4:	b7 01       	movw	r22, r14
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	e0 d1       	rcall	.+960    	; 0x37aa <fputc>
    33ea:	c1 16       	cp	r12, r17
    33ec:	30 f4       	brcc	.+12     	; 0x33fa <vfprintf+0x640>
    33ee:	b7 01       	movw	r22, r14
    33f0:	80 e3       	ldi	r24, 0x30	; 48
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	da d1       	rcall	.+948    	; 0x37aa <fputc>
    33f6:	11 50       	subi	r17, 0x01	; 1
    33f8:	f8 cf       	rjmp	.-16     	; 0x33ea <vfprintf+0x630>
    33fa:	ca 94       	dec	r12
    33fc:	f3 01       	movw	r30, r6
    33fe:	ec 0d       	add	r30, r12
    3400:	f1 1d       	adc	r31, r1
    3402:	80 81       	ld	r24, Z
    3404:	b7 01       	movw	r22, r14
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	d0 d1       	rcall	.+928    	; 0x37aa <fputc>
    340a:	c1 10       	cpse	r12, r1
    340c:	f6 cf       	rjmp	.-20     	; 0x33fa <vfprintf+0x640>
    340e:	15 c0       	rjmp	.+42     	; 0x343a <vfprintf+0x680>
    3410:	f4 e0       	ldi	r31, 0x04	; 4
    3412:	f5 15       	cp	r31, r5
    3414:	50 f5       	brcc	.+84     	; 0x346a <vfprintf+0x6b0>
    3416:	84 e0       	ldi	r24, 0x04	; 4
    3418:	58 1a       	sub	r5, r24
    341a:	93 fe       	sbrs	r9, 3
    341c:	1e c0       	rjmp	.+60     	; 0x345a <vfprintf+0x6a0>
    341e:	01 11       	cpse	r16, r1
    3420:	25 c0       	rjmp	.+74     	; 0x346c <vfprintf+0x6b2>
    3422:	2c 85       	ldd	r18, Y+12	; 0x0c
    3424:	23 ff       	sbrs	r18, 3
    3426:	27 c0       	rjmp	.+78     	; 0x3476 <vfprintf+0x6bc>
    3428:	04 ee       	ldi	r16, 0xE4	; 228
    342a:	10 e0       	ldi	r17, 0x00	; 0
    342c:	39 2d       	mov	r19, r9
    342e:	30 71       	andi	r19, 0x10	; 16
    3430:	93 2e       	mov	r9, r19
    3432:	f8 01       	movw	r30, r16
    3434:	84 91       	lpm	r24, Z
    3436:	81 11       	cpse	r24, r1
    3438:	21 c0       	rjmp	.+66     	; 0x347c <vfprintf+0x6c2>
    343a:	55 20       	and	r5, r5
    343c:	09 f4       	brne	.+2      	; 0x3440 <vfprintf+0x686>
    343e:	fc cc       	rjmp	.-1544   	; 0x2e38 <vfprintf+0x7e>
    3440:	b7 01       	movw	r22, r14
    3442:	80 e2       	ldi	r24, 0x20	; 32
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	b1 d1       	rcall	.+866    	; 0x37aa <fputc>
    3448:	5a 94       	dec	r5
    344a:	f7 cf       	rjmp	.-18     	; 0x343a <vfprintf+0x680>
    344c:	f7 01       	movw	r30, r14
    344e:	86 81       	ldd	r24, Z+6	; 0x06
    3450:	97 81       	ldd	r25, Z+7	; 0x07
    3452:	23 c0       	rjmp	.+70     	; 0x349a <vfprintf+0x6e0>
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	9f ef       	ldi	r25, 0xFF	; 255
    3458:	20 c0       	rjmp	.+64     	; 0x349a <vfprintf+0x6e0>
    345a:	b7 01       	movw	r22, r14
    345c:	80 e2       	ldi	r24, 0x20	; 32
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a4 d1       	rcall	.+840    	; 0x37aa <fputc>
    3462:	5a 94       	dec	r5
    3464:	51 10       	cpse	r5, r1
    3466:	f9 cf       	rjmp	.-14     	; 0x345a <vfprintf+0x6a0>
    3468:	da cf       	rjmp	.-76     	; 0x341e <vfprintf+0x664>
    346a:	51 2c       	mov	r5, r1
    346c:	b7 01       	movw	r22, r14
    346e:	80 2f       	mov	r24, r16
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9b d1       	rcall	.+822    	; 0x37aa <fputc>
    3474:	d6 cf       	rjmp	.-84     	; 0x3422 <vfprintf+0x668>
    3476:	08 ee       	ldi	r16, 0xE8	; 232
    3478:	10 e0       	ldi	r17, 0x00	; 0
    347a:	d8 cf       	rjmp	.-80     	; 0x342c <vfprintf+0x672>
    347c:	91 10       	cpse	r9, r1
    347e:	80 52       	subi	r24, 0x20	; 32
    3480:	b7 01       	movw	r22, r14
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	92 d1       	rcall	.+804    	; 0x37aa <fputc>
    3486:	0f 5f       	subi	r16, 0xFF	; 255
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	d3 cf       	rjmp	.-90     	; 0x3432 <vfprintf+0x678>
    348c:	23 e0       	ldi	r18, 0x03	; 3
    348e:	25 15       	cp	r18, r5
    3490:	10 f4       	brcc	.+4      	; 0x3496 <vfprintf+0x6dc>
    3492:	83 e0       	ldi	r24, 0x03	; 3
    3494:	c1 cf       	rjmp	.-126    	; 0x3418 <vfprintf+0x65e>
    3496:	51 2c       	mov	r5, r1
    3498:	c4 cf       	rjmp	.-120    	; 0x3422 <vfprintf+0x668>
    349a:	60 96       	adiw	r28, 0x10	; 16
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
    34ae:	ff 90       	pop	r15
    34b0:	ef 90       	pop	r14
    34b2:	df 90       	pop	r13
    34b4:	cf 90       	pop	r12
    34b6:	bf 90       	pop	r11
    34b8:	af 90       	pop	r10
    34ba:	9f 90       	pop	r9
    34bc:	8f 90       	pop	r8
    34be:	7f 90       	pop	r7
    34c0:	6f 90       	pop	r6
    34c2:	5f 90       	pop	r5
    34c4:	4f 90       	pop	r4
    34c6:	3f 90       	pop	r3
    34c8:	2f 90       	pop	r2
    34ca:	08 95       	ret

000034cc <__udivmodsi4>:
    34cc:	a1 e2       	ldi	r26, 0x21	; 33
    34ce:	1a 2e       	mov	r1, r26
    34d0:	aa 1b       	sub	r26, r26
    34d2:	bb 1b       	sub	r27, r27
    34d4:	fd 01       	movw	r30, r26
    34d6:	0d c0       	rjmp	.+26     	; 0x34f2 <__udivmodsi4_ep>

000034d8 <__udivmodsi4_loop>:
    34d8:	aa 1f       	adc	r26, r26
    34da:	bb 1f       	adc	r27, r27
    34dc:	ee 1f       	adc	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	a2 17       	cp	r26, r18
    34e2:	b3 07       	cpc	r27, r19
    34e4:	e4 07       	cpc	r30, r20
    34e6:	f5 07       	cpc	r31, r21
    34e8:	20 f0       	brcs	.+8      	; 0x34f2 <__udivmodsi4_ep>
    34ea:	a2 1b       	sub	r26, r18
    34ec:	b3 0b       	sbc	r27, r19
    34ee:	e4 0b       	sbc	r30, r20
    34f0:	f5 0b       	sbc	r31, r21

000034f2 <__udivmodsi4_ep>:
    34f2:	66 1f       	adc	r22, r22
    34f4:	77 1f       	adc	r23, r23
    34f6:	88 1f       	adc	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	1a 94       	dec	r1
    34fc:	69 f7       	brne	.-38     	; 0x34d8 <__udivmodsi4_loop>
    34fe:	60 95       	com	r22
    3500:	70 95       	com	r23
    3502:	80 95       	com	r24
    3504:	90 95       	com	r25
    3506:	9b 01       	movw	r18, r22
    3508:	ac 01       	movw	r20, r24
    350a:	bd 01       	movw	r22, r26
    350c:	cf 01       	movw	r24, r30
    350e:	08 95       	ret

00003510 <__divmodsi4>:
    3510:	05 2e       	mov	r0, r21
    3512:	97 fb       	bst	r25, 7
    3514:	16 f4       	brtc	.+4      	; 0x351a <__divmodsi4+0xa>
    3516:	00 94       	com	r0
    3518:	0f d0       	rcall	.+30     	; 0x3538 <__negsi2>
    351a:	57 fd       	sbrc	r21, 7
    351c:	05 d0       	rcall	.+10     	; 0x3528 <__divmodsi4_neg2>
    351e:	d6 df       	rcall	.-84     	; 0x34cc <__udivmodsi4>
    3520:	07 fc       	sbrc	r0, 7
    3522:	02 d0       	rcall	.+4      	; 0x3528 <__divmodsi4_neg2>
    3524:	46 f4       	brtc	.+16     	; 0x3536 <__divmodsi4_exit>
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <__negsi2>

00003528 <__divmodsi4_neg2>:
    3528:	50 95       	com	r21
    352a:	40 95       	com	r20
    352c:	30 95       	com	r19
    352e:	21 95       	neg	r18
    3530:	3f 4f       	sbci	r19, 0xFF	; 255
    3532:	4f 4f       	sbci	r20, 0xFF	; 255
    3534:	5f 4f       	sbci	r21, 0xFF	; 255

00003536 <__divmodsi4_exit>:
    3536:	08 95       	ret

00003538 <__negsi2>:
    3538:	90 95       	com	r25
    353a:	80 95       	com	r24
    353c:	70 95       	com	r23
    353e:	61 95       	neg	r22
    3540:	7f 4f       	sbci	r23, 0xFF	; 255
    3542:	8f 4f       	sbci	r24, 0xFF	; 255
    3544:	9f 4f       	sbci	r25, 0xFF	; 255
    3546:	08 95       	ret

00003548 <__umulhisi3>:
    3548:	a2 9f       	mul	r26, r18
    354a:	b0 01       	movw	r22, r0
    354c:	b3 9f       	mul	r27, r19
    354e:	c0 01       	movw	r24, r0
    3550:	a3 9f       	mul	r26, r19
    3552:	70 0d       	add	r23, r0
    3554:	81 1d       	adc	r24, r1
    3556:	11 24       	eor	r1, r1
    3558:	91 1d       	adc	r25, r1
    355a:	b2 9f       	mul	r27, r18
    355c:	70 0d       	add	r23, r0
    355e:	81 1d       	adc	r24, r1
    3560:	11 24       	eor	r1, r1
    3562:	91 1d       	adc	r25, r1
    3564:	08 95       	ret

00003566 <__usmulhisi3>:
    3566:	f0 df       	rcall	.-32     	; 0x3548 <__umulhisi3>

00003568 <__usmulhisi3_tail>:
    3568:	b7 ff       	sbrs	r27, 7
    356a:	08 95       	ret
    356c:	82 1b       	sub	r24, r18
    356e:	93 0b       	sbc	r25, r19
    3570:	08 95       	ret

00003572 <atoi>:
    3572:	fc 01       	movw	r30, r24
    3574:	88 27       	eor	r24, r24
    3576:	99 27       	eor	r25, r25
    3578:	e8 94       	clt
    357a:	21 91       	ld	r18, Z+
    357c:	20 32       	cpi	r18, 0x20	; 32
    357e:	e9 f3       	breq	.-6      	; 0x357a <atoi+0x8>
    3580:	29 30       	cpi	r18, 0x09	; 9
    3582:	10 f0       	brcs	.+4      	; 0x3588 <atoi+0x16>
    3584:	2e 30       	cpi	r18, 0x0E	; 14
    3586:	c8 f3       	brcs	.-14     	; 0x357a <atoi+0x8>
    3588:	2b 32       	cpi	r18, 0x2B	; 43
    358a:	39 f0       	breq	.+14     	; 0x359a <atoi+0x28>
    358c:	2d 32       	cpi	r18, 0x2D	; 45
    358e:	31 f4       	brne	.+12     	; 0x359c <atoi+0x2a>
    3590:	68 94       	set
    3592:	03 c0       	rjmp	.+6      	; 0x359a <atoi+0x28>
    3594:	02 d1       	rcall	.+516    	; 0x379a <__mulhi_const_10>
    3596:	82 0f       	add	r24, r18
    3598:	91 1d       	adc	r25, r1
    359a:	21 91       	ld	r18, Z+
    359c:	20 53       	subi	r18, 0x30	; 48
    359e:	2a 30       	cpi	r18, 0x0A	; 10
    35a0:	c8 f3       	brcs	.-14     	; 0x3594 <atoi+0x22>
    35a2:	1e f4       	brtc	.+6      	; 0x35aa <atoi+0x38>
    35a4:	90 95       	com	r25
    35a6:	81 95       	neg	r24
    35a8:	9f 4f       	sbci	r25, 0xFF	; 255
    35aa:	08 95       	ret

000035ac <__ftoa_engine>:
    35ac:	28 30       	cpi	r18, 0x08	; 8
    35ae:	08 f0       	brcs	.+2      	; 0x35b2 <__ftoa_engine+0x6>
    35b0:	27 e0       	ldi	r18, 0x07	; 7
    35b2:	33 27       	eor	r19, r19
    35b4:	da 01       	movw	r26, r20
    35b6:	99 0f       	add	r25, r25
    35b8:	31 1d       	adc	r19, r1
    35ba:	87 fd       	sbrc	r24, 7
    35bc:	91 60       	ori	r25, 0x01	; 1
    35be:	00 96       	adiw	r24, 0x00	; 0
    35c0:	61 05       	cpc	r22, r1
    35c2:	71 05       	cpc	r23, r1
    35c4:	39 f4       	brne	.+14     	; 0x35d4 <__ftoa_engine+0x28>
    35c6:	32 60       	ori	r19, 0x02	; 2
    35c8:	2e 5f       	subi	r18, 0xFE	; 254
    35ca:	3d 93       	st	X+, r19
    35cc:	30 e3       	ldi	r19, 0x30	; 48
    35ce:	2a 95       	dec	r18
    35d0:	e1 f7       	brne	.-8      	; 0x35ca <__ftoa_engine+0x1e>
    35d2:	08 95       	ret
    35d4:	9f 3f       	cpi	r25, 0xFF	; 255
    35d6:	30 f0       	brcs	.+12     	; 0x35e4 <__ftoa_engine+0x38>
    35d8:	80 38       	cpi	r24, 0x80	; 128
    35da:	71 05       	cpc	r23, r1
    35dc:	61 05       	cpc	r22, r1
    35de:	09 f0       	breq	.+2      	; 0x35e2 <__ftoa_engine+0x36>
    35e0:	3c 5f       	subi	r19, 0xFC	; 252
    35e2:	3c 5f       	subi	r19, 0xFC	; 252
    35e4:	3d 93       	st	X+, r19
    35e6:	91 30       	cpi	r25, 0x01	; 1
    35e8:	08 f0       	brcs	.+2      	; 0x35ec <__ftoa_engine+0x40>
    35ea:	80 68       	ori	r24, 0x80	; 128
    35ec:	91 1d       	adc	r25, r1
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	1f 93       	push	r17
    35f4:	0f 93       	push	r16
    35f6:	ff 92       	push	r15
    35f8:	ef 92       	push	r14
    35fa:	19 2f       	mov	r17, r25
    35fc:	98 7f       	andi	r25, 0xF8	; 248
    35fe:	96 95       	lsr	r25
    3600:	e9 2f       	mov	r30, r25
    3602:	96 95       	lsr	r25
    3604:	96 95       	lsr	r25
    3606:	e9 0f       	add	r30, r25
    3608:	ff 27       	eor	r31, r31
    360a:	ea 5b       	subi	r30, 0xBA	; 186
    360c:	fe 4f       	sbci	r31, 0xFE	; 254
    360e:	99 27       	eor	r25, r25
    3610:	33 27       	eor	r19, r19
    3612:	ee 24       	eor	r14, r14
    3614:	ff 24       	eor	r15, r15
    3616:	a7 01       	movw	r20, r14
    3618:	e7 01       	movw	r28, r14
    361a:	05 90       	lpm	r0, Z+
    361c:	08 94       	sec
    361e:	07 94       	ror	r0
    3620:	28 f4       	brcc	.+10     	; 0x362c <__ftoa_engine+0x80>
    3622:	36 0f       	add	r19, r22
    3624:	e7 1e       	adc	r14, r23
    3626:	f8 1e       	adc	r15, r24
    3628:	49 1f       	adc	r20, r25
    362a:	51 1d       	adc	r21, r1
    362c:	66 0f       	add	r22, r22
    362e:	77 1f       	adc	r23, r23
    3630:	88 1f       	adc	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	06 94       	lsr	r0
    3636:	a1 f7       	brne	.-24     	; 0x3620 <__ftoa_engine+0x74>
    3638:	05 90       	lpm	r0, Z+
    363a:	07 94       	ror	r0
    363c:	28 f4       	brcc	.+10     	; 0x3648 <__ftoa_engine+0x9c>
    363e:	e7 0e       	add	r14, r23
    3640:	f8 1e       	adc	r15, r24
    3642:	49 1f       	adc	r20, r25
    3644:	56 1f       	adc	r21, r22
    3646:	c1 1d       	adc	r28, r1
    3648:	77 0f       	add	r23, r23
    364a:	88 1f       	adc	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	66 1f       	adc	r22, r22
    3650:	06 94       	lsr	r0
    3652:	a1 f7       	brne	.-24     	; 0x363c <__ftoa_engine+0x90>
    3654:	05 90       	lpm	r0, Z+
    3656:	07 94       	ror	r0
    3658:	28 f4       	brcc	.+10     	; 0x3664 <__ftoa_engine+0xb8>
    365a:	f8 0e       	add	r15, r24
    365c:	49 1f       	adc	r20, r25
    365e:	56 1f       	adc	r21, r22
    3660:	c7 1f       	adc	r28, r23
    3662:	d1 1d       	adc	r29, r1
    3664:	88 0f       	add	r24, r24
    3666:	99 1f       	adc	r25, r25
    3668:	66 1f       	adc	r22, r22
    366a:	77 1f       	adc	r23, r23
    366c:	06 94       	lsr	r0
    366e:	a1 f7       	brne	.-24     	; 0x3658 <__ftoa_engine+0xac>
    3670:	05 90       	lpm	r0, Z+
    3672:	07 94       	ror	r0
    3674:	20 f4       	brcc	.+8      	; 0x367e <__ftoa_engine+0xd2>
    3676:	49 0f       	add	r20, r25
    3678:	56 1f       	adc	r21, r22
    367a:	c7 1f       	adc	r28, r23
    367c:	d8 1f       	adc	r29, r24
    367e:	99 0f       	add	r25, r25
    3680:	66 1f       	adc	r22, r22
    3682:	77 1f       	adc	r23, r23
    3684:	88 1f       	adc	r24, r24
    3686:	06 94       	lsr	r0
    3688:	a9 f7       	brne	.-22     	; 0x3674 <__ftoa_engine+0xc8>
    368a:	84 91       	lpm	r24, Z
    368c:	10 95       	com	r17
    368e:	17 70       	andi	r17, 0x07	; 7
    3690:	41 f0       	breq	.+16     	; 0x36a2 <__ftoa_engine+0xf6>
    3692:	d6 95       	lsr	r29
    3694:	c7 95       	ror	r28
    3696:	57 95       	ror	r21
    3698:	47 95       	ror	r20
    369a:	f7 94       	ror	r15
    369c:	e7 94       	ror	r14
    369e:	1a 95       	dec	r17
    36a0:	c1 f7       	brne	.-16     	; 0x3692 <__ftoa_engine+0xe6>
    36a2:	ec ee       	ldi	r30, 0xEC	; 236
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	68 94       	set
    36a8:	15 90       	lpm	r1, Z+
    36aa:	15 91       	lpm	r17, Z+
    36ac:	35 91       	lpm	r19, Z+
    36ae:	65 91       	lpm	r22, Z+
    36b0:	95 91       	lpm	r25, Z+
    36b2:	05 90       	lpm	r0, Z+
    36b4:	7f e2       	ldi	r23, 0x2F	; 47
    36b6:	73 95       	inc	r23
    36b8:	e1 18       	sub	r14, r1
    36ba:	f1 0a       	sbc	r15, r17
    36bc:	43 0b       	sbc	r20, r19
    36be:	56 0b       	sbc	r21, r22
    36c0:	c9 0b       	sbc	r28, r25
    36c2:	d0 09       	sbc	r29, r0
    36c4:	c0 f7       	brcc	.-16     	; 0x36b6 <__ftoa_engine+0x10a>
    36c6:	e1 0c       	add	r14, r1
    36c8:	f1 1e       	adc	r15, r17
    36ca:	43 1f       	adc	r20, r19
    36cc:	56 1f       	adc	r21, r22
    36ce:	c9 1f       	adc	r28, r25
    36d0:	d0 1d       	adc	r29, r0
    36d2:	7e f4       	brtc	.+30     	; 0x36f2 <__ftoa_engine+0x146>
    36d4:	70 33       	cpi	r23, 0x30	; 48
    36d6:	11 f4       	brne	.+4      	; 0x36dc <__ftoa_engine+0x130>
    36d8:	8a 95       	dec	r24
    36da:	e6 cf       	rjmp	.-52     	; 0x36a8 <__ftoa_engine+0xfc>
    36dc:	e8 94       	clt
    36de:	01 50       	subi	r16, 0x01	; 1
    36e0:	30 f0       	brcs	.+12     	; 0x36ee <__ftoa_engine+0x142>
    36e2:	08 0f       	add	r16, r24
    36e4:	0a f4       	brpl	.+2      	; 0x36e8 <__ftoa_engine+0x13c>
    36e6:	00 27       	eor	r16, r16
    36e8:	02 17       	cp	r16, r18
    36ea:	08 f4       	brcc	.+2      	; 0x36ee <__ftoa_engine+0x142>
    36ec:	20 2f       	mov	r18, r16
    36ee:	23 95       	inc	r18
    36f0:	02 2f       	mov	r16, r18
    36f2:	7a 33       	cpi	r23, 0x3A	; 58
    36f4:	28 f0       	brcs	.+10     	; 0x3700 <__ftoa_engine+0x154>
    36f6:	79 e3       	ldi	r23, 0x39	; 57
    36f8:	7d 93       	st	X+, r23
    36fa:	2a 95       	dec	r18
    36fc:	e9 f7       	brne	.-6      	; 0x36f8 <__ftoa_engine+0x14c>
    36fe:	10 c0       	rjmp	.+32     	; 0x3720 <__ftoa_engine+0x174>
    3700:	7d 93       	st	X+, r23
    3702:	2a 95       	dec	r18
    3704:	89 f6       	brne	.-94     	; 0x36a8 <__ftoa_engine+0xfc>
    3706:	06 94       	lsr	r0
    3708:	97 95       	ror	r25
    370a:	67 95       	ror	r22
    370c:	37 95       	ror	r19
    370e:	17 95       	ror	r17
    3710:	17 94       	ror	r1
    3712:	e1 18       	sub	r14, r1
    3714:	f1 0a       	sbc	r15, r17
    3716:	43 0b       	sbc	r20, r19
    3718:	56 0b       	sbc	r21, r22
    371a:	c9 0b       	sbc	r28, r25
    371c:	d0 09       	sbc	r29, r0
    371e:	98 f0       	brcs	.+38     	; 0x3746 <__ftoa_engine+0x19a>
    3720:	23 95       	inc	r18
    3722:	7e 91       	ld	r23, -X
    3724:	73 95       	inc	r23
    3726:	7a 33       	cpi	r23, 0x3A	; 58
    3728:	08 f0       	brcs	.+2      	; 0x372c <__ftoa_engine+0x180>
    372a:	70 e3       	ldi	r23, 0x30	; 48
    372c:	7c 93       	st	X, r23
    372e:	20 13       	cpse	r18, r16
    3730:	b8 f7       	brcc	.-18     	; 0x3720 <__ftoa_engine+0x174>
    3732:	7e 91       	ld	r23, -X
    3734:	70 61       	ori	r23, 0x10	; 16
    3736:	7d 93       	st	X+, r23
    3738:	30 f0       	brcs	.+12     	; 0x3746 <__ftoa_engine+0x19a>
    373a:	83 95       	inc	r24
    373c:	71 e3       	ldi	r23, 0x31	; 49
    373e:	7d 93       	st	X+, r23
    3740:	70 e3       	ldi	r23, 0x30	; 48
    3742:	2a 95       	dec	r18
    3744:	e1 f7       	brne	.-8      	; 0x373e <__ftoa_engine+0x192>
    3746:	11 24       	eor	r1, r1
    3748:	ef 90       	pop	r14
    374a:	ff 90       	pop	r15
    374c:	0f 91       	pop	r16
    374e:	1f 91       	pop	r17
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	99 27       	eor	r25, r25
    3756:	87 fd       	sbrc	r24, 7
    3758:	90 95       	com	r25
    375a:	08 95       	ret

0000375c <strnlen_P>:
    375c:	fc 01       	movw	r30, r24
    375e:	05 90       	lpm	r0, Z+
    3760:	61 50       	subi	r22, 0x01	; 1
    3762:	70 40       	sbci	r23, 0x00	; 0
    3764:	01 10       	cpse	r0, r1
    3766:	d8 f7       	brcc	.-10     	; 0x375e <strnlen_P+0x2>
    3768:	80 95       	com	r24
    376a:	90 95       	com	r25
    376c:	8e 0f       	add	r24, r30
    376e:	9f 1f       	adc	r25, r31
    3770:	08 95       	ret

00003772 <strcmp>:
    3772:	fb 01       	movw	r30, r22
    3774:	dc 01       	movw	r26, r24
    3776:	8d 91       	ld	r24, X+
    3778:	01 90       	ld	r0, Z+
    377a:	80 19       	sub	r24, r0
    377c:	01 10       	cpse	r0, r1
    377e:	d9 f3       	breq	.-10     	; 0x3776 <strcmp+0x4>
    3780:	99 0b       	sbc	r25, r25
    3782:	08 95       	ret

00003784 <strnlen>:
    3784:	fc 01       	movw	r30, r24
    3786:	61 50       	subi	r22, 0x01	; 1
    3788:	70 40       	sbci	r23, 0x00	; 0
    378a:	01 90       	ld	r0, Z+
    378c:	01 10       	cpse	r0, r1
    378e:	d8 f7       	brcc	.-10     	; 0x3786 <strnlen+0x2>
    3790:	80 95       	com	r24
    3792:	90 95       	com	r25
    3794:	8e 0f       	add	r24, r30
    3796:	9f 1f       	adc	r25, r31
    3798:	08 95       	ret

0000379a <__mulhi_const_10>:
    379a:	7a e0       	ldi	r23, 0x0A	; 10
    379c:	97 9f       	mul	r25, r23
    379e:	90 2d       	mov	r25, r0
    37a0:	87 9f       	mul	r24, r23
    37a2:	80 2d       	mov	r24, r0
    37a4:	91 0d       	add	r25, r1
    37a6:	11 24       	eor	r1, r1
    37a8:	08 95       	ret

000037aa <fputc>:
    37aa:	0f 93       	push	r16
    37ac:	1f 93       	push	r17
    37ae:	cf 93       	push	r28
    37b0:	df 93       	push	r29
    37b2:	fb 01       	movw	r30, r22
    37b4:	23 81       	ldd	r18, Z+3	; 0x03
    37b6:	21 fd       	sbrc	r18, 1
    37b8:	03 c0       	rjmp	.+6      	; 0x37c0 <fputc+0x16>
    37ba:	8f ef       	ldi	r24, 0xFF	; 255
    37bc:	9f ef       	ldi	r25, 0xFF	; 255
    37be:	2c c0       	rjmp	.+88     	; 0x3818 <fputc+0x6e>
    37c0:	22 ff       	sbrs	r18, 2
    37c2:	16 c0       	rjmp	.+44     	; 0x37f0 <fputc+0x46>
    37c4:	46 81       	ldd	r20, Z+6	; 0x06
    37c6:	57 81       	ldd	r21, Z+7	; 0x07
    37c8:	24 81       	ldd	r18, Z+4	; 0x04
    37ca:	35 81       	ldd	r19, Z+5	; 0x05
    37cc:	42 17       	cp	r20, r18
    37ce:	53 07       	cpc	r21, r19
    37d0:	44 f4       	brge	.+16     	; 0x37e2 <fputc+0x38>
    37d2:	a0 81       	ld	r26, Z
    37d4:	b1 81       	ldd	r27, Z+1	; 0x01
    37d6:	9d 01       	movw	r18, r26
    37d8:	2f 5f       	subi	r18, 0xFF	; 255
    37da:	3f 4f       	sbci	r19, 0xFF	; 255
    37dc:	31 83       	std	Z+1, r19	; 0x01
    37de:	20 83       	st	Z, r18
    37e0:	8c 93       	st	X, r24
    37e2:	26 81       	ldd	r18, Z+6	; 0x06
    37e4:	37 81       	ldd	r19, Z+7	; 0x07
    37e6:	2f 5f       	subi	r18, 0xFF	; 255
    37e8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ea:	37 83       	std	Z+7, r19	; 0x07
    37ec:	26 83       	std	Z+6, r18	; 0x06
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <fputc+0x6e>
    37f0:	8b 01       	movw	r16, r22
    37f2:	ec 01       	movw	r28, r24
    37f4:	fb 01       	movw	r30, r22
    37f6:	00 84       	ldd	r0, Z+8	; 0x08
    37f8:	f1 85       	ldd	r31, Z+9	; 0x09
    37fa:	e0 2d       	mov	r30, r0
    37fc:	19 95       	eicall
    37fe:	89 2b       	or	r24, r25
    3800:	e1 f6       	brne	.-72     	; 0x37ba <fputc+0x10>
    3802:	d8 01       	movw	r26, r16
    3804:	16 96       	adiw	r26, 0x06	; 6
    3806:	8d 91       	ld	r24, X+
    3808:	9c 91       	ld	r25, X
    380a:	17 97       	sbiw	r26, 0x07	; 7
    380c:	01 96       	adiw	r24, 0x01	; 1
    380e:	17 96       	adiw	r26, 0x07	; 7
    3810:	9c 93       	st	X, r25
    3812:	8e 93       	st	-X, r24
    3814:	16 97       	sbiw	r26, 0x06	; 6
    3816:	ce 01       	movw	r24, r28
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	1f 91       	pop	r17
    381e:	0f 91       	pop	r16
    3820:	08 95       	ret

00003822 <printf>:
    3822:	cf 93       	push	r28
    3824:	df 93       	push	r29
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	ae 01       	movw	r20, r28
    382c:	4a 5f       	subi	r20, 0xFA	; 250
    382e:	5f 4f       	sbci	r21, 0xFF	; 255
    3830:	fa 01       	movw	r30, r20
    3832:	61 91       	ld	r22, Z+
    3834:	71 91       	ld	r23, Z+
    3836:	af 01       	movw	r20, r30
    3838:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <__iob+0x2>
    383c:	90 91 0f 0a 	lds	r25, 0x0A0F	; 0x800a0f <__iob+0x3>
    3840:	bc da       	rcall	.-2696   	; 0x2dba <vfprintf>
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	08 95       	ret

00003848 <printf_P>:
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	ae 01       	movw	r20, r28
    3856:	48 5f       	subi	r20, 0xF8	; 248
    3858:	5f 4f       	sbci	r21, 0xFF	; 255
    385a:	da 01       	movw	r26, r20
    385c:	6d 91       	ld	r22, X+
    385e:	7d 91       	ld	r23, X+
    3860:	ad 01       	movw	r20, r26
    3862:	0c e0       	ldi	r16, 0x0C	; 12
    3864:	1a e0       	ldi	r17, 0x0A	; 10
    3866:	f8 01       	movw	r30, r16
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	dc 01       	movw	r26, r24
    386e:	13 96       	adiw	r26, 0x03	; 3
    3870:	2c 91       	ld	r18, X
    3872:	13 97       	sbiw	r26, 0x03	; 3
    3874:	28 60       	ori	r18, 0x08	; 8
    3876:	13 96       	adiw	r26, 0x03	; 3
    3878:	2c 93       	st	X, r18
    387a:	9f da       	rcall	.-2754   	; 0x2dba <vfprintf>
    387c:	d8 01       	movw	r26, r16
    387e:	12 96       	adiw	r26, 0x02	; 2
    3880:	ed 91       	ld	r30, X+
    3882:	fc 91       	ld	r31, X
    3884:	13 97       	sbiw	r26, 0x03	; 3
    3886:	23 81       	ldd	r18, Z+3	; 0x03
    3888:	27 7f       	andi	r18, 0xF7	; 247
    388a:	23 83       	std	Z+3, r18	; 0x03
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	08 95       	ret

00003896 <putchar>:
    3896:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    389a:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    389e:	85 cf       	rjmp	.-246    	; 0x37aa <fputc>

000038a0 <puts>:
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <__iob+0x2>
    38ac:	f0 91 0f 0a 	lds	r31, 0x0A0F	; 0x800a0f <__iob+0x3>
    38b0:	23 81       	ldd	r18, Z+3	; 0x03
    38b2:	21 ff       	sbrs	r18, 1
    38b4:	1b c0       	rjmp	.+54     	; 0x38ec <puts+0x4c>
    38b6:	8c 01       	movw	r16, r24
    38b8:	d0 e0       	ldi	r29, 0x00	; 0
    38ba:	c0 e0       	ldi	r28, 0x00	; 0
    38bc:	f8 01       	movw	r30, r16
    38be:	81 91       	ld	r24, Z+
    38c0:	8f 01       	movw	r16, r30
    38c2:	60 91 0e 0a 	lds	r22, 0x0A0E	; 0x800a0e <__iob+0x2>
    38c6:	70 91 0f 0a 	lds	r23, 0x0A0F	; 0x800a0f <__iob+0x3>
    38ca:	db 01       	movw	r26, r22
    38cc:	18 96       	adiw	r26, 0x08	; 8
    38ce:	ed 91       	ld	r30, X+
    38d0:	fc 91       	ld	r31, X
    38d2:	19 97       	sbiw	r26, 0x09	; 9
    38d4:	88 23       	and	r24, r24
    38d6:	31 f0       	breq	.+12     	; 0x38e4 <puts+0x44>
    38d8:	19 95       	eicall
    38da:	89 2b       	or	r24, r25
    38dc:	79 f3       	breq	.-34     	; 0x38bc <puts+0x1c>
    38de:	df ef       	ldi	r29, 0xFF	; 255
    38e0:	cf ef       	ldi	r28, 0xFF	; 255
    38e2:	ec cf       	rjmp	.-40     	; 0x38bc <puts+0x1c>
    38e4:	8a e0       	ldi	r24, 0x0A	; 10
    38e6:	19 95       	eicall
    38e8:	89 2b       	or	r24, r25
    38ea:	19 f0       	breq	.+6      	; 0x38f2 <puts+0x52>
    38ec:	8f ef       	ldi	r24, 0xFF	; 255
    38ee:	9f ef       	ldi	r25, 0xFF	; 255
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <puts+0x56>
    38f2:	8d 2f       	mov	r24, r29
    38f4:	9c 2f       	mov	r25, r28
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	08 95       	ret

00003900 <__ultoa_invert>:
    3900:	fa 01       	movw	r30, r20
    3902:	aa 27       	eor	r26, r26
    3904:	28 30       	cpi	r18, 0x08	; 8
    3906:	51 f1       	breq	.+84     	; 0x395c <__ultoa_invert+0x5c>
    3908:	20 31       	cpi	r18, 0x10	; 16
    390a:	81 f1       	breq	.+96     	; 0x396c <__ultoa_invert+0x6c>
    390c:	e8 94       	clt
    390e:	6f 93       	push	r22
    3910:	6e 7f       	andi	r22, 0xFE	; 254
    3912:	6e 5f       	subi	r22, 0xFE	; 254
    3914:	7f 4f       	sbci	r23, 0xFF	; 255
    3916:	8f 4f       	sbci	r24, 0xFF	; 255
    3918:	9f 4f       	sbci	r25, 0xFF	; 255
    391a:	af 4f       	sbci	r26, 0xFF	; 255
    391c:	b1 e0       	ldi	r27, 0x01	; 1
    391e:	3e d0       	rcall	.+124    	; 0x399c <__ultoa_invert+0x9c>
    3920:	b4 e0       	ldi	r27, 0x04	; 4
    3922:	3c d0       	rcall	.+120    	; 0x399c <__ultoa_invert+0x9c>
    3924:	67 0f       	add	r22, r23
    3926:	78 1f       	adc	r23, r24
    3928:	89 1f       	adc	r24, r25
    392a:	9a 1f       	adc	r25, r26
    392c:	a1 1d       	adc	r26, r1
    392e:	68 0f       	add	r22, r24
    3930:	79 1f       	adc	r23, r25
    3932:	8a 1f       	adc	r24, r26
    3934:	91 1d       	adc	r25, r1
    3936:	a1 1d       	adc	r26, r1
    3938:	6a 0f       	add	r22, r26
    393a:	71 1d       	adc	r23, r1
    393c:	81 1d       	adc	r24, r1
    393e:	91 1d       	adc	r25, r1
    3940:	a1 1d       	adc	r26, r1
    3942:	20 d0       	rcall	.+64     	; 0x3984 <__ultoa_invert+0x84>
    3944:	09 f4       	brne	.+2      	; 0x3948 <__ultoa_invert+0x48>
    3946:	68 94       	set
    3948:	3f 91       	pop	r19
    394a:	2a e0       	ldi	r18, 0x0A	; 10
    394c:	26 9f       	mul	r18, r22
    394e:	11 24       	eor	r1, r1
    3950:	30 19       	sub	r19, r0
    3952:	30 5d       	subi	r19, 0xD0	; 208
    3954:	31 93       	st	Z+, r19
    3956:	de f6       	brtc	.-74     	; 0x390e <__ultoa_invert+0xe>
    3958:	cf 01       	movw	r24, r30
    395a:	08 95       	ret
    395c:	46 2f       	mov	r20, r22
    395e:	47 70       	andi	r20, 0x07	; 7
    3960:	40 5d       	subi	r20, 0xD0	; 208
    3962:	41 93       	st	Z+, r20
    3964:	b3 e0       	ldi	r27, 0x03	; 3
    3966:	0f d0       	rcall	.+30     	; 0x3986 <__ultoa_invert+0x86>
    3968:	c9 f7       	brne	.-14     	; 0x395c <__ultoa_invert+0x5c>
    396a:	f6 cf       	rjmp	.-20     	; 0x3958 <__ultoa_invert+0x58>
    396c:	46 2f       	mov	r20, r22
    396e:	4f 70       	andi	r20, 0x0F	; 15
    3970:	40 5d       	subi	r20, 0xD0	; 208
    3972:	4a 33       	cpi	r20, 0x3A	; 58
    3974:	18 f0       	brcs	.+6      	; 0x397c <__ultoa_invert+0x7c>
    3976:	49 5d       	subi	r20, 0xD9	; 217
    3978:	31 fd       	sbrc	r19, 1
    397a:	40 52       	subi	r20, 0x20	; 32
    397c:	41 93       	st	Z+, r20
    397e:	02 d0       	rcall	.+4      	; 0x3984 <__ultoa_invert+0x84>
    3980:	a9 f7       	brne	.-22     	; 0x396c <__ultoa_invert+0x6c>
    3982:	ea cf       	rjmp	.-44     	; 0x3958 <__ultoa_invert+0x58>
    3984:	b4 e0       	ldi	r27, 0x04	; 4
    3986:	a6 95       	lsr	r26
    3988:	97 95       	ror	r25
    398a:	87 95       	ror	r24
    398c:	77 95       	ror	r23
    398e:	67 95       	ror	r22
    3990:	ba 95       	dec	r27
    3992:	c9 f7       	brne	.-14     	; 0x3986 <__ultoa_invert+0x86>
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	61 05       	cpc	r22, r1
    3998:	71 05       	cpc	r23, r1
    399a:	08 95       	ret
    399c:	9b 01       	movw	r18, r22
    399e:	ac 01       	movw	r20, r24
    39a0:	0a 2e       	mov	r0, r26
    39a2:	06 94       	lsr	r0
    39a4:	57 95       	ror	r21
    39a6:	47 95       	ror	r20
    39a8:	37 95       	ror	r19
    39aa:	27 95       	ror	r18
    39ac:	ba 95       	dec	r27
    39ae:	c9 f7       	brne	.-14     	; 0x39a2 <__ultoa_invert+0xa2>
    39b0:	62 0f       	add	r22, r18
    39b2:	73 1f       	adc	r23, r19
    39b4:	84 1f       	adc	r24, r20
    39b6:	95 1f       	adc	r25, r21
    39b8:	a0 1d       	adc	r26, r0
    39ba:	08 95       	ret

000039bc <_exit>:
    39bc:	f8 94       	cli

000039be <__stop_program>:
    39be:	ff cf       	rjmp	.-2      	; 0x39be <__stop_program>

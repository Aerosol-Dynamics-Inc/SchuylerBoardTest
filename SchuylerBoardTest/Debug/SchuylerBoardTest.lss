
SchuylerBoardTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000063a  00800200  000038f4  00003988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  0080083a  0080083a  00003fc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006238  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025e3  00000000  00000000  0000a880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000392d  00000000  00000000  0000ce63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012a0  00000000  00000000  00010790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000155c  00000000  00000000  00011a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f03  00000000  00000000  00012f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00016e8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c3       	rjmp	.+1688   	; 0x69a <__ctors_end>
       2:	00 00       	nop
       4:	6b c3       	rjmp	.+1750   	; 0x6dc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c3       	rjmp	.+1746   	; 0x6dc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c3       	rjmp	.+1742   	; 0x6dc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c3       	rjmp	.+1738   	; 0x6dc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c3       	rjmp	.+1734   	; 0x6dc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c3       	rjmp	.+1730   	; 0x6dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c3       	rjmp	.+1726   	; 0x6dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c5       	rjmp	.+3014   	; 0xbe8 <__vector_8>
      22:	00 00       	nop
      24:	5b c3       	rjmp	.+1718   	; 0x6dc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c3       	rjmp	.+1714   	; 0x6dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c3       	rjmp	.+1710   	; 0x6dc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c3       	rjmp	.+1706   	; 0x6dc <__bad_interrupt>
      32:	00 00       	nop
      34:	e3 c5       	rjmp	.+3014   	; 0xbfc <__vector_13>
      36:	00 00       	nop
      38:	51 c3       	rjmp	.+1698   	; 0x6dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c3       	rjmp	.+1694   	; 0x6dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c3       	rjmp	.+1690   	; 0x6dc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c3       	rjmp	.+1686   	; 0x6dc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c3       	rjmp	.+1682   	; 0x6dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c3       	rjmp	.+1678   	; 0x6dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c3       	rjmp	.+1674   	; 0x6dc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c3       	rjmp	.+1670   	; 0x6dc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c3       	rjmp	.+1666   	; 0x6dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c3       	rjmp	.+1662   	; 0x6dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c3       	rjmp	.+1658   	; 0x6dc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__vector_25>
      68:	39 c3       	rjmp	.+1650   	; 0x6dc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c3       	rjmp	.+1646   	; 0x6dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c3       	rjmp	.+1642   	; 0x6dc <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c7       	rjmp	.+3740   	; 0xf12 <__vector_29>
      76:	00 00       	nop
      78:	31 c3       	rjmp	.+1634   	; 0x6dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c3       	rjmp	.+1630   	; 0x6dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c3       	rjmp	.+1626   	; 0x6dc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c3       	rjmp	.+1622   	; 0x6dc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c3       	rjmp	.+1618   	; 0x6dc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 c3       	rjmp	.+1614   	; 0x6dc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__vector_36>
      94:	23 c3       	rjmp	.+1606   	; 0x6dc <__bad_interrupt>
      96:	00 00       	nop
      98:	21 c3       	rjmp	.+1602   	; 0x6dc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1f c3       	rjmp	.+1598   	; 0x6dc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1d c3       	rjmp	.+1594   	; 0x6dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1b c3       	rjmp	.+1590   	; 0x6dc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	19 c3       	rjmp	.+1586   	; 0x6dc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	17 c3       	rjmp	.+1582   	; 0x6dc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	15 c3       	rjmp	.+1578   	; 0x6dc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	13 c3       	rjmp	.+1574   	; 0x6dc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	11 c3       	rjmp	.+1570   	; 0x6dc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0f c3       	rjmp	.+1566   	; 0x6dc <__bad_interrupt>
      be:	00 00       	nop
      c0:	0d c3       	rjmp	.+1562   	; 0x6dc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0b c3       	rjmp	.+1558   	; 0x6dc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	09 c3       	rjmp	.+1554   	; 0x6dc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	07 c3       	rjmp	.+1550   	; 0x6dc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	05 c3       	rjmp	.+1546   	; 0x6dc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	03 c3       	rjmp	.+1542   	; 0x6dc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	01 c3       	rjmp	.+1538   	; 0x6dc <__bad_interrupt>
      da:	00 00       	nop
      dc:	ff c2       	rjmp	.+1534   	; 0x6dc <__bad_interrupt>
      de:	00 00       	nop
      e0:	fd c2       	rjmp	.+1530   	; 0x6dc <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__c.2491>:
     1e6:	46 4c 41 53 48 20 72 65 61 64 20 66 61 69 6c 65     FLASH read faile
     1f6:	64 0a 00                                            d..

000001f9 <__c.2475>:
     1f9:	46 4c 41 53 48 20 77 72 69 74 65 20 66 61 69 6c     FLASH write fail
     209:	65 64 0a 00                                         ed..

0000020d <__c.2046>:
     20d:	75 6e 6b 6e 6f 77 6e 20 41 44 43 32 35 31 38 20     unknown ADC2518 
     21d:	6f 73 63 69 6c 61 74 6f 72 53 70 65 65 64 0a 00     oscilatorSpeed..

0000022d <__c.2037>:
     22d:	4f 53 52 3a 20 6c 6f 67 32 73 61 6d 70 6c 65 73     OSR: log2samples
     23d:	20 3e 20 37 00                                       > 7.

00000242 <__c.2082>:
     242:	0a 00                                               ..

00000244 <__c.2077>:
     244:	25 64 20 00                                         %d .

00000248 <__c.2071>:
     248:	45 52 52 4f 52 3a 20 4e 6f 20 41 44 43 20 43 68     ERROR: No ADC Ch
     258:	61 6e 6e 65 6c 73 20 61 63 74 69 76 65 0a 00        annels active..

00000267 <__c.2042>:
     267:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     277:	49 6e 74 65 72 6e 61 6c 20 46 61 75 6c 74 20 25     Internal Fault %
     287:	64 0a 00                                            d..

0000028a <__c.2040>:
     28a:	0a 53 74 61 6c 65 20 50 72 65 73 73 75 72 65 20     .Stale Pressure 
     29a:	52 65 61 64 69 6e 67 20 25 64 0a 00                 Reading %d..

000002a6 <__c.2038>:
     2a6:	0a 53 65 6e 73 6f 72 20 25 64 20 69 6e 20 50 72     .Sensor %d in Pr
     2b6:	6f 67 72 61 6d 6d 69 6e 67 20 4d 6f 64 65 0a 00     ogramming Mode..

000002c6 <__c.2180>:
     2c6:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 41 6c     spi_FlashEraseAl
     2d6:	6c 42 6c 6f 63 6b 73 3a 20 45 72 61 73 65 20 66     lBlocks: Erase f
     2e6:	61 69 6c 75 72 65 20 61 74 20 62 6c 6f 63 6b 20     ailure at block 
     2f6:	25 64 0a 00                                         %d..

000002fa <__c.2178>:
     2fa:	45 72 61 73 69 6e 67 20 62 6c 6f 63 6b 20 25 64     Erasing block %d
     30a:	0a 00                                               ..

0000030c <__c.2170>:
     30c:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     31c:	6f 63 6b 3a 20 41 64 64 72 65 73 73 20 65 78 63     ock: Address exc
     32c:	65 65 64 73 20 61 76 61 69 6c 61 62 6c 65 20 62     eeds available b
     33c:	6c 6f 63 6b 73 0a 00                                locks..

00000343 <__c.2168>:
     343:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     353:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     363:	20 72 65 61 64 79 0a 00                              ready..

0000036b <__c.2166>:
     36b:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     37b:	6f 63 6b 3a 20 46 6c 61 73 68 20 77 6f 6e 27 74     ock: Flash won't
     38b:	20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00         enable write..

0000039a <__c.2164>:
     39a:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     3aa:	6f 63 6b 3a 20 46 6c 61 73 68 20 6e 65 76 65 72     ock: Flash never
     3ba:	20 72 65 61 64 79 20 61 66 74 65 72 20 62 6c 6f      ready after blo
     3ca:	63 6b 20 65 72 61 73 65 0a 00                       ck erase..

000003d4 <__c.2162>:
     3d4:	73 70 69 5f 46 6c 61 73 68 45 72 61 73 65 42 6c     spi_FlashEraseBl
     3e4:	6f 63 6b 3a 20 57 72 69 74 65 20 64 69 61 73 62     ock: Write diasb
     3f4:	6c 65 20 66 61 69 6c 65 64 0a 00                    le failed..

000003ff <__c.2155>:
     3ff:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 31     spi_FlashRead: 1
     40f:	73 74 20 70 61 67 65 20 72 65 61 64 20 66 61 69     st page read fai
     41f:	6c 65 64 0a 00                                      led..

00000424 <__c.2153>:
     424:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 3a 20 32     spi_FlashRead: 2
     434:	6e 64 20 70 61 67 65 20 72 65 61 64 20 66 61 69     nd page read fai
     444:	6c 65 64 0a 00                                      led..

00000449 <__c.2141>:
     449:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     459:	6d 50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72     mPage: buffer cr
     469:	6f 73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64     osses page bound
     479:	61 72 79 0a 00                                      ary..

0000047e <__c.2139>:
     47e:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     48e:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     49e:	65 72 20 72 65 61 64 79 0a 00                       er ready..

000004a8 <__c.2137>:
     4a8:	73 70 69 5f 46 6c 61 73 68 52 65 61 64 46 72 6f     spi_FlashReadFro
     4b8:	6d 50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76     mPage: Flash nev
     4c8:	65 72 20 72 65 61 64 79 20 61 66 74 65 72 20 70     er ready after p
     4d8:	61 67 65 20 72 65 61 64 0a 00                       age read..

000004e2 <__c.2122>:
     4e2:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     4f2:	31 73 74 20 70 61 67 65 20 77 72 69 74 65 20 66     1st page write f
     502:	61 69 6c 65 64 0a 00                                ailed..

00000509 <__c.2120>:
     509:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 3a 20     spi_FlashWrite: 
     519:	32 6e 64 20 70 61 67 65 20 77 72 69 74 65 20 66     2nd page write f
     529:	61 69 6c 65 64 0a 00                                ailed..

00000530 <__c.2108>:
     530:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     540:	50 61 67 65 3a 20 62 75 66 66 65 72 20 63 72 6f     Page: buffer cro
     550:	73 73 65 73 20 70 61 67 65 20 62 6f 75 6e 64 61     sses page bounda
     560:	72 79 0a 00                                         ry..

00000564 <__c.2106>:
     564:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     574:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     584:	72 20 72 65 61 64 79 0a 00                          r ready..

0000058d <__c.2104>:
     58d:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     59d:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     5ad:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 70 61     r ready after pa
     5bd:	67 65 20 72 65 61 64 0a 00                          ge read..

000005c6 <__c.2102>:
     5c6:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     5d6:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     5e6:	74 20 65 6e 61 62 6c 65 20 77 72 69 74 65 0a 00     t enable write..

000005f6 <__c.2100>:
     5f6:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     606:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     616:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     626:	74 61 20 6c 6f 61 64 0a 00                          ta load..

0000062f <__c.2098>:
     62f:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     63f:	50 61 67 65 3a 20 46 6c 61 73 68 20 6e 65 76 65     Page: Flash neve
     64f:	72 20 72 65 61 64 79 20 61 66 74 65 72 20 64 61     r ready after da
     65f:	74 61 20 6c 6f 61 64 0a 00                          ta load..

00000668 <__c.2096>:
     668:	73 70 69 5f 46 6c 61 73 68 57 72 69 74 65 54 6f     spi_FlashWriteTo
     678:	50 61 67 65 3a 20 46 6c 61 73 68 20 77 6f 6e 27     Page: Flash won'
     688:	74 20 64 69 73 61 62 6c 65 20 77 72 69 74 65 0a     t disable write.
	...

0000069a <__ctors_end>:
     69a:	11 24       	eor	r1, r1
     69c:	1f be       	out	0x3f, r1	; 63
     69e:	cf ef       	ldi	r28, 0xFF	; 255
     6a0:	d1 e2       	ldi	r29, 0x21	; 33
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	00 e0       	ldi	r16, 0x00	; 0
     6a8:	0c bf       	out	0x3c, r16	; 60

000006aa <__do_copy_data>:
     6aa:	18 e0       	ldi	r17, 0x08	; 8
     6ac:	a0 e0       	ldi	r26, 0x00	; 0
     6ae:	b2 e0       	ldi	r27, 0x02	; 2
     6b0:	e4 ef       	ldi	r30, 0xF4	; 244
     6b2:	f8 e3       	ldi	r31, 0x38	; 56
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	0b bf       	out	0x3b, r16	; 59
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <__do_copy_data+0x14>
     6ba:	07 90       	elpm	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	aa 33       	cpi	r26, 0x3A	; 58
     6c0:	b1 07       	cpc	r27, r17
     6c2:	d9 f7       	brne	.-10     	; 0x6ba <__do_copy_data+0x10>

000006c4 <__do_clear_bss>:
     6c4:	29 e0       	ldi	r18, 0x09	; 9
     6c6:	aa e3       	ldi	r26, 0x3A	; 58
     6c8:	b8 e0       	ldi	r27, 0x08	; 8
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <.do_clear_bss_start>

000006cc <.do_clear_bss_loop>:
     6cc:	1d 92       	st	X+, r1

000006ce <.do_clear_bss_start>:
     6ce:	a2 37       	cpi	r26, 0x72	; 114
     6d0:	b2 07       	cpc	r27, r18
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <.do_clear_bss_loop>
     6d4:	0e 94 d5 12 	call	0x25aa	; 0x25aa <main>
     6d8:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <_exit>

000006dc <__bad_interrupt>:
     6dc:	91 cc       	rjmp	.-1758   	; 0x0 <__vectors>

000006de <doFlashWriteTest>:

#define WRITE_TEST_SIZE 200
#define NUM_WRITES 10

void doFlashWriteTest(void)
{
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	c8 5c       	subi	r28, 0xC8	; 200
     6f2:	d1 09       	sbc	r29, r1
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     6fe:	10 e0       	ldi	r17, 0x00	; 0
void doFlashWriteTest(void)
{
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     706:	29 c0       	rjmp	.+82     	; 0x75a <doFlashWriteTest+0x7c>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
			buffer[j] = testChars[i];
     708:	e1 2f       	mov	r30, r17
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e1 5f       	subi	r30, 0xF1	; 241
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	90 81       	ld	r25, Z
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ec 0f       	add	r30, r28
     718:	fd 1f       	adc	r31, r29
     71a:	e8 0f       	add	r30, r24
     71c:	f1 1d       	adc	r31, r1
     71e:	90 83       	st	Z, r25
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++)
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	01 c0       	rjmp	.+2      	; 0x726 <doFlashWriteTest+0x48>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	88 3c       	cpi	r24, 0xC8	; 200
     728:	78 f3       	brcs	.-34     	; 0x708 <doFlashWriteTest+0x2a>
			buffer[j] = testChars[i];
		if (spi_FlashWrite(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
     72a:	28 ec       	ldi	r18, 0xC8	; 200
     72c:	ae 01       	movw	r20, r28
     72e:	4f 5f       	subi	r20, 0xFF	; 255
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	0e 94 26 0c 	call	0x184c	; 0x184c <spi_FlashWrite>
     73a:	88 3c       	cpi	r24, 0xC8	; 200
     73c:	41 f0       	breq	.+16     	; 0x74e <doFlashWriteTest+0x70>
		{
			printf_P(PSTR("FLASH write failed\n"));
     73e:	89 ef       	ldi	r24, 0xF9	; 249
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
		}
		address += WRITE_TEST_SIZE;
     74e:	88 ec       	ldi	r24, 0xC8	; 200
     750:	c8 0e       	add	r12, r24
     752:	d1 1c       	adc	r13, r1
     754:	e1 1c       	adc	r14, r1
     756:	f1 1c       	adc	r15, r1
	char* testChars = "0123456789";
	char buffer[WRITE_TEST_SIZE];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	1a 30       	cpi	r17, 0x0A	; 10
     75c:	18 f3       	brcs	.-58     	; 0x724 <doFlashWriteTest+0x46>
			printf_P(PSTR("FLASH write failed\n"));
		}
		address += WRITE_TEST_SIZE;
	}
	
}
     75e:	c8 53       	subi	r28, 0x38	; 56
     760:	df 4f       	sbci	r29, 0xFF	; 255
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	08 95       	ret

0000077c <doFlashReadTest>:

void doFlashReadTest(void)
{
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	c9 5c       	subi	r28, 0xC9	; 201
     790:	d1 09       	sbc	r29, r1
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
     79c:	8a e1       	ldi	r24, 0x1A	; 26
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     7a4:	10 e0       	ldi	r17, 0x00	; 0

void doFlashReadTest(void)
{
	char buffer[WRITE_TEST_SIZE+1];
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;
     7a6:	c1 2c       	mov	r12, r1
     7a8:	d1 2c       	mov	r13, r1
     7aa:	76 01       	movw	r14, r12

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     7ac:	3a c0       	rjmp	.+116    	; 0x822 <doFlashReadTest+0xa6>
	{
		for (uint8_t j = 0; j < WRITE_TEST_SIZE; j++) buffer[j] = (char) 0;
     7ae:	e1 e0       	ldi	r30, 0x01	; 1
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ec 0f       	add	r30, r28
     7b4:	fd 1f       	adc	r31, r29
     7b6:	e8 0f       	add	r30, r24
     7b8:	f1 1d       	adc	r31, r1
     7ba:	10 82       	st	Z, r1
     7bc:	8f 5f       	subi	r24, 0xFF	; 255
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <doFlashReadTest+0x46>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	88 3c       	cpi	r24, 0xC8	; 200
     7c4:	a0 f3       	brcs	.-24     	; 0x7ae <doFlashReadTest+0x32>
		printf("record %d:\n", i);
     7c6:	1f 92       	push	r1
     7c8:	1f 93       	push	r17
     7ca:	8e e2       	ldi	r24, 0x2E	; 46
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
		if (spi_FlashRead(address, buff, WRITE_TEST_SIZE) != WRITE_TEST_SIZE)
     7d6:	28 ec       	ldi	r18, 0xC8	; 200
     7d8:	ae 01       	movw	r20, r28
     7da:	4f 5f       	subi	r20, 0xFF	; 255
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <spi_FlashRead>
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	88 3c       	cpi	r24, 0xC8	; 200
     7f0:	49 f0       	breq	.+18     	; 0x804 <doFlashReadTest+0x88>
		{
			printf_P(PSTR("FLASH read failed\n"));
     7f2:	86 ee       	ldi	r24, 0xE6	; 230
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	09 c0       	rjmp	.+18     	; 0x816 <doFlashReadTest+0x9a>
		}
		else
		{
			buffer[WRITE_TEST_SIZE] = '\0';
     804:	c7 53       	subi	r28, 0x37	; 55
     806:	df 4f       	sbci	r29, 0xFF	; 255
     808:	18 82       	st	Y, r1
     80a:	c9 5c       	subi	r28, 0xC9	; 201
     80c:	d0 40       	sbci	r29, 0x00	; 0
			printf("%s\n",buffer);
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
		}
		address += WRITE_TEST_SIZE;
     816:	88 ec       	ldi	r24, 0xC8	; 200
     818:	c8 0e       	add	r12, r24
     81a:	d1 1c       	adc	r13, r1
     81c:	e1 1c       	adc	r14, r1
     81e:	f1 1c       	adc	r15, r1
	uint8_t* buff = (uint8_t*) &buffer;
	uint32_t address = 0;

	printf("\nReading from FLASH\n");
	
	for (uint8_t i = 0; i < NUM_WRITES; i++)
     820:	1f 5f       	subi	r17, 0xFF	; 255
     822:	1a 30       	cpi	r17, 0x0A	; 10
     824:	68 f2       	brcs	.-102    	; 0x7c0 <doFlashReadTest+0x44>
			printf("%s\n",buffer);
		}
		address += WRITE_TEST_SIZE;
	}
	
}
     826:	c7 53       	subi	r28, 0x37	; 55
     828:	df 4f       	sbci	r29, 0xFF	; 255
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	08 95       	ret

00000844 <doFlashEraseTest>:

void doFlashEraseTest(void)
{
	spi_FlashEraseAllBlocks();
     844:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <spi_FlashEraseAllBlocks>
     848:	08 95       	ret

0000084a <processCommand>:
void doFlashWriteTest(void);
void doFlashReadTest(void);
void doFlashEraseTest(void);

void processCommand(void)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
		// else
		if (buf[0] == 'A')	{
     84e:	c0 91 4c 09 	lds	r28, 0x094C	; 0x80094c <buf>
     852:	c1 34       	cpi	r28, 0x41	; 65
     854:	81 f5       	brne	.+96     	; 0x8b6 <processCommand+0x6c>
			if (buf[1] == 's')		ADC_rdSystemStatus();		
     856:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     85a:	83 37       	cpi	r24, 0x73	; 115
     85c:	11 f4       	brne	.+4      	; 0x862 <processCommand+0x18>
     85e:	37 d2       	rcall	.+1134   	; 0xcce <ADC_rdSystemStatus>
     860:	1b c0       	rjmp	.+54     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'm')	ADC_manualMode();
     862:	8d 36       	cpi	r24, 0x6D	; 109
     864:	11 f4       	brne	.+4      	; 0x86a <processCommand+0x20>
     866:	9b d2       	rcall	.+1334   	; 0xd9e <ADC_manualMode>
     868:	17 c0       	rjmp	.+46     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'c')	ADC_ReadManualModeAnalogCh(buf[2] - '0');
     86a:	83 36       	cpi	r24, 0x63	; 99
     86c:	29 f4       	brne	.+10     	; 0x878 <processCommand+0x2e>
     86e:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <buf+0x2>
     872:	80 53       	subi	r24, 0x30	; 48
     874:	98 d2       	rcall	.+1328   	; 0xda6 <ADC_ReadManualModeAnalogCh>
     876:	10 c0       	rjmp	.+32     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'o')	ADC_OverSample(buf[2] - '0');   // oversample 2^N   N<7
     878:	8f 36       	cpi	r24, 0x6F	; 111
     87a:	29 f4       	brne	.+10     	; 0x886 <processCommand+0x3c>
     87c:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <buf+0x2>
     880:	80 53       	subi	r24, 0x30	; 48
     882:	60 d2       	rcall	.+1216   	; 0xd44 <ADC_OverSample>
     884:	09 c0       	rjmp	.+18     	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'l')	ADC_OscSpeed(ADC2518_LowSpeedOSC);
     886:	8c 36       	cpi	r24, 0x6C	; 108
     888:	19 f4       	brne	.+6      	; 0x890 <processCommand+0x46>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	6c d2       	rcall	.+1240   	; 0xd66 <ADC_OscSpeed>
     88e:	04 c0       	rjmp	.+8      	; 0x898 <processCommand+0x4e>
			else if (buf[1] == 'h')	ADC_OscSpeed(ADC2518_HiSpeedOSC);
     890:	88 36       	cpi	r24, 0x68	; 104
     892:	11 f4       	brne	.+4      	; 0x898 <processCommand+0x4e>
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	67 d2       	rcall	.+1230   	; 0xd66 <ADC_OscSpeed>
     898:	8c e4       	ldi	r24, 0x4C	; 76
			printf("cmd %s--", buf);
     89a:	99 e0       	ldi	r25, 0x09	; 9
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	8a e3       	ldi	r24, 0x3A	; 58
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	96 c1       	rjmp	.+812    	; 0xbe2 <processCommand+0x398>
		}
//		else if (buf[0] == 'F')	{
//			FETstate(buf[1] -'0', buf[2]-'0');
//		}	
		else if (buf[0] == 'p')		readABSPress(); 
     8b6:	c0 37       	cpi	r28, 0x70	; 112
     8b8:	11 f4       	brne	.+4      	; 0x8be <processCommand+0x74>
     8ba:	17 d5       	rcall	.+2606   	; 0x12ea <readABSPress>
     8bc:	92 c1       	rjmp	.+804    	; 0xbe2 <processCommand+0x398>
		else if (buf[0] == 'P')		readDiffPress(); 
     8be:	c0 35       	cpi	r28, 0x50	; 80
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <processCommand+0x7c>
     8c2:	05 d5       	rcall	.+2570   	; 0x12ce <readDiffPress>
     8c4:	8e c1       	rjmp	.+796    	; 0xbe2 <processCommand+0x398>
     8c6:	63 e4       	ldi	r22, 0x43	; 67
		else if (strcmp(buf,"u47")==0)  readU47();
     8c8:	72 e0       	ldi	r23, 0x02	; 2
     8ca:	8c e4       	ldi	r24, 0x4C	; 76
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <strcmp>
     8d2:	89 2b       	or	r24, r25
     8d4:	11 f4       	brne	.+4      	; 0x8da <processCommand+0x90>
     8d6:	17 d5       	rcall	.+2606   	; 0x1306 <readU47>
     8d8:	84 c1       	rjmp	.+776    	; 0xbe2 <processCommand+0x398>
     8da:	cd 34       	cpi	r28, 0x4D	; 77

		else if (buf[0] == 'M')		getMuxConfiguration(); 
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <processCommand+0x9a>
     8de:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <getMuxConfiguration>
     8e2:	7f c1       	rjmp	.+766    	; 0xbe2 <processCommand+0x398>
     8e4:	c2 33       	cpi	r28, 0x32	; 50
		else if (buf[0] == '2')		setI2Cmux(atoi(buf+1));
     8e6:	39 f4       	brne	.+14     	; 0x8f6 <processCommand+0xac>
     8e8:	8d e4       	ldi	r24, 0x4D	; 77
     8ea:	99 e0       	ldi	r25, 0x09	; 9
     8ec:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <atoi>
     8f0:	0e 94 83 10 	call	0x2106	; 0x2106 <setI2Cmux>
     8f4:	76 c1       	rjmp	.+748    	; 0xbe2 <processCommand+0x398>
		
		else if (buf[0] == 'R')	{
     8f6:	c2 35       	cpi	r28, 0x52	; 82
     8f8:	61 f4       	brne	.+24     	; 0x912 <processCommand+0xc8>
			if (buf[1] == 'S') startRH_T_conversion();
     8fa:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     8fe:	83 35       	cpi	r24, 0x53	; 83
     900:	09 f4       	brne	.+2      	; 0x904 <processCommand+0xba>
     902:	0f d5       	rcall	.+2590   	; 0x1322 <startRH_T_conversion>
			if (buf[1] == 'R') readRH_T();
     904:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     908:	82 35       	cpi	r24, 0x52	; 82
     90a:	09 f0       	breq	.+2      	; 0x90e <processCommand+0xc4>
     90c:	6a c1       	rjmp	.+724    	; 0xbe2 <processCommand+0x398>
     90e:	1d d5       	rcall	.+2618   	; 0x134a <readRH_T>
     910:	68 c1       	rjmp	.+720    	; 0xbe2 <processCommand+0x398>
     912:	c2 37       	cpi	r28, 0x72	; 114
		}
		else if (buf[0] == 'r')		{ 
     914:	19 f4       	brne	.+6      	; 0x91c <processCommand+0xd2>
			RTC_config();
     916:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <RTC_config>
		}
		else if (buf[0] == 'a') {
     91a:	63 c1       	rjmp	.+710    	; 0xbe2 <processCommand+0x398>
     91c:	c1 36       	cpi	r28, 0x61	; 97
			if (  buf[1] == 'a' ) showActiveADCs();
     91e:	79 f4       	brne	.+30     	; 0x93e <processCommand+0xf4>
     920:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     924:	81 36       	cpi	r24, 0x61	; 97
     926:	11 f4       	brne	.+4      	; 0x92c <processCommand+0xe2>
			else if (  buf[1] == 's' ) startADCcycle();			
     928:	9f d2       	rcall	.+1342   	; 0xe68 <showActiveADCs>
     92a:	5b c1       	rjmp	.+694    	; 0xbe2 <processCommand+0x398>
     92c:	83 37       	cpi	r24, 0x73	; 115
     92e:	11 f4       	brne	.+4      	; 0x934 <processCommand+0xea>
			else if (  buf[1] == 'd' ) doAdc();			
     930:	9e d3       	rcall	.+1852   	; 0x106e <startADCcycle>
     932:	57 c1       	rjmp	.+686    	; 0xbe2 <processCommand+0x398>
     934:	84 36       	cpi	r24, 0x64	; 100
     936:	09 f0       	breq	.+2      	; 0x93a <processCommand+0xf0>
     938:	54 c1       	rjmp	.+680    	; 0xbe2 <processCommand+0x398>
		}
		else if (buf[0] == 'F') {		
     93a:	6e d3       	rcall	.+1756   	; 0x1018 <doAdc>
     93c:	52 c1       	rjmp	.+676    	; 0xbe2 <processCommand+0x398>
			spi_FlashReadID();
     93e:	c6 34       	cpi	r28, 0x46	; 70
			if (  buf[1] == 'w' ) doFlashWriteTest();
     940:	81 f4       	brne	.+32     	; 0x962 <processCommand+0x118>
     942:	55 d6       	rcall	.+3242   	; 0x15ee <spi_FlashReadID>
     944:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     948:	87 37       	cpi	r24, 0x77	; 119
     94a:	11 f4       	brne	.+4      	; 0x950 <processCommand+0x106>
     94c:	c8 de       	rcall	.-624    	; 0x6de <doFlashWriteTest>
			else if (  buf[1] == 'r' ) doFlashReadTest();
     94e:	49 c1       	rjmp	.+658    	; 0xbe2 <processCommand+0x398>
     950:	82 37       	cpi	r24, 0x72	; 114
     952:	11 f4       	brne	.+4      	; 0x958 <processCommand+0x10e>
     954:	13 df       	rcall	.-474    	; 0x77c <doFlashReadTest>
     956:	45 c1       	rjmp	.+650    	; 0xbe2 <processCommand+0x398>
			else if (  buf[1] == 'e' ) doFlashEraseTest();
     958:	85 36       	cpi	r24, 0x65	; 101
     95a:	09 f0       	breq	.+2      	; 0x95e <processCommand+0x114>
     95c:	42 c1       	rjmp	.+644    	; 0xbe2 <processCommand+0x398>
     95e:	72 df       	rcall	.-284    	; 0x844 <doFlashEraseTest>
     960:	40 c1       	rjmp	.+640    	; 0xbe2 <processCommand+0x398>
     962:	c6 36       	cpi	r28, 0x66	; 102
/*			if (  buf[1] == 'w' )       getFlashStatusReister();
			else if (  buf[1] == 'e' )  spi_FlashEnableWrite();
			else if (  buf[1] == 'd' ) spi_FlashDisableWrite();
*/			
		}
		else if (buf[0] == 'f') {
     964:	b9 f4       	brne	.+46     	; 0x994 <processCommand+0x14a>
     966:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
				if (  buf[1] == 's' ) FRAM_ReadStatusRegister();
     96a:	83 37       	cpi	r24, 0x73	; 115
     96c:	19 f4       	brne	.+6      	; 0x974 <processCommand+0x12a>
     96e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <FRAM_ReadStatusRegister>
     972:	37 c1       	rjmp	.+622    	; 0xbe2 <processCommand+0x398>
     974:	89 36       	cpi	r24, 0x69	; 105
				else if (buf[1] == 'i') read_FRAM_DeviceID();
     976:	19 f4       	brne	.+6      	; 0x97e <processCommand+0x134>
     978:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <read_FRAM_DeviceID>
     97c:	32 c1       	rjmp	.+612    	; 0xbe2 <processCommand+0x398>
     97e:	8a 36       	cpi	r24, 0x6A	; 106
				else if (buf[1] == 'j') wrFRAM();
     980:	19 f4       	brne	.+6      	; 0x988 <processCommand+0x13e>
     982:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <wrFRAM>
     986:	2d c1       	rjmp	.+602    	; 0xbe2 <processCommand+0x398>
     988:	85 36       	cpi	r24, 0x65	; 101
				else if (buf[1] == 'e') spi_FRAM_writeEnable();
     98a:	09 f0       	breq	.+2      	; 0x98e <processCommand+0x144>
     98c:	2a c1       	rjmp	.+596    	; 0xbe2 <processCommand+0x398>
     98e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <spi_FRAM_writeEnable>
     992:	27 c1       	rjmp	.+590    	; 0xbe2 <processCommand+0x398>
     994:	c3 37       	cpi	r28, 0x73	; 115
		}
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
     996:	c1 f4       	brne	.+48     	; 0x9c8 <processCommand+0x17e>
     998:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 1c 10 	call	0x2038	; 0x2038 <framSaveSerialNumber>
     9a2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	98 0f       	add	r25, r24
     9aa:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     9ae:	1f 92       	push	r1
     9b0:	8f 93       	push	r24
     9b2:	87 e4       	ldi	r24, 0x47	; 71
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0d c1       	rjmp	.+538    	; 0xbe2 <processCommand+0x398>
     9c8:	ce 36       	cpi	r28, 0x6E	; 110
		else if (buf[0] == 'n') framReadSerialNumber();
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <processCommand+0x188>
     9cc:	0e 94 28 10 	call	0x2050	; 0x2050 <framReadSerialNumber>
     9d0:	08 c1       	rjmp	.+528    	; 0xbe2 <processCommand+0x398>
		else if (buf[0] == 'c') RTC_readCLKF();			
     9d2:	c3 36       	cpi	r28, 0x63	; 99
     9d4:	19 f4       	brne	.+6      	; 0x9dc <processCommand+0x192>
     9d6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <RTC_readCLKF>
     9da:	03 c1       	rjmp	.+518    	; 0xbe2 <processCommand+0x398>
		else if (buf[0] == 'e') {
     9dc:	c5 36       	cpi	r28, 0x65	; 101
			if (  buf[1] == '0'
     9de:	51 f5       	brne	.+84     	; 0xa34 <processCommand+0x1ea>
     9e0:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
			   || buf[1] == '1' 
     9e4:	90 ed       	ldi	r25, 0xD0	; 208
		
		else if (buf[0] == 's') { framSaveSerialNumber(i); printf("~: %d\n",i++); }
		else if (buf[0] == 'n') framReadSerialNumber();
		else if (buf[0] == 'c') RTC_readCLKF();			
		else if (buf[0] == 'e') {
			if (  buf[1] == '0'
     9e6:	98 0f       	add	r25, r24
     9e8:	92 30       	cpi	r25, 0x02	; 2
			   || buf[1] == '1' 
			   || buf[1] == '4' )  {enableBuck014(); printf("bucks 0,1,4 (c,i,s1) enabled\n");}
     9ea:	10 f0       	brcs	.+4      	; 0x9f0 <processCommand+0x1a6>
     9ec:	84 33       	cpi	r24, 0x34	; 52
     9ee:	29 f4       	brne	.+10     	; 0x9fa <processCommand+0x1b0>
     9f0:	7e d5       	rcall	.+2812   	; 0x14ee <enableBuck014>
     9f2:	8e e4       	ldi	r24, 0x4E	; 78
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
			if (buf[1] == '2')  {enableBuck2(); printf("buck2 (Mod) enabled\n");}
     9fa:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     9fe:	82 33       	cpi	r24, 0x32	; 50
     a00:	29 f4       	brne	.+10     	; 0xa0c <processCommand+0x1c2>
     a02:	81 d5       	rcall	.+2818   	; 0x1506 <enableBuck2>
     a04:	8b e6       	ldi	r24, 0x6B	; 107
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
			if (buf[1] == '3')	{enableBuck3();  printf("buck4 (OptHtr) enabled\n");}
     a0c:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     a10:	83 33       	cpi	r24, 0x33	; 51
     a12:	29 f4       	brne	.+10     	; 0xa1e <processCommand+0x1d4>
     a14:	80 d5       	rcall	.+2816   	; 0x1516 <enableBuck3>
     a16:	8f e7       	ldi	r24, 0x7F	; 127
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
			if (buf[1] == '5')	{enableBuck5(); printf("buck5 (spare2) enabled\n");}
     a1e:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     a22:	85 33       	cpi	r24, 0x35	; 53
     a24:	09 f0       	breq	.+2      	; 0xa28 <processCommand+0x1de>
     a26:	dd c0       	rjmp	.+442    	; 0xbe2 <processCommand+0x398>
     a28:	7e d5       	rcall	.+2812   	; 0x1526 <enableBuck5>
     a2a:	86 e9       	ldi	r24, 0x96	; 150
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
		}
		else if (buf[0] == 'd') {
     a32:	d7 c0       	rjmp	.+430    	; 0xbe2 <processCommand+0x398>
     a34:	c4 36       	cpi	r28, 0x64	; 100
			if (buf[1] == '0')  {disableBuck014();printf("bucks 0,1,4 (c,i,s1) disabled\n");}
     a36:	31 f5       	brne	.+76     	; 0xa84 <processCommand+0x23a>
     a38:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     a3c:	80 33       	cpi	r24, 0x30	; 48
     a3e:	29 f4       	brne	.+10     	; 0xa4a <processCommand+0x200>
     a40:	5c d5       	rcall	.+2744   	; 0x14fa <disableBuck014>
     a42:	8d ea       	ldi	r24, 0xAD	; 173
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
			if (buf[1] == '2')  {disableBuck2();printf("buck2 (Mod) disabled\n");}
     a4a:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     a4e:	82 33       	cpi	r24, 0x32	; 50
     a50:	29 f4       	brne	.+10     	; 0xa5c <processCommand+0x212>
     a52:	5d d5       	rcall	.+2746   	; 0x150e <disableBuck2>
     a54:	8b ec       	ldi	r24, 0xCB	; 203
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
			if (buf[1] == '3')	{disableBuck3();printf("buck3 (OptHtr) disabled\n");}
     a5c:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     a60:	83 33       	cpi	r24, 0x33	; 51
     a62:	29 f4       	brne	.+10     	; 0xa6e <processCommand+0x224>
     a64:	5c d5       	rcall	.+2744   	; 0x151e <disableBuck3>
     a66:	80 ee       	ldi	r24, 0xE0	; 224
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
			if (buf[1] == '5')	{disableBuck5();printf("buck5 (Spare2) disabled\n");}
     a6e:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     a72:	85 33       	cpi	r24, 0x35	; 53
     a74:	09 f0       	breq	.+2      	; 0xa78 <processCommand+0x22e>
     a76:	b5 c0       	rjmp	.+362    	; 0xbe2 <processCommand+0x398>
     a78:	5c d5       	rcall	.+2744   	; 0x1532 <disableBuck5>
     a7a:	88 ef       	ldi	r24, 0xF8	; 248
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
     a82:	af c0       	rjmp	.+350    	; 0xbe2 <processCommand+0x398>
     a84:	cf 36       	cpi	r28, 0x6F	; 111
		}

		else if (buf[0] == 'o') {
     a86:	f1 f4       	brne	.+60     	; 0xac4 <processCommand+0x27a>
     a88:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
			uint16_t v = (buf[1]-'0') *511;
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	c0 97       	sbiw	r24, 0x30	; 48
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	31 e0       	ldi	r19, 0x01	; 1
     a94:	82 9f       	mul	r24, r18
     a96:	e0 01       	movw	r28, r0
     a98:	83 9f       	mul	r24, r19
     a9a:	d0 0d       	add	r29, r0
     a9c:	92 9f       	mul	r25, r18
     a9e:	d0 0d       	add	r29, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	8c 2f       	mov	r24, r28
			if (v>=0 || v< 4096) spi_OpticsDAC_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
     aa4:	9d 2f       	mov	r25, r29
     aa6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <spi_OpticsDAC_BroadCast>
     aaa:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
     aac:	cf 93       	push	r28
     aae:	80 e1       	ldi	r24, 0x10	; 16
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	8f c0       	rjmp	.+286    	; 0xbe2 <processCommand+0x398>
     ac4:	cf 34       	cpi	r28, 0x4F	; 79
		}
		else if (buf[0] == 'O') {
     ac6:	e1 f4       	brne	.+56     	; 0xb00 <processCommand+0x2b6>
     ac8:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
			uint8_t ch = (buf[1]-'0');
     acc:	80 53       	subi	r24, 0x30	; 48
     ace:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <processCommand+0x28a>
     ad2:	87 c0       	rjmp	.+270    	; 0xbe2 <processCommand+0x398>
     ad4:	c0 91 4e 09 	lds	r28, 0x094E	; 0x80094e <buf+0x2>
				uint16_t v = buf[2]-'0' * 511;
     ad8:	d0 e0       	ldi	r29, 0x00	; 0
     ada:	c0 5d       	subi	r28, 0xD0	; 208
     adc:	df 45       	sbci	r29, 0x5F	; 95
     ade:	6c 2f       	mov	r22, r28
				if (v>=0 || v< 4096) spi_OpticsDAC(ch,v);   
     ae0:	7d 2f       	mov	r23, r29
     ae2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <spi_OpticsDAC>
     ae6:	df 93       	push	r29
				else printf("incorrect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= 0x%X\n", v);
     ae8:	cf 93       	push	r28
     aea:	87 e1       	ldi	r24, 0x17	; 23
     aec:	93 e0       	ldi	r25, 0x03	; 3
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	71 c0       	rjmp	.+226    	; 0xbe2 <processCommand+0x398>
     b00:	c2 36       	cpi	r28, 0x62	; 98

			}
		}
		else if (buf[0] == 'b') {
     b02:	09 f5       	brne	.+66     	; 0xb46 <processCommand+0x2fc>
     b04:	80 e2       	ldi	r24, 0x20	; 32
			printf("WTF\n");
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
     b0c:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
			uint16_t v = ((uint16_t)(buf[1]-'0')) * 511;
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	c0 97       	sbiw	r24, 0x30	; 48
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	31 e0       	ldi	r19, 0x01	; 1
     b18:	82 9f       	mul	r24, r18
     b1a:	e0 01       	movw	r28, r0
     b1c:	83 9f       	mul	r24, r19
     b1e:	d0 0d       	add	r29, r0
     b20:	92 9f       	mul	r25, r18
     b22:	d0 0d       	add	r29, r0
     b24:	11 24       	eor	r1, r1
     b26:	ce 01       	movw	r24, r28
			if (v>=0 || v< 4096) spi_OpticsBuckCtl_BroadCast(v);   // 511*8  *   = 4088  --> 4.99V ;  1 --> 0.623V; 2-> 1.246V etc.
     b28:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <spi_OpticsBuckCtl_BroadCast>
     b2c:	df 93       	push	r29
			else printf("incorrect input o0 to o8\n");
			printf("v= %d\n", v);
     b2e:	cf 93       	push	r28
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	93 e0       	ldi	r25, 0x03	; 3
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	4e c0       	rjmp	.+156    	; 0xbe2 <processCommand+0x398>
     b46:	c2 34       	cpi	r28, 0x42	; 66
		}
		else if (buf[0] == 'B') {
     b48:	21 f5       	brne	.+72     	; 0xb92 <processCommand+0x348>
     b4a:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
			uint8_t ch = buf[1]-'0';
     b4e:	80 53       	subi	r24, 0x30	; 48
     b50:	88 30       	cpi	r24, 0x08	; 8
			if (ch <8){
     b52:	08 f0       	brcs	.+2      	; 0xb56 <processCommand+0x30c>
     b54:	46 c0       	rjmp	.+140    	; 0xbe2 <processCommand+0x398>
     b56:	20 91 4e 09 	lds	r18, 0x094E	; 0x80094e <buf+0x2>
				uint16_t v = ((uint16_t)(buf[2]-'0')) * 511;  
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	20 53       	subi	r18, 0x30	; 48
     b5e:	31 09       	sbc	r19, r1
     b60:	4f ef       	ldi	r20, 0xFF	; 255
     b62:	51 e0       	ldi	r21, 0x01	; 1
     b64:	24 9f       	mul	r18, r20
     b66:	e0 01       	movw	r28, r0
     b68:	25 9f       	mul	r18, r21
     b6a:	d0 0d       	add	r29, r0
     b6c:	34 9f       	mul	r19, r20
     b6e:	d0 0d       	add	r29, r0
     b70:	11 24       	eor	r1, r1
				if (v>=0 || v< 4096) spi_buckCtrlDac(ch,v);
     b72:	be 01       	movw	r22, r28
     b74:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <spi_buckCtrlDac>
				else printf("incorect input: Ocv  0<=c<=7; 0<=V<=0\n");
				printf("v= %d\n", v);
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	80 e1       	ldi	r24, 0x10	; 16
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
			}
		}
		else if (buf[0]=='w') {
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
			if (buf[1] == '1')  powerUpWickSensor();
     b90:	28 c0       	rjmp	.+80     	; 0xbe2 <processCommand+0x398>
     b92:	c7 37       	cpi	r28, 0x77	; 119
     b94:	59 f4       	brne	.+22     	; 0xbac <processCommand+0x362>
     b96:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     b9a:	81 33       	cpi	r24, 0x31	; 49
			if (buf[1] == '0') 	powerDownWickSensor();
     b9c:	09 f4       	brne	.+2      	; 0xba0 <processCommand+0x356>
     b9e:	cf d4       	rcall	.+2462   	; 0x153e <powerUpWickSensor>
     ba0:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     ba4:	80 33       	cpi	r24, 0x30	; 48
     ba6:	e9 f4       	brne	.+58     	; 0xbe2 <processCommand+0x398>
     ba8:	ce d4       	rcall	.+2460   	; 0x1546 <powerDownWickSensor>
		}
		
		else if (buf[0]=='m') {
     baa:	1b c0       	rjmp	.+54     	; 0xbe2 <processCommand+0x398>
     bac:	cd 36       	cpi	r28, 0x6D	; 109
				if (buf[1] == '1')  selectSDcard();
     bae:	59 f4       	brne	.+22     	; 0xbc6 <processCommand+0x37c>
     bb0:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     bb4:	81 33       	cpi	r24, 0x31	; 49
     bb6:	09 f4       	brne	.+2      	; 0xbba <processCommand+0x370>
     bb8:	0e d5       	rcall	.+2588   	; 0x15d6 <selectSDcard>
				if (buf[1] == '0') 	deSelectSDcard();	
     bba:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <buf+0x1>
     bbe:	80 33       	cpi	r24, 0x30	; 48
     bc0:	81 f4       	brne	.+32     	; 0xbe2 <processCommand+0x398>
     bc2:	0f d5       	rcall	.+2590   	; 0x15e2 <deSelectSDcard>
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <processCommand+0x398>
     bc6:	8c e4       	ldi	r24, 0x4C	; 76
		}
		else printf("\nno cmd:%s \n", buf);
     bc8:	99 e0       	ldi	r25, 0x09	; 9
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	84 e2       	ldi	r24, 0x24	; 36
     bd0:	93 e0       	ldi	r25, 0x03	; 3
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	df 91       	pop	r29
		
				
}
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <__vector_8>:
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_13>:
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	8f b7       	in	r24, 0x3f	; 63
     c0e:	8f 77       	andi	r24, 0x7F	; 127
     c10:	8f bf       	out	0x3f, r24	; 63
     c12:	88 b1       	in	r24, 0x08	; 8
     c14:	80 58       	subi	r24, 0x80	; 128
     c16:	88 b9       	out	0x08, r24	; 8
     c18:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <counter1024Hz>
     c1c:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <counter1024Hz+0x1>
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <counter1024Hz+0x1>
     c26:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <counter1024Hz>
     c2a:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <counter1024Hz>
     c2e:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <counter1024Hz+0x1>
     c32:	81 15       	cp	r24, r1
     c34:	92 40       	sbci	r25, 0x02	; 2
     c36:	19 f4       	brne	.+6      	; 0xc3e <__vector_13+0x42>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <halfSecFlag>
     c3e:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <counter1024Hz>
     c42:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <counter1024Hz+0x1>
     c46:	81 15       	cp	r24, r1
     c48:	94 40       	sbci	r25, 0x04	; 4
     c4a:	a8 f0       	brcs	.+42     	; 0xc76 <__vector_13+0x7a>
     c4c:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <counter1024Hz>
     c50:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <counter1024Hz+0x1>
     c54:	94 50       	subi	r25, 0x04	; 4
     c56:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <counter1024Hz+0x1>
     c5a:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <counter1024Hz>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <oneSecFlag>
     c64:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
     c68:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <__data_end+0x1>
     c72:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <__data_end>
     c76:	78 94       	sei
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <init_timer2>:
     c88:	81 e3       	ldi	r24, 0x31	; 49
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
     ca2:	80 ee       	ldi	r24, 0xE0	; 224
     ca4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
     ca8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
     cac:	e0 e7       	ldi	r30, 0x70	; 112
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	80 83       	st	Z, r24
     cb6:	08 95       	ret

00000cb8 <init_CountersIimers>:
     cb8:	e7 df       	rcall	.-50     	; 0xc88 <init_timer2>
     cba:	80 ec       	ldi	r24, 0xC0	; 192
     cbc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	8d bb       	out	0x1d, r24	; 29
     cc4:	85 e4       	ldi	r24, 0x45	; 69
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <puts>
     ccc:	08 95       	ret

00000cce <ADC_rdSystemStatus>:
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	cb d3       	rcall	.+1942   	; 0x146a <ADC_RegisterRead>
     cd4:	1f 92       	push	r1
     cd6:	8f 93       	push	r24
     cd8:	81 e6       	ldi	r24, 0x61	; 97
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	08 95       	ret

00000cee <ADC_wrGPO>:
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	d8 2f       	mov	r29, r24
     cf4:	c6 2f       	mov	r28, r22
     cf6:	88 30       	cpi	r24, 0x08	; 8
     cf8:	10 f4       	brcc	.+4      	; 0xcfe <ADC_wrGPO+0x10>
     cfa:	62 30       	cpi	r22, 0x02	; 2
     cfc:	40 f0       	brcs	.+16     	; 0xd0e <ADC_wrGPO+0x20>
     cfe:	83 e7       	ldi	r24, 0x73	; 115
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	cc 23       	and	r28, r28
     d10:	31 f0       	breq	.+12     	; 0xd1e <ADC_wrGPO+0x30>
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <ADC_wrGPO+0x2a>
     d16:	66 0f       	add	r22, r22
     d18:	da 95       	dec	r29
     d1a:	ea f7       	brpl	.-6      	; 0xd16 <ADC_wrGPO+0x28>
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <ADC_wrGPO+0x32>
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	8b e0       	ldi	r24, 0x0B	; 11
     d22:	94 d3       	rcall	.+1832   	; 0x144c <ADC_RegisterWrite>
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <initADC2518>:
     d2a:	60 e4       	ldi	r22, 0x40	; 64
     d2c:	85 e0       	ldi	r24, 0x05	; 5
     d2e:	8e d3       	rcall	.+1820   	; 0x144c <ADC_RegisterWrite>
     d30:	60 e4       	ldi	r22, 0x40	; 64
     d32:	87 e0       	ldi	r24, 0x07	; 7
     d34:	8b d3       	rcall	.+1814   	; 0x144c <ADC_RegisterWrite>
     d36:	60 e4       	ldi	r22, 0x40	; 64
     d38:	89 e0       	ldi	r24, 0x09	; 9
     d3a:	88 d3       	rcall	.+1808   	; 0x144c <ADC_RegisterWrite>
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	86 e0       	ldi	r24, 0x06	; 6
     d40:	d6 cf       	rjmp	.-84     	; 0xcee <ADC_wrGPO>
     d42:	08 95       	ret

00000d44 <ADC_OverSample>:
     d44:	cf 93       	push	r28
     d46:	c8 2f       	mov	r28, r24
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	40 f0       	brcs	.+16     	; 0xd5c <ADC_OverSample+0x18>
     d4c:	8d e2       	ldi	r24, 0x2D	; 45
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	9f 93       	push	r25
     d52:	8f 93       	push	r24
     d54:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	6c 2f       	mov	r22, r28
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	75 d3       	rcall	.+1770   	; 0x144c <ADC_RegisterWrite>
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <ADC_OscSpeed>:
     d66:	cf 93       	push	r28
     d68:	c8 2f       	mov	r28, r24
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	7d d3       	rcall	.+1786   	; 0x146a <ADC_RegisterRead>
     d70:	c1 11       	cpse	r28, r1
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <ADC_OscSpeed+0x14>
     d74:	68 2f       	mov	r22, r24
     d76:	6f 7e       	andi	r22, 0xEF	; 239
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <ADC_OscSpeed+0x30>
     d7a:	c1 30       	cpi	r28, 0x01	; 1
     d7c:	19 f4       	brne	.+6      	; 0xd84 <ADC_OscSpeed+0x1e>
     d7e:	68 2f       	mov	r22, r24
     d80:	60 61       	ori	r22, 0x10	; 16
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <ADC_OscSpeed+0x30>
     d84:	8d e0       	ldi	r24, 0x0D	; 13
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <ADC_OscSpeed+0x34>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	59 d3       	rcall	.+1714   	; 0x144c <ADC_RegisterWrite>
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <ADC_manualMode>:
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	80 e1       	ldi	r24, 0x10	; 16
     da2:	54 c3       	rjmp	.+1704   	; 0x144c <ADC_RegisterWrite>
     da4:	08 95       	ret

00000da6 <ADC_ReadManualModeAnalogCh>:
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	18 2f       	mov	r17, r24
     dae:	68 2f       	mov	r22, r24
     db0:	81 e1       	ldi	r24, 0x11	; 17
     db2:	73 d3       	rcall	.+1766   	; 0x149a <ADC_RegisterReadWrite>
     db4:	d8 2f       	mov	r29, r24
     db6:	c9 2f       	mov	r28, r25
     db8:	28 2f       	mov	r18, r24
     dba:	39 2f       	mov	r19, r25
     dbc:	a0 e5       	ldi	r26, 0x50	; 80
     dbe:	b3 ec       	ldi	r27, 0xC3	; 195
     dc0:	0e 94 3e 1a 	call	0x347c	; 0x347c <__umulhisi3>
     dc4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e8       	ldi	r20, 0x80	; 128
     dce:	59 e3       	ldi	r21, 0x39	; 57
     dd0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__mulsf3>
     dd4:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fixunssfsi>
     dd8:	7f 93       	push	r23
     dda:	6f 93       	push	r22
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	1f 92       	push	r1
     de2:	1f 93       	push	r17
     de4:	8a e8       	ldi	r24, 0x8A	; 138
     de6:	93 e0       	ldi	r25, 0x03	; 3
     de8:	9f 93       	push	r25
     dea:	8f 93       	push	r24
     dec:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     df0:	8d b7       	in	r24, 0x3d	; 61
     df2:	9e b7       	in	r25, 0x3e	; 62
     df4:	08 96       	adiw	r24, 0x08	; 8
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	9e bf       	out	0x3e, r25	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	8d bf       	out	0x3d, r24	; 61
     e00:	8d 2f       	mov	r24, r29
     e02:	9c 2f       	mov	r25, r28
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret

00000e0c <nextADC>:
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	c8 2f       	mov	r28, r24
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <nextADC+0x30>
     e16:	cf 5f       	subi	r28, 0xFF	; 255
     e18:	cf 70       	andi	r28, 0x0F	; 15
     e1a:	20 91 ba 08 	lds	r18, 0x08BA	; 0x8008ba <hdwConfig>
     e1e:	30 91 bb 08 	lds	r19, 0x08BB	; 0x8008bb <hdwConfig+0x1>
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0c 2e       	mov	r0, r28
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <nextADC+0x22>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <nextADC+0x1e>
     e32:	82 23       	and	r24, r18
     e34:	93 23       	and	r25, r19
     e36:	2d 2f       	mov	r18, r29
     e38:	89 2b       	or	r24, r25
     e3a:	21 f4       	brne	.+8      	; 0xe44 <nextADC+0x38>
     e3c:	d1 e0       	ldi	r29, 0x01	; 1
     e3e:	d2 0f       	add	r29, r18
     e40:	21 31       	cpi	r18, 0x11	; 17
     e42:	48 f3       	brcs	.-46     	; 0xe16 <nextADC+0xa>
     e44:	d1 31       	cpi	r29, 0x11	; 17
     e46:	41 f4       	brne	.+16     	; 0xe58 <nextADC+0x4c>
     e48:	88 e4       	ldi	r24, 0x48	; 72
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	d1 31       	cpi	r29, 0x11	; 17
     e5a:	11 f0       	breq	.+4      	; 0xe60 <nextADC+0x54>
     e5c:	8c 2f       	mov	r24, r28
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <nextADC+0x56>
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <showActiveADCs>:
     e68:	cf 93       	push	r28
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	1d c0       	rjmp	.+58     	; 0xea8 <showActiveADCs+0x40>
     e6e:	20 91 ba 08 	lds	r18, 0x08BA	; 0x8008ba <hdwConfig>
     e72:	30 91 bb 08 	lds	r19, 0x08BB	; 0x8008bb <hdwConfig+0x1>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0c 2e       	mov	r0, r28
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <showActiveADCs+0x1a>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <showActiveADCs+0x16>
     e86:	82 23       	and	r24, r18
     e88:	93 23       	and	r25, r19
     e8a:	89 2b       	or	r24, r25
     e8c:	61 f0       	breq	.+24     	; 0xea6 <showActiveADCs+0x3e>
     e8e:	1f 92       	push	r1
     e90:	cf 93       	push	r28
     e92:	84 e4       	ldi	r24, 0x44	; 68
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	9f 93       	push	r25
     e98:	8f 93       	push	r24
     e9a:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 5f       	subi	r28, 0xFF	; 255
     ea8:	c0 31       	cpi	r28, 0x10	; 16
     eaa:	08 f3       	brcs	.-62     	; 0xe6e <showActiveADCs+0x6>
     eac:	82 e4       	ldi	r24, 0x42	; 66
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
     eb8:	ea eb       	ldi	r30, 0xBA	; 186
     eba:	f8 e0       	ldi	r31, 0x08	; 8
     ebc:	81 81       	ldd	r24, Z+1	; 0x01
     ebe:	8f 93       	push	r24
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 93       	push	r24
     ec4:	8b ea       	ldi	r24, 0xAB	; 171
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <incADC_MUX>:
     ee0:	95 df       	rcall	.-214    	; 0xe0c <nextADC>
     ee2:	ec e7       	ldi	r30, 0x7C	; 124
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	90 81       	ld	r25, Z
     ee8:	90 7e       	andi	r25, 0xE0	; 224
     eea:	90 83       	st	Z, r25
     eec:	90 81       	ld	r25, Z
     eee:	28 2f       	mov	r18, r24
     ef0:	27 70       	andi	r18, 0x07	; 7
     ef2:	92 2b       	or	r25, r18
     ef4:	90 83       	st	Z, r25
     ef6:	83 ff       	sbrs	r24, 3
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <incADC_MUX+0x26>
     efa:	eb e7       	ldi	r30, 0x7B	; 123
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	90 81       	ld	r25, Z
     f00:	98 60       	ori	r25, 0x08	; 8
     f02:	90 83       	st	Z, r25
     f04:	08 95       	ret
     f06:	eb e7       	ldi	r30, 0x7B	; 123
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	90 81       	ld	r25, Z
     f0c:	97 7f       	andi	r25, 0xF7	; 247
     f0e:	90 83       	st	Z, r25
     f10:	08 95       	ret

00000f12 <__vector_29>:
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	0b b6       	in	r0, 0x3b	; 59
     f1e:	0f 92       	push	r0
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     f3c:	40 91 42 08 	lds	r20, 0x0842	; 0x800842 <currentADCchannel>
     f40:	64 2f       	mov	r22, r20
     f42:	04 2e       	mov	r0, r20
     f44:	00 0c       	add	r0, r0
     f46:	77 0b       	sbc	r23, r23
     f48:	fb 01       	movw	r30, r22
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	eb 5b       	subi	r30, 0xBB	; 187
     f50:	f7 4f       	sbci	r31, 0xF7	; 247
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	dc 01       	movw	r26, r24
     f58:	a2 0f       	add	r26, r18
     f5a:	b1 1d       	adc	r27, r1
     f5c:	9d 01       	movw	r18, r26
     f5e:	b1 83       	std	Z+1, r27	; 0x01
     f60:	a0 83       	st	Z, r26
     f62:	a9 e7       	ldi	r26, 0x79	; 121
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	9c 91       	ld	r25, X
     f68:	89 2f       	mov	r24, r25
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	98 2f       	mov	r25, r24
     f6e:	88 27       	eor	r24, r24
     f70:	82 0f       	add	r24, r18
     f72:	93 1f       	adc	r25, r19
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24
     f78:	3c 91       	ld	r19, X
     f7a:	2c 91       	ld	r18, X
     f7c:	9f 93       	push	r25
     f7e:	8f 93       	push	r24
     f80:	1f 92       	push	r1
     f82:	3f 93       	push	r19
     f84:	1f 92       	push	r1
     f86:	2f 93       	push	r18
     f88:	7f 93       	push	r23
     f8a:	4f 93       	push	r20
     f8c:	80 ec       	ldi	r24, 0xC0	; 192
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
     f98:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <currentADCchannel>
     f9c:	a1 df       	rcall	.-190    	; 0xee0 <incADC_MUX>
     f9e:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <currentADCchannel>
     fa2:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <firstADCchannel>
     fa6:	2d b7       	in	r18, 0x3d	; 61
     fa8:	3e b7       	in	r19, 0x3e	; 62
     faa:	26 5f       	subi	r18, 0xF6	; 246
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	3e bf       	out	0x3e, r19	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	2d bf       	out	0x3d, r18	; 61
     fb8:	89 13       	cpse	r24, r25
     fba:	12 c0       	rjmp	.+36     	; 0xfe0 <__vector_29+0xce>
     fbc:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <numReadings.2095>
     fc0:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <numReadings.2095+0x1>
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <numReadings.2095+0x1>
     fca:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <numReadings.2095>
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <__vector_29+0xce>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <adcCompleteFlag>
     fd8:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <numReadings.2095+0x1>
     fdc:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <numReadings.2095>
     fe0:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <adcCompleteFlag>
     fe4:	81 11       	cpse	r24, r1
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <__vector_29+0xe0>
     fe8:	ea e7       	ldi	r30, 0x7A	; 122
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	80 83       	st	Z, r24
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0b be       	out	0x3b, r0	; 59
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <doAdc>:
    1018:	cf 93       	push	r28
    101a:	c0 91 43 08 	lds	r28, 0x0843	; 0x800843 <firstADCchannel>
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <putchar>
    1026:	8c 2f       	mov	r24, r28
    1028:	0c 2e       	mov	r0, r28
    102a:	00 0c       	add	r0, r0
    102c:	99 0b       	sbc	r25, r25
    102e:	fc 01       	movw	r30, r24
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	eb 5b       	subi	r30, 0xBB	; 187
    1036:	f7 4f       	sbci	r31, 0xF7	; 247
    1038:	81 81       	ldd	r24, Z+1	; 0x01
    103a:	8f 93       	push	r24
    103c:	80 81       	ld	r24, Z
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	cf 93       	push	r28
    1044:	84 ed       	ldi	r24, 0xD4	; 212
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	9f 93       	push	r25
    104a:	8f 93       	push	r24
    104c:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1050:	8c 2f       	mov	r24, r28
    1052:	dc de       	rcall	.-584    	; 0xe0c <nextADC>
    1054:	c8 2f       	mov	r28, r24
    1056:	80 91 43 08 	lds	r24, 0x0843	; 0x800843 <firstADCchannel>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	c8 13       	cpse	r28, r24
    1068:	da cf       	rjmp	.-76     	; 0x101e <doAdc+0x6>
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <startADCcycle>:
    106e:	10 92 44 08 	sts	0x0844, r1	; 0x800844 <adcCompleteFlag>
    1072:	80 91 43 08 	lds	r24, 0x0843	; 0x800843 <firstADCchannel>
    1076:	e8 2f       	mov	r30, r24
    1078:	ee 0f       	add	r30, r30
    107a:	ff 0b       	sbc	r31, r31
    107c:	eb 5b       	subi	r30, 0xBB	; 187
    107e:	f7 4f       	sbci	r31, 0xF7	; 247
    1080:	11 82       	std	Z+1, r1	; 0x01
    1082:	10 82       	st	Z, r1
    1084:	c3 de       	rcall	.-634    	; 0xe0c <nextADC>
    1086:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <firstADCchannel>
    108a:	89 13       	cpse	r24, r25
    108c:	f4 cf       	rjmp	.-24     	; 0x1076 <startADCcycle+0x8>
    108e:	ea e7       	ldi	r30, 0x7A	; 122
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	80 83       	st	Z, r24
    1098:	08 95       	ret

0000109a <init_adc>:
    109a:	8f e0       	ldi	r24, 0x0F	; 15
    109c:	21 df       	rcall	.-446    	; 0xee0 <incADC_MUX>
    109e:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <currentADCchannel>
    10a2:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <firstADCchannel>
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	71 f0       	breq	.+28     	; 0x10c6 <init_adc+0x2c>
    10aa:	ea e7       	ldi	r30, 0x7A	; 122
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	80 83       	st	Z, r24
    10b4:	8f e8       	ldi	r24, 0x8F	; 143
    10b6:	80 83       	st	Z, r24
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
    10be:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
    10c2:	d5 cf       	rjmp	.-86     	; 0x106e <startADCcycle>
    10c4:	08 95       	ret
    10c6:	8f ed       	ldi	r24, 0xDF	; 223
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	08 95       	ret

000010d8 <readDiff_CH>:
    10d8:	80 91 76 08 	lds	r24, 0x0876	; 0x800876 <npaFlow+0x5>
    10dc:	1f 92       	push	r1
    10de:	8f 93       	push	r24
    10e0:	86 ef       	ldi	r24, 0xF6	; 246
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	08 95       	ret

000010f6 <readNPA700>:
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	2a 97       	sbiw	r28, 0x0a	; 10
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	1a 82       	std	Y+2, r1	; 0x02
    1118:	1b 82       	std	Y+3, r1	; 0x03
    111a:	1c 82       	std	Y+4, r1	; 0x04
    111c:	f9 2e       	mov	r15, r25
    111e:	c9 2e       	mov	r12, r25
    1120:	d1 2c       	mov	r13, r1
    1122:	1f 92       	push	r1
    1124:	9f 93       	push	r25
    1126:	0d e0       	ldi	r16, 0x0D	; 13
    1128:	14 e0       	ldi	r17, 0x04	; 4
    112a:	1f 93       	push	r17
    112c:	0f 93       	push	r16
    112e:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1132:	8f 2d       	mov	r24, r15
    1134:	e8 d7       	rcall	.+4048   	; 0x2106 <setI2Cmux>
    1136:	1f 92       	push	r1
    1138:	ff 92       	push	r15
    113a:	1f 93       	push	r17
    113c:	0f 93       	push	r16
    113e:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1142:	44 e0       	ldi	r20, 0x04	; 4
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	88 e2       	ldi	r24, 0x28	; 40
    114e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <twi_read_bytes>
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	98 2f       	mov	r25, r24
    1156:	92 95       	swap	r25
    1158:	96 95       	lsr	r25
    115a:	96 95       	lsr	r25
    115c:	93 70       	andi	r25, 0x03	; 3
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	c9 f1       	breq	.+114    	; 0x11dc <readNPA700+0xe6>
    116a:	91 30       	cpi	r25, 0x01	; 1
    116c:	89 f4       	brne	.+34     	; 0x1190 <readNPA700+0x9a>
    116e:	31 e0       	ldi	r19, 0x01	; 1
    1170:	c3 1a       	sub	r12, r19
    1172:	d1 08       	sbc	r13, r1
    1174:	df 92       	push	r13
    1176:	cf 92       	push	r12
    1178:	86 ea       	ldi	r24, 0xA6	; 166
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	9f 93       	push	r25
    117e:	8f 93       	push	r24
    1180:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	4e c0       	rjmp	.+156    	; 0x122c <readNPA700+0x136>
    1190:	92 30       	cpi	r25, 0x02	; 2
    1192:	89 f4       	brne	.+34     	; 0x11b6 <readNPA700+0xc0>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	c8 1a       	sub	r12, r24
    1198:	d1 08       	sbc	r13, r1
    119a:	df 92       	push	r13
    119c:	cf 92       	push	r12
    119e:	8a e8       	ldi	r24, 0x8A	; 138
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	3b c0       	rjmp	.+118    	; 0x122c <readNPA700+0x136>
    11b6:	93 30       	cpi	r25, 0x03	; 3
    11b8:	c1 f5       	brne	.+112    	; 0x122a <readNPA700+0x134>
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	c2 1a       	sub	r12, r18
    11be:	d1 08       	sbc	r13, r1
    11c0:	df 92       	push	r13
    11c2:	cf 92       	push	r12
    11c4:	87 e6       	ldi	r24, 0x67	; 103
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	9f 93       	push	r25
    11ca:	8f 93       	push	r24
    11cc:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	28 c0       	rjmp	.+80     	; 0x122c <readNPA700+0x136>
    11dc:	8f 73       	andi	r24, 0x3F	; 63
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	98 2f       	mov	r25, r24
    11e2:	88 27       	eor	r24, r24
    11e4:	2a 81       	ldd	r18, Y+2	; 0x02
    11e6:	82 0f       	add	r24, r18
    11e8:	91 1d       	adc	r25, r1
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	4c 81       	ldd	r20, Y+4	; 0x04
    11fc:	42 95       	swap	r20
    11fe:	46 95       	lsr	r20
    1200:	47 70       	andi	r20, 0x07	; 7
    1202:	24 0f       	add	r18, r20
    1204:	31 1d       	adc	r19, r1
    1206:	3f 93       	push	r19
    1208:	2f 93       	push	r18
    120a:	9f 93       	push	r25
    120c:	8f 93       	push	r24
    120e:	8f e1       	ldi	r24, 0x1F	; 31
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	9f 93       	push	r25
    1214:	8f 93       	push	r24
    1216:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	01 c0       	rjmp	.+2      	; 0x122c <readNPA700+0x136>
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	2a 96       	adiw	r28, 0x0a	; 10
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	08 95       	ret

00001248 <initPressureSensors>:
    1248:	cf 93       	push	r28
    124a:	e1 e7       	ldi	r30, 0x71	; 113
    124c:	f8 e0       	ldi	r31, 0x08	; 8
    124e:	c1 e0       	ldi	r28, 0x01	; 1
    1250:	c4 83       	std	Z+4, r28	; 0x04
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	85 83       	std	Z+5, r24	; 0x05
    1256:	40 df       	rcall	.-384    	; 0x10d8 <readDiff_CH>
    1258:	eb e6       	ldi	r30, 0x6B	; 107
    125a:	f8 e0       	ldi	r31, 0x08	; 8
    125c:	c5 83       	std	Z+5, r28	; 0x05
    125e:	14 82       	std	Z+4, r1	; 0x04
    1260:	e5 e6       	ldi	r30, 0x65	; 101
    1262:	f8 e0       	ldi	r31, 0x08	; 8
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	85 83       	std	Z+5, r24	; 0x05
    1268:	c4 83       	std	Z+4, r28	; 0x04
    126a:	40 91 71 08 	lds	r20, 0x0871	; 0x800871 <npaFlow>
    126e:	50 91 72 08 	lds	r21, 0x0872	; 0x800872 <npaFlow+0x1>
    1272:	60 91 73 08 	lds	r22, 0x0873	; 0x800873 <npaFlow+0x2>
    1276:	70 91 74 08 	lds	r23, 0x0874	; 0x800874 <npaFlow+0x3>
    127a:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <npaFlow+0x4>
    127e:	90 91 76 08 	lds	r25, 0x0876	; 0x800876 <npaFlow+0x5>
    1282:	39 df       	rcall	.-398    	; 0x10f6 <readNPA700>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	98 e4       	ldi	r25, 0x48	; 72
    1288:	fc 01       	movw	r30, r24
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <initPressureSensors+0x42>
    128e:	fc 01       	movw	r30, r24
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <initPressureSensors+0x48>
    1294:	fc 01       	movw	r30, r24
    1296:	31 97       	sbiw	r30, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <initPressureSensors+0x4e>
    129a:	fc 01       	movw	r30, r24
    129c:	31 97       	sbiw	r30, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <initPressureSensors+0x54>
    12a0:	fc 01       	movw	r30, r24
    12a2:	31 97       	sbiw	r30, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <initPressureSensors+0x5a>
    12a6:	fc 01       	movw	r30, r24
    12a8:	31 97       	sbiw	r30, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <initPressureSensors+0x60>
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <initPressureSensors+0x64>
    12b0:	40 91 6b 08 	lds	r20, 0x086B	; 0x80086b <npaAbsP>
    12b4:	50 91 6c 08 	lds	r21, 0x086C	; 0x80086c <npaAbsP+0x1>
    12b8:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <npaAbsP+0x2>
    12bc:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <npaAbsP+0x3>
    12c0:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <npaAbsP+0x4>
    12c4:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <npaAbsP+0x5>
    12c8:	16 df       	rcall	.-468    	; 0x10f6 <readNPA700>
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <readDiffPress>:
    12ce:	40 91 71 08 	lds	r20, 0x0871	; 0x800871 <npaFlow>
    12d2:	50 91 72 08 	lds	r21, 0x0872	; 0x800872 <npaFlow+0x1>
    12d6:	60 91 73 08 	lds	r22, 0x0873	; 0x800873 <npaFlow+0x2>
    12da:	70 91 74 08 	lds	r23, 0x0874	; 0x800874 <npaFlow+0x3>
    12de:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <npaFlow+0x4>
    12e2:	90 91 76 08 	lds	r25, 0x0876	; 0x800876 <npaFlow+0x5>
    12e6:	07 cf       	rjmp	.-498    	; 0x10f6 <readNPA700>
    12e8:	08 95       	ret

000012ea <readABSPress>:
    12ea:	40 91 6b 08 	lds	r20, 0x086B	; 0x80086b <npaAbsP>
    12ee:	50 91 6c 08 	lds	r21, 0x086C	; 0x80086c <npaAbsP+0x1>
    12f2:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <npaAbsP+0x2>
    12f6:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <npaAbsP+0x3>
    12fa:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <npaAbsP+0x4>
    12fe:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <npaAbsP+0x5>
    1302:	f9 ce       	rjmp	.-526    	; 0x10f6 <readNPA700>
    1304:	08 95       	ret

00001306 <readU47>:
    1306:	40 91 65 08 	lds	r20, 0x0865	; 0x800865 <npaU47>
    130a:	50 91 66 08 	lds	r21, 0x0866	; 0x800866 <npaU47+0x1>
    130e:	60 91 67 08 	lds	r22, 0x0867	; 0x800867 <npaU47+0x2>
    1312:	70 91 68 08 	lds	r23, 0x0868	; 0x800868 <npaU47+0x3>
    1316:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <npaU47+0x4>
    131a:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <npaU47+0x5>
    131e:	eb ce       	rjmp	.-554    	; 0x10f6 <readNPA700>
    1320:	08 95       	ret

00001322 <startRH_T_conversion>:
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	87 e2       	ldi	r24, 0x27	; 39
    132a:	eb d7       	rcall	.+4054   	; 0x2302 <twi_write_bytes>
    132c:	89 2b       	or	r24, r25
    132e:	41 f4       	brne	.+16     	; 0x1340 <startRH_T_conversion+0x1e>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <rhStarted>
    1336:	86 e2       	ldi	r24, 0x26	; 38
    1338:	94 e0       	ldi	r25, 0x04	; 4
    133a:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <puts>
    133e:	08 95       	ret
    1340:	8e e3       	ldi	r24, 0x3E	; 62
    1342:	94 e0       	ldi	r25, 0x04	; 4
    1344:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <puts>
    1348:	08 95       	ret

0000134a <readRH_T>:
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	00 d0       	rcall	.+0      	; 0x1358 <readRH_T+0xe>
    1358:	1f 92       	push	r1
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	1a 82       	std	Y+2, r1	; 0x02
    1362:	1b 82       	std	Y+3, r1	; 0x03
    1364:	1c 82       	std	Y+4, r1	; 0x04
    1366:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <rhStarted>
    136a:	88 23       	and	r24, r24
    136c:	09 f4       	brne	.+2      	; 0x1370 <readRH_T+0x26>
    136e:	63 c0       	rjmp	.+198    	; 0x1436 <readRH_T+0xec>
    1370:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <rhStarted>
    1374:	44 e0       	ldi	r20, 0x04	; 4
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	be 01       	movw	r22, r28
    137a:	6f 5f       	subi	r22, 0xFF	; 255
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	87 e2       	ldi	r24, 0x27	; 39
    1380:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <twi_read_bytes>
    1384:	89 2b       	or	r24, r25
    1386:	29 f0       	breq	.+10     	; 0x1392 <readRH_T+0x48>
    1388:	8e e3       	ldi	r24, 0x3E	; 62
    138a:	94 e0       	ldi	r25, 0x04	; 4
    138c:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    1390:	52 c0       	rjmp	.+164    	; 0x1436 <readRH_T+0xec>
    1392:	a9 81       	ldd	r26, Y+1	; 0x01
    1394:	8a 2f       	mov	r24, r26
    1396:	82 95       	swap	r24
    1398:	86 95       	lsr	r24
    139a:	86 95       	lsr	r24
    139c:	83 70       	andi	r24, 0x03	; 3
    139e:	29 f0       	breq	.+10     	; 0x13aa <readRH_T+0x60>
    13a0:	80 e5       	ldi	r24, 0x50	; 80
    13a2:	94 e0       	ldi	r25, 0x04	; 4
    13a4:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    13a8:	46 c0       	rjmp	.+140    	; 0x1436 <readRH_T+0xec>
    13aa:	af 73       	andi	r26, 0x3F	; 63
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ba 2f       	mov	r27, r26
    13b0:	aa 27       	eor	r26, r26
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	a8 2b       	or	r26, r24
    13b6:	28 ee       	ldi	r18, 0xE8	; 232
    13b8:	33 e0       	ldi	r19, 0x03	; 3
    13ba:	0e 94 4d 1a 	call	0x349a	; 0x349a <__usmulhisi3>
    13be:	0f 2e       	mov	r0, r31
    13c0:	fe ef       	ldi	r31, 0xFE	; 254
    13c2:	cf 2e       	mov	r12, r31
    13c4:	ff e3       	ldi	r31, 0x3F	; 63
    13c6:	df 2e       	mov	r13, r31
    13c8:	e1 2c       	mov	r14, r1
    13ca:	f1 2c       	mov	r15, r1
    13cc:	f0 2d       	mov	r31, r0
    13ce:	a7 01       	movw	r20, r14
    13d0:	96 01       	movw	r18, r12
    13d2:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    13d6:	5f 93       	push	r21
    13d8:	4f 93       	push	r20
    13da:	3f 93       	push	r19
    13dc:	2f 93       	push	r18
    13de:	80 e6       	ldi	r24, 0x60	; 96
    13e0:	94 e0       	ldi	r25, 0x04	; 4
    13e2:	9f 93       	push	r25
    13e4:	8f 93       	push	r24
    13e6:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    13ea:	ab 81       	ldd	r26, Y+3	; 0x03
    13ec:	80 e4       	ldi	r24, 0x40	; 64
    13ee:	a8 9f       	mul	r26, r24
    13f0:	d0 01       	movw	r26, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	a8 2b       	or	r26, r24
    13fc:	24 e7       	ldi	r18, 0x74	; 116
    13fe:	30 e4       	ldi	r19, 0x40	; 64
    1400:	0e 94 4d 1a 	call	0x349a	; 0x349a <__usmulhisi3>
    1404:	a7 01       	movw	r20, r14
    1406:	96 01       	movw	r18, r12
    1408:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    140c:	da 01       	movw	r26, r20
    140e:	c9 01       	movw	r24, r18
    1410:	80 5a       	subi	r24, 0xA0	; 160
    1412:	9f 40       	sbci	r25, 0x0F	; 15
    1414:	a1 09       	sbc	r26, r1
    1416:	b1 09       	sbc	r27, r1
    1418:	bf 93       	push	r27
    141a:	af 93       	push	r26
    141c:	9f 93       	push	r25
    141e:	8f 93       	push	r24
    1420:	80 e8       	ldi	r24, 0x80	; 128
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	9f 93       	push	r25
    1426:	8f 93       	push	r24
    1428:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret

0000144c <ADC_RegisterWrite>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	d8 2f       	mov	r29, r24
    1452:	c6 2f       	mov	r28, r22
    1454:	90 d0       	rcall	.+288    	; 0x1576 <selectADC2518>
    1456:	88 e0       	ldi	r24, 0x08	; 8
    1458:	41 d4       	rcall	.+2178   	; 0x1cdc <spiTransferByte>
    145a:	8d 2f       	mov	r24, r29
    145c:	3f d4       	rcall	.+2174   	; 0x1cdc <spiTransferByte>
    145e:	8c 2f       	mov	r24, r28
    1460:	3d d4       	rcall	.+2170   	; 0x1cdc <spiTransferByte>
    1462:	8f d0       	rcall	.+286    	; 0x1582 <deSelectADC2518>
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <ADC_RegisterRead>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	d8 2f       	mov	r29, r24
    1470:	c6 2f       	mov	r28, r22
    1472:	81 d0       	rcall	.+258    	; 0x1576 <selectADC2518>
    1474:	80 e1       	ldi	r24, 0x10	; 16
    1476:	32 d4       	rcall	.+2148   	; 0x1cdc <spiTransferByte>
    1478:	8d 2f       	mov	r24, r29
    147a:	30 d4       	rcall	.+2144   	; 0x1cdc <spiTransferByte>
    147c:	8c 2f       	mov	r24, r28
    147e:	2e d4       	rcall	.+2140   	; 0x1cdc <spiTransferByte>
    1480:	80 d0       	rcall	.+256    	; 0x1582 <deSelectADC2518>
    1482:	79 d0       	rcall	.+242    	; 0x1576 <selectADC2518>
    1484:	80 e1       	ldi	r24, 0x10	; 16
    1486:	2a d4       	rcall	.+2132   	; 0x1cdc <spiTransferByte>
    1488:	c8 2f       	mov	r28, r24
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	27 d4       	rcall	.+2126   	; 0x1cdc <spiTransferByte>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	25 d4       	rcall	.+2122   	; 0x1cdc <spiTransferByte>
    1492:	8c 2f       	mov	r24, r28
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <ADC_RegisterReadWrite>:
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	08 2f       	mov	r16, r24
    14a4:	16 2f       	mov	r17, r22
    14a6:	67 d0       	rcall	.+206    	; 0x1576 <selectADC2518>
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	18 d4       	rcall	.+2096   	; 0x1cdc <spiTransferByte>
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	c9 2f       	mov	r28, r25
    14b0:	d8 2f       	mov	r29, r24
    14b2:	80 2f       	mov	r24, r16
    14b4:	13 d4       	rcall	.+2086   	; 0x1cdc <spiTransferByte>
    14b6:	c8 0f       	add	r28, r24
    14b8:	d1 1d       	adc	r29, r1
    14ba:	81 2f       	mov	r24, r17
    14bc:	0f d4       	rcall	.+2078   	; 0x1cdc <spiTransferByte>
    14be:	18 2f       	mov	r17, r24
    14c0:	60 d0       	rcall	.+192    	; 0x1582 <deSelectADC2518>
    14c2:	1f 92       	push	r1
    14c4:	1f 93       	push	r17
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	81 ea       	ldi	r24, 0xA1	; 161
    14cc:	94 e0       	ldi	r25, 0x04	; 4
    14ce:	9f 93       	push	r25
    14d0:	8f 93       	push	r24
    14d2:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	ce 01       	movw	r24, r28
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <enableBuck014>:
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	fb cb       	rjmp	.-2058   	; 0xcee <ADC_wrGPO>
    14f8:	08 95       	ret

000014fa <disableBuck014>:
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	86 e0       	ldi	r24, 0x06	; 6
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	f5 cb       	rjmp	.-2070   	; 0xcee <ADC_wrGPO>
    1504:	08 95       	ret

00001506 <enableBuck2>:
    1506:	84 b3       	in	r24, 0x14	; 20
    1508:	81 60       	ori	r24, 0x01	; 1
    150a:	84 bb       	out	0x14, r24	; 20
    150c:	08 95       	ret

0000150e <disableBuck2>:
    150e:	84 b3       	in	r24, 0x14	; 20
    1510:	8e 7f       	andi	r24, 0xFE	; 254
    1512:	84 bb       	out	0x14, r24	; 20
    1514:	08 95       	ret

00001516 <enableBuck3>:
    1516:	84 b3       	in	r24, 0x14	; 20
    1518:	82 60       	ori	r24, 0x02	; 2
    151a:	84 bb       	out	0x14, r24	; 20
    151c:	08 95       	ret

0000151e <disableBuck3>:
    151e:	84 b3       	in	r24, 0x14	; 20
    1520:	8d 7f       	andi	r24, 0xFD	; 253
    1522:	84 bb       	out	0x14, r24	; 20
    1524:	08 95       	ret

00001526 <enableBuck5>:
    1526:	eb e0       	ldi	r30, 0x0B	; 11
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	80 81       	ld	r24, Z
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	80 83       	st	Z, r24
    1530:	08 95       	ret

00001532 <disableBuck5>:
    1532:	eb e0       	ldi	r30, 0x0B	; 11
    1534:	f1 e0       	ldi	r31, 0x01	; 1
    1536:	80 81       	ld	r24, Z
    1538:	8f 77       	andi	r24, 0x7F	; 127
    153a:	80 83       	st	Z, r24
    153c:	08 95       	ret

0000153e <powerUpWickSensor>:
    153e:	8e b1       	in	r24, 0x0e	; 14
    1540:	8b 7f       	andi	r24, 0xFB	; 251
    1542:	8e b9       	out	0x0e, r24	; 14
    1544:	08 95       	ret

00001546 <powerDownWickSensor>:
    1546:	8e b1       	in	r24, 0x0e	; 14
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	8e b9       	out	0x0e, r24	; 14
    154c:	08 95       	ret

0000154e <selectFRAM>:
    154e:	85 b1       	in	r24, 0x05	; 5
    1550:	8e 7f       	andi	r24, 0xFE	; 254
    1552:	85 b9       	out	0x05, r24	; 5
    1554:	08 95       	ret

00001556 <deSelectFRAM>:
    1556:	85 b1       	in	r24, 0x05	; 5
    1558:	81 60       	ori	r24, 0x01	; 1
    155a:	85 b9       	out	0x05, r24	; 5
    155c:	08 95       	ret

0000155e <selectOpticsDAC>:
    155e:	e2 e0       	ldi	r30, 0x02	; 2
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	80 81       	ld	r24, Z
    1564:	8e 7f       	andi	r24, 0xFE	; 254
    1566:	80 83       	st	Z, r24
    1568:	08 95       	ret

0000156a <deSelectOpticsDAC>:
    156a:	e2 e0       	ldi	r30, 0x02	; 2
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	80 81       	ld	r24, Z
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	80 83       	st	Z, r24
    1574:	08 95       	ret

00001576 <selectADC2518>:
    1576:	e2 e0       	ldi	r30, 0x02	; 2
    1578:	f1 e0       	ldi	r31, 0x01	; 1
    157a:	80 81       	ld	r24, Z
    157c:	8d 7f       	andi	r24, 0xFD	; 253
    157e:	80 83       	st	Z, r24
    1580:	08 95       	ret

00001582 <deSelectADC2518>:
    1582:	e2 e0       	ldi	r30, 0x02	; 2
    1584:	f1 e0       	ldi	r31, 0x01	; 1
    1586:	80 81       	ld	r24, Z
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	80 83       	st	Z, r24
    158c:	08 95       	ret

0000158e <selectBuckCtrlDAC>:
    158e:	e2 e0       	ldi	r30, 0x02	; 2
    1590:	f1 e0       	ldi	r31, 0x01	; 1
    1592:	80 81       	ld	r24, Z
    1594:	8b 7f       	andi	r24, 0xFB	; 251
    1596:	80 83       	st	Z, r24
    1598:	08 95       	ret

0000159a <deSelectBuckCtrlDAC>:
    159a:	e2 e0       	ldi	r30, 0x02	; 2
    159c:	f1 e0       	ldi	r31, 0x01	; 1
    159e:	80 81       	ld	r24, Z
    15a0:	84 60       	ori	r24, 0x04	; 4
    15a2:	80 83       	st	Z, r24
    15a4:	08 95       	ret

000015a6 <selectFlash>:
    15a6:	e2 e0       	ldi	r30, 0x02	; 2
    15a8:	f1 e0       	ldi	r31, 0x01	; 1
    15aa:	80 81       	ld	r24, Z
    15ac:	87 7f       	andi	r24, 0xF7	; 247
    15ae:	80 83       	st	Z, r24
    15b0:	08 95       	ret

000015b2 <deSelectFlash>:
    15b2:	e2 e0       	ldi	r30, 0x02	; 2
    15b4:	f1 e0       	ldi	r31, 0x01	; 1
    15b6:	80 81       	ld	r24, Z
    15b8:	88 60       	ori	r24, 0x08	; 8
    15ba:	80 83       	st	Z, r24
    15bc:	08 95       	ret

000015be <deSelectRTC>:
    15be:	e2 e0       	ldi	r30, 0x02	; 2
    15c0:	f1 e0       	ldi	r31, 0x01	; 1
    15c2:	80 81       	ld	r24, Z
    15c4:	80 61       	ori	r24, 0x10	; 16
    15c6:	80 83       	st	Z, r24
    15c8:	08 95       	ret

000015ca <selectRTC>:
    15ca:	e2 e0       	ldi	r30, 0x02	; 2
    15cc:	f1 e0       	ldi	r31, 0x01	; 1
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 7e       	andi	r24, 0xEF	; 239
    15d2:	80 83       	st	Z, r24
    15d4:	08 95       	ret

000015d6 <selectSDcard>:
    15d6:	e2 e0       	ldi	r30, 0x02	; 2
    15d8:	f1 e0       	ldi	r31, 0x01	; 1
    15da:	80 81       	ld	r24, Z
    15dc:	80 62       	ori	r24, 0x20	; 32
    15de:	80 83       	st	Z, r24
    15e0:	08 95       	ret

000015e2 <deSelectSDcard>:
    15e2:	e2 e0       	ldi	r30, 0x02	; 2
    15e4:	f1 e0       	ldi	r31, 0x01	; 1
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7d       	andi	r24, 0xDF	; 223
    15ea:	80 83       	st	Z, r24
    15ec:	08 95       	ret

000015ee <spi_FlashReadID>:
	while (loopcnt--);
}

//Read Flash ID:  0 address, 1 dummy, 2 Data
void spi_FlashReadID(void)     
{
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
	uint8_t miso[2];
	
	selectFlash();
    15f2:	d9 df       	rcall	.-78     	; 0x15a6 <selectFlash>
	spiTransferByte(FLASH_READ_ID);
    15f4:	8f e9       	ldi	r24, 0x9F	; 159
    15f6:	72 d3       	rcall	.+1764   	; 0x1cdc <spiTransferByte>
	spiTransferByte(0);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	70 d3       	rcall	.+1760   	; 0x1cdc <spiTransferByte>
	miso[1] = spiTransferByte(0);
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	6e d3       	rcall	.+1756   	; 0x1cdc <spiTransferByte>
    1600:	c8 2f       	mov	r28, r24
	miso[2] = spiTransferByte(0);
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	6b d3       	rcall	.+1750   	; 0x1cdc <spiTransferByte>
    1606:	d8 2f       	mov	r29, r24
    1608:	d4 df       	rcall	.-88     	; 0x15b2 <deSelectFlash>
	deSelectFlash();
    160a:	1f 92       	push	r1
    160c:	df 93       	push	r29
	printf("\n0x%02x, 0x%02x\n", miso[1],miso[2]);
    160e:	1f 92       	push	r1
    1610:	cf 93       	push	r28
    1612:	86 eb       	ldi	r24, 0xB6	; 182
    1614:	94 e0       	ldi	r25, 0x04	; 4
    1616:	9f 93       	push	r25
    1618:	8f 93       	push	r24
    161a:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
	
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <spi_FlashGetFeatures>:
    1630:	cf 93       	push	r28
    1632:	c8 2f       	mov	r28, r24
**********************************************************************/
uint8_t spi_FlashGetFeatures(uint8_t fregister)
{
	uint8_t features;
		
	selectFlash();
    1634:	b8 df       	rcall	.-144    	; 0x15a6 <selectFlash>
	spiTransferByte(FLASH_GET_FEATURES);
    1636:	8f e0       	ldi	r24, 0x0F	; 15
    1638:	51 d3       	rcall	.+1698   	; 0x1cdc <spiTransferByte>
	spiTransferByte(fregister);
    163a:	8c 2f       	mov	r24, r28
    163c:	4f d3       	rcall	.+1694   	; 0x1cdc <spiTransferByte>
	features = spiTransferByte(0);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	4d d3       	rcall	.+1690   	; 0x1cdc <spiTransferByte>
    1642:	c8 2f       	mov	r28, r24
	deSelectFlash();
    1644:	b6 df       	rcall	.-148    	; 0x15b2 <deSelectFlash>
    1646:	8c 2f       	mov	r24, r28
	return features;
}
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <spi_FlashGetStatusRegister>:
    164c:	80 ec       	ldi	r24, 0xC0	; 192
	return (ret & FLASH_STATUS_BIT_OIP) ? 1 : 0;
}

uint8_t spi_FlashGetStatusRegister(void)
{
	return 	spi_FlashGetFeatures(FLASH_FEATURE_REG_STATUS);
    164e:	f0 cf       	rjmp	.-32     	; 0x1630 <spi_FlashGetFeatures>
}
    1650:	08 95       	ret

00001652 <spi_FlashIsBusy>:
/*********************************************************************
 *  check operation in progress bit (OIP) in feature status register to see if chip is busy.
 *  returns zero if ready, and 1 if busy with previous command.
**********************************************************************/
uint8_t spi_FlashIsBusy(void)   
{
    1652:	cf 93       	push	r28
	uint8_t ret;	
	ret = spi_FlashGetStatusRegister();  // check response
    1654:	fb df       	rcall	.-10     	; 0x164c <spi_FlashGetStatusRegister>
    1656:	c8 2f       	mov	r28, r24
	printf("spi_FlashIsBusy: 0x%02x\n", ret);
    1658:	1f 92       	push	r1
    165a:	8f 93       	push	r24
    165c:	87 ec       	ldi	r24, 0xC7	; 199
    165e:	94 e0       	ldi	r25, 0x04	; 4
    1660:	9f 93       	push	r25
    1662:	8f 93       	push	r24
    1664:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
	return (ret & FLASH_STATUS_BIT_OIP) ? 1 : 0;
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
}
    1670:	8c 2f       	mov	r24, r28
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <spi_FlashWaitUntilReady>:
	
}


uint8_t spi_FlashWaitUntilReady()
{
    1678:	cf 93       	push	r28
	uint8_t retry = FLASH_RETRY_MAX;
    167a:	ca e0       	ldi	r28, 0x0A	; 10
	do 
	{
		retry--;
    167c:	c1 50       	subi	r28, 0x01	; 1
	} while (spi_FlashIsBusy() && retry);
    167e:	e9 df       	rcall	.-46     	; 0x1652 <spi_FlashIsBusy>
    1680:	88 23       	and	r24, r24
    1682:	11 f0       	breq	.+4      	; 0x1688 <spi_FlashWaitUntilReady+0x10>
    1684:	c1 11       	cpse	r28, r1
    1686:	fa cf       	rjmp	.-12     	; 0x167c <spi_FlashWaitUntilReady+0x4>
	return (retry > 0); 
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	c1 11       	cpse	r28, r1
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <spi_FlashWaitUntilReady+0x18>
    168e:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <spi_FlashEnableWrite>:
 *      Return zero if WIP = 1 or WEL = 0;
 *
**********************************************************************/

uint8_t spi_FlashEnableWrite(void)   
{
    1694:	cf 93       	push	r28

	selectFlash();
    1696:	87 df       	rcall	.-242    	; 0x15a6 <selectFlash>
	spiTransferByte(FLASH_WRITE_ENABLE);         
    1698:	86 e0       	ldi	r24, 0x06	; 6
	deSelectFlash();
    169a:	20 d3       	rcall	.+1600   	; 0x1cdc <spiTransferByte>
    169c:	8a df       	rcall	.-236    	; 0x15b2 <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    169e:	d6 df       	rcall	.-84     	; 0x164c <spi_FlashGetStatusRegister>
    16a0:	c8 2f       	mov	r28, r24
    16a2:	1f 92       	push	r1
	printf("spi_FlashEnableWrite: 0x%02x\n", statReg);
    16a4:	8f 93       	push	r24
    16a6:	80 ee       	ldi	r24, 0xE0	; 224
    16a8:	94 e0       	ldi	r25, 0x04	; 4
    16aa:	9f 93       	push	r25
    16ac:	8f 93       	push	r24
    16ae:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    16b2:	0f 90       	pop	r0
		
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 1 : 0  ;  
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	c1 fb       	bst	r28, 1
}
    16bc:	88 27       	eor	r24, r24
    16be:	80 f9       	bld	r24, 0
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <spi_FlashDisableWrite>:
    16c4:	cf 93       	push	r28

uint8_t spi_FlashDisableWrite(void)
{

	selectFlash();
    16c6:	6f df       	rcall	.-290    	; 0x15a6 <selectFlash>
	spiTransferByte(FLASH_WRITE_DISABLE);
    16c8:	84 e0       	ldi	r24, 0x04	; 4
	deSelectFlash();
    16ca:	08 d3       	rcall	.+1552   	; 0x1cdc <spiTransferByte>
    16cc:	72 df       	rcall	.-284    	; 0x15b2 <deSelectFlash>
	// check if we successful
	uint8_t statReg = spi_FlashGetStatusRegister();
    16ce:	be df       	rcall	.-132    	; 0x164c <spi_FlashGetStatusRegister>
    16d0:	c8 2f       	mov	r28, r24
    16d2:	1f 92       	push	r1
	printf("spi_FlashDisableWrite: 0x%02x\n", statReg);
    16d4:	8f 93       	push	r24
    16d6:	8e ef       	ldi	r24, 0xFE	; 254
    16d8:	94 e0       	ldi	r25, 0x04	; 4
    16da:	9f 93       	push	r25
    16dc:	8f 93       	push	r24
    16de:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    16e2:	c6 95       	lsr	r28
	
	// write enabled (WEL=0) and write not in progress (WIP =0)
	return    (statReg & FLASH_STATUS_BIT_WEL)   ? 0 : 1  ;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8c 27       	eor	r24, r28
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	81 70       	andi	r24, 0x01	; 1
}
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <spi_FlashWriteToPage>:
    16f6:	af 92       	push	r10
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    16f8:	bf 92       	push	r11
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	16 2f       	mov	r17, r22
    170c:	b7 2e       	mov	r11, r23
    170e:	a8 2e       	mov	r10, r24
    1710:	ea 01       	movw	r28, r20
    1712:	69 01       	movw	r12, r18
	uint16_t ret = 0;
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    1714:	e0 2e       	mov	r14, r16
    1716:	f1 2c       	mov	r15, r1
    1718:	c7 01       	movw	r24, r14
    171a:	84 0f       	add	r24, r20
    171c:	95 1f       	adc	r25, r21
    171e:	81 38       	cpi	r24, 0x81	; 129
    1720:	98 40       	sbci	r25, 0x08	; 8
    1722:	08 f0       	brcs	.+2      	; 0x1726 <spi_FlashWriteToPage+0x30>
    1724:	7d c0       	rjmp	.+250    	; 0x1820 <spi_FlashWriteToPage+0x12a>
	{
		if (spi_FlashWaitUntilReady())
    1726:	a8 df       	rcall	.-176    	; 0x1678 <spi_FlashWaitUntilReady>
    1728:	88 23       	and	r24, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <spi_FlashWriteToPage+0x38>
    172c:	6e c0       	rjmp	.+220    	; 0x180a <spi_FlashWriteToPage+0x114>
		{
			selectFlash();
    172e:	3b df       	rcall	.-394    	; 0x15a6 <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    1730:	83 e1       	ldi	r24, 0x13	; 19
    1732:	d4 d2       	rcall	.+1448   	; 0x1cdc <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    1734:	8a 2d       	mov	r24, r10
    1736:	d2 d2       	rcall	.+1444   	; 0x1cdc <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    1738:	8b 2d       	mov	r24, r11
			spiTransferByte(pageAddress.byte[0]);
    173a:	d0 d2       	rcall	.+1440   	; 0x1cdc <spiTransferByte>
    173c:	81 2f       	mov	r24, r17
			deSelectFlash();
    173e:	ce d2       	rcall	.+1436   	; 0x1cdc <spiTransferByte>
    1740:	38 df       	rcall	.-400    	; 0x15b2 <deSelectFlash>
			if (spi_FlashWaitUntilReady())
    1742:	9a df       	rcall	.-204    	; 0x1678 <spi_FlashWaitUntilReady>
    1744:	88 23       	and	r24, r24
    1746:	09 f4       	brne	.+2      	; 0x174a <spi_FlashWriteToPage+0x54>
			{
				if (spi_FlashEnableWrite())
    1748:	55 c0       	rjmp	.+170    	; 0x17f4 <spi_FlashWriteToPage+0xfe>
    174a:	a4 df       	rcall	.-184    	; 0x1694 <spi_FlashEnableWrite>
    174c:	88 23       	and	r24, r24
				{
					union twoBytes addrInPage;
					addrInPage.word = address;
					selectFlash();
    174e:	09 f4       	brne	.+2      	; 0x1752 <spi_FlashWriteToPage+0x5c>
    1750:	46 c0       	rjmp	.+140    	; 0x17de <spi_FlashWriteToPage+0xe8>
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
    1752:	29 df       	rcall	.-430    	; 0x15a6 <selectFlash>
    1754:	84 e8       	ldi	r24, 0x84	; 132
					spiTransferByte(addrInPage.byte[1]);
    1756:	c2 d2       	rcall	.+1412   	; 0x1cdc <spiTransferByte>
    1758:	8d 2f       	mov	r24, r29
    175a:	c0 d2       	rcall	.+1408   	; 0x1cdc <spiTransferByte>
					spiTransferByte(addrInPage.byte[0]);
    175c:	8c 2f       	mov	r24, r28
					for (uint8_t i = 0; i < nbytes; i++)
    175e:	be d2       	rcall	.+1404   	; 0x1cdc <spiTransferByte>
					{
						spiTransferByte(buffer[i]);
    1760:	c0 e0       	ldi	r28, 0x00	; 0
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <spi_FlashWriteToPage+0x7a>
    1764:	f6 01       	movw	r30, r12
    1766:	ec 0f       	add	r30, r28
					addrInPage.word = address;
					selectFlash();
					spiTransferByte(FLASH_LOAD_RANDOM_DATAx1);
					spiTransferByte(addrInPage.byte[1]);
					spiTransferByte(addrInPage.byte[0]);
					for (uint8_t i = 0; i < nbytes; i++)
    1768:	f1 1d       	adc	r31, r1
    176a:	80 81       	ld	r24, Z
					{
						spiTransferByte(buffer[i]);
					}
					deSelectFlash();
    176c:	b7 d2       	rcall	.+1390   	; 0x1cdc <spiTransferByte>
					if (spi_FlashWaitUntilReady())
    176e:	cf 5f       	subi	r28, 0xFF	; 255
    1770:	c0 17       	cp	r28, r16
    1772:	c0 f3       	brcs	.-16     	; 0x1764 <spi_FlashWriteToPage+0x6e>
					{
						selectFlash();
    1774:	1e df       	rcall	.-452    	; 0x15b2 <deSelectFlash>
    1776:	80 df       	rcall	.-256    	; 0x1678 <spi_FlashWaitUntilReady>
						spiTransferByte(FLASH_PROGRAM_EXECUTE);
    1778:	88 23       	and	r24, r24
    177a:	31 f1       	breq	.+76     	; 0x17c8 <spi_FlashWriteToPage+0xd2>
    177c:	14 df       	rcall	.-472    	; 0x15a6 <selectFlash>
						spiTransferByte(pageAddress.byte[2]);
    177e:	80 e1       	ldi	r24, 0x10	; 16
    1780:	ad d2       	rcall	.+1370   	; 0x1cdc <spiTransferByte>
    1782:	8a 2d       	mov	r24, r10
						spiTransferByte(pageAddress.byte[1]);
    1784:	ab d2       	rcall	.+1366   	; 0x1cdc <spiTransferByte>
    1786:	8b 2d       	mov	r24, r11
    1788:	a9 d2       	rcall	.+1362   	; 0x1cdc <spiTransferByte>
						spiTransferByte(pageAddress.byte[0]);
    178a:	81 2f       	mov	r24, r17
    178c:	a7 d2       	rcall	.+1358   	; 0x1cdc <spiTransferByte>
    178e:	11 df       	rcall	.-478    	; 0x15b2 <deSelectFlash>
						deSelectFlash();
    1790:	73 df       	rcall	.-282    	; 0x1678 <spi_FlashWaitUntilReady>
    1792:	88 23       	and	r24, r24
						if (spi_FlashWaitUntilReady())
    1794:	71 f0       	breq	.+28     	; 0x17b2 <spi_FlashWriteToPage+0xbc>
    1796:	96 df       	rcall	.-212    	; 0x16c4 <spi_FlashDisableWrite>
    1798:	81 11       	cpse	r24, r1
    179a:	4c c0       	rjmp	.+152    	; 0x1834 <spi_FlashWriteToPage+0x13e>
						{
							if (spi_FlashDisableWrite())
    179c:	88 e6       	ldi	r24, 0x68	; 104
    179e:	96 e0       	ldi	r25, 0x06	; 6
    17a0:	9f 93       	push	r25
    17a2:	8f 93       	push	r24
								ret = nbytes;
							else
								printf_P(PSTR("spi_FlashWriteToPage: Flash won't disable write\n"));
    17a4:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	e1 2c       	mov	r14, r1
    17ae:	f1 2c       	mov	r15, r1
    17b0:	41 c0       	rjmp	.+130    	; 0x1834 <spi_FlashWriteToPage+0x13e>
    17b2:	8f e2       	ldi	r24, 0x2F	; 47
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    17b4:	96 e0       	ldi	r25, 0x06	; 6
    17b6:	9f 93       	push	r25
    17b8:	8f 93       	push	r24
								ret = nbytes;
							else
								printf_P(PSTR("spi_FlashWriteToPage: Flash won't disable write\n"));
						}
						else
							printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    17ba:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	e1 2c       	mov	r14, r1
    17c4:	f1 2c       	mov	r15, r1
    17c6:	36 c0       	rjmp	.+108    	; 0x1834 <spi_FlashWriteToPage+0x13e>
    17c8:	86 ef       	ldi	r24, 0xF6	; 246
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    17ca:	95 e0       	ldi	r25, 0x05	; 5
    17cc:	9f 93       	push	r25
    17ce:	8f 93       	push	r24
						}
						else
							printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
					}
					else
						printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
    17d0:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	e1 2c       	mov	r14, r1
    17da:	f1 2c       	mov	r15, r1
    17dc:	2b c0       	rjmp	.+86     	; 0x1834 <spi_FlashWriteToPage+0x13e>
    17de:	86 ec       	ldi	r24, 0xC6	; 198
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    17e0:	95 e0       	ldi	r25, 0x05	; 5
    17e2:	9f 93       	push	r25
    17e4:	8f 93       	push	r24
					}
					else
						printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after data load\n"));
				}
				else
					printf_P(PSTR("spi_FlashWriteToPage: Flash won't enable write\n"));
    17e6:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	e1 2c       	mov	r14, r1
    17f0:	f1 2c       	mov	r15, r1
    17f2:	20 c0       	rjmp	.+64     	; 0x1834 <spi_FlashWriteToPage+0x13e>
    17f4:	8d e8       	ldi	r24, 0x8D	; 141
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    17f6:	95 e0       	ldi	r25, 0x05	; 5
    17f8:	9f 93       	push	r25
    17fa:	8f 93       	push	r24
				}
				else
					printf_P(PSTR("spi_FlashWriteToPage: Flash won't enable write\n"));
			}
			else
				printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after page read\n"));
    17fc:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	e1 2c       	mov	r14, r1
    1806:	f1 2c       	mov	r15, r1
    1808:	15 c0       	rjmp	.+42     	; 0x1834 <spi_FlashWriteToPage+0x13e>
    180a:	84 e6       	ldi	r24, 0x64	; 100
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    180c:	95 e0       	ldi	r25, 0x05	; 5
    180e:	9f 93       	push	r25
    1810:	8f 93       	push	r24
			}
			else
				printf_P(PSTR("spi_FlashWriteToPage: Flash never ready after page read\n"));
		}
		else
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
    1812:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	e1 2c       	mov	r14, r1
    181c:	f1 2c       	mov	r15, r1
    181e:	0a c0       	rjmp	.+20     	; 0x1834 <spi_FlashWriteToPage+0x13e>
    1820:	80 e3       	ldi	r24, 0x30	; 48
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    1822:	95 e0       	ldi	r25, 0x05	; 5
    1824:	9f 93       	push	r25
    1826:	8f 93       	push	r24
		}
		else
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashWriteToPage: buffer crosses page boundary\n"));
    1828:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	e1 2c       	mov	r14, r1
    1832:	f1 2c       	mov	r15, r1
    1834:	8e 2d       	mov	r24, r14
    1836:	df 91       	pop	r29
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashWriteToPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
			printf_P(PSTR("spi_FlashWriteToPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashWriteToPage: buffer crosses page boundary\n"));
	return ret;
}
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	08 95       	ret

0000184c <spi_FlashWrite>:
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
*  Crosses page if necessary
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	7a 01       	movw	r14, r20
    1862:	12 2f       	mov	r17, r18
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    1864:	20 e8       	ldi	r18, 0x80	; 128
    1866:	38 e0       	ldi	r19, 0x08	; 8
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	0e 94 00 1a 	call	0x3400	; 0x3400 <__udivmodsi4>
    1870:	49 01       	movw	r8, r18
    1872:	5a 01       	movw	r10, r20
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    1874:	86 2f       	mov	r24, r22
    1876:	97 2f       	mov	r25, r23
    1878:	46 2f       	mov	r20, r22
    187a:	57 2f       	mov	r21, r23
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    187c:	81 0f       	add	r24, r17
    187e:	91 1d       	adc	r25, r1
    1880:	81 38       	cpi	r24, 0x81	; 129
    1882:	98 40       	sbci	r25, 0x08	; 8
    1884:	28 f0       	brcs	.+10     	; 0x1890 <spi_FlashWrite+0x44>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    1886:	c1 2f       	mov	r28, r17
    1888:	c6 0f       	add	r28, r22
    188a:	c0 58       	subi	r28, 0x80	; 128
		crossesPage = true;
    188c:	d1 e0       	ldi	r29, 0x01	; 1
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <spi_FlashWrite+0x48>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    1890:	c1 2f       	mov	r28, r17
{
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    1892:	d0 e0       	ldi	r29, 0x00	; 0
	} 
	else
	{
		firstPageNumBytes = numBytes;
	}
    if (spi_FlashWriteToPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    1894:	0c 2f       	mov	r16, r28
    1896:	97 01       	movw	r18, r14
    1898:	c5 01       	movw	r24, r10
    189a:	b4 01       	movw	r22, r8
    189c:	2c df       	rcall	.-424    	; 0x16f6 <spi_FlashWriteToPage>
    189e:	c8 13       	cpse	r28, r24
    18a0:	23 c0       	rjmp	.+70     	; 0x18e8 <spi_FlashWrite+0x9c>
	{
		if (crossesPage)
    18a2:	dd 23       	and	r29, r29
    18a4:	51 f1       	breq	.+84     	; 0x18fa <spi_FlashWrite+0xae>
		{
			if (spi_FlashWriteToPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    18a6:	01 2f       	mov	r16, r17
    18a8:	0c 1b       	sub	r16, r28
    18aa:	d0 e0       	ldi	r29, 0x00	; 0
    18ac:	97 01       	movw	r18, r14
    18ae:	2c 0f       	add	r18, r28
    18b0:	3d 1f       	adc	r19, r29
    18b2:	c5 01       	movw	r24, r10
    18b4:	b4 01       	movw	r22, r8
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	8f 4f       	sbci	r24, 0xFF	; 255
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	19 df       	rcall	.-462    	; 0x16f6 <spi_FlashWriteToPage>
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	21 2f       	mov	r18, r17
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	2c 1b       	sub	r18, r28
    18cc:	3d 0b       	sbc	r19, r29
    18ce:	82 17       	cp	r24, r18
    18d0:	93 07       	cpc	r25, r19
    18d2:	99 f0       	breq	.+38     	; 0x18fa <spi_FlashWrite+0xae>
			{
				// success
				ret = numBytes;
			}
			else
				printf_P(PSTR("spi_FlashWrite: 2nd page write failed\n"));
    18d4:	89 e0       	ldi	r24, 0x09	; 9
    18d6:	95 e0       	ldi	r25, 0x05	; 5
    18d8:	9f 93       	push	r25
    18da:	8f 93       	push	r24
    18dc:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    18e4:	10 e0       	ldi	r17, 0x00	; 0
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <spi_FlashWrite+0xae>
			// success
			ret = numBytes;
		}
	}
	else
		printf_P(PSTR("spi_FlashWrite: 1st page write failed\n"));
    18e8:	82 ee       	ldi	r24, 0xE2	; 226
    18ea:	94 e0       	ldi	r25, 0x04	; 4
    18ec:	9f 93       	push	r25
    18ee:	8f 93       	push	r24
    18f0:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashWrite(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    18f8:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
		printf_P(PSTR("spi_FlashWrite: 1st page write failed\n"));

	return ret;
}
    18fa:	81 2f       	mov	r24, r17
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	08 95       	ret

00001912 <spi_FlashReadFromPage>:
*
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	c6 2f       	mov	r28, r22
    1928:	d7 2f       	mov	r29, r23
    192a:	18 2f       	mov	r17, r24
    192c:	6a 01       	movw	r12, r20
    192e:	59 01       	movw	r10, r18
	uint16_t ret = 0;
	union fourBytes pageAddress;
	
	pageAddress.word = paddress;
	
	if ((address + nbytes) <=  FLASH_PAGE_MAX_BYTES)
    1930:	e0 2e       	mov	r14, r16
    1932:	f1 2c       	mov	r15, r1
    1934:	c7 01       	movw	r24, r14
    1936:	84 0f       	add	r24, r20
    1938:	95 1f       	adc	r25, r21
    193a:	81 38       	cpi	r24, 0x81	; 129
    193c:	98 40       	sbci	r25, 0x08	; 8
    193e:	08 f0       	brcs	.+2      	; 0x1942 <spi_FlashReadFromPage+0x30>
    1940:	3d c0       	rjmp	.+122    	; 0x19bc <spi_FlashReadFromPage+0xaa>
	{
		if (spi_FlashWaitUntilReady())
    1942:	9a de       	rcall	.-716    	; 0x1678 <spi_FlashWaitUntilReady>
    1944:	88 23       	and	r24, r24
    1946:	79 f1       	breq	.+94     	; 0x19a6 <spi_FlashReadFromPage+0x94>
		{
			selectFlash();
    1948:	2e de       	rcall	.-932    	; 0x15a6 <selectFlash>
			spiTransferByte(FLASH_PAGE_READ);
    194a:	83 e1       	ldi	r24, 0x13	; 19
    194c:	c7 d1       	rcall	.+910    	; 0x1cdc <spiTransferByte>
			spiTransferByte(pageAddress.byte[2]);
    194e:	81 2f       	mov	r24, r17
    1950:	c5 d1       	rcall	.+906    	; 0x1cdc <spiTransferByte>
			spiTransferByte(pageAddress.byte[1]);
    1952:	8d 2f       	mov	r24, r29
			spiTransferByte(pageAddress.byte[0]);
    1954:	c3 d1       	rcall	.+902    	; 0x1cdc <spiTransferByte>
    1956:	8c 2f       	mov	r24, r28
			deSelectFlash();
    1958:	c1 d1       	rcall	.+898    	; 0x1cdc <spiTransferByte>
			if (spi_FlashWaitUntilReady())
    195a:	2b de       	rcall	.-938    	; 0x15b2 <deSelectFlash>
    195c:	8d de       	rcall	.-742    	; 0x1678 <spi_FlashWaitUntilReady>
			{
				union twoBytes addrInPage;
				addrInPage.word = address;
				selectFlash();
    195e:	88 23       	and	r24, r24
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
    1960:	b9 f0       	breq	.+46     	; 0x1990 <spi_FlashReadFromPage+0x7e>
    1962:	21 de       	rcall	.-958    	; 0x15a6 <selectFlash>
    1964:	83 e0       	ldi	r24, 0x03	; 3
				spiTransferByte(addrInPage.byte[1]);
    1966:	ba d1       	rcall	.+884    	; 0x1cdc <spiTransferByte>
    1968:	8d 2d       	mov	r24, r13
				spiTransferByte(addrInPage.byte[0]);
    196a:	b8 d1       	rcall	.+880    	; 0x1cdc <spiTransferByte>
    196c:	8c 2d       	mov	r24, r12
    196e:	b6 d1       	rcall	.+876    	; 0x1cdc <spiTransferByte>
				spiTransferByte(0);  // dummy byte required
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	b4 d1       	rcall	.+872    	; 0x1cdc <spiTransferByte>
				for (uint8_t i = 0; i < nbytes; i++)
    1974:	c0 e0       	ldi	r28, 0x00	; 0
    1976:	08 c0       	rjmp	.+16     	; 0x1988 <spi_FlashReadFromPage+0x76>
				{
					buffer[i] = spiTransferByte(0);
    1978:	65 01       	movw	r12, r10
    197a:	cc 0e       	add	r12, r28
    197c:	d1 1c       	adc	r13, r1
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	ad d1       	rcall	.+858    	; 0x1cdc <spiTransferByte>
    1982:	f6 01       	movw	r30, r12
    1984:	80 83       	st	Z, r24
    1986:	cf 5f       	subi	r28, 0xFF	; 255
				selectFlash();
				spiTransferByte(FLASH_READ_FROM_CACHEx1);
				spiTransferByte(addrInPage.byte[1]);
				spiTransferByte(addrInPage.byte[0]);
				spiTransferByte(0);  // dummy byte required
				for (uint8_t i = 0; i < nbytes; i++)
    1988:	c0 17       	cp	r28, r16
    198a:	b0 f3       	brcs	.-20     	; 0x1978 <spi_FlashReadFromPage+0x66>
    198c:	12 de       	rcall	.-988    	; 0x15b2 <deSelectFlash>
				{
					buffer[i] = spiTransferByte(0);
				}
				deSelectFlash();
    198e:	20 c0       	rjmp	.+64     	; 0x19d0 <spi_FlashReadFromPage+0xbe>
    1990:	88 ea       	ldi	r24, 0xA8	; 168
    1992:	94 e0       	ldi	r25, 0x04	; 4
				ret = nbytes;
			}
			else
				printf_P(PSTR("spi_FlashReadFromPage: Flash never ready after page read\n"));
    1994:	9f 93       	push	r25
    1996:	8f 93       	push	r24
    1998:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	e1 2c       	mov	r14, r1
    19a2:	f1 2c       	mov	r15, r1
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    19a4:	15 c0       	rjmp	.+42     	; 0x19d0 <spi_FlashReadFromPage+0xbe>
    19a6:	8e e7       	ldi	r24, 0x7E	; 126
    19a8:	94 e0       	ldi	r25, 0x04	; 4
			}
			else
				printf_P(PSTR("spi_FlashReadFromPage: Flash never ready after page read\n"));
		}
		else
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
    19aa:	9f 93       	push	r25
    19ac:	8f 93       	push	r24
    19ae:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	e1 2c       	mov	r14, r1
    19b8:	f1 2c       	mov	r15, r1
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <spi_FlashReadFromPage+0xbe>
    19bc:	89 e4       	ldi	r24, 0x49	; 73
    19be:	94 e0       	ldi	r25, 0x04	; 4
		}
		else
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashReadFromPage: buffer crosses page boundary\n"));
    19c0:	9f 93       	push	r25
    19c2:	8f 93       	push	r24
    19c4:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	e1 2c       	mov	r14, r1
    19ce:	f1 2c       	mov	r15, r1
*  This function cannot cross a page boundary.  
*  That is for a higher level function calling this one to work out
************************************/
uint8_t spi_FlashReadFromPage(uint32_t paddress, uint16_t address, uint8_t* buffer, uint8_t nbytes)
{
	uint16_t ret = 0;
    19d0:	8e 2d       	mov	r24, r14
    19d2:	df 91       	pop	r29
			printf_P(PSTR("spi_FlashReadFromPage: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashReadFromPage: buffer crosses page boundary\n"));
	return ret;
}
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	bf 90       	pop	r11
    19e4:	af 90       	pop	r10
    19e6:	08 95       	ret

000019e8 <spi_FlashRead>:
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
*  Crosses page boundary if necessary
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	7a 01       	movw	r14, r20
    19fe:	12 2f       	mov	r17, r18
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
    1a00:	20 e8       	ldi	r18, 0x80	; 128
    1a02:	38 e0       	ldi	r19, 0x08	; 8
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 00 1a 	call	0x3400	; 0x3400 <__udivmodsi4>
    1a0c:	49 01       	movw	r8, r18
    1a0e:	5a 01       	movw	r10, r20
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
    1a10:	86 2f       	mov	r24, r22
    1a12:	97 2f       	mov	r25, r23
    1a14:	46 2f       	mov	r20, r22
    1a16:	57 2f       	mov	r21, r23
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
	
	if (addressInPage + numBytes > FLASH_PAGE_MAX_BYTES)
    1a18:	81 0f       	add	r24, r17
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	81 38       	cpi	r24, 0x81	; 129
    1a1e:	98 40       	sbci	r25, 0x08	; 8
    1a20:	28 f0       	brcs	.+10     	; 0x1a2c <spi_FlashRead+0x44>
	{
		firstPageNumBytes = (addressInPage + numBytes) - FLASH_PAGE_MAX_BYTES;
    1a22:	c1 2f       	mov	r28, r17
    1a24:	c6 0f       	add	r28, r22
    1a26:	c0 58       	subi	r28, 0x80	; 128
		crossesPage = true;
    1a28:	d1 e0       	ldi	r29, 0x01	; 1
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <spi_FlashRead+0x48>
	} 
	else
	{
		firstPageNumBytes = numBytes;
    1a2c:	c1 2f       	mov	r28, r17
{
	uint8_t ret = 0;
	uint32_t pageAddress = address / FLASH_PAGE_MAX_BYTES;
	uint16_t addressInPage = address % FLASH_PAGE_MAX_BYTES;
	uint8_t firstPageNumBytes;
	uint8_t crossesPage = false;
    1a2e:	d0 e0       	ldi	r29, 0x00	; 0
	} 
	else
	{
		firstPageNumBytes = numBytes;
	}
    if (spi_FlashReadFromPage(pageAddress, addressInPage, buffer, firstPageNumBytes) == firstPageNumBytes)
    1a30:	0c 2f       	mov	r16, r28
    1a32:	97 01       	movw	r18, r14
    1a34:	c5 01       	movw	r24, r10
    1a36:	b4 01       	movw	r22, r8
    1a38:	6c df       	rcall	.-296    	; 0x1912 <spi_FlashReadFromPage>
    1a3a:	c8 13       	cpse	r28, r24
    1a3c:	23 c0       	rjmp	.+70     	; 0x1a84 <spi_FlashRead+0x9c>
	{
		if (crossesPage)
    1a3e:	dd 23       	and	r29, r29
    1a40:	51 f1       	breq	.+84     	; 0x1a96 <spi_FlashRead+0xae>
		{
			if (spi_FlashReadFromPage(pageAddress+1, 0, buffer+firstPageNumBytes, numBytes - firstPageNumBytes) == (numBytes - firstPageNumBytes))
    1a42:	01 2f       	mov	r16, r17
    1a44:	0c 1b       	sub	r16, r28
    1a46:	d0 e0       	ldi	r29, 0x00	; 0
    1a48:	97 01       	movw	r18, r14
    1a4a:	2c 0f       	add	r18, r28
    1a4c:	3d 1f       	adc	r19, r29
    1a4e:	c5 01       	movw	r24, r10
    1a50:	b4 01       	movw	r22, r8
    1a52:	6f 5f       	subi	r22, 0xFF	; 255
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	8f 4f       	sbci	r24, 0xFF	; 255
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	59 df       	rcall	.-334    	; 0x1912 <spi_FlashReadFromPage>
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	21 2f       	mov	r18, r17
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	2c 1b       	sub	r18, r28
    1a68:	3d 0b       	sbc	r19, r29
    1a6a:	82 17       	cp	r24, r18
    1a6c:	93 07       	cpc	r25, r19
    1a6e:	99 f0       	breq	.+38     	; 0x1a96 <spi_FlashRead+0xae>
			{
				// success
				ret = numBytes;
			}
			else
				printf_P(PSTR("spi_FlashRead: 2nd page read failed\n"));
    1a70:	84 e2       	ldi	r24, 0x24	; 36
    1a72:	94 e0       	ldi	r25, 0x04	; 4
    1a74:	9f 93       	push	r25
    1a76:	8f 93       	push	r24
    1a78:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    1a80:	10 e0       	ldi	r17, 0x00	; 0
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <spi_FlashRead+0xae>
			// success
			ret = numBytes;
		}
	}
	else
		printf_P(PSTR("spi_FlashRead: 1st page read failed\n"));
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	9f 93       	push	r25
    1a8a:	8f 93       	push	r24
    1a8c:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
*
************************************/

uint8_t spi_FlashRead(uint32_t address, uint8_t *buffer,  uint8_t numBytes)
{
	uint8_t ret = 0;
    1a94:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
		printf_P(PSTR("spi_FlashRead: 1st page read failed\n"));

	return ret;
}
    1a96:	81 2f       	mov	r24, r17
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	08 95       	ret

00001aae <spi_FlashEraseBlock>:
/***********************************
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	7c 01       	movw	r14, r24
	uint16_t ret = 0;
	union fourBytes blockAddress;
	
	blockAddress.word = baddress;
	
	if (baddress <  FLASH_NUM_BLOCKS)
    1aba:	c1 14       	cp	r12, r1
    1abc:	88 e0       	ldi	r24, 0x08	; 8
    1abe:	d8 06       	cpc	r13, r24
    1ac0:	e1 04       	cpc	r14, r1
    1ac2:	f1 04       	cpc	r15, r1
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <spi_FlashEraseBlock+0x1a>
    1ac6:	3e c0       	rjmp	.+124    	; 0x1b44 <spi_FlashEraseBlock+0x96>
	{
		if (spi_FlashWaitUntilReady())
    1ac8:	d7 dd       	rcall	.-1106   	; 0x1678 <spi_FlashWaitUntilReady>
    1aca:	88 23       	and	r24, r24
    1acc:	89 f1       	breq	.+98     	; 0x1b30 <spi_FlashEraseBlock+0x82>
		{
			if (spi_FlashEnableWrite())
    1ace:	e2 dd       	rcall	.-1084   	; 0x1694 <spi_FlashEnableWrite>
    1ad0:	88 23       	and	r24, r24
    1ad2:	21 f1       	breq	.+72     	; 0x1b1c <spi_FlashEraseBlock+0x6e>
			{
				selectFlash();
    1ad4:	68 dd       	rcall	.-1328   	; 0x15a6 <selectFlash>
				spiTransferByte(FLASH_BLOCK_ERASE);
    1ad6:	88 ed       	ldi	r24, 0xD8	; 216
    1ad8:	01 d1       	rcall	.+514    	; 0x1cdc <spiTransferByte>
				spiTransferByte(blockAddress.byte[2]);
    1ada:	8e 2d       	mov	r24, r14
    1adc:	ff d0       	rcall	.+510    	; 0x1cdc <spiTransferByte>
				spiTransferByte(blockAddress.byte[1]);
    1ade:	8d 2d       	mov	r24, r13
    1ae0:	fd d0       	rcall	.+506    	; 0x1cdc <spiTransferByte>
				spiTransferByte(blockAddress.byte[0]);
    1ae2:	8c 2d       	mov	r24, r12
    1ae4:	fb d0       	rcall	.+502    	; 0x1cdc <spiTransferByte>
				deSelectFlash();
    1ae6:	65 dd       	rcall	.-1334   	; 0x15b2 <deSelectFlash>
    1ae8:	c7 dd       	rcall	.-1138   	; 0x1678 <spi_FlashWaitUntilReady>
				if (spi_FlashWaitUntilReady())
    1aea:	88 23       	and	r24, r24
    1aec:	69 f0       	breq	.+26     	; 0x1b08 <spi_FlashEraseBlock+0x5a>
    1aee:	ea dd       	rcall	.-1068   	; 0x16c4 <spi_FlashDisableWrite>
    1af0:	81 11       	cpse	r24, r1
				{
					if (spi_FlashDisableWrite())
    1af2:	32 c0       	rjmp	.+100    	; 0x1b58 <spi_FlashEraseBlock+0xaa>
    1af4:	84 ed       	ldi	r24, 0xD4	; 212
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	9f 93       	push	r25
						ret = 1;
					else
						printf_P(PSTR("spi_FlashEraseBlock: Write diasble failed\n"));
    1afa:	8f 93       	push	r24
    1afc:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	29 c0       	rjmp	.+82     	; 0x1b5a <spi_FlashEraseBlock+0xac>
    1b08:	8a e9       	ldi	r24, 0x9A	; 154
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	9f 93       	push	r25
						ret = 1;
					else
						printf_P(PSTR("spi_FlashEraseBlock: Write diasble failed\n"));
				}
				else
					printf_P(PSTR("spi_FlashEraseBlock: Flash never ready after block erase\n"));
    1b0e:	8f 93       	push	r24
    1b10:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	1f c0       	rjmp	.+62     	; 0x1b5a <spi_FlashEraseBlock+0xac>
    1b1c:	8b e6       	ldi	r24, 0x6B	; 107
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1b1e:	93 e0       	ldi	r25, 0x03	; 3
    1b20:	9f 93       	push	r25
				}
				else
					printf_P(PSTR("spi_FlashEraseBlock: Flash never ready after block erase\n"));
			}
			else
				printf_P(PSTR("spi_FlashEraseBlock: Flash won't enable write\n"));
    1b22:	8f 93       	push	r24
    1b24:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	15 c0       	rjmp	.+42     	; 0x1b5a <spi_FlashEraseBlock+0xac>
    1b30:	83 e4       	ldi	r24, 0x43	; 67
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	9f 93       	push	r25
			else
				printf_P(PSTR("spi_FlashEraseBlock: Flash won't enable write\n"));

		}
		else
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
    1b36:	8f 93       	push	r24
    1b38:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	0b c0       	rjmp	.+22     	; 0x1b5a <spi_FlashEraseBlock+0xac>
    1b44:	8c e0       	ldi	r24, 0x0C	; 12
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1b46:	93 e0       	ldi	r25, 0x03	; 3
    1b48:	9f 93       	push	r25
		}
		else
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
    1b4a:	8f 93       	push	r24
    1b4c:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <spi_FlashEraseBlock+0xac>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
*  Erase a Flash block
*  uint32_t baddress = block address
************************************/
uint8_t spi_FlashEraseBlock(uint32_t baddress)
{
	uint16_t ret = 0;
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
				spiTransferByte(blockAddress.byte[0]);
				deSelectFlash();
				if (spi_FlashWaitUntilReady())
				{
					if (spi_FlashDisableWrite())
						ret = 1;
    1b5e:	df 90       	pop	r13
			printf_P(PSTR("spi_FlashEraseBlock: Flash never ready\n"));
	}
	else
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
	return ret;
}
    1b60:	cf 90       	pop	r12
    1b62:	08 95       	ret

00001b64 <spi_FlashReset>:
    1b64:	cf 93       	push	r28
    1b66:	1f dd       	rcall	.-1474   	; 0x15a6 <selectFlash>
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
{
	uint8_t status;
		
	selectFlash();
	spiTransferByte(FLASH_RESET);
	deSelectFlash();
    1b6a:	b8 d0       	rcall	.+368    	; 0x1cdc <spiTransferByte>
    1b6c:	22 dd       	rcall	.-1468   	; 0x15b2 <deSelectFlash>
	status = spi_FlashGetStatusRegister();
    1b6e:	6e dd       	rcall	.-1316   	; 0x164c <spi_FlashGetStatusRegister>
    1b70:	c8 2f       	mov	r28, r24
    1b72:	1f 92       	push	r1
	printf("spi_Reset: status is 0x%02x\n", status);
    1b74:	8f 93       	push	r24
    1b76:	8d e1       	ldi	r24, 0x1D	; 29
    1b78:	95 e0       	ldi	r25, 0x05	; 5
    1b7a:	9f 93       	push	r25
    1b7c:	8f 93       	push	r24
    1b7e:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1b82:	0f 90       	pop	r0
	
	return status; 
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	8c 2f       	mov	r24, r28
}
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <spi_FlashEraseAllBlocks>:
    1b90:	cf 92       	push	r12
		printf_P(PSTR("spi_FlashEraseBlock: Address exceeds available blocks\n"));
	return ret;
}

uint8_t spi_FlashEraseAllBlocks()
{
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
	uint8_t ret = true;
	uint16_t blockNum = 0;
	uint32_t blockAddr;
	uint16_t numBlocks = FLASH_NUM_BLOCKS;
	
	spi_FlashReset();
    1b9e:	e2 df       	rcall	.-60     	; 0x1b64 <spi_FlashReset>
	
	// just do a few blocks for testing
	numBlocks = 10;
	
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1ba0:	c0 e0       	ldi	r28, 0x00	; 0
    1ba2:	d0 e0       	ldi	r29, 0x00	; 0
	return ret;
}

uint8_t spi_FlashEraseAllBlocks()
{
	uint8_t ret = true;
    1ba4:	11 e0       	ldi	r17, 0x01	; 1
	spi_FlashReset();
	
	// just do a few blocks for testing
	numBlocks = 10;
	
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1ba6:	22 c0       	rjmp	.+68     	; 0x1bec <spi_FlashEraseAllBlocks+0x5c>
	{
		blockAddr = blockNum;
    1ba8:	6e 01       	movw	r12, r28
    1baa:	e1 2c       	mov	r14, r1
    1bac:	f1 2c       	mov	r15, r1
		printf_P(PSTR("Erasing block %d\n"),blockNum);
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	8a ef       	ldi	r24, 0xFA	; 250
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
		if (!spi_FlashEraseBlock(blockAddr))
    1bbe:	c7 01       	movw	r24, r14
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	75 df       	rcall	.-278    	; 0x1aae <spi_FlashEraseBlock>
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	81 11       	cpse	r24, r1
    1bce:	0d c0       	rjmp	.+26     	; 0x1bea <spi_FlashEraseAllBlocks+0x5a>
		{
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	86 ec       	ldi	r24, 0xC6	; 198
    1bd6:	92 e0       	ldi	r25, 0x02	; 2
    1bd8:	9f 93       	push	r25
    1bda:	8f 93       	push	r24
    1bdc:	0e 94 be 1b 	call	0x377c	; 0x377c <printf_P>
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
			ret = false;
    1be8:	10 e0       	ldi	r17, 0x00	; 0
	spi_FlashReset();
	
	// just do a few blocks for testing
	numBlocks = 10;
	
	for (blockNum = 0; blockNum < numBlocks; blockNum++ )
    1bea:	21 96       	adiw	r28, 0x01	; 1
    1bec:	ca 30       	cpi	r28, 0x0A	; 10
    1bee:	d1 05       	cpc	r29, r1
    1bf0:	d8 f2       	brcs	.-74     	; 0x1ba8 <spi_FlashEraseAllBlocks+0x18>
			printf_P(PSTR("spi_FlashEraseAllBlocks: Erase failure at block %d\n"),blockNum);
			ret = false;
		}
	}
	return ret;
}
    1bf2:	81 2f       	mov	r24, r17
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <RTC_config>:
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	1f 92       	push	r1
    1c0c:	1f 92       	push	r1
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	85 e0       	ldi	r24, 0x05	; 5
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	8a e3       	ldi	r24, 0x3A	; 58
    1c18:	95 e0       	ldi	r25, 0x05	; 5
    1c1a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	29 c0       	rjmp	.+82     	; 0x1c74 <RTC_config+0x70>
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	be 01       	movw	r22, r28
    1c26:	6e 5f       	subi	r22, 0xFE	; 254
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f e0       	ldi	r24, 0x0F	; 15
    1c2c:	3f d2       	rcall	.+1150   	; 0x20ac <spi_RTC_Read>
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	85 30       	cpi	r24, 0x05	; 5
    1c32:	11 f1       	breq	.+68     	; 0x1c78 <RTC_config+0x74>
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	be 01       	movw	r22, r28
    1c38:	6f 5f       	subi	r22, 0xFF	; 255
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	8f e0       	ldi	r24, 0x0F	; 15
    1c3e:	20 d2       	rcall	.+1088   	; 0x2080 <spi_RTC_Write>
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	1f 92       	push	r1
    1c44:	8f 93       	push	r24
    1c46:	1f 92       	push	r1
    1c48:	1f 93       	push	r17
    1c4a:	8b e4       	ldi	r24, 0x4B	; 75
    1c4c:	95 e0       	ldi	r25, 0x05	; 5
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	1f 92       	push	r1
    1c5a:	8f 93       	push	r24
    1c5c:	8c e5       	ldi	r24, 0x5C	; 92
    1c5e:	95 e0       	ldi	r25, 0x05	; 5
    1c60:	9f 93       	push	r25
    1c62:	8f 93       	push	r24
    1c64:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1c68:	1f 5f       	subi	r17, 0xFF	; 255
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	14 31       	cpi	r17, 0x14	; 20
    1c76:	a8 f2       	brcs	.-86     	; 0x1c22 <RTC_config+0x1e>
    1c78:	14 31       	cpi	r17, 0x14	; 20
    1c7a:	20 f0       	brcs	.+8      	; 0x1c84 <RTC_config+0x80>
    1c7c:	8b e6       	ldi	r24, 0x6B	; 107
    1c7e:	95 e0       	ldi	r25, 0x05	; 5
    1c80:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	08 95       	ret

00001c90 <RTC_readCLKF>:
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	1f 92       	push	r1
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f e0       	ldi	r24, 0x0F	; 15
    1ca4:	03 d2       	rcall	.+1030   	; 0x20ac <spi_RTC_Read>
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	1f 92       	push	r1
    1caa:	8f 93       	push	r24
    1cac:	82 e9       	ldi	r24, 0x92	; 146
    1cae:	95 e0       	ldi	r25, 0x05	; 5
    1cb0:	9f 93       	push	r25
    1cb2:	8f 93       	push	r24
    1cb4:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <init_spi>:
    1cc8:	1d bc       	out	0x2d, r1	; 45
    1cca:	81 e5       	ldi	r24, 0x51	; 81
    1ccc:	8c bd       	out	0x2c, r24	; 44
    1cce:	71 dc       	rcall	.-1822   	; 0x15b2 <deSelectFlash>
    1cd0:	42 dc       	rcall	.-1916   	; 0x1556 <deSelectFRAM>
    1cd2:	4b dc       	rcall	.-1898   	; 0x156a <deSelectOpticsDAC>
    1cd4:	74 dc       	rcall	.-1816   	; 0x15be <deSelectRTC>
    1cd6:	61 dc       	rcall	.-1854   	; 0x159a <deSelectBuckCtrlDAC>
    1cd8:	54 cc       	rjmp	.-1880   	; 0x1582 <deSelectADC2518>
    1cda:	08 95       	ret

00001cdc <spiTransferByte>:
    1cdc:	8e bd       	out	0x2e, r24	; 46
    1cde:	0d b4       	in	r0, 0x2d	; 45
    1ce0:	07 fe       	sbrs	r0, 7
    1ce2:	fd cf       	rjmp	.-6      	; 0x1cde <spiTransferByte+0x2>
    1ce4:	8e b5       	in	r24, 0x2e	; 46
    1ce6:	08 95       	ret

00001ce8 <spiSendBytes>:
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	0a c0       	rjmp	.+20     	; 0x1d04 <spiSendBytes+0x1c>
    1cf0:	cf 01       	movw	r24, r30
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	40 81       	ld	r20, Z
    1cf6:	4e bd       	out	0x2e, r20	; 46
    1cf8:	0d b4       	in	r0, 0x2d	; 45
    1cfa:	07 fe       	sbrs	r0, 7
    1cfc:	fd cf       	rjmp	.-6      	; 0x1cf8 <spiSendBytes+0x10>
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	fc 01       	movw	r30, r24
    1d04:	26 17       	cp	r18, r22
    1d06:	37 07       	cpc	r19, r23
    1d08:	98 f3       	brcs	.-26     	; 0x1cf0 <spiSendBytes+0x8>
    1d0a:	08 95       	ret

00001d0c <spiGetBytes>:
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <spiGetBytes+0x1a>
    1d14:	1e bc       	out	0x2e, r1	; 46
    1d16:	0d b4       	in	r0, 0x2d	; 45
    1d18:	07 fe       	sbrs	r0, 7
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <spiGetBytes+0xa>
    1d1c:	8e b5       	in	r24, 0x2e	; 46
    1d1e:	80 83       	st	Z, r24
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	31 96       	adiw	r30, 0x01	; 1
    1d26:	26 17       	cp	r18, r22
    1d28:	37 07       	cpc	r19, r23
    1d2a:	a0 f3       	brcs	.-24     	; 0x1d14 <spiGetBytes+0x8>
    1d2c:	08 95       	ret

00001d2e <spiSend2ByteBigEndian>:
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	1f 92       	push	r1
    1d34:	1f 92       	push	r1
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	8e bd       	out	0x2e, r24	; 46
    1d42:	0d b4       	in	r0, 0x2d	; 45
    1d44:	07 fe       	sbrs	r0, 7
    1d46:	fd cf       	rjmp	.-6      	; 0x1d42 <spiSend2ByteBigEndian+0x14>
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	8e bd       	out	0x2e, r24	; 46
    1d4c:	0d b4       	in	r0, 0x2d	; 45
    1d4e:	07 fe       	sbrs	r0, 7
    1d50:	fd cf       	rjmp	.-6      	; 0x1d4c <spiSend2ByteBigEndian+0x1e>
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret

00001d5c <spi_buckCtrlDac>:
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	eb 01       	movw	r28, r22
    1d68:	18 2f       	mov	r17, r24
    1d6a:	17 70       	andi	r17, 0x07	; 7
    1d6c:	90 e1       	ldi	r25, 0x10	; 16
    1d6e:	19 9f       	mul	r17, r25
    1d70:	90 01       	movw	r18, r0
    1d72:	11 24       	eor	r1, r1
    1d74:	e7 2e       	mov	r14, r23
    1d76:	ff 24       	eor	r15, r15
    1d78:	ab 01       	movw	r20, r22
    1d7a:	55 27       	eor	r21, r21
    1d7c:	5f 93       	push	r21
    1d7e:	4f 93       	push	r20
    1d80:	2e 29       	or	r18, r14
    1d82:	3f 29       	or	r19, r15
    1d84:	3f 93       	push	r19
    1d86:	2f 93       	push	r18
    1d88:	df 93       	push	r29
    1d8a:	6f 93       	push	r22
    1d8c:	1f 92       	push	r1
    1d8e:	8f 93       	push	r24
    1d90:	8a ea       	ldi	r24, 0xAA	; 170
    1d92:	95 e0       	ldi	r25, 0x05	; 5
    1d94:	9f 93       	push	r25
    1d96:	8f 93       	push	r24
    1d98:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1d9c:	f8 db       	rcall	.-2064   	; 0x158e <selectBuckCtrlDAC>
    1d9e:	81 2f       	mov	r24, r17
    1da0:	82 95       	swap	r24
    1da2:	80 7f       	andi	r24, 0xF0	; 240
    1da4:	8e 29       	or	r24, r14
    1da6:	9a df       	rcall	.-204    	; 0x1cdc <spiTransferByte>
    1da8:	8c 2f       	mov	r24, r28
    1daa:	98 df       	rcall	.-208    	; 0x1cdc <spiTransferByte>
    1dac:	f6 db       	rcall	.-2068   	; 0x159a <deSelectBuckCtrlDAC>
    1dae:	8d b7       	in	r24, 0x3d	; 61
    1db0:	9e b7       	in	r25, 0x3e	; 62
    1db2:	0a 96       	adiw	r24, 0x0a	; 10
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	9e bf       	out	0x3e, r25	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	8d bf       	out	0x3d, r24	; 61
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	08 95       	ret

00001dca <spi_OpticsDAC>:
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	eb 01       	movw	r28, r22
    1dd6:	18 2f       	mov	r17, r24
    1dd8:	17 70       	andi	r17, 0x07	; 7
    1dda:	90 e1       	ldi	r25, 0x10	; 16
    1ddc:	19 9f       	mul	r17, r25
    1dde:	90 01       	movw	r18, r0
    1de0:	11 24       	eor	r1, r1
    1de2:	e7 2e       	mov	r14, r23
    1de4:	ff 24       	eor	r15, r15
    1de6:	ab 01       	movw	r20, r22
    1de8:	55 27       	eor	r21, r21
    1dea:	5f 93       	push	r21
    1dec:	4f 93       	push	r20
    1dee:	2e 29       	or	r18, r14
    1df0:	3f 29       	or	r19, r15
    1df2:	3f 93       	push	r19
    1df4:	2f 93       	push	r18
    1df6:	df 93       	push	r29
    1df8:	6f 93       	push	r22
    1dfa:	1f 92       	push	r1
    1dfc:	8f 93       	push	r24
    1dfe:	8b ed       	ldi	r24, 0xDB	; 219
    1e00:	95 e0       	ldi	r25, 0x05	; 5
    1e02:	9f 93       	push	r25
    1e04:	8f 93       	push	r24
    1e06:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1e0a:	a9 db       	rcall	.-2222   	; 0x155e <selectOpticsDAC>
    1e0c:	81 2f       	mov	r24, r17
    1e0e:	82 95       	swap	r24
    1e10:	80 7f       	andi	r24, 0xF0	; 240
    1e12:	8e 29       	or	r24, r14
    1e14:	63 df       	rcall	.-314    	; 0x1cdc <spiTransferByte>
    1e16:	8c 2f       	mov	r24, r28
    1e18:	61 df       	rcall	.-318    	; 0x1cdc <spiTransferByte>
    1e1a:	a7 db       	rcall	.-2226   	; 0x156a <deSelectOpticsDAC>
    1e1c:	8d b7       	in	r24, 0x3d	; 61
    1e1e:	9e b7       	in	r25, 0x3e	; 62
    1e20:	0a 96       	adiw	r24, 0x0a	; 10
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	9e bf       	out	0x3e, r25	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	8d bf       	out	0x3d, r24	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	08 95       	ret

00001e38 <spi_OpticsDAC_BroadCast>:
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	c8 2f       	mov	r28, r24
    1e3e:	d9 2f       	mov	r29, r25
    1e40:	8c e0       	ldi	r24, 0x0C	; 12
    1e42:	96 e0       	ldi	r25, 0x06	; 6
    1e44:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    1e48:	8a db       	rcall	.-2284   	; 0x155e <selectOpticsDAC>
    1e4a:	8d 2f       	mov	r24, r29
    1e4c:	80 6c       	ori	r24, 0xC0	; 192
    1e4e:	46 df       	rcall	.-372    	; 0x1cdc <spiTransferByte>
    1e50:	8c 2f       	mov	r24, r28
    1e52:	44 df       	rcall	.-376    	; 0x1cdc <spiTransferByte>
    1e54:	8a db       	rcall	.-2284   	; 0x156a <deSelectOpticsDAC>
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <spi_OpticsBuckCtl_BroadCast>:
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	c8 2f       	mov	r28, r24
    1e62:	d9 2f       	mov	r29, r25
    1e64:	83 e2       	ldi	r24, 0x23	; 35
    1e66:	96 e0       	ldi	r25, 0x06	; 6
    1e68:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    1e6c:	90 db       	rcall	.-2272   	; 0x158e <selectBuckCtrlDAC>
    1e6e:	8d 2f       	mov	r24, r29
    1e70:	80 6c       	ori	r24, 0xC0	; 192
    1e72:	34 df       	rcall	.-408    	; 0x1cdc <spiTransferByte>
    1e74:	8c 2f       	mov	r24, r28
    1e76:	32 df       	rcall	.-412    	; 0x1cdc <spiTransferByte>
    1e78:	90 db       	rcall	.-2272   	; 0x159a <deSelectBuckCtrlDAC>
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	08 95       	ret

00001e80 <spi_FRAM_writeEnable>:
    1e80:	66 db       	rcall	.-2356   	; 0x154e <selectFRAM>
    1e82:	86 e0       	ldi	r24, 0x06	; 6
    1e84:	2b df       	rcall	.-426    	; 0x1cdc <spiTransferByte>
    1e86:	67 cb       	rjmp	.-2354   	; 0x1556 <deSelectFRAM>
    1e88:	08 95       	ret

00001e8a <FRAM_ReadStatusRegister>:
    1e8a:	cf 93       	push	r28
    1e8c:	60 db       	rcall	.-2368   	; 0x154e <selectFRAM>
    1e8e:	85 e0       	ldi	r24, 0x05	; 5
    1e90:	25 df       	rcall	.-438    	; 0x1cdc <spiTransferByte>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	23 df       	rcall	.-442    	; 0x1cdc <spiTransferByte>
    1e96:	c8 2f       	mov	r28, r24
    1e98:	5e db       	rcall	.-2372   	; 0x1556 <deSelectFRAM>
    1e9a:	1f 92       	push	r1
    1e9c:	cf 93       	push	r28
    1e9e:	8c e9       	ldi	r24, 0x9C	; 156
    1ea0:	97 e0       	ldi	r25, 0x07	; 7
    1ea2:	9f 93       	push	r25
    1ea4:	8f 93       	push	r24
    1ea6:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	8c 2f       	mov	r24, r28
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <spi_FRAM_write>:
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	8c 01       	movw	r16, r24
    1ec6:	7b 01       	movw	r14, r22
    1ec8:	ea 01       	movw	r28, r20
    1eca:	84 0f       	add	r24, r20
    1ecc:	95 1f       	adc	r25, r21
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	90 42       	sbci	r25, 0x20	; 32
    1ed2:	20 f0       	brcs	.+8      	; 0x1edc <spi_FRAM_write+0x24>
    1ed4:	89 e3       	ldi	r24, 0x39	; 57
    1ed6:	96 e0       	ldi	r25, 0x06	; 6
    1ed8:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    1edc:	d1 df       	rcall	.-94     	; 0x1e80 <spi_FRAM_writeEnable>
    1ede:	37 db       	rcall	.-2450   	; 0x154e <selectFRAM>
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	fc de       	rcall	.-520    	; 0x1cdc <spiTransferByte>
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	23 df       	rcall	.-442    	; 0x1d2e <spiSend2ByteBigEndian>
    1ee8:	be 01       	movw	r22, r28
    1eea:	c7 01       	movw	r24, r14
    1eec:	fd de       	rcall	.-518    	; 0x1ce8 <spiSendBytes>
    1eee:	33 db       	rcall	.-2458   	; 0x1556 <deSelectFRAM>
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	08 95       	ret

00001efe <spi_FRAM_read>:
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	c8 2f       	mov	r28, r24
    1f10:	d9 2f       	mov	r29, r25
    1f12:	8b 01       	movw	r16, r22
    1f14:	6a 01       	movw	r12, r20
    1f16:	1b db       	rcall	.-2506   	; 0x154e <selectFRAM>
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	e0 de       	rcall	.-576    	; 0x1cdc <spiTransferByte>
    1f1c:	8d 2f       	mov	r24, r29
    1f1e:	de de       	rcall	.-580    	; 0x1cdc <spiTransferByte>
    1f20:	8c 2f       	mov	r24, r28
    1f22:	dc de       	rcall	.-584    	; 0x1cdc <spiTransferByte>
    1f24:	c0 e0       	ldi	r28, 0x00	; 0
    1f26:	d0 e0       	ldi	r29, 0x00	; 0
    1f28:	0a c0       	rjmp	.+20     	; 0x1f3e <spi_FRAM_read+0x40>
    1f2a:	78 01       	movw	r14, r16
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	e8 1a       	sub	r14, r24
    1f30:	f8 0a       	sbc	r15, r24
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	d3 de       	rcall	.-602    	; 0x1cdc <spiTransferByte>
    1f36:	f8 01       	movw	r30, r16
    1f38:	80 83       	st	Z, r24
    1f3a:	21 96       	adiw	r28, 0x01	; 1
    1f3c:	87 01       	movw	r16, r14
    1f3e:	cc 15       	cp	r28, r12
    1f40:	dd 05       	cpc	r29, r13
    1f42:	98 f3       	brcs	.-26     	; 0x1f2a <spi_FRAM_read+0x2c>
    1f44:	08 db       	rcall	.-2544   	; 0x1556 <deSelectFRAM>
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	08 95       	ret

00001f58 <read_FRAM_DeviceID>:
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <read_FRAM_DeviceID+0x6>
    1f5e:	1f 92       	push	r1
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	f4 da       	rcall	.-2584   	; 0x154e <selectFRAM>
    1f66:	8f ea       	ldi	r24, 0xAF	; 175
    1f68:	b9 de       	rcall	.-654    	; 0x1cdc <spiTransferByte>
    1f6a:	64 e0       	ldi	r22, 0x04	; 4
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	ce 01       	movw	r24, r28
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	cc de       	rcall	.-616    	; 0x1d0c <spiGetBytes>
    1f74:	f0 da       	rcall	.-2592   	; 0x1556 <deSelectFRAM>
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	1f 92       	push	r1
    1f80:	3f 93       	push	r19
    1f82:	1f 92       	push	r1
    1f84:	2f 93       	push	r18
    1f86:	1f 92       	push	r1
    1f88:	9f 93       	push	r25
    1f8a:	1f 92       	push	r1
    1f8c:	8f 93       	push	r24
    1f8e:	8c e5       	ldi	r24, 0x5C	; 92
    1f90:	96 e0       	ldi	r25, 0x06	; 6
    1f92:	9f 93       	push	r25
    1f94:	8f 93       	push	r24
    1f96:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <wrFRAM>:
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	28 97       	sbiw	r28, 0x08	; 8
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	5c df       	rcall	.-328    	; 0x1e80 <spi_FRAM_writeEnable>
    1fc8:	8f e1       	ldi	r24, 0x1F	; 31
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	81 e4       	ldi	r24, 0x41	; 65
    1fce:	8e 83       	std	Y+6, r24	; 0x06
    1fd0:	81 e8       	ldi	r24, 0x81	; 129
    1fd2:	8f 83       	std	Y+7, r24	; 0x07
    1fd4:	8a ef       	ldi	r24, 0xFA	; 250
    1fd6:	88 87       	std	Y+8, r24	; 0x08
    1fd8:	44 e0       	ldi	r20, 0x04	; 4
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	be 01       	movw	r22, r28
    1fde:	6b 5f       	subi	r22, 0xFB	; 251
    1fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	94 e0       	ldi	r25, 0x04	; 4
    1fe6:	68 df       	rcall	.-304    	; 0x1eb8 <spi_FRAM_write>
    1fe8:	44 e0       	ldi	r20, 0x04	; 4
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	be 01       	movw	r22, r28
    1fee:	6f 5f       	subi	r22, 0xFF	; 255
    1ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	94 e0       	ldi	r25, 0x04	; 4
    1ff6:	83 df       	rcall	.-250    	; 0x1efe <spi_FRAM_read>
    1ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	1f 92       	push	r1
    2002:	3f 93       	push	r19
    2004:	1f 92       	push	r1
    2006:	2f 93       	push	r18
    2008:	1f 92       	push	r1
    200a:	9f 93       	push	r25
    200c:	1f 92       	push	r1
    200e:	8f 93       	push	r24
    2010:	8f e6       	ldi	r24, 0x6F	; 111
    2012:	96 e0       	ldi	r25, 0x06	; 6
    2014:	9f 93       	push	r25
    2016:	8f 93       	push	r24
    2018:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	28 96       	adiw	r28, 0x08	; 8
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	08 95       	ret

00002038 <framSaveSerialNumber>:
    2038:	90 93 79 08 	sts	0x0879, r25	; 0x800879 <serialNumber+0x1>
    203c:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <serialNumber>
    2040:	42 e0       	ldi	r20, 0x02	; 2
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	68 e7       	ldi	r22, 0x78	; 120
    2046:	78 e0       	ldi	r23, 0x08	; 8
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	35 cf       	rjmp	.-406    	; 0x1eb8 <spi_FRAM_write>
    204e:	08 95       	ret

00002050 <framReadSerialNumber>:
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	68 e7       	ldi	r22, 0x78	; 120
    2056:	78 e0       	ldi	r23, 0x08	; 8
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	50 df       	rcall	.-352    	; 0x1efe <spi_FRAM_read>
    205e:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <serialNumber+0x1>
    2062:	8f 93       	push	r24
    2064:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <serialNumber>
    2068:	8f 93       	push	r24
    206a:	8c e7       	ldi	r24, 0x7C	; 124
    206c:	96 e0       	ldi	r25, 0x06	; 6
    206e:	9f 93       	push	r25
    2070:	8f 93       	push	r24
    2072:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	08 95       	ret

00002080 <spi_RTC_Write>:
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	d8 2f       	mov	r29, r24
    208a:	8b 01       	movw	r16, r22
    208c:	c4 2f       	mov	r28, r20
    208e:	9d da       	rcall	.-2758   	; 0x15ca <selectRTC>
    2090:	8d 2f       	mov	r24, r29
    2092:	80 62       	ori	r24, 0x20	; 32
    2094:	23 de       	rcall	.-954    	; 0x1cdc <spiTransferByte>
    2096:	6c 2f       	mov	r22, r28
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	c8 01       	movw	r24, r16
    209c:	25 de       	rcall	.-950    	; 0x1ce8 <spiSendBytes>
    209e:	8f da       	rcall	.-2786   	; 0x15be <deSelectRTC>
    20a0:	8c 2f       	mov	r24, r28
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	08 95       	ret

000020ac <spi_RTC_Read>:
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	d8 2f       	mov	r29, r24
    20b6:	8b 01       	movw	r16, r22
    20b8:	c4 2f       	mov	r28, r20
    20ba:	87 da       	rcall	.-2802   	; 0x15ca <selectRTC>
    20bc:	8d 2f       	mov	r24, r29
    20be:	80 6a       	ori	r24, 0xA0	; 160
    20c0:	0d de       	rcall	.-998    	; 0x1cdc <spiTransferByte>
    20c2:	6c 2f       	mov	r22, r28
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	c8 01       	movw	r24, r16
    20c8:	21 de       	rcall	.-958    	; 0x1d0c <spiGetBytes>
    20ca:	79 da       	rcall	.-2830   	; 0x15be <deSelectRTC>
    20cc:	8c 2f       	mov	r24, r28
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <getMuxConfiguration>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	1f 92       	push	r1
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	be 01       	movw	r22, r28
    20e8:	6f 5f       	subi	r22, 0xFF	; 255
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	80 e7       	ldi	r24, 0x70	; 112
    20ee:	80 d1       	rcall	.+768    	; 0x23f0 <twi_read_bytes>
    20f0:	89 2b       	or	r24, r25
    20f2:	21 f0       	breq	.+8      	; 0x20fc <getMuxConfiguration+0x24>
    20f4:	83 e8       	ldi	r24, 0x83	; 131
    20f6:	96 e0       	ldi	r25, 0x06	; 6
    20f8:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	0f 90       	pop	r0
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <setI2Cmux>:
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	1f 92       	push	r1
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	84 30       	cpi	r24, 0x04	; 4
    2114:	08 f0       	brcs	.+2      	; 0x2118 <setI2Cmux+0x12>
    2116:	4f c0       	rjmp	.+158    	; 0x21b6 <setI2Cmux+0xb0>
    2118:	1f 92       	push	r1
    211a:	8f 93       	push	r24
    211c:	8d e9       	ldi	r24, 0x9D	; 157
    211e:	96 e0       	ldi	r25, 0x06	; 6
    2120:	9f 93       	push	r25
    2122:	8f 93       	push	r24
    2124:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	be 01       	movw	r22, r28
    212c:	6f 5f       	subi	r22, 0xFF	; 255
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	80 e7       	ldi	r24, 0x70	; 112
    2132:	e7 d0       	rcall	.+462    	; 0x2302 <twi_write_bytes>
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	89 2b       	or	r24, r25
    213e:	09 f1       	breq	.+66     	; 0x2182 <setI2Cmux+0x7c>
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	e8 2f       	mov	r30, r24
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	ea 5d       	subi	r30, 0xDA	; 218
    2148:	f8 4f       	sbci	r31, 0xF8	; 248
    214a:	90 81       	ld	r25, Z
    214c:	97 30       	cpi	r25, 0x07	; 7
    214e:	58 f0       	brcs	.+22     	; 0x2166 <setI2Cmux+0x60>
    2150:	61 d0       	rcall	.+194    	; 0x2214 <init_twi>
    2152:	8f ea       	ldi	r24, 0xAF	; 175
    2154:	96 e0       	ldi	r25, 0x06	; 6
    2156:	9f 93       	push	r25
    2158:	8f 93       	push	r24
    215a:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	39 c0       	rjmp	.+114    	; 0x21d8 <setI2Cmux+0xd2>
    2166:	1f 92       	push	r1
    2168:	8f 93       	push	r24
    216a:	84 eb       	ldi	r24, 0xB4	; 180
    216c:	96 e0       	ldi	r25, 0x06	; 6
    216e:	9f 93       	push	r25
    2170:	8f 93       	push	r24
    2172:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	2b c0       	rjmp	.+86     	; 0x21d8 <setI2Cmux+0xd2>
    2182:	aa df       	rcall	.-172    	; 0x20d8 <getMuxConfiguration>
    2184:	99 81       	ldd	r25, Y+1	; 0x01
    2186:	89 17       	cp	r24, r25
    2188:	21 f1       	breq	.+72     	; 0x21d2 <setI2Cmux+0xcc>
    218a:	86 ed       	ldi	r24, 0xD6	; 214
    218c:	96 e0       	ldi	r25, 0x06	; 6
    218e:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	ea 5d       	subi	r30, 0xDA	; 218
    2198:	f8 4f       	sbci	r31, 0xF8	; 248
    219a:	80 81       	ld	r24, Z
    219c:	87 30       	cpi	r24, 0x07	; 7
    219e:	d8 f0       	brcs	.+54     	; 0x21d6 <setI2Cmux+0xd0>
    21a0:	39 d0       	rcall	.+114    	; 0x2214 <init_twi>
    21a2:	8e ef       	ldi	r24, 0xFE	; 254
    21a4:	96 e0       	ldi	r25, 0x06	; 6
    21a6:	9f 93       	push	r25
    21a8:	8f 93       	push	r24
    21aa:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	11 c0       	rjmp	.+34     	; 0x21d8 <setI2Cmux+0xd2>
    21b6:	1f 92       	push	r1
    21b8:	8f 93       	push	r24
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	97 e0       	ldi	r25, 0x07	; 7
    21be:	9f 93       	push	r25
    21c0:	8f 93       	push	r24
    21c2:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <setI2Cmux+0xd2>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <setI2Cmux+0xd2>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	0f 90       	pop	r0
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <setStatus>:
    21e0:	9f 93       	push	r25
    21e2:	8f 93       	push	r24
    21e4:	8a e2       	ldi	r24, 0x2A	; 42
    21e6:	97 e0       	ldi	r25, 0x07	; 7
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	08 95       	ret

000021fa <showERRORcode>:
    21fa:	1f 92       	push	r1
    21fc:	8f 93       	push	r24
    21fe:	8e e3       	ldi	r24, 0x3E	; 62
    2200:	97 e0       	ldi	r25, 0x07	; 7
    2202:	9f 93       	push	r25
    2204:	8f 93       	push	r24
    2206:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	08 95       	ret

00002214 <init_twi>:
    2214:	84 e9       	ldi	r24, 0x94	; 148
    2216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    221a:	eb e0       	ldi	r30, 0x0B	; 11
    221c:	f1 e0       	ldi	r31, 0x01	; 1
    221e:	80 81       	ld	r24, Z
    2220:	8f 7b       	andi	r24, 0xBF	; 191
    2222:	80 83       	st	Z, r24
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <init_twi+0x1e>
    2228:	e3 e0       	ldi	r30, 0x03	; 3
    222a:	f8 e4       	ldi	r31, 0x48	; 72
    222c:	31 97       	sbiw	r30, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <init_twi+0x18>
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	84 31       	cpi	r24, 0x14	; 20
    2234:	c8 f3       	brcs	.-14     	; 0x2228 <init_twi+0x14>
    2236:	eb e0       	ldi	r30, 0x0B	; 11
    2238:	f1 e0       	ldi	r31, 0x01	; 1
    223a:	80 81       	ld	r24, Z
    223c:	80 64       	ori	r24, 0x40	; 64
    223e:	80 83       	st	Z, r24
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	05 c0       	rjmp	.+10     	; 0x224e <init_twi+0x3a>
    2244:	e3 e0       	ldi	r30, 0x03	; 3
    2246:	f8 e4       	ldi	r31, 0x48	; 72
    2248:	31 97       	sbiw	r30, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <init_twi+0x34>
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	84 31       	cpi	r24, 0x14	; 20
    2250:	c8 f3       	brcs	.-14     	; 0x2244 <init_twi+0x30>
    2252:	eb e0       	ldi	r30, 0x0B	; 11
    2254:	f1 e0       	ldi	r31, 0x01	; 1
    2256:	80 81       	ld	r24, Z
    2258:	8f 7b       	andi	r24, 0xBF	; 191
    225a:	80 83       	st	Z, r24
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	05 c0       	rjmp	.+10     	; 0x226a <init_twi+0x56>
    2260:	e3 e0       	ldi	r30, 0x03	; 3
    2262:	f8 e4       	ldi	r31, 0x48	; 72
    2264:	31 97       	sbiw	r30, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <init_twi+0x50>
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	84 31       	cpi	r24, 0x14	; 20
    226c:	c8 f3       	brcs	.-14     	; 0x2260 <init_twi+0x4c>
    226e:	eb e0       	ldi	r30, 0x0B	; 11
    2270:	f1 e0       	ldi	r31, 0x01	; 1
    2272:	80 81       	ld	r24, Z
    2274:	80 64       	ori	r24, 0x40	; 64
    2276:	80 83       	st	Z, r24
    2278:	e9 eb       	ldi	r30, 0xB9	; 185
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8c 7f       	andi	r24, 0xFC	; 252
    2280:	80 83       	st	Z, r24
    2282:	80 81       	ld	r24, Z
    2284:	80 83       	st	Z, r24
    2286:	80 e1       	ldi	r24, 0x10	; 16
    2288:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    228c:	ec eb       	ldi	r30, 0xBC	; 188
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	84 60       	ori	r24, 0x04	; 4
    2294:	80 83       	st	Z, r24
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	80 93 7a 08 	sts	0x087A, r24	; 0x80087a <verbose>
    229c:	08 95       	ret

0000229e <twi_start>:
    229e:	84 ea       	ldi	r24, 0xA4	; 164
    22a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    22a4:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <__data_end+0x1>
    22a8:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <__data_end>
    22ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    22b0:	88 23       	and	r24, r24
    22b2:	34 f0       	brlt	.+12     	; 0x22c0 <twi_start+0x22>
    22b4:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    22b8:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    22bc:	4e 97       	sbiw	r24, 0x1e	; 30
    22be:	b0 f3       	brcs	.-20     	; 0x22ac <twi_start+0xe>
    22c0:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    22c4:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    22c8:	4e 97       	sbiw	r24, 0x1e	; 30
    22ca:	30 f0       	brcs	.+12     	; 0x22d8 <twi_start+0x3a>
    22cc:	81 e5       	ldi	r24, 0x51	; 81
    22ce:	97 e0       	ldi	r25, 0x07	; 7
    22d0:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	08 95       	ret
    22d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    22dc:	88 7f       	andi	r24, 0xF8	; 248
    22de:	88 30       	cpi	r24, 0x08	; 8
    22e0:	71 f0       	breq	.+28     	; 0x22fe <twi_start+0x60>
    22e2:	1f 92       	push	r1
    22e4:	8f 93       	push	r24
    22e6:	88 e6       	ldi	r24, 0x68	; 104
    22e8:	97 e0       	ldi	r25, 0x07	; 7
    22ea:	9f 93       	push	r25
    22ec:	8f 93       	push	r24
    22ee:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	08 95       	ret
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	08 95       	ret

00002302 <twi_write_bytes>:
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	08 2f       	mov	r16, r24
    230c:	eb 01       	movw	r28, r22
    230e:	14 2f       	mov	r17, r20
    2310:	c6 df       	rcall	.-116    	; 0x229e <twi_start>
    2312:	81 11       	cpse	r24, r1
    2314:	66 c0       	rjmp	.+204    	; 0x23e2 <twi_write_bytes+0xe0>
    2316:	00 0f       	add	r16, r16
    2318:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    231c:	84 e8       	ldi	r24, 0x84	; 132
    231e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2322:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <__data_end+0x1>
    2326:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <__data_end>
    232a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    232e:	88 23       	and	r24, r24
    2330:	34 f0       	brlt	.+12     	; 0x233e <twi_write_bytes+0x3c>
    2332:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    2336:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    233a:	4e 97       	sbiw	r24, 0x1e	; 30
    233c:	b0 f3       	brcs	.-20     	; 0x232a <twi_write_bytes+0x28>
    233e:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    2342:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    2346:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    234a:	88 7f       	andi	r24, 0xF8	; 248
    234c:	88 31       	cpi	r24, 0x18	; 24
    234e:	09 f4       	brne	.+2      	; 0x2352 <twi_write_bytes+0x50>
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <twi_write_bytes+0xce>
    2352:	84 e9       	ldi	r24, 0x94	; 148
    2354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2358:	80 e2       	ldi	r24, 0x20	; 32
    235a:	4f df       	rcall	.-354    	; 0x21fa <showERRORcode>
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	42 c0       	rjmp	.+132    	; 0x23e6 <twi_write_bytes+0xe4>
    2362:	ae 01       	movw	r20, r28
    2364:	4f 5f       	subi	r20, 0xFF	; 255
    2366:	5f 4f       	sbci	r21, 0xFF	; 255
    2368:	88 81       	ld	r24, Y
    236a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    236e:	84 e8       	ldi	r24, 0x84	; 132
    2370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2374:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <__data_end+0x1>
    2378:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <__data_end>
    237c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2380:	88 23       	and	r24, r24
    2382:	34 f0       	brlt	.+12     	; 0x2390 <twi_write_bytes+0x8e>
    2384:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    2388:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    238c:	4e 97       	sbiw	r24, 0x1e	; 30
    238e:	b0 f3       	brcs	.-20     	; 0x237c <twi_write_bytes+0x7a>
    2390:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    2394:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    2398:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    239c:	88 7f       	andi	r24, 0xF8	; 248
    239e:	88 32       	cpi	r24, 0x28	; 40
    23a0:	a1 f0       	breq	.+40     	; 0x23ca <twi_write_bytes+0xc8>
    23a2:	1f 92       	push	r1
    23a4:	8f 93       	push	r24
    23a6:	88 e8       	ldi	r24, 0x88	; 136
    23a8:	97 e0       	ldi	r25, 0x07	; 7
    23aa:	9f 93       	push	r25
    23ac:	8f 93       	push	r24
    23ae:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    23b2:	84 e9       	ldi	r24, 0x94	; 148
    23b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    23b8:	80 e3       	ldi	r24, 0x30	; 48
    23ba:	1f df       	rcall	.-450    	; 0x21fa <showERRORcode>
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e c0       	rjmp	.+28     	; 0x23e6 <twi_write_bytes+0xe4>
    23ca:	2f 5f       	subi	r18, 0xFF	; 255
    23cc:	ea 01       	movw	r28, r20
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <twi_write_bytes+0xd0>
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	21 17       	cp	r18, r17
    23d4:	30 f2       	brcs	.-116    	; 0x2362 <twi_write_bytes+0x60>
    23d6:	84 e9       	ldi	r24, 0x94	; 148
    23d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <twi_write_bytes+0xe4>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	08 95       	ret

000023f0 <twi_read_bytes>:
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	f8 2e       	mov	r15, r24
    23fc:	8b 01       	movw	r16, r22
    23fe:	ea 01       	movw	r28, r20
    2400:	4e df       	rcall	.-356    	; 0x229e <twi_start>
    2402:	81 11       	cpse	r24, r1
    2404:	79 c0       	rjmp	.+242    	; 0x24f8 <twi_read_bytes+0x108>
    2406:	8f 2d       	mov	r24, r15
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	81 60       	ori	r24, 0x01	; 1
    2410:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2414:	84 e8       	ldi	r24, 0x84	; 132
    2416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    241a:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <__data_end+0x1>
    241e:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <__data_end>
    2422:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2426:	88 23       	and	r24, r24
    2428:	34 f0       	brlt	.+12     	; 0x2436 <twi_read_bytes+0x46>
    242a:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    242e:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    2432:	4e 97       	sbiw	r24, 0x1e	; 30
    2434:	b0 f3       	brcs	.-20     	; 0x2422 <twi_read_bytes+0x32>
    2436:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    243a:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    243e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2442:	88 7f       	andi	r24, 0xF8	; 248
    2444:	80 34       	cpi	r24, 0x40	; 64
    2446:	09 f4       	brne	.+2      	; 0x244a <twi_read_bytes+0x5a>
    2448:	4d c0       	rjmp	.+154    	; 0x24e4 <twi_read_bytes+0xf4>
    244a:	88 e4       	ldi	r24, 0x48	; 72
    244c:	d6 de       	rcall	.-596    	; 0x21fa <showERRORcode>
    244e:	84 e9       	ldi	r24, 0x94	; 148
    2450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2454:	84 ea       	ldi	r24, 0xA4	; 164
    2456:	97 e0       	ldi	r25, 0x07	; 7
    2458:	c3 de       	rcall	.-634    	; 0x21e0 <setStatus>
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	4e c0       	rjmp	.+156    	; 0x24fc <twi_read_bytes+0x10c>
    2460:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <__data_end+0x1>
    2464:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <__data_end>
    2468:	c1 30       	cpi	r28, 0x01	; 1
    246a:	d1 05       	cpc	r29, r1
    246c:	11 f4       	brne	.+4      	; 0x2472 <twi_read_bytes+0x82>
    246e:	84 e8       	ldi	r24, 0x84	; 132
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <twi_read_bytes+0x84>
    2472:	84 ec       	ldi	r24, 0xC4	; 196
    2474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2478:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <__data_end+0x1>
    247c:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <__data_end>
    2480:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2484:	88 23       	and	r24, r24
    2486:	34 f0       	brlt	.+12     	; 0x2494 <twi_read_bytes+0xa4>
    2488:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    248c:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    2490:	4e 97       	sbiw	r24, 0x1e	; 30
    2492:	b0 f3       	brcs	.-20     	; 0x2480 <twi_read_bytes+0x90>
    2494:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <__data_end>
    2498:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <__data_end+0x1>
    249c:	4e 97       	sbiw	r24, 0x1e	; 30
    249e:	d8 f0       	brcs	.+54     	; 0x24d6 <twi_read_bytes+0xe6>
    24a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    24a4:	1f 92       	push	r1
    24a6:	8f 93       	push	r24
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	8d ea       	ldi	r24, 0xAD	; 173
    24ae:	97 e0       	ldi	r25, 0x07	; 7
    24b0:	9f 93       	push	r25
    24b2:	8f 93       	push	r24
    24b4:	0e 94 ab 1b 	call	0x3756	; 0x3756 <printf>
    24b8:	84 e9       	ldi	r24, 0x94	; 148
    24ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    24be:	84 ea       	ldi	r24, 0xA4	; 164
    24c0:	97 e0       	ldi	r25, 0x07	; 7
    24c2:	8e de       	rcall	.-740    	; 0x21e0 <setStatus>
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	13 c0       	rjmp	.+38     	; 0x24fc <twi_read_bytes+0x10c>
    24d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    24da:	f8 01       	movw	r30, r16
    24dc:	80 83       	st	Z, r24
    24de:	21 97       	sbiw	r28, 0x01	; 1
    24e0:	0f 5f       	subi	r16, 0xFF	; 255
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	1c 16       	cp	r1, r28
    24e6:	1d 06       	cpc	r1, r29
    24e8:	0c f4       	brge	.+2      	; 0x24ec <twi_read_bytes+0xfc>
    24ea:	ba cf       	rjmp	.-140    	; 0x2460 <twi_read_bytes+0x70>
    24ec:	84 e9       	ldi	r24, 0x94	; 148
    24ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <twi_read_bytes+0x10c>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	08 95       	ret

00002508 <init_Ports>:
    2508:	8f ef       	ldi	r24, 0xFF	; 255
    250a:	81 b9       	out	0x01, r24	; 1
    250c:	97 ef       	ldi	r25, 0xF7	; 247
    250e:	94 b9       	out	0x04, r25	; 4
    2510:	87 b9       	out	0x07, r24	; 7
    2512:	9b eb       	ldi	r25, 0xBB	; 187
    2514:	9a b9       	out	0x0a, r25	; 10
    2516:	9e e3       	ldi	r25, 0x3E	; 62
    2518:	9d b9       	out	0x0d, r25	; 13
    251a:	10 ba       	out	0x10, r1	; 16
    251c:	83 bb       	out	0x13, r24	; 19
    251e:	9f e7       	ldi	r25, 0x7F	; 127
    2520:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2524:	92 e7       	ldi	r25, 0x72	; 114
    2526:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
    252a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    252e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    2532:	88 b9       	out	0x08, r24	; 8
    2534:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    2538:	54 c8       	rjmp	.-3928   	; 0x15e2 <deSelectSDcard>
    253a:	08 95       	ret

0000253c <initialize>:
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	ec e6       	ldi	r30, 0x6C	; 108
    2542:	f9 e0       	ldi	r31, 0x09	; 9
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	92 e0       	ldi	r25, 0x02	; 2
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	93 83       	std	Z+3, r25	; 0x03
    254e:	82 83       	std	Z+2, r24	; 0x02
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	b8 d0       	rcall	.+368    	; 0x26c4 <init_uart>
    2554:	d9 df       	rcall	.-78     	; 0x2508 <init_Ports>
    2556:	b8 db       	rcall	.-2192   	; 0x1cc8 <init_spi>
    2558:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <init_CountersIimers>
    255c:	8f e0       	ldi	r24, 0x0F	; 15
    255e:	9f e8       	ldi	r25, 0x8F	; 143
    2560:	90 93 bb 08 	sts	0x08BB, r25	; 0x8008bb <hdwConfig+0x1>
    2564:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <hdwConfig>
    2568:	c0 e0       	ldi	r28, 0x00	; 0
    256a:	d0 e0       	ldi	r29, 0x00	; 0
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <initialize+0x3c>
    256e:	8e e2       	ldi	r24, 0x2E	; 46
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <putchar>
    2576:	21 96       	adiw	r28, 0x01	; 1
    2578:	c0 35       	cpi	r28, 0x50	; 80
    257a:	d1 05       	cpc	r29, r1
    257c:	c0 f3       	brcs	.-16     	; 0x256e <initialize+0x32>
    257e:	8a e0       	ldi	r24, 0x0A	; 10
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <putchar>
    2586:	3e db       	rcall	.-2436   	; 0x1c04 <RTC_config>
    2588:	0e 94 95 06 	call	0xd2a	; 0xd2a <initADC2518>
    258c:	43 de       	rcall	.-890    	; 0x2214 <init_twi>
    258e:	0e 94 24 09 	call	0x1248	; 0x1248 <initPressureSensors>
    2592:	0e 94 4d 08 	call	0x109a	; 0x109a <init_adc>
    2596:	0e 94 24 09 	call	0x1248	; 0x1248 <initPressureSensors>
    259a:	78 94       	sei
    259c:	83 ee       	ldi	r24, 0xE3	; 227
    259e:	97 e0       	ldi	r25, 0x07	; 7
    25a0:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <main>:
    25aa:	c8 df       	rcall	.-112    	; 0x253c <initialize>
    25ac:	84 ef       	ldi	r24, 0xF4	; 244
    25ae:	97 e0       	ldi	r25, 0x07	; 7
    25b0:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <puts>
    25b4:	19 d2       	rcall	.+1074   	; 0x29e8 <doUart>
    25b6:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <commandCompleteFlag0>
    25ba:	88 23       	and	r24, r24
    25bc:	21 f0       	breq	.+8      	; 0x25c6 <main+0x1c>
    25be:	0e 94 25 04 	call	0x84a	; 0x84a <processCommand>
    25c2:	10 92 82 08 	sts	0x0882, r1	; 0x800882 <commandCompleteFlag0>
    25c6:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <halfSecFlag>
    25ca:	88 23       	and	r24, r24
    25cc:	41 f0       	breq	.+16     	; 0x25de <main+0x34>
    25ce:	eb e0       	ldi	r30, 0x0B	; 11
    25d0:	f1 e0       	ldi	r31, 0x01	; 1
    25d2:	90 81       	ld	r25, Z
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	89 27       	eor	r24, r25
    25d8:	80 83       	st	Z, r24
    25da:	10 92 3c 08 	sts	0x083C, r1	; 0x80083c <halfSecFlag>
    25de:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <oneSecFlag>
    25e2:	88 23       	and	r24, r24
    25e4:	39 f3       	breq	.-50     	; 0x25b4 <main+0xa>
    25e6:	eb e0       	ldi	r30, 0x0B	; 11
    25e8:	f1 e0       	ldi	r31, 0x01	; 1
    25ea:	90 81       	ld	r25, Z
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	89 27       	eor	r24, r25
    25f0:	80 83       	st	Z, r24
    25f2:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <pauseOutputForCmdCnt>
    25f6:	88 23       	and	r24, r24
    25f8:	19 f0       	breq	.+6      	; 0x2600 <main+0x56>
    25fa:	81 50       	subi	r24, 0x01	; 1
    25fc:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <pauseOutputForCmdCnt>
    2600:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <oneSecFlag>
    2604:	d7 cf       	rjmp	.-82     	; 0x25b4 <main+0xa>

00002606 <ringbuf_init>:
    2606:	e3 ec       	ldi	r30, 0xC3	; 195
    2608:	f8 e0       	ldi	r31, 0x08	; 8
    260a:	60 83       	st	Z, r22
    260c:	11 82       	std	Z+1, r1	; 0x01
    260e:	93 83       	std	Z+3, r25	; 0x03
    2610:	82 83       	std	Z+2, r24	; 0x02
    2612:	95 83       	std	Z+5, r25	; 0x05
    2614:	84 83       	std	Z+4, r24	; 0x04
    2616:	97 83       	std	Z+7, r25	; 0x07
    2618:	86 83       	std	Z+6, r24	; 0x06
    261a:	08 95       	ret

0000261c <ringbuf_get>:
    261c:	9f b7       	in	r25, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <rb+0x1>
    2624:	81 11       	cpse	r24, r1
    2626:	04 c0       	rjmp	.+8      	; 0x2630 <ringbuf_get+0x14>
    2628:	99 23       	and	r25, r25
    262a:	04 f5       	brge	.+64     	; 0x266c <ringbuf_get+0x50>
    262c:	78 94       	sei
    262e:	08 95       	ret
    2630:	e3 ec       	ldi	r30, 0xC3	; 195
    2632:	f8 e0       	ldi	r31, 0x08	; 8
    2634:	a4 81       	ldd	r26, Z+4	; 0x04
    2636:	b5 81       	ldd	r27, Z+5	; 0x05
    2638:	9d 01       	movw	r18, r26
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	35 83       	std	Z+5, r19	; 0x05
    2640:	24 83       	std	Z+4, r18	; 0x04
    2642:	8c 91       	ld	r24, X
    2644:	21 81       	ldd	r18, Z+1	; 0x01
    2646:	21 50       	subi	r18, 0x01	; 1
    2648:	21 83       	std	Z+1, r18	; 0x01
    264a:	44 81       	ldd	r20, Z+4	; 0x04
    264c:	55 81       	ldd	r21, Z+5	; 0x05
    264e:	26 81       	ldd	r18, Z+6	; 0x06
    2650:	37 81       	ldd	r19, Z+7	; 0x07
    2652:	60 81       	ld	r22, Z
    2654:	26 0f       	add	r18, r22
    2656:	31 1d       	adc	r19, r1
    2658:	42 17       	cp	r20, r18
    265a:	53 07       	cpc	r21, r19
    265c:	20 f0       	brcs	.+8      	; 0x2666 <ringbuf_get+0x4a>
    265e:	26 81       	ldd	r18, Z+6	; 0x06
    2660:	37 81       	ldd	r19, Z+7	; 0x07
    2662:	35 83       	std	Z+5, r19	; 0x05
    2664:	24 83       	std	Z+4, r18	; 0x04
    2666:	99 23       	and	r25, r25
    2668:	0c f4       	brge	.+2      	; 0x266c <ringbuf_get+0x50>
    266a:	78 94       	sei
    266c:	08 95       	ret

0000266e <ringbuf_put>:
    266e:	9f b7       	in	r25, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	e3 ec       	ldi	r30, 0xC3	; 195
    2674:	f8 e0       	ldi	r31, 0x08	; 8
    2676:	31 81       	ldd	r19, Z+1	; 0x01
    2678:	20 81       	ld	r18, Z
    267a:	32 17       	cp	r19, r18
    267c:	20 f0       	brcs	.+8      	; 0x2686 <ringbuf_put+0x18>
    267e:	99 23       	and	r25, r25
    2680:	04 f5       	brge	.+64     	; 0x26c2 <ringbuf_put+0x54>
    2682:	78 94       	sei
    2684:	08 95       	ret
    2686:	e3 ec       	ldi	r30, 0xC3	; 195
    2688:	f8 e0       	ldi	r31, 0x08	; 8
    268a:	a2 81       	ldd	r26, Z+2	; 0x02
    268c:	b3 81       	ldd	r27, Z+3	; 0x03
    268e:	9d 01       	movw	r18, r26
    2690:	2f 5f       	subi	r18, 0xFF	; 255
    2692:	3f 4f       	sbci	r19, 0xFF	; 255
    2694:	33 83       	std	Z+3, r19	; 0x03
    2696:	22 83       	std	Z+2, r18	; 0x02
    2698:	8c 93       	st	X, r24
    269a:	81 81       	ldd	r24, Z+1	; 0x01
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	81 83       	std	Z+1, r24	; 0x01
    26a0:	42 81       	ldd	r20, Z+2	; 0x02
    26a2:	53 81       	ldd	r21, Z+3	; 0x03
    26a4:	26 81       	ldd	r18, Z+6	; 0x06
    26a6:	37 81       	ldd	r19, Z+7	; 0x07
    26a8:	80 81       	ld	r24, Z
    26aa:	28 0f       	add	r18, r24
    26ac:	31 1d       	adc	r19, r1
    26ae:	42 17       	cp	r20, r18
    26b0:	53 07       	cpc	r21, r19
    26b2:	20 f0       	brcs	.+8      	; 0x26bc <ringbuf_put+0x4e>
    26b4:	26 81       	ldd	r18, Z+6	; 0x06
    26b6:	37 81       	ldd	r19, Z+7	; 0x07
    26b8:	33 83       	std	Z+3, r19	; 0x03
    26ba:	22 83       	std	Z+2, r18	; 0x02
    26bc:	99 23       	and	r25, r25
    26be:	0c f4       	brge	.+2      	; 0x26c2 <ringbuf_put+0x54>
    26c0:	78 94       	sei
    26c2:	08 95       	ret

000026c4 <init_uart>:
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	b9 f1       	breq	.+110    	; 0x2736 <init_uart+0x72>
    26c8:	84 30       	cpi	r24, 0x04	; 4
    26ca:	b8 f5       	brcc	.+110    	; 0x273a <init_uart+0x76>
    26cc:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <currentUart>
    26d0:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <userSettings>
    26d4:	91 30       	cpi	r25, 0x01	; 1
    26d6:	19 f0       	breq	.+6      	; 0x26de <init_uart+0x1a>
    26d8:	92 30       	cpi	r25, 0x02	; 2
    26da:	39 f0       	breq	.+14     	; 0x26ea <init_uart+0x26>
    26dc:	03 c0       	rjmp	.+6      	; 0x26e4 <init_uart+0x20>
    26de:	9f e5       	ldi	r25, 0x5F	; 95
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <init_uart+0x2a>
    26e4:	97 e0       	ldi	r25, 0x07	; 7
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <init_uart+0x2a>
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	19 f0       	breq	.+6      	; 0x26f8 <init_uart+0x34>
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	71 f0       	breq	.+28     	; 0x2712 <init_uart+0x4e>
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <init_uart+0x60>
    26f8:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    26fc:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    2700:	88 e9       	ldi	r24, 0x98	; 152
    2702:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    2706:	60 e8       	ldi	r22, 0x80	; 128
    2708:	8b ec       	ldi	r24, 0xCB	; 203
    270a:	98 e0       	ldi	r25, 0x08	; 8
    270c:	7c df       	rcall	.-264    	; 0x2606 <ringbuf_init>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	08 95       	ret
    2712:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    2716:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    271a:	88 e9       	ldi	r24, 0x98	; 152
    271c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	08 95       	ret
    2724:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    2728:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    272c:	88 e9       	ldi	r24, 0x98	; 152
    272e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	08 95       	ret
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	08 95       	ret
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	08 95       	ret

0000273e <uart0_putchar>:
    273e:	cf 93       	push	r28
    2740:	c8 2f       	mov	r28, r24
    2742:	8a 30       	cpi	r24, 0x0A	; 10
    2744:	31 f4       	brne	.+12     	; 0x2752 <uart0_putchar+0x14>
    2746:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <__iob+0x2>
    274a:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <__iob+0x3>
    274e:	8d e0       	ldi	r24, 0x0D	; 13
    2750:	f6 df       	rcall	.-20     	; 0x273e <uart0_putchar>
    2752:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    2756:	85 ff       	sbrs	r24, 5
    2758:	fc cf       	rjmp	.-8      	; 0x2752 <uart0_putchar+0x14>
    275a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <uart1_put>:
    2766:	cf 93       	push	r28
    2768:	c8 2f       	mov	r28, r24
    276a:	8a 30       	cpi	r24, 0x0A	; 10
    276c:	11 f4       	brne	.+4      	; 0x2772 <uart1_put+0xc>
    276e:	8d e0       	ldi	r24, 0x0D	; 13
    2770:	fa df       	rcall	.-12     	; 0x2766 <uart1_put>
    2772:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2776:	85 ff       	sbrs	r24, 5
    2778:	fc cf       	rjmp	.-8      	; 0x2772 <uart1_put+0xc>
    277a:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

00002786 <uarts_getchar>:
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	08 95       	ret

0000278c <__vector_25>:
    278c:	1f 92       	push	r1
    278e:	0f 92       	push	r0
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	0f 92       	push	r0
    2794:	11 24       	eor	r1, r1
    2796:	0b b6       	in	r0, 0x3b	; 59
    2798:	0f 92       	push	r0
    279a:	2f 93       	push	r18
    279c:	3f 93       	push	r19
    279e:	4f 93       	push	r20
    27a0:	5f 93       	push	r21
    27a2:	6f 93       	push	r22
    27a4:	7f 93       	push	r23
    27a6:	8f 93       	push	r24
    27a8:	9f 93       	push	r25
    27aa:	af 93       	push	r26
    27ac:	bf 93       	push	r27
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	ef 93       	push	r30
    27b4:	ff 93       	push	r31
    27b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    27ba:	84 fd       	sbrc	r24, 4
    27bc:	08 c0       	rjmp	.+16     	; 0x27ce <__vector_25+0x42>
    27be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    27c2:	83 fd       	sbrc	r24, 3
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <__vector_25+0x42>
    27c6:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <commandCompleteFlag0>
    27ca:	88 23       	and	r24, r24
    27cc:	41 f0       	breq	.+16     	; 0x27de <__vector_25+0x52>
    27ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	90 93 81 08 	sts	0x0881, r25	; 0x800881 <clrError+0x1>
    27d8:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <clrError>
    27dc:	a1 c0       	rjmp	.+322    	; 0x2920 <__vector_25+0x194>
    27de:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <bufIndex0>
    27e2:	8f 31       	cpi	r24, 0x1F	; 31
    27e4:	80 f0       	brcs	.+32     	; 0x2806 <__vector_25+0x7a>
    27e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	90 93 81 08 	sts	0x0881, r25	; 0x800881 <clrError+0x1>
    27f0:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <clrError>
    27f4:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <bufIndex0>
    27f8:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <buf+0x1f>
    27fc:	10 92 82 08 	sts	0x0882, r1	; 0x800882 <commandCompleteFlag0>
    2800:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <commandSize>
    2804:	8d c0       	rjmp	.+282    	; 0x2920 <__vector_25+0x194>
    2806:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2810:	e4 5b       	subi	r30, 0xB4	; 180
    2812:	f6 4f       	sbci	r31, 0xF6	; 246
    2814:	80 83       	st	Z, r24
    2816:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	e4 5b       	subi	r30, 0xB4	; 180
    281e:	f6 4f       	sbci	r31, 0xF6	; 246
    2820:	80 81       	ld	r24, Z
    2822:	8a 30       	cpi	r24, 0x0A	; 10
    2824:	41 f0       	breq	.+16     	; 0x2836 <__vector_25+0xaa>
    2826:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	e4 5b       	subi	r30, 0xB4	; 180
    282e:	f6 4f       	sbci	r31, 0xF6	; 246
    2830:	80 81       	ld	r24, Z
    2832:	8d 30       	cpi	r24, 0x0D	; 13
    2834:	89 f4       	brne	.+34     	; 0x2858 <__vector_25+0xcc>
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <commandCompleteFlag0>
    283c:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <commandSize>
    2840:	8f 5f       	subi	r24, 0xFF	; 255
    2842:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <commandSize>
    2846:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	e4 5b       	subi	r30, 0xB4	; 180
    284e:	f6 4f       	sbci	r31, 0xF6	; 246
    2850:	10 82       	st	Z, r1
    2852:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <bufIndex0>
    2856:	64 c0       	rjmp	.+200    	; 0x2920 <__vector_25+0x194>
    2858:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	e4 5b       	subi	r30, 0xB4	; 180
    2860:	f6 4f       	sbci	r31, 0xF6	; 246
    2862:	80 81       	ld	r24, Z
    2864:	88 30       	cpi	r24, 0x08	; 8
    2866:	41 f0       	breq	.+16     	; 0x2878 <__vector_25+0xec>
    2868:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	e4 5b       	subi	r30, 0xB4	; 180
    2870:	f6 4f       	sbci	r31, 0xF6	; 246
    2872:	80 81       	ld	r24, Z
    2874:	8f 37       	cpi	r24, 0x7F	; 127
    2876:	39 f5       	brne	.+78     	; 0x28c6 <__vector_25+0x13a>
    2878:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <bufIndex0>
    287c:	88 23       	and	r24, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <__vector_25+0xf6>
    2880:	4f c0       	rjmp	.+158    	; 0x2920 <__vector_25+0x194>
    2882:	cc e6       	ldi	r28, 0x6C	; 108
    2884:	d9 e0       	ldi	r29, 0x09	; 9
    2886:	6a 81       	ldd	r22, Y+2	; 0x02
    2888:	7b 81       	ldd	r23, Y+3	; 0x03
    288a:	88 e0       	ldi	r24, 0x08	; 8
    288c:	58 df       	rcall	.-336    	; 0x273e <uart0_putchar>
    288e:	6a 81       	ldd	r22, Y+2	; 0x02
    2890:	7b 81       	ldd	r23, Y+3	; 0x03
    2892:	80 e2       	ldi	r24, 0x20	; 32
    2894:	54 df       	rcall	.-344    	; 0x273e <uart0_putchar>
    2896:	6a 81       	ldd	r22, Y+2	; 0x02
    2898:	7b 81       	ldd	r23, Y+3	; 0x03
    289a:	88 e0       	ldi	r24, 0x08	; 8
    289c:	50 df       	rcall	.-352    	; 0x273e <uart0_putchar>
    289e:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <bufIndex0>
    28a2:	81 50       	subi	r24, 0x01	; 1
    28a4:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <bufIndex0>
    28a8:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <commandSize>
    28ac:	81 50       	subi	r24, 0x01	; 1
    28ae:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <commandSize>
    28b2:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <outputCharacters>
    28b6:	88 23       	and	r24, r24
    28b8:	99 f1       	breq	.+102    	; 0x2920 <__vector_25+0x194>
    28ba:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <outputCharacters>
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <outputCharacters>
    28c4:	2d c0       	rjmp	.+90     	; 0x2920 <__vector_25+0x194>
    28c6:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	e4 5b       	subi	r30, 0xB4	; 180
    28ce:	f6 4f       	sbci	r31, 0xF6	; 246
    28d0:	80 81       	ld	r24, Z
    28d2:	8c 32       	cpi	r24, 0x2C	; 44
    28d4:	98 f0       	brcs	.+38     	; 0x28fc <__vector_25+0x170>
    28d6:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	e4 5b       	subi	r30, 0xB4	; 180
    28de:	f6 4f       	sbci	r31, 0xF6	; 246
    28e0:	80 81       	ld	r24, Z
    28e2:	8b 37       	cpi	r24, 0x7B	; 123
    28e4:	58 f4       	brcc	.+22     	; 0x28fc <__vector_25+0x170>
    28e6:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <bufIndex0>
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <bufIndex0>
    28f0:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <commandSize>
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <commandSize>
    28fa:	12 c0       	rjmp	.+36     	; 0x2920 <__vector_25+0x194>
    28fc:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <bufIndex0>
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	e4 5b       	subi	r30, 0xB4	; 180
    2904:	f6 4f       	sbci	r31, 0xF6	; 246
    2906:	80 81       	ld	r24, Z
    2908:	8b 31       	cpi	r24, 0x1B	; 27
    290a:	51 f4       	brne	.+20     	; 0x2920 <__vector_25+0x194>
    290c:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <__iob+0x2>
    2910:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <__iob+0x3>
    2914:	8d e0       	ldi	r24, 0x0D	; 13
    2916:	13 df       	rcall	.-474    	; 0x273e <uart0_putchar>
    2918:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <bufIndex0>
    291c:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <commandSize>
    2920:	ff 91       	pop	r31
    2922:	ef 91       	pop	r30
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	bf 91       	pop	r27
    292a:	af 91       	pop	r26
    292c:	9f 91       	pop	r25
    292e:	8f 91       	pop	r24
    2930:	7f 91       	pop	r23
    2932:	6f 91       	pop	r22
    2934:	5f 91       	pop	r21
    2936:	4f 91       	pop	r20
    2938:	3f 91       	pop	r19
    293a:	2f 91       	pop	r18
    293c:	0f 90       	pop	r0
    293e:	0b be       	out	0x3b, r0	; 59
    2940:	0f 90       	pop	r0
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	0f 90       	pop	r0
    2946:	1f 90       	pop	r1
    2948:	18 95       	reti

0000294a <__vector_36>:
    294a:	1f 92       	push	r1
    294c:	0f 92       	push	r0
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	0f 92       	push	r0
    2952:	11 24       	eor	r1, r1
    2954:	0b b6       	in	r0, 0x3b	; 59
    2956:	0f 92       	push	r0
    2958:	2f 93       	push	r18
    295a:	3f 93       	push	r19
    295c:	4f 93       	push	r20
    295e:	5f 93       	push	r21
    2960:	6f 93       	push	r22
    2962:	7f 93       	push	r23
    2964:	8f 93       	push	r24
    2966:	9f 93       	push	r25
    2968:	af 93       	push	r26
    296a:	bf 93       	push	r27
    296c:	ef 93       	push	r30
    296e:	ff 93       	push	r31
    2970:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2974:	84 fd       	sbrc	r24, 4
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <__vector_36+0x36>
    2978:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    297c:	83 ff       	sbrs	r24, 3
    297e:	08 c0       	rjmp	.+16     	; 0x2990 <__vector_36+0x46>
    2980:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	90 93 81 08 	sts	0x0881, r25	; 0x800881 <clrError+0x1>
    298a:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <clrError>
    298e:	19 c0       	rjmp	.+50     	; 0x29c2 <__vector_36+0x78>
    2990:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2994:	8a 30       	cpi	r24, 0x0A	; 10
    2996:	41 f4       	brne	.+16     	; 0x29a8 <__vector_36+0x5e>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	69 de       	rcall	.-814    	; 0x266e <ringbuf_put>
    299c:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <commandCompleteFlag1>
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <commandCompleteFlag1>
    29a6:	0d c0       	rjmp	.+26     	; 0x29c2 <__vector_36+0x78>
    29a8:	8d 30       	cpi	r24, 0x0D	; 13
    29aa:	59 f0       	breq	.+22     	; 0x29c2 <__vector_36+0x78>
    29ac:	88 30       	cpi	r24, 0x08	; 8
    29ae:	11 f0       	breq	.+4      	; 0x29b4 <__vector_36+0x6a>
    29b0:	8f 37       	cpi	r24, 0x7F	; 127
    29b2:	11 f4       	brne	.+4      	; 0x29b8 <__vector_36+0x6e>
    29b4:	33 de       	rcall	.-922    	; 0x261c <ringbuf_get>
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <__vector_36+0x78>
    29b8:	90 ee       	ldi	r25, 0xE0	; 224
    29ba:	98 0f       	add	r25, r24
    29bc:	9f 35       	cpi	r25, 0x5F	; 95
    29be:	08 f4       	brcc	.+2      	; 0x29c2 <__vector_36+0x78>
    29c0:	56 de       	rcall	.-852    	; 0x266e <ringbuf_put>
    29c2:	ff 91       	pop	r31
    29c4:	ef 91       	pop	r30
    29c6:	bf 91       	pop	r27
    29c8:	af 91       	pop	r26
    29ca:	9f 91       	pop	r25
    29cc:	8f 91       	pop	r24
    29ce:	7f 91       	pop	r23
    29d0:	6f 91       	pop	r22
    29d2:	5f 91       	pop	r21
    29d4:	4f 91       	pop	r20
    29d6:	3f 91       	pop	r19
    29d8:	2f 91       	pop	r18
    29da:	0f 90       	pop	r0
    29dc:	0b be       	out	0x3b, r0	; 59
    29de:	0f 90       	pop	r0
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	0f 90       	pop	r0
    29e4:	1f 90       	pop	r1
    29e6:	18 95       	reti

000029e8 <doUart>:
    29e8:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <commandSize>
    29ec:	88 23       	and	r24, r24
    29ee:	69 f1       	breq	.+90     	; 0x2a4a <doUart+0x62>
    29f0:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <outputCharacters>
    29f4:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <commandSize>
    29f8:	98 17       	cp	r25, r24
    29fa:	c0 f4       	brcc	.+48     	; 0x2a2c <doUart+0x44>
    29fc:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <commandCompleteFlag0>
    2a00:	81 11       	cpse	r24, r1
    2a02:	0b c0       	rjmp	.+22     	; 0x2a1a <doUart+0x32>
    2a04:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <__iob+0x2>
    2a08:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <__iob+0x3>
    2a0c:	e0 91 7d 08 	lds	r30, 0x087D	; 0x80087d <outputCharacters>
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	e4 5b       	subi	r30, 0xB4	; 180
    2a14:	f6 4f       	sbci	r31, 0xF6	; 246
    2a16:	80 81       	ld	r24, Z
    2a18:	92 de       	rcall	.-732    	; 0x273e <uart0_putchar>
    2a1a:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <outputCharacters>
    2a1e:	8f 5f       	subi	r24, 0xFF	; 255
    2a20:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <outputCharacters>
    2a24:	8a e0       	ldi	r24, 0x0A	; 10
    2a26:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <pauseOutputForCmdCnt>
    2a2a:	13 c0       	rjmp	.+38     	; 0x2a52 <doUart+0x6a>
    2a2c:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <pauseOutputForCmdCnt>
    2a30:	81 11       	cpse	r24, r1
    2a32:	0f c0       	rjmp	.+30     	; 0x2a52 <doUart+0x6a>
    2a34:	8f b7       	in	r24, 0x3f	; 63
    2a36:	8f 77       	andi	r24, 0x7F	; 127
    2a38:	8f bf       	out	0x3f, r24	; 63
    2a3a:	10 92 7d 08 	sts	0x087D, r1	; 0x80087d <outputCharacters>
    2a3e:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <commandSize>
    2a42:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <bufIndex0>
    2a46:	78 94       	sei
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <doUart+0x6a>
    2a4a:	10 92 7d 08 	sts	0x087D, r1	; 0x80087d <outputCharacters>
    2a4e:	10 92 7c 08 	sts	0x087C, r1	; 0x80087c <pauseOutputForCmdCnt>
    2a52:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <commandCompleteFlag0>
    2a56:	88 23       	and	r24, r24
    2a58:	a9 f0       	breq	.+42     	; 0x2a84 <doUart+0x9c>
    2a5a:	8c e4       	ldi	r24, 0x4C	; 76
    2a5c:	99 e0       	ldi	r25, 0x09	; 9
    2a5e:	9f 93       	push	r25
    2a60:	8f 93       	push	r24
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	98 e0       	ldi	r25, 0x08	; 8
    2a66:	9f 93       	push	r25
    2a68:	8f 93       	push	r24
    2a6a:	75 d6       	rcall	.+3306   	; 0x3756 <printf>
    2a6c:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <bufIndex0>
    2a70:	10 92 7c 08 	sts	0x087C, r1	; 0x80087c <pauseOutputForCmdCnt>
    2a74:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <commandSize>
    2a78:	10 92 7d 08 	sts	0x087D, r1	; 0x80087d <outputCharacters>
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <commandCompleteFlag1>
    2a88:	88 23       	and	r24, r24
    2a8a:	99 f0       	breq	.+38     	; 0x2ab2 <doUart+0xca>
    2a8c:	8b ec       	ldi	r24, 0xCB	; 203
    2a8e:	98 e0       	ldi	r25, 0x08	; 8
    2a90:	9f 93       	push	r25
    2a92:	8f 93       	push	r24
    2a94:	8a e0       	ldi	r24, 0x0A	; 10
    2a96:	98 e0       	ldi	r25, 0x08	; 8
    2a98:	9f 93       	push	r25
    2a9a:	8f 93       	push	r24
    2a9c:	5c d6       	rcall	.+3256   	; 0x3756 <printf>
    2a9e:	8e e7       	ldi	r24, 0x7E	; 126
    2aa0:	62 de       	rcall	.-828    	; 0x2766 <uart1_put>
    2aa2:	8a e2       	ldi	r24, 0x2A	; 42
    2aa4:	60 de       	rcall	.-832    	; 0x2766 <uart1_put>
    2aa6:	8e e7       	ldi	r24, 0x7E	; 126
    2aa8:	5e de       	rcall	.-836    	; 0x2766 <uart1_put>
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	08 95       	ret

00002ab4 <__fixunssfsi>:
    2ab4:	70 d0       	rcall	.+224    	; 0x2b96 <__fp_splitA>
    2ab6:	88 f0       	brcs	.+34     	; 0x2ada <__fixunssfsi+0x26>
    2ab8:	9f 57       	subi	r25, 0x7F	; 127
    2aba:	90 f0       	brcs	.+36     	; 0x2ae0 <__fixunssfsi+0x2c>
    2abc:	b9 2f       	mov	r27, r25
    2abe:	99 27       	eor	r25, r25
    2ac0:	b7 51       	subi	r27, 0x17	; 23
    2ac2:	a0 f0       	brcs	.+40     	; 0x2aec <__fixunssfsi+0x38>
    2ac4:	d1 f0       	breq	.+52     	; 0x2afa <__fixunssfsi+0x46>
    2ac6:	66 0f       	add	r22, r22
    2ac8:	77 1f       	adc	r23, r23
    2aca:	88 1f       	adc	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	1a f0       	brmi	.+6      	; 0x2ad6 <__fixunssfsi+0x22>
    2ad0:	ba 95       	dec	r27
    2ad2:	c9 f7       	brne	.-14     	; 0x2ac6 <__fixunssfsi+0x12>
    2ad4:	12 c0       	rjmp	.+36     	; 0x2afa <__fixunssfsi+0x46>
    2ad6:	b1 30       	cpi	r27, 0x01	; 1
    2ad8:	81 f0       	breq	.+32     	; 0x2afa <__fixunssfsi+0x46>
    2ada:	77 d0       	rcall	.+238    	; 0x2bca <__fp_zero>
    2adc:	b1 e0       	ldi	r27, 0x01	; 1
    2ade:	08 95       	ret
    2ae0:	74 c0       	rjmp	.+232    	; 0x2bca <__fp_zero>
    2ae2:	67 2f       	mov	r22, r23
    2ae4:	78 2f       	mov	r23, r24
    2ae6:	88 27       	eor	r24, r24
    2ae8:	b8 5f       	subi	r27, 0xF8	; 248
    2aea:	39 f0       	breq	.+14     	; 0x2afa <__fixunssfsi+0x46>
    2aec:	b9 3f       	cpi	r27, 0xF9	; 249
    2aee:	cc f3       	brlt	.-14     	; 0x2ae2 <__fixunssfsi+0x2e>
    2af0:	86 95       	lsr	r24
    2af2:	77 95       	ror	r23
    2af4:	67 95       	ror	r22
    2af6:	b3 95       	inc	r27
    2af8:	d9 f7       	brne	.-10     	; 0x2af0 <__fixunssfsi+0x3c>
    2afa:	3e f4       	brtc	.+14     	; 0x2b0a <__fixunssfsi+0x56>
    2afc:	90 95       	com	r25
    2afe:	80 95       	com	r24
    2b00:	70 95       	com	r23
    2b02:	61 95       	neg	r22
    2b04:	7f 4f       	sbci	r23, 0xFF	; 255
    2b06:	8f 4f       	sbci	r24, 0xFF	; 255
    2b08:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0a:	08 95       	ret

00002b0c <__floatunsisf>:
    2b0c:	e8 94       	clt
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <__floatsisf+0x12>

00002b10 <__floatsisf>:
    2b10:	97 fb       	bst	r25, 7
    2b12:	3e f4       	brtc	.+14     	; 0x2b22 <__floatsisf+0x12>
    2b14:	90 95       	com	r25
    2b16:	80 95       	com	r24
    2b18:	70 95       	com	r23
    2b1a:	61 95       	neg	r22
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	99 23       	and	r25, r25
    2b24:	a9 f0       	breq	.+42     	; 0x2b50 <__floatsisf+0x40>
    2b26:	f9 2f       	mov	r31, r25
    2b28:	96 e9       	ldi	r25, 0x96	; 150
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	93 95       	inc	r25
    2b2e:	f6 95       	lsr	r31
    2b30:	87 95       	ror	r24
    2b32:	77 95       	ror	r23
    2b34:	67 95       	ror	r22
    2b36:	b7 95       	ror	r27
    2b38:	f1 11       	cpse	r31, r1
    2b3a:	f8 cf       	rjmp	.-16     	; 0x2b2c <__floatsisf+0x1c>
    2b3c:	fa f4       	brpl	.+62     	; 0x2b7c <__floatsisf+0x6c>
    2b3e:	bb 0f       	add	r27, r27
    2b40:	11 f4       	brne	.+4      	; 0x2b46 <__floatsisf+0x36>
    2b42:	60 ff       	sbrs	r22, 0
    2b44:	1b c0       	rjmp	.+54     	; 0x2b7c <__floatsisf+0x6c>
    2b46:	6f 5f       	subi	r22, 0xFF	; 255
    2b48:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	16 c0       	rjmp	.+44     	; 0x2b7c <__floatsisf+0x6c>
    2b50:	88 23       	and	r24, r24
    2b52:	11 f0       	breq	.+4      	; 0x2b58 <__floatsisf+0x48>
    2b54:	96 e9       	ldi	r25, 0x96	; 150
    2b56:	11 c0       	rjmp	.+34     	; 0x2b7a <__floatsisf+0x6a>
    2b58:	77 23       	and	r23, r23
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <__floatsisf+0x54>
    2b5c:	9e e8       	ldi	r25, 0x8E	; 142
    2b5e:	87 2f       	mov	r24, r23
    2b60:	76 2f       	mov	r23, r22
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <__floatsisf+0x5e>
    2b64:	66 23       	and	r22, r22
    2b66:	71 f0       	breq	.+28     	; 0x2b84 <__floatsisf+0x74>
    2b68:	96 e8       	ldi	r25, 0x86	; 134
    2b6a:	86 2f       	mov	r24, r22
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	2a f0       	brmi	.+10     	; 0x2b7c <__floatsisf+0x6c>
    2b72:	9a 95       	dec	r25
    2b74:	66 0f       	add	r22, r22
    2b76:	77 1f       	adc	r23, r23
    2b78:	88 1f       	adc	r24, r24
    2b7a:	da f7       	brpl	.-10     	; 0x2b72 <__floatsisf+0x62>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	96 95       	lsr	r25
    2b80:	87 95       	ror	r24
    2b82:	97 f9       	bld	r25, 7
    2b84:	08 95       	ret

00002b86 <__fp_split3>:
    2b86:	57 fd       	sbrc	r21, 7
    2b88:	90 58       	subi	r25, 0x80	; 128
    2b8a:	44 0f       	add	r20, r20
    2b8c:	55 1f       	adc	r21, r21
    2b8e:	59 f0       	breq	.+22     	; 0x2ba6 <__fp_splitA+0x10>
    2b90:	5f 3f       	cpi	r21, 0xFF	; 255
    2b92:	71 f0       	breq	.+28     	; 0x2bb0 <__fp_splitA+0x1a>
    2b94:	47 95       	ror	r20

00002b96 <__fp_splitA>:
    2b96:	88 0f       	add	r24, r24
    2b98:	97 fb       	bst	r25, 7
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	61 f0       	breq	.+24     	; 0x2bb6 <__fp_splitA+0x20>
    2b9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2ba0:	79 f0       	breq	.+30     	; 0x2bc0 <__fp_splitA+0x2a>
    2ba2:	87 95       	ror	r24
    2ba4:	08 95       	ret
    2ba6:	12 16       	cp	r1, r18
    2ba8:	13 06       	cpc	r1, r19
    2baa:	14 06       	cpc	r1, r20
    2bac:	55 1f       	adc	r21, r21
    2bae:	f2 cf       	rjmp	.-28     	; 0x2b94 <__fp_split3+0xe>
    2bb0:	46 95       	lsr	r20
    2bb2:	f1 df       	rcall	.-30     	; 0x2b96 <__fp_splitA>
    2bb4:	08 c0       	rjmp	.+16     	; 0x2bc6 <__fp_splitA+0x30>
    2bb6:	16 16       	cp	r1, r22
    2bb8:	17 06       	cpc	r1, r23
    2bba:	18 06       	cpc	r1, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	f1 cf       	rjmp	.-30     	; 0x2ba2 <__fp_splitA+0xc>
    2bc0:	86 95       	lsr	r24
    2bc2:	71 05       	cpc	r23, r1
    2bc4:	61 05       	cpc	r22, r1
    2bc6:	08 94       	sec
    2bc8:	08 95       	ret

00002bca <__fp_zero>:
    2bca:	e8 94       	clt

00002bcc <__fp_szero>:
    2bcc:	bb 27       	eor	r27, r27
    2bce:	66 27       	eor	r22, r22
    2bd0:	77 27       	eor	r23, r23
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	97 f9       	bld	r25, 7
    2bd6:	08 95       	ret

00002bd8 <__mulsf3>:
    2bd8:	0b d0       	rcall	.+22     	; 0x2bf0 <__mulsf3x>
    2bda:	78 c0       	rjmp	.+240    	; 0x2ccc <__fp_round>
    2bdc:	69 d0       	rcall	.+210    	; 0x2cb0 <__fp_pscA>
    2bde:	28 f0       	brcs	.+10     	; 0x2bea <__mulsf3+0x12>
    2be0:	6e d0       	rcall	.+220    	; 0x2cbe <__fp_pscB>
    2be2:	18 f0       	brcs	.+6      	; 0x2bea <__mulsf3+0x12>
    2be4:	95 23       	and	r25, r21
    2be6:	09 f0       	breq	.+2      	; 0x2bea <__mulsf3+0x12>
    2be8:	5a c0       	rjmp	.+180    	; 0x2c9e <__fp_inf>
    2bea:	5f c0       	rjmp	.+190    	; 0x2caa <__fp_nan>
    2bec:	11 24       	eor	r1, r1
    2bee:	ee cf       	rjmp	.-36     	; 0x2bcc <__fp_szero>

00002bf0 <__mulsf3x>:
    2bf0:	ca df       	rcall	.-108    	; 0x2b86 <__fp_split3>
    2bf2:	a0 f3       	brcs	.-24     	; 0x2bdc <__mulsf3+0x4>

00002bf4 <__mulsf3_pse>:
    2bf4:	95 9f       	mul	r25, r21
    2bf6:	d1 f3       	breq	.-12     	; 0x2bec <__mulsf3+0x14>
    2bf8:	95 0f       	add	r25, r21
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	55 1f       	adc	r21, r21
    2bfe:	62 9f       	mul	r22, r18
    2c00:	f0 01       	movw	r30, r0
    2c02:	72 9f       	mul	r23, r18
    2c04:	bb 27       	eor	r27, r27
    2c06:	f0 0d       	add	r31, r0
    2c08:	b1 1d       	adc	r27, r1
    2c0a:	63 9f       	mul	r22, r19
    2c0c:	aa 27       	eor	r26, r26
    2c0e:	f0 0d       	add	r31, r0
    2c10:	b1 1d       	adc	r27, r1
    2c12:	aa 1f       	adc	r26, r26
    2c14:	64 9f       	mul	r22, r20
    2c16:	66 27       	eor	r22, r22
    2c18:	b0 0d       	add	r27, r0
    2c1a:	a1 1d       	adc	r26, r1
    2c1c:	66 1f       	adc	r22, r22
    2c1e:	82 9f       	mul	r24, r18
    2c20:	22 27       	eor	r18, r18
    2c22:	b0 0d       	add	r27, r0
    2c24:	a1 1d       	adc	r26, r1
    2c26:	62 1f       	adc	r22, r18
    2c28:	73 9f       	mul	r23, r19
    2c2a:	b0 0d       	add	r27, r0
    2c2c:	a1 1d       	adc	r26, r1
    2c2e:	62 1f       	adc	r22, r18
    2c30:	83 9f       	mul	r24, r19
    2c32:	a0 0d       	add	r26, r0
    2c34:	61 1d       	adc	r22, r1
    2c36:	22 1f       	adc	r18, r18
    2c38:	74 9f       	mul	r23, r20
    2c3a:	33 27       	eor	r19, r19
    2c3c:	a0 0d       	add	r26, r0
    2c3e:	61 1d       	adc	r22, r1
    2c40:	23 1f       	adc	r18, r19
    2c42:	84 9f       	mul	r24, r20
    2c44:	60 0d       	add	r22, r0
    2c46:	21 1d       	adc	r18, r1
    2c48:	82 2f       	mov	r24, r18
    2c4a:	76 2f       	mov	r23, r22
    2c4c:	6a 2f       	mov	r22, r26
    2c4e:	11 24       	eor	r1, r1
    2c50:	9f 57       	subi	r25, 0x7F	; 127
    2c52:	50 40       	sbci	r21, 0x00	; 0
    2c54:	8a f0       	brmi	.+34     	; 0x2c78 <__mulsf3_pse+0x84>
    2c56:	e1 f0       	breq	.+56     	; 0x2c90 <__mulsf3_pse+0x9c>
    2c58:	88 23       	and	r24, r24
    2c5a:	4a f0       	brmi	.+18     	; 0x2c6e <__mulsf3_pse+0x7a>
    2c5c:	ee 0f       	add	r30, r30
    2c5e:	ff 1f       	adc	r31, r31
    2c60:	bb 1f       	adc	r27, r27
    2c62:	66 1f       	adc	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	88 1f       	adc	r24, r24
    2c68:	91 50       	subi	r25, 0x01	; 1
    2c6a:	50 40       	sbci	r21, 0x00	; 0
    2c6c:	a9 f7       	brne	.-22     	; 0x2c58 <__mulsf3_pse+0x64>
    2c6e:	9e 3f       	cpi	r25, 0xFE	; 254
    2c70:	51 05       	cpc	r21, r1
    2c72:	70 f0       	brcs	.+28     	; 0x2c90 <__mulsf3_pse+0x9c>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <__fp_inf>
    2c76:	aa cf       	rjmp	.-172    	; 0x2bcc <__fp_szero>
    2c78:	5f 3f       	cpi	r21, 0xFF	; 255
    2c7a:	ec f3       	brlt	.-6      	; 0x2c76 <__mulsf3_pse+0x82>
    2c7c:	98 3e       	cpi	r25, 0xE8	; 232
    2c7e:	dc f3       	brlt	.-10     	; 0x2c76 <__mulsf3_pse+0x82>
    2c80:	86 95       	lsr	r24
    2c82:	77 95       	ror	r23
    2c84:	67 95       	ror	r22
    2c86:	b7 95       	ror	r27
    2c88:	f7 95       	ror	r31
    2c8a:	e7 95       	ror	r30
    2c8c:	9f 5f       	subi	r25, 0xFF	; 255
    2c8e:	c1 f7       	brne	.-16     	; 0x2c80 <__mulsf3_pse+0x8c>
    2c90:	fe 2b       	or	r31, r30
    2c92:	88 0f       	add	r24, r24
    2c94:	91 1d       	adc	r25, r1
    2c96:	96 95       	lsr	r25
    2c98:	87 95       	ror	r24
    2c9a:	97 f9       	bld	r25, 7
    2c9c:	08 95       	ret

00002c9e <__fp_inf>:
    2c9e:	97 f9       	bld	r25, 7
    2ca0:	9f 67       	ori	r25, 0x7F	; 127
    2ca2:	80 e8       	ldi	r24, 0x80	; 128
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	08 95       	ret

00002caa <__fp_nan>:
    2caa:	9f ef       	ldi	r25, 0xFF	; 255
    2cac:	80 ec       	ldi	r24, 0xC0	; 192
    2cae:	08 95       	ret

00002cb0 <__fp_pscA>:
    2cb0:	00 24       	eor	r0, r0
    2cb2:	0a 94       	dec	r0
    2cb4:	16 16       	cp	r1, r22
    2cb6:	17 06       	cpc	r1, r23
    2cb8:	18 06       	cpc	r1, r24
    2cba:	09 06       	cpc	r0, r25
    2cbc:	08 95       	ret

00002cbe <__fp_pscB>:
    2cbe:	00 24       	eor	r0, r0
    2cc0:	0a 94       	dec	r0
    2cc2:	12 16       	cp	r1, r18
    2cc4:	13 06       	cpc	r1, r19
    2cc6:	14 06       	cpc	r1, r20
    2cc8:	05 06       	cpc	r0, r21
    2cca:	08 95       	ret

00002ccc <__fp_round>:
    2ccc:	09 2e       	mov	r0, r25
    2cce:	03 94       	inc	r0
    2cd0:	00 0c       	add	r0, r0
    2cd2:	11 f4       	brne	.+4      	; 0x2cd8 <__fp_round+0xc>
    2cd4:	88 23       	and	r24, r24
    2cd6:	52 f0       	brmi	.+20     	; 0x2cec <__fp_round+0x20>
    2cd8:	bb 0f       	add	r27, r27
    2cda:	40 f4       	brcc	.+16     	; 0x2cec <__fp_round+0x20>
    2cdc:	bf 2b       	or	r27, r31
    2cde:	11 f4       	brne	.+4      	; 0x2ce4 <__fp_round+0x18>
    2ce0:	60 ff       	sbrs	r22, 0
    2ce2:	04 c0       	rjmp	.+8      	; 0x2cec <__fp_round+0x20>
    2ce4:	6f 5f       	subi	r22, 0xFF	; 255
    2ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cea:	9f 4f       	sbci	r25, 0xFF	; 255
    2cec:	08 95       	ret

00002cee <vfprintf>:
    2cee:	2f 92       	push	r2
    2cf0:	3f 92       	push	r3
    2cf2:	4f 92       	push	r4
    2cf4:	5f 92       	push	r5
    2cf6:	6f 92       	push	r6
    2cf8:	7f 92       	push	r7
    2cfa:	8f 92       	push	r8
    2cfc:	9f 92       	push	r9
    2cfe:	af 92       	push	r10
    2d00:	bf 92       	push	r11
    2d02:	cf 92       	push	r12
    2d04:	df 92       	push	r13
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	60 97       	sbiw	r28, 0x10	; 16
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	7c 01       	movw	r14, r24
    2d24:	1b 01       	movw	r2, r22
    2d26:	6a 01       	movw	r12, r20
    2d28:	fc 01       	movw	r30, r24
    2d2a:	17 82       	std	Z+7, r1	; 0x07
    2d2c:	16 82       	std	Z+6, r1	; 0x06
    2d2e:	83 81       	ldd	r24, Z+3	; 0x03
    2d30:	81 ff       	sbrs	r24, 1
    2d32:	2a c3       	rjmp	.+1620   	; 0x3388 <vfprintf+0x69a>
    2d34:	9e 01       	movw	r18, r28
    2d36:	2f 5f       	subi	r18, 0xFF	; 255
    2d38:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3a:	39 01       	movw	r6, r18
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	f1 01       	movw	r30, r2
    2d42:	93 fd       	sbrc	r25, 3
    2d44:	85 91       	lpm	r24, Z+
    2d46:	93 ff       	sbrs	r25, 3
    2d48:	81 91       	ld	r24, Z+
    2d4a:	1f 01       	movw	r2, r30
    2d4c:	88 23       	and	r24, r24
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <vfprintf+0x64>
    2d50:	17 c3       	rjmp	.+1582   	; 0x3380 <vfprintf+0x692>
    2d52:	85 32       	cpi	r24, 0x25	; 37
    2d54:	39 f4       	brne	.+14     	; 0x2d64 <vfprintf+0x76>
    2d56:	93 fd       	sbrc	r25, 3
    2d58:	85 91       	lpm	r24, Z+
    2d5a:	93 ff       	sbrs	r25, 3
    2d5c:	81 91       	ld	r24, Z+
    2d5e:	1f 01       	movw	r2, r30
    2d60:	85 32       	cpi	r24, 0x25	; 37
    2d62:	31 f4       	brne	.+12     	; 0x2d70 <vfprintf+0x82>
    2d64:	b7 01       	movw	r22, r14
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	ba d4       	rcall	.+2420   	; 0x36de <fputc>
    2d6a:	56 01       	movw	r10, r12
    2d6c:	65 01       	movw	r12, r10
    2d6e:	e6 cf       	rjmp	.-52     	; 0x2d3c <vfprintf+0x4e>
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	51 2c       	mov	r5, r1
    2d74:	91 2c       	mov	r9, r1
    2d76:	ff e1       	ldi	r31, 0x1F	; 31
    2d78:	f9 15       	cp	r31, r9
    2d7a:	d8 f0       	brcs	.+54     	; 0x2db2 <vfprintf+0xc4>
    2d7c:	8b 32       	cpi	r24, 0x2B	; 43
    2d7e:	79 f0       	breq	.+30     	; 0x2d9e <vfprintf+0xb0>
    2d80:	38 f4       	brcc	.+14     	; 0x2d90 <vfprintf+0xa2>
    2d82:	80 32       	cpi	r24, 0x20	; 32
    2d84:	79 f0       	breq	.+30     	; 0x2da4 <vfprintf+0xb6>
    2d86:	83 32       	cpi	r24, 0x23	; 35
    2d88:	a1 f4       	brne	.+40     	; 0x2db2 <vfprintf+0xc4>
    2d8a:	f9 2d       	mov	r31, r9
    2d8c:	f0 61       	ori	r31, 0x10	; 16
    2d8e:	2e c0       	rjmp	.+92     	; 0x2dec <vfprintf+0xfe>
    2d90:	8d 32       	cpi	r24, 0x2D	; 45
    2d92:	61 f0       	breq	.+24     	; 0x2dac <vfprintf+0xbe>
    2d94:	80 33       	cpi	r24, 0x30	; 48
    2d96:	69 f4       	brne	.+26     	; 0x2db2 <vfprintf+0xc4>
    2d98:	29 2d       	mov	r18, r9
    2d9a:	21 60       	ori	r18, 0x01	; 1
    2d9c:	2d c0       	rjmp	.+90     	; 0x2df8 <vfprintf+0x10a>
    2d9e:	39 2d       	mov	r19, r9
    2da0:	32 60       	ori	r19, 0x02	; 2
    2da2:	93 2e       	mov	r9, r19
    2da4:	89 2d       	mov	r24, r9
    2da6:	84 60       	ori	r24, 0x04	; 4
    2da8:	98 2e       	mov	r9, r24
    2daa:	2a c0       	rjmp	.+84     	; 0x2e00 <vfprintf+0x112>
    2dac:	e9 2d       	mov	r30, r9
    2dae:	e8 60       	ori	r30, 0x08	; 8
    2db0:	15 c0       	rjmp	.+42     	; 0x2ddc <vfprintf+0xee>
    2db2:	97 fc       	sbrc	r9, 7
    2db4:	2d c0       	rjmp	.+90     	; 0x2e10 <vfprintf+0x122>
    2db6:	20 ed       	ldi	r18, 0xD0	; 208
    2db8:	28 0f       	add	r18, r24
    2dba:	2a 30       	cpi	r18, 0x0A	; 10
    2dbc:	88 f4       	brcc	.+34     	; 0x2de0 <vfprintf+0xf2>
    2dbe:	96 fe       	sbrs	r9, 6
    2dc0:	06 c0       	rjmp	.+12     	; 0x2dce <vfprintf+0xe0>
    2dc2:	3a e0       	ldi	r19, 0x0A	; 10
    2dc4:	13 9f       	mul	r17, r19
    2dc6:	20 0d       	add	r18, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	12 2f       	mov	r17, r18
    2dcc:	19 c0       	rjmp	.+50     	; 0x2e00 <vfprintf+0x112>
    2dce:	8a e0       	ldi	r24, 0x0A	; 10
    2dd0:	58 9e       	mul	r5, r24
    2dd2:	20 0d       	add	r18, r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	52 2e       	mov	r5, r18
    2dd8:	e9 2d       	mov	r30, r9
    2dda:	e0 62       	ori	r30, 0x20	; 32
    2ddc:	9e 2e       	mov	r9, r30
    2dde:	10 c0       	rjmp	.+32     	; 0x2e00 <vfprintf+0x112>
    2de0:	8e 32       	cpi	r24, 0x2E	; 46
    2de2:	31 f4       	brne	.+12     	; 0x2df0 <vfprintf+0x102>
    2de4:	96 fc       	sbrc	r9, 6
    2de6:	cc c2       	rjmp	.+1432   	; 0x3380 <vfprintf+0x692>
    2de8:	f9 2d       	mov	r31, r9
    2dea:	f0 64       	ori	r31, 0x40	; 64
    2dec:	9f 2e       	mov	r9, r31
    2dee:	08 c0       	rjmp	.+16     	; 0x2e00 <vfprintf+0x112>
    2df0:	8c 36       	cpi	r24, 0x6C	; 108
    2df2:	21 f4       	brne	.+8      	; 0x2dfc <vfprintf+0x10e>
    2df4:	29 2d       	mov	r18, r9
    2df6:	20 68       	ori	r18, 0x80	; 128
    2df8:	92 2e       	mov	r9, r18
    2dfa:	02 c0       	rjmp	.+4      	; 0x2e00 <vfprintf+0x112>
    2dfc:	88 36       	cpi	r24, 0x68	; 104
    2dfe:	41 f4       	brne	.+16     	; 0x2e10 <vfprintf+0x122>
    2e00:	f1 01       	movw	r30, r2
    2e02:	93 fd       	sbrc	r25, 3
    2e04:	85 91       	lpm	r24, Z+
    2e06:	93 ff       	sbrs	r25, 3
    2e08:	81 91       	ld	r24, Z+
    2e0a:	1f 01       	movw	r2, r30
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	b3 cf       	rjmp	.-154    	; 0x2d76 <vfprintf+0x88>
    2e10:	9b eb       	ldi	r25, 0xBB	; 187
    2e12:	98 0f       	add	r25, r24
    2e14:	93 30       	cpi	r25, 0x03	; 3
    2e16:	20 f4       	brcc	.+8      	; 0x2e20 <vfprintf+0x132>
    2e18:	99 2d       	mov	r25, r9
    2e1a:	90 61       	ori	r25, 0x10	; 16
    2e1c:	80 5e       	subi	r24, 0xE0	; 224
    2e1e:	07 c0       	rjmp	.+14     	; 0x2e2e <vfprintf+0x140>
    2e20:	9b e9       	ldi	r25, 0x9B	; 155
    2e22:	98 0f       	add	r25, r24
    2e24:	93 30       	cpi	r25, 0x03	; 3
    2e26:	08 f0       	brcs	.+2      	; 0x2e2a <vfprintf+0x13c>
    2e28:	59 c1       	rjmp	.+690    	; 0x30dc <vfprintf+0x3ee>
    2e2a:	99 2d       	mov	r25, r9
    2e2c:	9f 7e       	andi	r25, 0xEF	; 239
    2e2e:	96 ff       	sbrs	r25, 6
    2e30:	16 e0       	ldi	r17, 0x06	; 6
    2e32:	9f 73       	andi	r25, 0x3F	; 63
    2e34:	99 2e       	mov	r9, r25
    2e36:	85 36       	cpi	r24, 0x65	; 101
    2e38:	19 f4       	brne	.+6      	; 0x2e40 <vfprintf+0x152>
    2e3a:	90 64       	ori	r25, 0x40	; 64
    2e3c:	99 2e       	mov	r9, r25
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <vfprintf+0x162>
    2e40:	86 36       	cpi	r24, 0x66	; 102
    2e42:	21 f4       	brne	.+8      	; 0x2e4c <vfprintf+0x15e>
    2e44:	39 2f       	mov	r19, r25
    2e46:	30 68       	ori	r19, 0x80	; 128
    2e48:	93 2e       	mov	r9, r19
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <vfprintf+0x162>
    2e4c:	11 11       	cpse	r17, r1
    2e4e:	11 50       	subi	r17, 0x01	; 1
    2e50:	97 fe       	sbrs	r9, 7
    2e52:	07 c0       	rjmp	.+14     	; 0x2e62 <vfprintf+0x174>
    2e54:	1c 33       	cpi	r17, 0x3C	; 60
    2e56:	50 f4       	brcc	.+20     	; 0x2e6c <vfprintf+0x17e>
    2e58:	44 24       	eor	r4, r4
    2e5a:	43 94       	inc	r4
    2e5c:	41 0e       	add	r4, r17
    2e5e:	27 e0       	ldi	r18, 0x07	; 7
    2e60:	0b c0       	rjmp	.+22     	; 0x2e78 <vfprintf+0x18a>
    2e62:	18 30       	cpi	r17, 0x08	; 8
    2e64:	38 f0       	brcs	.+14     	; 0x2e74 <vfprintf+0x186>
    2e66:	27 e0       	ldi	r18, 0x07	; 7
    2e68:	17 e0       	ldi	r17, 0x07	; 7
    2e6a:	05 c0       	rjmp	.+10     	; 0x2e76 <vfprintf+0x188>
    2e6c:	27 e0       	ldi	r18, 0x07	; 7
    2e6e:	9c e3       	ldi	r25, 0x3C	; 60
    2e70:	49 2e       	mov	r4, r25
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <vfprintf+0x18a>
    2e74:	21 2f       	mov	r18, r17
    2e76:	41 2c       	mov	r4, r1
    2e78:	56 01       	movw	r10, r12
    2e7a:	84 e0       	ldi	r24, 0x04	; 4
    2e7c:	a8 0e       	add	r10, r24
    2e7e:	b1 1c       	adc	r11, r1
    2e80:	f6 01       	movw	r30, r12
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	04 2d       	mov	r16, r4
    2e8c:	a3 01       	movw	r20, r6
    2e8e:	28 d3       	rcall	.+1616   	; 0x34e0 <__ftoa_engine>
    2e90:	6c 01       	movw	r12, r24
    2e92:	f9 81       	ldd	r31, Y+1	; 0x01
    2e94:	fc 87       	std	Y+12, r31	; 0x0c
    2e96:	f0 ff       	sbrs	r31, 0
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <vfprintf+0x1b0>
    2e9a:	f3 ff       	sbrs	r31, 3
    2e9c:	06 c0       	rjmp	.+12     	; 0x2eaa <vfprintf+0x1bc>
    2e9e:	91 fc       	sbrc	r9, 1
    2ea0:	06 c0       	rjmp	.+12     	; 0x2eae <vfprintf+0x1c0>
    2ea2:	92 fe       	sbrs	r9, 2
    2ea4:	06 c0       	rjmp	.+12     	; 0x2eb2 <vfprintf+0x1c4>
    2ea6:	00 e2       	ldi	r16, 0x20	; 32
    2ea8:	05 c0       	rjmp	.+10     	; 0x2eb4 <vfprintf+0x1c6>
    2eaa:	0d e2       	ldi	r16, 0x2D	; 45
    2eac:	03 c0       	rjmp	.+6      	; 0x2eb4 <vfprintf+0x1c6>
    2eae:	0b e2       	ldi	r16, 0x2B	; 43
    2eb0:	01 c0       	rjmp	.+2      	; 0x2eb4 <vfprintf+0x1c6>
    2eb2:	00 e0       	ldi	r16, 0x00	; 0
    2eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eb6:	8c 70       	andi	r24, 0x0C	; 12
    2eb8:	19 f0       	breq	.+6      	; 0x2ec0 <vfprintf+0x1d2>
    2eba:	01 11       	cpse	r16, r1
    2ebc:	43 c2       	rjmp	.+1158   	; 0x3344 <vfprintf+0x656>
    2ebe:	80 c2       	rjmp	.+1280   	; 0x33c0 <vfprintf+0x6d2>
    2ec0:	97 fe       	sbrs	r9, 7
    2ec2:	10 c0       	rjmp	.+32     	; 0x2ee4 <vfprintf+0x1f6>
    2ec4:	4c 0c       	add	r4, r12
    2ec6:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ec8:	f4 ff       	sbrs	r31, 4
    2eca:	04 c0       	rjmp	.+8      	; 0x2ed4 <vfprintf+0x1e6>
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	81 33       	cpi	r24, 0x31	; 49
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <vfprintf+0x1e6>
    2ed2:	4a 94       	dec	r4
    2ed4:	14 14       	cp	r1, r4
    2ed6:	74 f5       	brge	.+92     	; 0x2f34 <vfprintf+0x246>
    2ed8:	28 e0       	ldi	r18, 0x08	; 8
    2eda:	24 15       	cp	r18, r4
    2edc:	78 f5       	brcc	.+94     	; 0x2f3c <vfprintf+0x24e>
    2ede:	88 e0       	ldi	r24, 0x08	; 8
    2ee0:	48 2e       	mov	r4, r24
    2ee2:	2c c0       	rjmp	.+88     	; 0x2f3c <vfprintf+0x24e>
    2ee4:	96 fc       	sbrc	r9, 6
    2ee6:	2a c0       	rjmp	.+84     	; 0x2f3c <vfprintf+0x24e>
    2ee8:	81 2f       	mov	r24, r17
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	8c 15       	cp	r24, r12
    2eee:	9d 05       	cpc	r25, r13
    2ef0:	9c f0       	brlt	.+38     	; 0x2f18 <vfprintf+0x22a>
    2ef2:	3c ef       	ldi	r19, 0xFC	; 252
    2ef4:	c3 16       	cp	r12, r19
    2ef6:	3f ef       	ldi	r19, 0xFF	; 255
    2ef8:	d3 06       	cpc	r13, r19
    2efa:	74 f0       	brlt	.+28     	; 0x2f18 <vfprintf+0x22a>
    2efc:	89 2d       	mov	r24, r9
    2efe:	80 68       	ori	r24, 0x80	; 128
    2f00:	98 2e       	mov	r9, r24
    2f02:	0a c0       	rjmp	.+20     	; 0x2f18 <vfprintf+0x22a>
    2f04:	e2 e0       	ldi	r30, 0x02	; 2
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	ec 0f       	add	r30, r28
    2f0a:	fd 1f       	adc	r31, r29
    2f0c:	e1 0f       	add	r30, r17
    2f0e:	f1 1d       	adc	r31, r1
    2f10:	80 81       	ld	r24, Z
    2f12:	80 33       	cpi	r24, 0x30	; 48
    2f14:	19 f4       	brne	.+6      	; 0x2f1c <vfprintf+0x22e>
    2f16:	11 50       	subi	r17, 0x01	; 1
    2f18:	11 11       	cpse	r17, r1
    2f1a:	f4 cf       	rjmp	.-24     	; 0x2f04 <vfprintf+0x216>
    2f1c:	97 fe       	sbrs	r9, 7
    2f1e:	0e c0       	rjmp	.+28     	; 0x2f3c <vfprintf+0x24e>
    2f20:	44 24       	eor	r4, r4
    2f22:	43 94       	inc	r4
    2f24:	41 0e       	add	r4, r17
    2f26:	81 2f       	mov	r24, r17
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	c8 16       	cp	r12, r24
    2f2c:	d9 06       	cpc	r13, r25
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <vfprintf+0x24c>
    2f30:	1c 19       	sub	r17, r12
    2f32:	04 c0       	rjmp	.+8      	; 0x2f3c <vfprintf+0x24e>
    2f34:	44 24       	eor	r4, r4
    2f36:	43 94       	inc	r4
    2f38:	01 c0       	rjmp	.+2      	; 0x2f3c <vfprintf+0x24e>
    2f3a:	10 e0       	ldi	r17, 0x00	; 0
    2f3c:	97 fe       	sbrs	r9, 7
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <vfprintf+0x25e>
    2f40:	1c 14       	cp	r1, r12
    2f42:	1d 04       	cpc	r1, r13
    2f44:	34 f4       	brge	.+12     	; 0x2f52 <vfprintf+0x264>
    2f46:	c6 01       	movw	r24, r12
    2f48:	01 96       	adiw	r24, 0x01	; 1
    2f4a:	05 c0       	rjmp	.+10     	; 0x2f56 <vfprintf+0x268>
    2f4c:	85 e0       	ldi	r24, 0x05	; 5
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <vfprintf+0x268>
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	01 11       	cpse	r16, r1
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	11 23       	and	r17, r17
    2f5c:	31 f0       	breq	.+12     	; 0x2f6a <vfprintf+0x27c>
    2f5e:	21 2f       	mov	r18, r17
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	2f 5f       	subi	r18, 0xFF	; 255
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	82 0f       	add	r24, r18
    2f68:	93 1f       	adc	r25, r19
    2f6a:	25 2d       	mov	r18, r5
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	82 17       	cp	r24, r18
    2f70:	93 07       	cpc	r25, r19
    2f72:	14 f4       	brge	.+4      	; 0x2f78 <vfprintf+0x28a>
    2f74:	58 1a       	sub	r5, r24
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <vfprintf+0x28c>
    2f78:	51 2c       	mov	r5, r1
    2f7a:	89 2d       	mov	r24, r9
    2f7c:	89 70       	andi	r24, 0x09	; 9
    2f7e:	41 f4       	brne	.+16     	; 0x2f90 <vfprintf+0x2a2>
    2f80:	55 20       	and	r5, r5
    2f82:	31 f0       	breq	.+12     	; 0x2f90 <vfprintf+0x2a2>
    2f84:	b7 01       	movw	r22, r14
    2f86:	80 e2       	ldi	r24, 0x20	; 32
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	a9 d3       	rcall	.+1874   	; 0x36de <fputc>
    2f8c:	5a 94       	dec	r5
    2f8e:	f8 cf       	rjmp	.-16     	; 0x2f80 <vfprintf+0x292>
    2f90:	00 23       	and	r16, r16
    2f92:	21 f0       	breq	.+8      	; 0x2f9c <vfprintf+0x2ae>
    2f94:	b7 01       	movw	r22, r14
    2f96:	80 2f       	mov	r24, r16
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	a1 d3       	rcall	.+1858   	; 0x36de <fputc>
    2f9c:	93 fc       	sbrc	r9, 3
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <vfprintf+0x2c2>
    2fa0:	55 20       	and	r5, r5
    2fa2:	31 f0       	breq	.+12     	; 0x2fb0 <vfprintf+0x2c2>
    2fa4:	b7 01       	movw	r22, r14
    2fa6:	80 e3       	ldi	r24, 0x30	; 48
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	99 d3       	rcall	.+1842   	; 0x36de <fputc>
    2fac:	5a 94       	dec	r5
    2fae:	f8 cf       	rjmp	.-16     	; 0x2fa0 <vfprintf+0x2b2>
    2fb0:	97 fe       	sbrs	r9, 7
    2fb2:	4a c0       	rjmp	.+148    	; 0x3048 <vfprintf+0x35a>
    2fb4:	46 01       	movw	r8, r12
    2fb6:	d7 fe       	sbrs	r13, 7
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <vfprintf+0x2d0>
    2fba:	81 2c       	mov	r8, r1
    2fbc:	91 2c       	mov	r9, r1
    2fbe:	c6 01       	movw	r24, r12
    2fc0:	88 19       	sub	r24, r8
    2fc2:	99 09       	sbc	r25, r9
    2fc4:	f3 01       	movw	r30, r6
    2fc6:	e8 0f       	add	r30, r24
    2fc8:	f9 1f       	adc	r31, r25
    2fca:	fe 87       	std	Y+14, r31	; 0x0e
    2fcc:	ed 87       	std	Y+13, r30	; 0x0d
    2fce:	96 01       	movw	r18, r12
    2fd0:	24 19       	sub	r18, r4
    2fd2:	31 09       	sbc	r19, r1
    2fd4:	38 8b       	std	Y+16, r19	; 0x10
    2fd6:	2f 87       	std	Y+15, r18	; 0x0f
    2fd8:	01 2f       	mov	r16, r17
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	11 95       	neg	r17
    2fde:	01 95       	neg	r16
    2fe0:	11 09       	sbc	r17, r1
    2fe2:	3f ef       	ldi	r19, 0xFF	; 255
    2fe4:	83 16       	cp	r8, r19
    2fe6:	93 06       	cpc	r9, r19
    2fe8:	21 f4       	brne	.+8      	; 0x2ff2 <vfprintf+0x304>
    2fea:	b7 01       	movw	r22, r14
    2fec:	8e e2       	ldi	r24, 0x2E	; 46
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	76 d3       	rcall	.+1772   	; 0x36de <fputc>
    2ff2:	c8 14       	cp	r12, r8
    2ff4:	d9 04       	cpc	r13, r9
    2ff6:	4c f0       	brlt	.+18     	; 0x300a <vfprintf+0x31c>
    2ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffa:	98 89       	ldd	r25, Y+16	; 0x10
    2ffc:	88 15       	cp	r24, r8
    2ffe:	99 05       	cpc	r25, r9
    3000:	24 f4       	brge	.+8      	; 0x300a <vfprintf+0x31c>
    3002:	ed 85       	ldd	r30, Y+13	; 0x0d
    3004:	fe 85       	ldd	r31, Y+14	; 0x0e
    3006:	81 81       	ldd	r24, Z+1	; 0x01
    3008:	01 c0       	rjmp	.+2      	; 0x300c <vfprintf+0x31e>
    300a:	80 e3       	ldi	r24, 0x30	; 48
    300c:	f1 e0       	ldi	r31, 0x01	; 1
    300e:	8f 1a       	sub	r8, r31
    3010:	91 08       	sbc	r9, r1
    3012:	2d 85       	ldd	r18, Y+13	; 0x0d
    3014:	3e 85       	ldd	r19, Y+14	; 0x0e
    3016:	2f 5f       	subi	r18, 0xFF	; 255
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	3e 87       	std	Y+14, r19	; 0x0e
    301c:	2d 87       	std	Y+13, r18	; 0x0d
    301e:	80 16       	cp	r8, r16
    3020:	91 06       	cpc	r9, r17
    3022:	24 f0       	brlt	.+8      	; 0x302c <vfprintf+0x33e>
    3024:	b7 01       	movw	r22, r14
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	5a d3       	rcall	.+1716   	; 0x36de <fputc>
    302a:	db cf       	rjmp	.-74     	; 0x2fe2 <vfprintf+0x2f4>
    302c:	c8 14       	cp	r12, r8
    302e:	d9 04       	cpc	r13, r9
    3030:	41 f4       	brne	.+16     	; 0x3042 <vfprintf+0x354>
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	96 33       	cpi	r25, 0x36	; 54
    3036:	20 f4       	brcc	.+8      	; 0x3040 <vfprintf+0x352>
    3038:	95 33       	cpi	r25, 0x35	; 53
    303a:	19 f4       	brne	.+6      	; 0x3042 <vfprintf+0x354>
    303c:	3c 85       	ldd	r19, Y+12	; 0x0c
    303e:	34 ff       	sbrs	r19, 4
    3040:	81 e3       	ldi	r24, 0x31	; 49
    3042:	b7 01       	movw	r22, r14
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	48 c0       	rjmp	.+144    	; 0x30d8 <vfprintf+0x3ea>
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	81 33       	cpi	r24, 0x31	; 49
    304c:	19 f0       	breq	.+6      	; 0x3054 <vfprintf+0x366>
    304e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3050:	9f 7e       	andi	r25, 0xEF	; 239
    3052:	9c 87       	std	Y+12, r25	; 0x0c
    3054:	b7 01       	movw	r22, r14
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	42 d3       	rcall	.+1668   	; 0x36de <fputc>
    305a:	11 11       	cpse	r17, r1
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <vfprintf+0x37a>
    305e:	94 fc       	sbrc	r9, 4
    3060:	16 c0       	rjmp	.+44     	; 0x308e <vfprintf+0x3a0>
    3062:	85 e6       	ldi	r24, 0x65	; 101
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	15 c0       	rjmp	.+42     	; 0x3092 <vfprintf+0x3a4>
    3068:	b7 01       	movw	r22, r14
    306a:	8e e2       	ldi	r24, 0x2E	; 46
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	37 d3       	rcall	.+1646   	; 0x36de <fputc>
    3070:	1e 5f       	subi	r17, 0xFE	; 254
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	01 e0       	ldi	r16, 0x01	; 1
    3076:	08 0f       	add	r16, r24
    3078:	f3 01       	movw	r30, r6
    307a:	e8 0f       	add	r30, r24
    307c:	f1 1d       	adc	r31, r1
    307e:	80 81       	ld	r24, Z
    3080:	b7 01       	movw	r22, r14
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	2c d3       	rcall	.+1624   	; 0x36de <fputc>
    3086:	80 2f       	mov	r24, r16
    3088:	01 13       	cpse	r16, r17
    308a:	f4 cf       	rjmp	.-24     	; 0x3074 <vfprintf+0x386>
    308c:	e8 cf       	rjmp	.-48     	; 0x305e <vfprintf+0x370>
    308e:	85 e4       	ldi	r24, 0x45	; 69
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	b7 01       	movw	r22, r14
    3094:	24 d3       	rcall	.+1608   	; 0x36de <fputc>
    3096:	d7 fc       	sbrc	r13, 7
    3098:	06 c0       	rjmp	.+12     	; 0x30a6 <vfprintf+0x3b8>
    309a:	c1 14       	cp	r12, r1
    309c:	d1 04       	cpc	r13, r1
    309e:	41 f4       	brne	.+16     	; 0x30b0 <vfprintf+0x3c2>
    30a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    30a2:	e4 ff       	sbrs	r30, 4
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <vfprintf+0x3c2>
    30a6:	d1 94       	neg	r13
    30a8:	c1 94       	neg	r12
    30aa:	d1 08       	sbc	r13, r1
    30ac:	8d e2       	ldi	r24, 0x2D	; 45
    30ae:	01 c0       	rjmp	.+2      	; 0x30b2 <vfprintf+0x3c4>
    30b0:	8b e2       	ldi	r24, 0x2B	; 43
    30b2:	b7 01       	movw	r22, r14
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	13 d3       	rcall	.+1574   	; 0x36de <fputc>
    30b8:	80 e3       	ldi	r24, 0x30	; 48
    30ba:	2a e0       	ldi	r18, 0x0A	; 10
    30bc:	c2 16       	cp	r12, r18
    30be:	d1 04       	cpc	r13, r1
    30c0:	2c f0       	brlt	.+10     	; 0x30cc <vfprintf+0x3de>
    30c2:	8f 5f       	subi	r24, 0xFF	; 255
    30c4:	fa e0       	ldi	r31, 0x0A	; 10
    30c6:	cf 1a       	sub	r12, r31
    30c8:	d1 08       	sbc	r13, r1
    30ca:	f7 cf       	rjmp	.-18     	; 0x30ba <vfprintf+0x3cc>
    30cc:	b7 01       	movw	r22, r14
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	06 d3       	rcall	.+1548   	; 0x36de <fputc>
    30d2:	b7 01       	movw	r22, r14
    30d4:	c6 01       	movw	r24, r12
    30d6:	c0 96       	adiw	r24, 0x30	; 48
    30d8:	02 d3       	rcall	.+1540   	; 0x36de <fputc>
    30da:	49 c1       	rjmp	.+658    	; 0x336e <vfprintf+0x680>
    30dc:	83 36       	cpi	r24, 0x63	; 99
    30de:	31 f0       	breq	.+12     	; 0x30ec <vfprintf+0x3fe>
    30e0:	83 37       	cpi	r24, 0x73	; 115
    30e2:	79 f0       	breq	.+30     	; 0x3102 <vfprintf+0x414>
    30e4:	83 35       	cpi	r24, 0x53	; 83
    30e6:	09 f0       	breq	.+2      	; 0x30ea <vfprintf+0x3fc>
    30e8:	52 c0       	rjmp	.+164    	; 0x318e <vfprintf+0x4a0>
    30ea:	1f c0       	rjmp	.+62     	; 0x312a <vfprintf+0x43c>
    30ec:	56 01       	movw	r10, r12
    30ee:	32 e0       	ldi	r19, 0x02	; 2
    30f0:	a3 0e       	add	r10, r19
    30f2:	b1 1c       	adc	r11, r1
    30f4:	f6 01       	movw	r30, r12
    30f6:	80 81       	ld	r24, Z
    30f8:	89 83       	std	Y+1, r24	; 0x01
    30fa:	01 e0       	ldi	r16, 0x01	; 1
    30fc:	10 e0       	ldi	r17, 0x00	; 0
    30fe:	63 01       	movw	r12, r6
    3100:	11 c0       	rjmp	.+34     	; 0x3124 <vfprintf+0x436>
    3102:	56 01       	movw	r10, r12
    3104:	f2 e0       	ldi	r31, 0x02	; 2
    3106:	af 0e       	add	r10, r31
    3108:	b1 1c       	adc	r11, r1
    310a:	f6 01       	movw	r30, r12
    310c:	c0 80       	ld	r12, Z
    310e:	d1 80       	ldd	r13, Z+1	; 0x01
    3110:	96 fe       	sbrs	r9, 6
    3112:	03 c0       	rjmp	.+6      	; 0x311a <vfprintf+0x42c>
    3114:	61 2f       	mov	r22, r17
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	02 c0       	rjmp	.+4      	; 0x311e <vfprintf+0x430>
    311a:	6f ef       	ldi	r22, 0xFF	; 255
    311c:	7f ef       	ldi	r23, 0xFF	; 255
    311e:	c6 01       	movw	r24, r12
    3120:	cb d2       	rcall	.+1430   	; 0x36b8 <strnlen>
    3122:	8c 01       	movw	r16, r24
    3124:	f9 2d       	mov	r31, r9
    3126:	ff 77       	andi	r31, 0x7F	; 127
    3128:	13 c0       	rjmp	.+38     	; 0x3150 <vfprintf+0x462>
    312a:	56 01       	movw	r10, r12
    312c:	22 e0       	ldi	r18, 0x02	; 2
    312e:	a2 0e       	add	r10, r18
    3130:	b1 1c       	adc	r11, r1
    3132:	f6 01       	movw	r30, r12
    3134:	c0 80       	ld	r12, Z
    3136:	d1 80       	ldd	r13, Z+1	; 0x01
    3138:	96 fe       	sbrs	r9, 6
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <vfprintf+0x454>
    313c:	61 2f       	mov	r22, r17
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <vfprintf+0x458>
    3142:	6f ef       	ldi	r22, 0xFF	; 255
    3144:	7f ef       	ldi	r23, 0xFF	; 255
    3146:	c6 01       	movw	r24, r12
    3148:	a3 d2       	rcall	.+1350   	; 0x3690 <strnlen_P>
    314a:	8c 01       	movw	r16, r24
    314c:	f9 2d       	mov	r31, r9
    314e:	f0 68       	ori	r31, 0x80	; 128
    3150:	9f 2e       	mov	r9, r31
    3152:	f3 fd       	sbrc	r31, 3
    3154:	18 c0       	rjmp	.+48     	; 0x3186 <vfprintf+0x498>
    3156:	85 2d       	mov	r24, r5
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	08 17       	cp	r16, r24
    315c:	19 07       	cpc	r17, r25
    315e:	98 f4       	brcc	.+38     	; 0x3186 <vfprintf+0x498>
    3160:	b7 01       	movw	r22, r14
    3162:	80 e2       	ldi	r24, 0x20	; 32
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	bb d2       	rcall	.+1398   	; 0x36de <fputc>
    3168:	5a 94       	dec	r5
    316a:	f5 cf       	rjmp	.-22     	; 0x3156 <vfprintf+0x468>
    316c:	f6 01       	movw	r30, r12
    316e:	97 fc       	sbrc	r9, 7
    3170:	85 91       	lpm	r24, Z+
    3172:	97 fe       	sbrs	r9, 7
    3174:	81 91       	ld	r24, Z+
    3176:	6f 01       	movw	r12, r30
    3178:	b7 01       	movw	r22, r14
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	b0 d2       	rcall	.+1376   	; 0x36de <fputc>
    317e:	51 10       	cpse	r5, r1
    3180:	5a 94       	dec	r5
    3182:	01 50       	subi	r16, 0x01	; 1
    3184:	11 09       	sbc	r17, r1
    3186:	01 15       	cp	r16, r1
    3188:	11 05       	cpc	r17, r1
    318a:	81 f7       	brne	.-32     	; 0x316c <vfprintf+0x47e>
    318c:	f0 c0       	rjmp	.+480    	; 0x336e <vfprintf+0x680>
    318e:	84 36       	cpi	r24, 0x64	; 100
    3190:	11 f0       	breq	.+4      	; 0x3196 <vfprintf+0x4a8>
    3192:	89 36       	cpi	r24, 0x69	; 105
    3194:	59 f5       	brne	.+86     	; 0x31ec <vfprintf+0x4fe>
    3196:	56 01       	movw	r10, r12
    3198:	97 fe       	sbrs	r9, 7
    319a:	09 c0       	rjmp	.+18     	; 0x31ae <vfprintf+0x4c0>
    319c:	24 e0       	ldi	r18, 0x04	; 4
    319e:	a2 0e       	add	r10, r18
    31a0:	b1 1c       	adc	r11, r1
    31a2:	f6 01       	movw	r30, r12
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	0a c0       	rjmp	.+20     	; 0x31c2 <vfprintf+0x4d4>
    31ae:	f2 e0       	ldi	r31, 0x02	; 2
    31b0:	af 0e       	add	r10, r31
    31b2:	b1 1c       	adc	r11, r1
    31b4:	f6 01       	movw	r30, r12
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	07 2e       	mov	r0, r23
    31bc:	00 0c       	add	r0, r0
    31be:	88 0b       	sbc	r24, r24
    31c0:	99 0b       	sbc	r25, r25
    31c2:	f9 2d       	mov	r31, r9
    31c4:	ff 76       	andi	r31, 0x6F	; 111
    31c6:	9f 2e       	mov	r9, r31
    31c8:	97 ff       	sbrs	r25, 7
    31ca:	09 c0       	rjmp	.+18     	; 0x31de <vfprintf+0x4f0>
    31cc:	90 95       	com	r25
    31ce:	80 95       	com	r24
    31d0:	70 95       	com	r23
    31d2:	61 95       	neg	r22
    31d4:	7f 4f       	sbci	r23, 0xFF	; 255
    31d6:	8f 4f       	sbci	r24, 0xFF	; 255
    31d8:	9f 4f       	sbci	r25, 0xFF	; 255
    31da:	f0 68       	ori	r31, 0x80	; 128
    31dc:	9f 2e       	mov	r9, r31
    31de:	2a e0       	ldi	r18, 0x0A	; 10
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	a3 01       	movw	r20, r6
    31e4:	27 d3       	rcall	.+1614   	; 0x3834 <__ultoa_invert>
    31e6:	c8 2e       	mov	r12, r24
    31e8:	c6 18       	sub	r12, r6
    31ea:	3e c0       	rjmp	.+124    	; 0x3268 <vfprintf+0x57a>
    31ec:	09 2d       	mov	r16, r9
    31ee:	85 37       	cpi	r24, 0x75	; 117
    31f0:	21 f4       	brne	.+8      	; 0x31fa <vfprintf+0x50c>
    31f2:	0f 7e       	andi	r16, 0xEF	; 239
    31f4:	2a e0       	ldi	r18, 0x0A	; 10
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	1d c0       	rjmp	.+58     	; 0x3234 <vfprintf+0x546>
    31fa:	09 7f       	andi	r16, 0xF9	; 249
    31fc:	8f 36       	cpi	r24, 0x6F	; 111
    31fe:	91 f0       	breq	.+36     	; 0x3224 <vfprintf+0x536>
    3200:	18 f4       	brcc	.+6      	; 0x3208 <vfprintf+0x51a>
    3202:	88 35       	cpi	r24, 0x58	; 88
    3204:	59 f0       	breq	.+22     	; 0x321c <vfprintf+0x52e>
    3206:	bc c0       	rjmp	.+376    	; 0x3380 <vfprintf+0x692>
    3208:	80 37       	cpi	r24, 0x70	; 112
    320a:	19 f0       	breq	.+6      	; 0x3212 <vfprintf+0x524>
    320c:	88 37       	cpi	r24, 0x78	; 120
    320e:	11 f0       	breq	.+4      	; 0x3214 <vfprintf+0x526>
    3210:	b7 c0       	rjmp	.+366    	; 0x3380 <vfprintf+0x692>
    3212:	00 61       	ori	r16, 0x10	; 16
    3214:	04 ff       	sbrs	r16, 4
    3216:	09 c0       	rjmp	.+18     	; 0x322a <vfprintf+0x53c>
    3218:	04 60       	ori	r16, 0x04	; 4
    321a:	07 c0       	rjmp	.+14     	; 0x322a <vfprintf+0x53c>
    321c:	94 fe       	sbrs	r9, 4
    321e:	08 c0       	rjmp	.+16     	; 0x3230 <vfprintf+0x542>
    3220:	06 60       	ori	r16, 0x06	; 6
    3222:	06 c0       	rjmp	.+12     	; 0x3230 <vfprintf+0x542>
    3224:	28 e0       	ldi	r18, 0x08	; 8
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	05 c0       	rjmp	.+10     	; 0x3234 <vfprintf+0x546>
    322a:	20 e1       	ldi	r18, 0x10	; 16
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <vfprintf+0x546>
    3230:	20 e1       	ldi	r18, 0x10	; 16
    3232:	32 e0       	ldi	r19, 0x02	; 2
    3234:	56 01       	movw	r10, r12
    3236:	07 ff       	sbrs	r16, 7
    3238:	09 c0       	rjmp	.+18     	; 0x324c <vfprintf+0x55e>
    323a:	84 e0       	ldi	r24, 0x04	; 4
    323c:	a8 0e       	add	r10, r24
    323e:	b1 1c       	adc	r11, r1
    3240:	f6 01       	movw	r30, r12
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	08 c0       	rjmp	.+16     	; 0x325c <vfprintf+0x56e>
    324c:	f2 e0       	ldi	r31, 0x02	; 2
    324e:	af 0e       	add	r10, r31
    3250:	b1 1c       	adc	r11, r1
    3252:	f6 01       	movw	r30, r12
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	a3 01       	movw	r20, r6
    325e:	ea d2       	rcall	.+1492   	; 0x3834 <__ultoa_invert>
    3260:	c8 2e       	mov	r12, r24
    3262:	c6 18       	sub	r12, r6
    3264:	0f 77       	andi	r16, 0x7F	; 127
    3266:	90 2e       	mov	r9, r16
    3268:	96 fe       	sbrs	r9, 6
    326a:	0b c0       	rjmp	.+22     	; 0x3282 <vfprintf+0x594>
    326c:	09 2d       	mov	r16, r9
    326e:	0e 7f       	andi	r16, 0xFE	; 254
    3270:	c1 16       	cp	r12, r17
    3272:	50 f4       	brcc	.+20     	; 0x3288 <vfprintf+0x59a>
    3274:	94 fe       	sbrs	r9, 4
    3276:	0a c0       	rjmp	.+20     	; 0x328c <vfprintf+0x59e>
    3278:	92 fc       	sbrc	r9, 2
    327a:	08 c0       	rjmp	.+16     	; 0x328c <vfprintf+0x59e>
    327c:	09 2d       	mov	r16, r9
    327e:	0e 7e       	andi	r16, 0xEE	; 238
    3280:	05 c0       	rjmp	.+10     	; 0x328c <vfprintf+0x59e>
    3282:	dc 2c       	mov	r13, r12
    3284:	09 2d       	mov	r16, r9
    3286:	03 c0       	rjmp	.+6      	; 0x328e <vfprintf+0x5a0>
    3288:	dc 2c       	mov	r13, r12
    328a:	01 c0       	rjmp	.+2      	; 0x328e <vfprintf+0x5a0>
    328c:	d1 2e       	mov	r13, r17
    328e:	04 ff       	sbrs	r16, 4
    3290:	0d c0       	rjmp	.+26     	; 0x32ac <vfprintf+0x5be>
    3292:	fe 01       	movw	r30, r28
    3294:	ec 0d       	add	r30, r12
    3296:	f1 1d       	adc	r31, r1
    3298:	80 81       	ld	r24, Z
    329a:	80 33       	cpi	r24, 0x30	; 48
    329c:	11 f4       	brne	.+4      	; 0x32a2 <vfprintf+0x5b4>
    329e:	09 7e       	andi	r16, 0xE9	; 233
    32a0:	09 c0       	rjmp	.+18     	; 0x32b4 <vfprintf+0x5c6>
    32a2:	02 ff       	sbrs	r16, 2
    32a4:	06 c0       	rjmp	.+12     	; 0x32b2 <vfprintf+0x5c4>
    32a6:	d3 94       	inc	r13
    32a8:	d3 94       	inc	r13
    32aa:	04 c0       	rjmp	.+8      	; 0x32b4 <vfprintf+0x5c6>
    32ac:	80 2f       	mov	r24, r16
    32ae:	86 78       	andi	r24, 0x86	; 134
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <vfprintf+0x5c6>
    32b2:	d3 94       	inc	r13
    32b4:	03 fd       	sbrc	r16, 3
    32b6:	10 c0       	rjmp	.+32     	; 0x32d8 <vfprintf+0x5ea>
    32b8:	00 ff       	sbrs	r16, 0
    32ba:	06 c0       	rjmp	.+12     	; 0x32c8 <vfprintf+0x5da>
    32bc:	1c 2d       	mov	r17, r12
    32be:	d5 14       	cp	r13, r5
    32c0:	78 f4       	brcc	.+30     	; 0x32e0 <vfprintf+0x5f2>
    32c2:	15 0d       	add	r17, r5
    32c4:	1d 19       	sub	r17, r13
    32c6:	0c c0       	rjmp	.+24     	; 0x32e0 <vfprintf+0x5f2>
    32c8:	d5 14       	cp	r13, r5
    32ca:	50 f4       	brcc	.+20     	; 0x32e0 <vfprintf+0x5f2>
    32cc:	b7 01       	movw	r22, r14
    32ce:	80 e2       	ldi	r24, 0x20	; 32
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	05 d2       	rcall	.+1034   	; 0x36de <fputc>
    32d4:	d3 94       	inc	r13
    32d6:	f8 cf       	rjmp	.-16     	; 0x32c8 <vfprintf+0x5da>
    32d8:	d5 14       	cp	r13, r5
    32da:	10 f4       	brcc	.+4      	; 0x32e0 <vfprintf+0x5f2>
    32dc:	5d 18       	sub	r5, r13
    32de:	01 c0       	rjmp	.+2      	; 0x32e2 <vfprintf+0x5f4>
    32e0:	51 2c       	mov	r5, r1
    32e2:	04 ff       	sbrs	r16, 4
    32e4:	0f c0       	rjmp	.+30     	; 0x3304 <vfprintf+0x616>
    32e6:	b7 01       	movw	r22, r14
    32e8:	80 e3       	ldi	r24, 0x30	; 48
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	f8 d1       	rcall	.+1008   	; 0x36de <fputc>
    32ee:	02 ff       	sbrs	r16, 2
    32f0:	16 c0       	rjmp	.+44     	; 0x331e <vfprintf+0x630>
    32f2:	01 fd       	sbrc	r16, 1
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <vfprintf+0x60e>
    32f6:	88 e7       	ldi	r24, 0x78	; 120
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <vfprintf+0x612>
    32fc:	88 e5       	ldi	r24, 0x58	; 88
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	b7 01       	movw	r22, r14
    3302:	0c c0       	rjmp	.+24     	; 0x331c <vfprintf+0x62e>
    3304:	80 2f       	mov	r24, r16
    3306:	86 78       	andi	r24, 0x86	; 134
    3308:	51 f0       	breq	.+20     	; 0x331e <vfprintf+0x630>
    330a:	01 ff       	sbrs	r16, 1
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <vfprintf+0x624>
    330e:	8b e2       	ldi	r24, 0x2B	; 43
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <vfprintf+0x626>
    3312:	80 e2       	ldi	r24, 0x20	; 32
    3314:	07 fd       	sbrc	r16, 7
    3316:	8d e2       	ldi	r24, 0x2D	; 45
    3318:	b7 01       	movw	r22, r14
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	e0 d1       	rcall	.+960    	; 0x36de <fputc>
    331e:	c1 16       	cp	r12, r17
    3320:	30 f4       	brcc	.+12     	; 0x332e <vfprintf+0x640>
    3322:	b7 01       	movw	r22, r14
    3324:	80 e3       	ldi	r24, 0x30	; 48
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	da d1       	rcall	.+948    	; 0x36de <fputc>
    332a:	11 50       	subi	r17, 0x01	; 1
    332c:	f8 cf       	rjmp	.-16     	; 0x331e <vfprintf+0x630>
    332e:	ca 94       	dec	r12
    3330:	f3 01       	movw	r30, r6
    3332:	ec 0d       	add	r30, r12
    3334:	f1 1d       	adc	r31, r1
    3336:	80 81       	ld	r24, Z
    3338:	b7 01       	movw	r22, r14
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	d0 d1       	rcall	.+928    	; 0x36de <fputc>
    333e:	c1 10       	cpse	r12, r1
    3340:	f6 cf       	rjmp	.-20     	; 0x332e <vfprintf+0x640>
    3342:	15 c0       	rjmp	.+42     	; 0x336e <vfprintf+0x680>
    3344:	f4 e0       	ldi	r31, 0x04	; 4
    3346:	f5 15       	cp	r31, r5
    3348:	50 f5       	brcc	.+84     	; 0x339e <vfprintf+0x6b0>
    334a:	84 e0       	ldi	r24, 0x04	; 4
    334c:	58 1a       	sub	r5, r24
    334e:	93 fe       	sbrs	r9, 3
    3350:	1e c0       	rjmp	.+60     	; 0x338e <vfprintf+0x6a0>
    3352:	01 11       	cpse	r16, r1
    3354:	25 c0       	rjmp	.+74     	; 0x33a0 <vfprintf+0x6b2>
    3356:	2c 85       	ldd	r18, Y+12	; 0x0c
    3358:	23 ff       	sbrs	r18, 3
    335a:	27 c0       	rjmp	.+78     	; 0x33aa <vfprintf+0x6bc>
    335c:	04 ee       	ldi	r16, 0xE4	; 228
    335e:	10 e0       	ldi	r17, 0x00	; 0
    3360:	39 2d       	mov	r19, r9
    3362:	30 71       	andi	r19, 0x10	; 16
    3364:	93 2e       	mov	r9, r19
    3366:	f8 01       	movw	r30, r16
    3368:	84 91       	lpm	r24, Z
    336a:	81 11       	cpse	r24, r1
    336c:	21 c0       	rjmp	.+66     	; 0x33b0 <vfprintf+0x6c2>
    336e:	55 20       	and	r5, r5
    3370:	09 f4       	brne	.+2      	; 0x3374 <vfprintf+0x686>
    3372:	fc cc       	rjmp	.-1544   	; 0x2d6c <vfprintf+0x7e>
    3374:	b7 01       	movw	r22, r14
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	b1 d1       	rcall	.+866    	; 0x36de <fputc>
    337c:	5a 94       	dec	r5
    337e:	f7 cf       	rjmp	.-18     	; 0x336e <vfprintf+0x680>
    3380:	f7 01       	movw	r30, r14
    3382:	86 81       	ldd	r24, Z+6	; 0x06
    3384:	97 81       	ldd	r25, Z+7	; 0x07
    3386:	23 c0       	rjmp	.+70     	; 0x33ce <vfprintf+0x6e0>
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	9f ef       	ldi	r25, 0xFF	; 255
    338c:	20 c0       	rjmp	.+64     	; 0x33ce <vfprintf+0x6e0>
    338e:	b7 01       	movw	r22, r14
    3390:	80 e2       	ldi	r24, 0x20	; 32
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	a4 d1       	rcall	.+840    	; 0x36de <fputc>
    3396:	5a 94       	dec	r5
    3398:	51 10       	cpse	r5, r1
    339a:	f9 cf       	rjmp	.-14     	; 0x338e <vfprintf+0x6a0>
    339c:	da cf       	rjmp	.-76     	; 0x3352 <vfprintf+0x664>
    339e:	51 2c       	mov	r5, r1
    33a0:	b7 01       	movw	r22, r14
    33a2:	80 2f       	mov	r24, r16
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9b d1       	rcall	.+822    	; 0x36de <fputc>
    33a8:	d6 cf       	rjmp	.-84     	; 0x3356 <vfprintf+0x668>
    33aa:	08 ee       	ldi	r16, 0xE8	; 232
    33ac:	10 e0       	ldi	r17, 0x00	; 0
    33ae:	d8 cf       	rjmp	.-80     	; 0x3360 <vfprintf+0x672>
    33b0:	91 10       	cpse	r9, r1
    33b2:	80 52       	subi	r24, 0x20	; 32
    33b4:	b7 01       	movw	r22, r14
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	92 d1       	rcall	.+804    	; 0x36de <fputc>
    33ba:	0f 5f       	subi	r16, 0xFF	; 255
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	d3 cf       	rjmp	.-90     	; 0x3366 <vfprintf+0x678>
    33c0:	23 e0       	ldi	r18, 0x03	; 3
    33c2:	25 15       	cp	r18, r5
    33c4:	10 f4       	brcc	.+4      	; 0x33ca <vfprintf+0x6dc>
    33c6:	83 e0       	ldi	r24, 0x03	; 3
    33c8:	c1 cf       	rjmp	.-126    	; 0x334c <vfprintf+0x65e>
    33ca:	51 2c       	mov	r5, r1
    33cc:	c4 cf       	rjmp	.-120    	; 0x3356 <vfprintf+0x668>
    33ce:	60 96       	adiw	r28, 0x10	; 16
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	cf 90       	pop	r12
    33ea:	bf 90       	pop	r11
    33ec:	af 90       	pop	r10
    33ee:	9f 90       	pop	r9
    33f0:	8f 90       	pop	r8
    33f2:	7f 90       	pop	r7
    33f4:	6f 90       	pop	r6
    33f6:	5f 90       	pop	r5
    33f8:	4f 90       	pop	r4
    33fa:	3f 90       	pop	r3
    33fc:	2f 90       	pop	r2
    33fe:	08 95       	ret

00003400 <__udivmodsi4>:
    3400:	a1 e2       	ldi	r26, 0x21	; 33
    3402:	1a 2e       	mov	r1, r26
    3404:	aa 1b       	sub	r26, r26
    3406:	bb 1b       	sub	r27, r27
    3408:	fd 01       	movw	r30, r26
    340a:	0d c0       	rjmp	.+26     	; 0x3426 <__udivmodsi4_ep>

0000340c <__udivmodsi4_loop>:
    340c:	aa 1f       	adc	r26, r26
    340e:	bb 1f       	adc	r27, r27
    3410:	ee 1f       	adc	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	a2 17       	cp	r26, r18
    3416:	b3 07       	cpc	r27, r19
    3418:	e4 07       	cpc	r30, r20
    341a:	f5 07       	cpc	r31, r21
    341c:	20 f0       	brcs	.+8      	; 0x3426 <__udivmodsi4_ep>
    341e:	a2 1b       	sub	r26, r18
    3420:	b3 0b       	sbc	r27, r19
    3422:	e4 0b       	sbc	r30, r20
    3424:	f5 0b       	sbc	r31, r21

00003426 <__udivmodsi4_ep>:
    3426:	66 1f       	adc	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	1a 94       	dec	r1
    3430:	69 f7       	brne	.-38     	; 0x340c <__udivmodsi4_loop>
    3432:	60 95       	com	r22
    3434:	70 95       	com	r23
    3436:	80 95       	com	r24
    3438:	90 95       	com	r25
    343a:	9b 01       	movw	r18, r22
    343c:	ac 01       	movw	r20, r24
    343e:	bd 01       	movw	r22, r26
    3440:	cf 01       	movw	r24, r30
    3442:	08 95       	ret

00003444 <__divmodsi4>:
    3444:	05 2e       	mov	r0, r21
    3446:	97 fb       	bst	r25, 7
    3448:	16 f4       	brtc	.+4      	; 0x344e <__divmodsi4+0xa>
    344a:	00 94       	com	r0
    344c:	0f d0       	rcall	.+30     	; 0x346c <__negsi2>
    344e:	57 fd       	sbrc	r21, 7
    3450:	05 d0       	rcall	.+10     	; 0x345c <__divmodsi4_neg2>
    3452:	d6 df       	rcall	.-84     	; 0x3400 <__udivmodsi4>
    3454:	07 fc       	sbrc	r0, 7
    3456:	02 d0       	rcall	.+4      	; 0x345c <__divmodsi4_neg2>
    3458:	46 f4       	brtc	.+16     	; 0x346a <__divmodsi4_exit>
    345a:	08 c0       	rjmp	.+16     	; 0x346c <__negsi2>

0000345c <__divmodsi4_neg2>:
    345c:	50 95       	com	r21
    345e:	40 95       	com	r20
    3460:	30 95       	com	r19
    3462:	21 95       	neg	r18
    3464:	3f 4f       	sbci	r19, 0xFF	; 255
    3466:	4f 4f       	sbci	r20, 0xFF	; 255
    3468:	5f 4f       	sbci	r21, 0xFF	; 255

0000346a <__divmodsi4_exit>:
    346a:	08 95       	ret

0000346c <__negsi2>:
    346c:	90 95       	com	r25
    346e:	80 95       	com	r24
    3470:	70 95       	com	r23
    3472:	61 95       	neg	r22
    3474:	7f 4f       	sbci	r23, 0xFF	; 255
    3476:	8f 4f       	sbci	r24, 0xFF	; 255
    3478:	9f 4f       	sbci	r25, 0xFF	; 255
    347a:	08 95       	ret

0000347c <__umulhisi3>:
    347c:	a2 9f       	mul	r26, r18
    347e:	b0 01       	movw	r22, r0
    3480:	b3 9f       	mul	r27, r19
    3482:	c0 01       	movw	r24, r0
    3484:	a3 9f       	mul	r26, r19
    3486:	70 0d       	add	r23, r0
    3488:	81 1d       	adc	r24, r1
    348a:	11 24       	eor	r1, r1
    348c:	91 1d       	adc	r25, r1
    348e:	b2 9f       	mul	r27, r18
    3490:	70 0d       	add	r23, r0
    3492:	81 1d       	adc	r24, r1
    3494:	11 24       	eor	r1, r1
    3496:	91 1d       	adc	r25, r1
    3498:	08 95       	ret

0000349a <__usmulhisi3>:
    349a:	f0 df       	rcall	.-32     	; 0x347c <__umulhisi3>

0000349c <__usmulhisi3_tail>:
    349c:	b7 ff       	sbrs	r27, 7
    349e:	08 95       	ret
    34a0:	82 1b       	sub	r24, r18
    34a2:	93 0b       	sbc	r25, r19
    34a4:	08 95       	ret

000034a6 <atoi>:
    34a6:	fc 01       	movw	r30, r24
    34a8:	88 27       	eor	r24, r24
    34aa:	99 27       	eor	r25, r25
    34ac:	e8 94       	clt
    34ae:	21 91       	ld	r18, Z+
    34b0:	20 32       	cpi	r18, 0x20	; 32
    34b2:	e9 f3       	breq	.-6      	; 0x34ae <atoi+0x8>
    34b4:	29 30       	cpi	r18, 0x09	; 9
    34b6:	10 f0       	brcs	.+4      	; 0x34bc <atoi+0x16>
    34b8:	2e 30       	cpi	r18, 0x0E	; 14
    34ba:	c8 f3       	brcs	.-14     	; 0x34ae <atoi+0x8>
    34bc:	2b 32       	cpi	r18, 0x2B	; 43
    34be:	39 f0       	breq	.+14     	; 0x34ce <atoi+0x28>
    34c0:	2d 32       	cpi	r18, 0x2D	; 45
    34c2:	31 f4       	brne	.+12     	; 0x34d0 <atoi+0x2a>
    34c4:	68 94       	set
    34c6:	03 c0       	rjmp	.+6      	; 0x34ce <atoi+0x28>
    34c8:	02 d1       	rcall	.+516    	; 0x36ce <__mulhi_const_10>
    34ca:	82 0f       	add	r24, r18
    34cc:	91 1d       	adc	r25, r1
    34ce:	21 91       	ld	r18, Z+
    34d0:	20 53       	subi	r18, 0x30	; 48
    34d2:	2a 30       	cpi	r18, 0x0A	; 10
    34d4:	c8 f3       	brcs	.-14     	; 0x34c8 <atoi+0x22>
    34d6:	1e f4       	brtc	.+6      	; 0x34de <atoi+0x38>
    34d8:	90 95       	com	r25
    34da:	81 95       	neg	r24
    34dc:	9f 4f       	sbci	r25, 0xFF	; 255
    34de:	08 95       	ret

000034e0 <__ftoa_engine>:
    34e0:	28 30       	cpi	r18, 0x08	; 8
    34e2:	08 f0       	brcs	.+2      	; 0x34e6 <__ftoa_engine+0x6>
    34e4:	27 e0       	ldi	r18, 0x07	; 7
    34e6:	33 27       	eor	r19, r19
    34e8:	da 01       	movw	r26, r20
    34ea:	99 0f       	add	r25, r25
    34ec:	31 1d       	adc	r19, r1
    34ee:	87 fd       	sbrc	r24, 7
    34f0:	91 60       	ori	r25, 0x01	; 1
    34f2:	00 96       	adiw	r24, 0x00	; 0
    34f4:	61 05       	cpc	r22, r1
    34f6:	71 05       	cpc	r23, r1
    34f8:	39 f4       	brne	.+14     	; 0x3508 <__ftoa_engine+0x28>
    34fa:	32 60       	ori	r19, 0x02	; 2
    34fc:	2e 5f       	subi	r18, 0xFE	; 254
    34fe:	3d 93       	st	X+, r19
    3500:	30 e3       	ldi	r19, 0x30	; 48
    3502:	2a 95       	dec	r18
    3504:	e1 f7       	brne	.-8      	; 0x34fe <__ftoa_engine+0x1e>
    3506:	08 95       	ret
    3508:	9f 3f       	cpi	r25, 0xFF	; 255
    350a:	30 f0       	brcs	.+12     	; 0x3518 <__ftoa_engine+0x38>
    350c:	80 38       	cpi	r24, 0x80	; 128
    350e:	71 05       	cpc	r23, r1
    3510:	61 05       	cpc	r22, r1
    3512:	09 f0       	breq	.+2      	; 0x3516 <__ftoa_engine+0x36>
    3514:	3c 5f       	subi	r19, 0xFC	; 252
    3516:	3c 5f       	subi	r19, 0xFC	; 252
    3518:	3d 93       	st	X+, r19
    351a:	91 30       	cpi	r25, 0x01	; 1
    351c:	08 f0       	brcs	.+2      	; 0x3520 <__ftoa_engine+0x40>
    351e:	80 68       	ori	r24, 0x80	; 128
    3520:	91 1d       	adc	r25, r1
    3522:	df 93       	push	r29
    3524:	cf 93       	push	r28
    3526:	1f 93       	push	r17
    3528:	0f 93       	push	r16
    352a:	ff 92       	push	r15
    352c:	ef 92       	push	r14
    352e:	19 2f       	mov	r17, r25
    3530:	98 7f       	andi	r25, 0xF8	; 248
    3532:	96 95       	lsr	r25
    3534:	e9 2f       	mov	r30, r25
    3536:	96 95       	lsr	r25
    3538:	96 95       	lsr	r25
    353a:	e9 0f       	add	r30, r25
    353c:	ff 27       	eor	r31, r31
    353e:	ea 5b       	subi	r30, 0xBA	; 186
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	99 27       	eor	r25, r25
    3544:	33 27       	eor	r19, r19
    3546:	ee 24       	eor	r14, r14
    3548:	ff 24       	eor	r15, r15
    354a:	a7 01       	movw	r20, r14
    354c:	e7 01       	movw	r28, r14
    354e:	05 90       	lpm	r0, Z+
    3550:	08 94       	sec
    3552:	07 94       	ror	r0
    3554:	28 f4       	brcc	.+10     	; 0x3560 <__ftoa_engine+0x80>
    3556:	36 0f       	add	r19, r22
    3558:	e7 1e       	adc	r14, r23
    355a:	f8 1e       	adc	r15, r24
    355c:	49 1f       	adc	r20, r25
    355e:	51 1d       	adc	r21, r1
    3560:	66 0f       	add	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	88 1f       	adc	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	06 94       	lsr	r0
    356a:	a1 f7       	brne	.-24     	; 0x3554 <__ftoa_engine+0x74>
    356c:	05 90       	lpm	r0, Z+
    356e:	07 94       	ror	r0
    3570:	28 f4       	brcc	.+10     	; 0x357c <__ftoa_engine+0x9c>
    3572:	e7 0e       	add	r14, r23
    3574:	f8 1e       	adc	r15, r24
    3576:	49 1f       	adc	r20, r25
    3578:	56 1f       	adc	r21, r22
    357a:	c1 1d       	adc	r28, r1
    357c:	77 0f       	add	r23, r23
    357e:	88 1f       	adc	r24, r24
    3580:	99 1f       	adc	r25, r25
    3582:	66 1f       	adc	r22, r22
    3584:	06 94       	lsr	r0
    3586:	a1 f7       	brne	.-24     	; 0x3570 <__ftoa_engine+0x90>
    3588:	05 90       	lpm	r0, Z+
    358a:	07 94       	ror	r0
    358c:	28 f4       	brcc	.+10     	; 0x3598 <__ftoa_engine+0xb8>
    358e:	f8 0e       	add	r15, r24
    3590:	49 1f       	adc	r20, r25
    3592:	56 1f       	adc	r21, r22
    3594:	c7 1f       	adc	r28, r23
    3596:	d1 1d       	adc	r29, r1
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	66 1f       	adc	r22, r22
    359e:	77 1f       	adc	r23, r23
    35a0:	06 94       	lsr	r0
    35a2:	a1 f7       	brne	.-24     	; 0x358c <__ftoa_engine+0xac>
    35a4:	05 90       	lpm	r0, Z+
    35a6:	07 94       	ror	r0
    35a8:	20 f4       	brcc	.+8      	; 0x35b2 <__ftoa_engine+0xd2>
    35aa:	49 0f       	add	r20, r25
    35ac:	56 1f       	adc	r21, r22
    35ae:	c7 1f       	adc	r28, r23
    35b0:	d8 1f       	adc	r29, r24
    35b2:	99 0f       	add	r25, r25
    35b4:	66 1f       	adc	r22, r22
    35b6:	77 1f       	adc	r23, r23
    35b8:	88 1f       	adc	r24, r24
    35ba:	06 94       	lsr	r0
    35bc:	a9 f7       	brne	.-22     	; 0x35a8 <__ftoa_engine+0xc8>
    35be:	84 91       	lpm	r24, Z
    35c0:	10 95       	com	r17
    35c2:	17 70       	andi	r17, 0x07	; 7
    35c4:	41 f0       	breq	.+16     	; 0x35d6 <__ftoa_engine+0xf6>
    35c6:	d6 95       	lsr	r29
    35c8:	c7 95       	ror	r28
    35ca:	57 95       	ror	r21
    35cc:	47 95       	ror	r20
    35ce:	f7 94       	ror	r15
    35d0:	e7 94       	ror	r14
    35d2:	1a 95       	dec	r17
    35d4:	c1 f7       	brne	.-16     	; 0x35c6 <__ftoa_engine+0xe6>
    35d6:	ec ee       	ldi	r30, 0xEC	; 236
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	68 94       	set
    35dc:	15 90       	lpm	r1, Z+
    35de:	15 91       	lpm	r17, Z+
    35e0:	35 91       	lpm	r19, Z+
    35e2:	65 91       	lpm	r22, Z+
    35e4:	95 91       	lpm	r25, Z+
    35e6:	05 90       	lpm	r0, Z+
    35e8:	7f e2       	ldi	r23, 0x2F	; 47
    35ea:	73 95       	inc	r23
    35ec:	e1 18       	sub	r14, r1
    35ee:	f1 0a       	sbc	r15, r17
    35f0:	43 0b       	sbc	r20, r19
    35f2:	56 0b       	sbc	r21, r22
    35f4:	c9 0b       	sbc	r28, r25
    35f6:	d0 09       	sbc	r29, r0
    35f8:	c0 f7       	brcc	.-16     	; 0x35ea <__ftoa_engine+0x10a>
    35fa:	e1 0c       	add	r14, r1
    35fc:	f1 1e       	adc	r15, r17
    35fe:	43 1f       	adc	r20, r19
    3600:	56 1f       	adc	r21, r22
    3602:	c9 1f       	adc	r28, r25
    3604:	d0 1d       	adc	r29, r0
    3606:	7e f4       	brtc	.+30     	; 0x3626 <__ftoa_engine+0x146>
    3608:	70 33       	cpi	r23, 0x30	; 48
    360a:	11 f4       	brne	.+4      	; 0x3610 <__ftoa_engine+0x130>
    360c:	8a 95       	dec	r24
    360e:	e6 cf       	rjmp	.-52     	; 0x35dc <__ftoa_engine+0xfc>
    3610:	e8 94       	clt
    3612:	01 50       	subi	r16, 0x01	; 1
    3614:	30 f0       	brcs	.+12     	; 0x3622 <__ftoa_engine+0x142>
    3616:	08 0f       	add	r16, r24
    3618:	0a f4       	brpl	.+2      	; 0x361c <__ftoa_engine+0x13c>
    361a:	00 27       	eor	r16, r16
    361c:	02 17       	cp	r16, r18
    361e:	08 f4       	brcc	.+2      	; 0x3622 <__ftoa_engine+0x142>
    3620:	20 2f       	mov	r18, r16
    3622:	23 95       	inc	r18
    3624:	02 2f       	mov	r16, r18
    3626:	7a 33       	cpi	r23, 0x3A	; 58
    3628:	28 f0       	brcs	.+10     	; 0x3634 <__ftoa_engine+0x154>
    362a:	79 e3       	ldi	r23, 0x39	; 57
    362c:	7d 93       	st	X+, r23
    362e:	2a 95       	dec	r18
    3630:	e9 f7       	brne	.-6      	; 0x362c <__ftoa_engine+0x14c>
    3632:	10 c0       	rjmp	.+32     	; 0x3654 <__ftoa_engine+0x174>
    3634:	7d 93       	st	X+, r23
    3636:	2a 95       	dec	r18
    3638:	89 f6       	brne	.-94     	; 0x35dc <__ftoa_engine+0xfc>
    363a:	06 94       	lsr	r0
    363c:	97 95       	ror	r25
    363e:	67 95       	ror	r22
    3640:	37 95       	ror	r19
    3642:	17 95       	ror	r17
    3644:	17 94       	ror	r1
    3646:	e1 18       	sub	r14, r1
    3648:	f1 0a       	sbc	r15, r17
    364a:	43 0b       	sbc	r20, r19
    364c:	56 0b       	sbc	r21, r22
    364e:	c9 0b       	sbc	r28, r25
    3650:	d0 09       	sbc	r29, r0
    3652:	98 f0       	brcs	.+38     	; 0x367a <__ftoa_engine+0x19a>
    3654:	23 95       	inc	r18
    3656:	7e 91       	ld	r23, -X
    3658:	73 95       	inc	r23
    365a:	7a 33       	cpi	r23, 0x3A	; 58
    365c:	08 f0       	brcs	.+2      	; 0x3660 <__ftoa_engine+0x180>
    365e:	70 e3       	ldi	r23, 0x30	; 48
    3660:	7c 93       	st	X, r23
    3662:	20 13       	cpse	r18, r16
    3664:	b8 f7       	brcc	.-18     	; 0x3654 <__ftoa_engine+0x174>
    3666:	7e 91       	ld	r23, -X
    3668:	70 61       	ori	r23, 0x10	; 16
    366a:	7d 93       	st	X+, r23
    366c:	30 f0       	brcs	.+12     	; 0x367a <__ftoa_engine+0x19a>
    366e:	83 95       	inc	r24
    3670:	71 e3       	ldi	r23, 0x31	; 49
    3672:	7d 93       	st	X+, r23
    3674:	70 e3       	ldi	r23, 0x30	; 48
    3676:	2a 95       	dec	r18
    3678:	e1 f7       	brne	.-8      	; 0x3672 <__ftoa_engine+0x192>
    367a:	11 24       	eor	r1, r1
    367c:	ef 90       	pop	r14
    367e:	ff 90       	pop	r15
    3680:	0f 91       	pop	r16
    3682:	1f 91       	pop	r17
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	99 27       	eor	r25, r25
    368a:	87 fd       	sbrc	r24, 7
    368c:	90 95       	com	r25
    368e:	08 95       	ret

00003690 <strnlen_P>:
    3690:	fc 01       	movw	r30, r24
    3692:	05 90       	lpm	r0, Z+
    3694:	61 50       	subi	r22, 0x01	; 1
    3696:	70 40       	sbci	r23, 0x00	; 0
    3698:	01 10       	cpse	r0, r1
    369a:	d8 f7       	brcc	.-10     	; 0x3692 <strnlen_P+0x2>
    369c:	80 95       	com	r24
    369e:	90 95       	com	r25
    36a0:	8e 0f       	add	r24, r30
    36a2:	9f 1f       	adc	r25, r31
    36a4:	08 95       	ret

000036a6 <strcmp>:
    36a6:	fb 01       	movw	r30, r22
    36a8:	dc 01       	movw	r26, r24
    36aa:	8d 91       	ld	r24, X+
    36ac:	01 90       	ld	r0, Z+
    36ae:	80 19       	sub	r24, r0
    36b0:	01 10       	cpse	r0, r1
    36b2:	d9 f3       	breq	.-10     	; 0x36aa <strcmp+0x4>
    36b4:	99 0b       	sbc	r25, r25
    36b6:	08 95       	ret

000036b8 <strnlen>:
    36b8:	fc 01       	movw	r30, r24
    36ba:	61 50       	subi	r22, 0x01	; 1
    36bc:	70 40       	sbci	r23, 0x00	; 0
    36be:	01 90       	ld	r0, Z+
    36c0:	01 10       	cpse	r0, r1
    36c2:	d8 f7       	brcc	.-10     	; 0x36ba <strnlen+0x2>
    36c4:	80 95       	com	r24
    36c6:	90 95       	com	r25
    36c8:	8e 0f       	add	r24, r30
    36ca:	9f 1f       	adc	r25, r31
    36cc:	08 95       	ret

000036ce <__mulhi_const_10>:
    36ce:	7a e0       	ldi	r23, 0x0A	; 10
    36d0:	97 9f       	mul	r25, r23
    36d2:	90 2d       	mov	r25, r0
    36d4:	87 9f       	mul	r24, r23
    36d6:	80 2d       	mov	r24, r0
    36d8:	91 0d       	add	r25, r1
    36da:	11 24       	eor	r1, r1
    36dc:	08 95       	ret

000036de <fputc>:
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	fb 01       	movw	r30, r22
    36e8:	23 81       	ldd	r18, Z+3	; 0x03
    36ea:	21 fd       	sbrc	r18, 1
    36ec:	03 c0       	rjmp	.+6      	; 0x36f4 <fputc+0x16>
    36ee:	8f ef       	ldi	r24, 0xFF	; 255
    36f0:	9f ef       	ldi	r25, 0xFF	; 255
    36f2:	2c c0       	rjmp	.+88     	; 0x374c <fputc+0x6e>
    36f4:	22 ff       	sbrs	r18, 2
    36f6:	16 c0       	rjmp	.+44     	; 0x3724 <fputc+0x46>
    36f8:	46 81       	ldd	r20, Z+6	; 0x06
    36fa:	57 81       	ldd	r21, Z+7	; 0x07
    36fc:	24 81       	ldd	r18, Z+4	; 0x04
    36fe:	35 81       	ldd	r19, Z+5	; 0x05
    3700:	42 17       	cp	r20, r18
    3702:	53 07       	cpc	r21, r19
    3704:	44 f4       	brge	.+16     	; 0x3716 <fputc+0x38>
    3706:	a0 81       	ld	r26, Z
    3708:	b1 81       	ldd	r27, Z+1	; 0x01
    370a:	9d 01       	movw	r18, r26
    370c:	2f 5f       	subi	r18, 0xFF	; 255
    370e:	3f 4f       	sbci	r19, 0xFF	; 255
    3710:	31 83       	std	Z+1, r19	; 0x01
    3712:	20 83       	st	Z, r18
    3714:	8c 93       	st	X, r24
    3716:	26 81       	ldd	r18, Z+6	; 0x06
    3718:	37 81       	ldd	r19, Z+7	; 0x07
    371a:	2f 5f       	subi	r18, 0xFF	; 255
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	37 83       	std	Z+7, r19	; 0x07
    3720:	26 83       	std	Z+6, r18	; 0x06
    3722:	14 c0       	rjmp	.+40     	; 0x374c <fputc+0x6e>
    3724:	8b 01       	movw	r16, r22
    3726:	ec 01       	movw	r28, r24
    3728:	fb 01       	movw	r30, r22
    372a:	00 84       	ldd	r0, Z+8	; 0x08
    372c:	f1 85       	ldd	r31, Z+9	; 0x09
    372e:	e0 2d       	mov	r30, r0
    3730:	19 95       	eicall
    3732:	89 2b       	or	r24, r25
    3734:	e1 f6       	brne	.-72     	; 0x36ee <fputc+0x10>
    3736:	d8 01       	movw	r26, r16
    3738:	16 96       	adiw	r26, 0x06	; 6
    373a:	8d 91       	ld	r24, X+
    373c:	9c 91       	ld	r25, X
    373e:	17 97       	sbiw	r26, 0x07	; 7
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	17 96       	adiw	r26, 0x07	; 7
    3744:	9c 93       	st	X, r25
    3746:	8e 93       	st	-X, r24
    3748:	16 97       	sbiw	r26, 0x06	; 6
    374a:	ce 01       	movw	r24, r28
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	1f 91       	pop	r17
    3752:	0f 91       	pop	r16
    3754:	08 95       	ret

00003756 <printf>:
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	ae 01       	movw	r20, r28
    3760:	4a 5f       	subi	r20, 0xFA	; 250
    3762:	5f 4f       	sbci	r21, 0xFF	; 255
    3764:	fa 01       	movw	r30, r20
    3766:	61 91       	ld	r22, Z+
    3768:	71 91       	ld	r23, Z+
    376a:	af 01       	movw	r20, r30
    376c:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__iob+0x2>
    3770:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <__iob+0x3>
    3774:	bc da       	rcall	.-2696   	; 0x2cee <vfprintf>
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	08 95       	ret

0000377c <printf_P>:
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
    3788:	ae 01       	movw	r20, r28
    378a:	48 5f       	subi	r20, 0xF8	; 248
    378c:	5f 4f       	sbci	r21, 0xFF	; 255
    378e:	da 01       	movw	r26, r20
    3790:	6d 91       	ld	r22, X+
    3792:	7d 91       	ld	r23, X+
    3794:	ad 01       	movw	r20, r26
    3796:	0c e6       	ldi	r16, 0x6C	; 108
    3798:	19 e0       	ldi	r17, 0x09	; 9
    379a:	f8 01       	movw	r30, r16
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	dc 01       	movw	r26, r24
    37a2:	13 96       	adiw	r26, 0x03	; 3
    37a4:	2c 91       	ld	r18, X
    37a6:	13 97       	sbiw	r26, 0x03	; 3
    37a8:	28 60       	ori	r18, 0x08	; 8
    37aa:	13 96       	adiw	r26, 0x03	; 3
    37ac:	2c 93       	st	X, r18
    37ae:	9f da       	rcall	.-2754   	; 0x2cee <vfprintf>
    37b0:	d8 01       	movw	r26, r16
    37b2:	12 96       	adiw	r26, 0x02	; 2
    37b4:	ed 91       	ld	r30, X+
    37b6:	fc 91       	ld	r31, X
    37b8:	13 97       	sbiw	r26, 0x03	; 3
    37ba:	23 81       	ldd	r18, Z+3	; 0x03
    37bc:	27 7f       	andi	r18, 0xF7	; 247
    37be:	23 83       	std	Z+3, r18	; 0x03
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	1f 91       	pop	r17
    37c6:	0f 91       	pop	r16
    37c8:	08 95       	ret

000037ca <putchar>:
    37ca:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <__iob+0x2>
    37ce:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <__iob+0x3>
    37d2:	85 cf       	rjmp	.-246    	; 0x36de <fputc>

000037d4 <puts>:
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <__iob+0x2>
    37e0:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <__iob+0x3>
    37e4:	23 81       	ldd	r18, Z+3	; 0x03
    37e6:	21 ff       	sbrs	r18, 1
    37e8:	1b c0       	rjmp	.+54     	; 0x3820 <puts+0x4c>
    37ea:	8c 01       	movw	r16, r24
    37ec:	d0 e0       	ldi	r29, 0x00	; 0
    37ee:	c0 e0       	ldi	r28, 0x00	; 0
    37f0:	f8 01       	movw	r30, r16
    37f2:	81 91       	ld	r24, Z+
    37f4:	8f 01       	movw	r16, r30
    37f6:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <__iob+0x2>
    37fa:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <__iob+0x3>
    37fe:	db 01       	movw	r26, r22
    3800:	18 96       	adiw	r26, 0x08	; 8
    3802:	ed 91       	ld	r30, X+
    3804:	fc 91       	ld	r31, X
    3806:	19 97       	sbiw	r26, 0x09	; 9
    3808:	88 23       	and	r24, r24
    380a:	31 f0       	breq	.+12     	; 0x3818 <puts+0x44>
    380c:	19 95       	eicall
    380e:	89 2b       	or	r24, r25
    3810:	79 f3       	breq	.-34     	; 0x37f0 <puts+0x1c>
    3812:	df ef       	ldi	r29, 0xFF	; 255
    3814:	cf ef       	ldi	r28, 0xFF	; 255
    3816:	ec cf       	rjmp	.-40     	; 0x37f0 <puts+0x1c>
    3818:	8a e0       	ldi	r24, 0x0A	; 10
    381a:	19 95       	eicall
    381c:	89 2b       	or	r24, r25
    381e:	19 f0       	breq	.+6      	; 0x3826 <puts+0x52>
    3820:	8f ef       	ldi	r24, 0xFF	; 255
    3822:	9f ef       	ldi	r25, 0xFF	; 255
    3824:	02 c0       	rjmp	.+4      	; 0x382a <puts+0x56>
    3826:	8d 2f       	mov	r24, r29
    3828:	9c 2f       	mov	r25, r28
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	1f 91       	pop	r17
    3830:	0f 91       	pop	r16
    3832:	08 95       	ret

00003834 <__ultoa_invert>:
    3834:	fa 01       	movw	r30, r20
    3836:	aa 27       	eor	r26, r26
    3838:	28 30       	cpi	r18, 0x08	; 8
    383a:	51 f1       	breq	.+84     	; 0x3890 <__ultoa_invert+0x5c>
    383c:	20 31       	cpi	r18, 0x10	; 16
    383e:	81 f1       	breq	.+96     	; 0x38a0 <__ultoa_invert+0x6c>
    3840:	e8 94       	clt
    3842:	6f 93       	push	r22
    3844:	6e 7f       	andi	r22, 0xFE	; 254
    3846:	6e 5f       	subi	r22, 0xFE	; 254
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	8f 4f       	sbci	r24, 0xFF	; 255
    384c:	9f 4f       	sbci	r25, 0xFF	; 255
    384e:	af 4f       	sbci	r26, 0xFF	; 255
    3850:	b1 e0       	ldi	r27, 0x01	; 1
    3852:	3e d0       	rcall	.+124    	; 0x38d0 <__ultoa_invert+0x9c>
    3854:	b4 e0       	ldi	r27, 0x04	; 4
    3856:	3c d0       	rcall	.+120    	; 0x38d0 <__ultoa_invert+0x9c>
    3858:	67 0f       	add	r22, r23
    385a:	78 1f       	adc	r23, r24
    385c:	89 1f       	adc	r24, r25
    385e:	9a 1f       	adc	r25, r26
    3860:	a1 1d       	adc	r26, r1
    3862:	68 0f       	add	r22, r24
    3864:	79 1f       	adc	r23, r25
    3866:	8a 1f       	adc	r24, r26
    3868:	91 1d       	adc	r25, r1
    386a:	a1 1d       	adc	r26, r1
    386c:	6a 0f       	add	r22, r26
    386e:	71 1d       	adc	r23, r1
    3870:	81 1d       	adc	r24, r1
    3872:	91 1d       	adc	r25, r1
    3874:	a1 1d       	adc	r26, r1
    3876:	20 d0       	rcall	.+64     	; 0x38b8 <__ultoa_invert+0x84>
    3878:	09 f4       	brne	.+2      	; 0x387c <__ultoa_invert+0x48>
    387a:	68 94       	set
    387c:	3f 91       	pop	r19
    387e:	2a e0       	ldi	r18, 0x0A	; 10
    3880:	26 9f       	mul	r18, r22
    3882:	11 24       	eor	r1, r1
    3884:	30 19       	sub	r19, r0
    3886:	30 5d       	subi	r19, 0xD0	; 208
    3888:	31 93       	st	Z+, r19
    388a:	de f6       	brtc	.-74     	; 0x3842 <__ultoa_invert+0xe>
    388c:	cf 01       	movw	r24, r30
    388e:	08 95       	ret
    3890:	46 2f       	mov	r20, r22
    3892:	47 70       	andi	r20, 0x07	; 7
    3894:	40 5d       	subi	r20, 0xD0	; 208
    3896:	41 93       	st	Z+, r20
    3898:	b3 e0       	ldi	r27, 0x03	; 3
    389a:	0f d0       	rcall	.+30     	; 0x38ba <__ultoa_invert+0x86>
    389c:	c9 f7       	brne	.-14     	; 0x3890 <__ultoa_invert+0x5c>
    389e:	f6 cf       	rjmp	.-20     	; 0x388c <__ultoa_invert+0x58>
    38a0:	46 2f       	mov	r20, r22
    38a2:	4f 70       	andi	r20, 0x0F	; 15
    38a4:	40 5d       	subi	r20, 0xD0	; 208
    38a6:	4a 33       	cpi	r20, 0x3A	; 58
    38a8:	18 f0       	brcs	.+6      	; 0x38b0 <__ultoa_invert+0x7c>
    38aa:	49 5d       	subi	r20, 0xD9	; 217
    38ac:	31 fd       	sbrc	r19, 1
    38ae:	40 52       	subi	r20, 0x20	; 32
    38b0:	41 93       	st	Z+, r20
    38b2:	02 d0       	rcall	.+4      	; 0x38b8 <__ultoa_invert+0x84>
    38b4:	a9 f7       	brne	.-22     	; 0x38a0 <__ultoa_invert+0x6c>
    38b6:	ea cf       	rjmp	.-44     	; 0x388c <__ultoa_invert+0x58>
    38b8:	b4 e0       	ldi	r27, 0x04	; 4
    38ba:	a6 95       	lsr	r26
    38bc:	97 95       	ror	r25
    38be:	87 95       	ror	r24
    38c0:	77 95       	ror	r23
    38c2:	67 95       	ror	r22
    38c4:	ba 95       	dec	r27
    38c6:	c9 f7       	brne	.-14     	; 0x38ba <__ultoa_invert+0x86>
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	61 05       	cpc	r22, r1
    38cc:	71 05       	cpc	r23, r1
    38ce:	08 95       	ret
    38d0:	9b 01       	movw	r18, r22
    38d2:	ac 01       	movw	r20, r24
    38d4:	0a 2e       	mov	r0, r26
    38d6:	06 94       	lsr	r0
    38d8:	57 95       	ror	r21
    38da:	47 95       	ror	r20
    38dc:	37 95       	ror	r19
    38de:	27 95       	ror	r18
    38e0:	ba 95       	dec	r27
    38e2:	c9 f7       	brne	.-14     	; 0x38d6 <__ultoa_invert+0xa2>
    38e4:	62 0f       	add	r22, r18
    38e6:	73 1f       	adc	r23, r19
    38e8:	84 1f       	adc	r24, r20
    38ea:	95 1f       	adc	r25, r21
    38ec:	a0 1d       	adc	r26, r0
    38ee:	08 95       	ret

000038f0 <_exit>:
    38f0:	f8 94       	cli

000038f2 <__stop_program>:
    38f2:	ff cf       	rjmp	.-2      	; 0x38f2 <__stop_program>
